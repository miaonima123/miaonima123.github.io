<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MC</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-03-28T12:23:02.472Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>MC</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>材料汇总</title>
    <link href="http://example.com/2022/03/28/%E6%9D%90%E6%96%99%E6%B1%87%E6%80%BB/"/>
    <id>http://example.com/2022/03/28/%E6%9D%90%E6%96%99%E6%B1%87%E6%80%BB/</id>
    <published>2022-03-28T11:57:36.000Z</published>
    <updated>2022-03-28T12:23:02.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考材料"><a href="#参考材料" class="headerlink" title="参考材料"></a>参考材料</h2><p><a href="http://m.dyzxw.org/?act=a&cid=2&aid=152940">监察法实施条例</a></p><p><a href="http://www.happyhomeinlove.com/zuowendaquan/2021/1124/54024.html">十九届六中全会精神主要内容心得</a></p><p><img src="http://miaochen.mcweblog.com/img/202203282000573.jpg" alt="文档格式"></p><h2 id="市场组疫情监督检查要点清单"><a href="#市场组疫情监督检查要点清单" class="headerlink" title="市场组疫情监督检查要点清单"></a>市场组疫情监督检查要点清单</h2><h3 id="入口管理"><a href="#入口管理" class="headerlink" title="入口管理"></a>入口管理</h3><table><thead><tr><th>是否设置体温检测专岗，是否安排专门人员对进入人员检测体温，对体温异常者劝返就医。</th></tr></thead><tbody><tr><td>是否在出入口醒目位置张贴健康宝二维码,是否安排专门人员查验顾客健康宝状态，并对健康码异常者劝离。</td></tr></tbody></table><h3 id="场所管理"><a href="#场所管理" class="headerlink" title="场所管理"></a>场所管理</h3><p>人员密集、封闭拥挤场所是否有专岗检查顾客戴口罩，在场所内是否存在不佩戴口罩顾客。<br>是否在经营场所易聚集区域内设“一米线”，是否存在人员聚集现象。</p><h3 id="环境消杀"><a href="#环境消杀" class="headerlink" title="环境消杀"></a>环境消杀</h3><p>是否采取有效措施保持场所内通风换气。<br>是否明确专兼职消杀员，是否每日消杀如实记录并公示。<br>是否每日对场所及有关设施设备、工具及器具开展清洁并记录；是否保持场所内环境卫生清洁、室内无异味、无积水。</p><h3 id="人员防护"><a href="#人员防护" class="headerlink" title="人员防护"></a>人员防护</h3><p>是否对从业人员进行体温监测，是否查询从业人员“北京健康宝”，并记录相关情况。<br>从业人员上岗期间是否佩戴口罩，是否保持手卫生，在服务或交易时是否佩戴手套。<br>从事肉类、水产品等冰冻类、冰鲜类食品的人员佩戴手套是否出现破损或污染未及时更换。<br>进口冷链食品（肉类、水产品）从业人员是否每周开展核酸检测，其他从业人员是否按要求定期开展核酸检测，是否能提供检测报告。</p><h3 id="冷链存储经营管理"><a href="#冷链存储经营管理" class="headerlink" title="冷链存储经营管理"></a>冷链存储经营管理</h3><p>是否能够提供使用、存放、销售的此类产品同品种、同批次的核酸检测阴性报告、消毒证明、检验检疫证明。<br>经营者是否核对食品外包装消杀情况并记录，是否建有产品出入明细台账。<br>是否将此类产品信息上传至“北京市冷链食品追溯平台”。经营时是否在产品包装或货柜明显处一一对应加贴“北京冷链”电子追溯码。<br>是否设置单独冷柜或区域存放此类产品，是否做到进口与国产分开；经营时是否与直接入口食品做到分区域销售；是否配备一次性手套，是否设置标识引导消费者穿戴手套挑选商品。<br>冷库经营者是否采取分库或分区的方式分别存放，减少交叉污染。<br>此类产品装卸、加工、销售的人员是否采取防护措施避免直接接触可能被污染的产品。<br>冷库、售卖区是否具备与贮存温度相适应的设施设备及温度监测设备，是否定期测定并记录。<br>是否存在地下经营情况。</p><h3 id="冷链物流运输管理"><a href="#冷链物流运输管理" class="headerlink" title="冷链物流运输管理"></a>冷链物流运输管理</h3><p>车辆箱体是否保持清洁、无毒无害、无异味、无污染，是否按要求进行消毒。<br>车辆是否具备与贮存温度相适应的设施设备及温度监测设备，是否定期测定并记录。<br>作业人员是否采取防护措施避免直接接触可能被污染的产品。<br>车辆是否做到专车专运，不与其他产品混放运输。</p><h2 id="疫情防控制度"><a href="#疫情防控制度" class="headerlink" title="疫情防控制度"></a>疫情防控制度</h2><ol><li>营业前做好口罩、消毒剂等防疫物资储备，制定应急工作预案，设置应急处置区域，落实单位主体责任，加强人员培训。</li><li>建立员工健康监测制度，每日对员工健康状况进行登记，身体不适时应及时就医。</li><li>在商场入口处，增加体温测量设备，所有人员体温检测正常方可进入。</li><li>加强通风换气。如使用集中空调，保证空调运行正常，加大新风量，全空气系统关闭回风。</li><li>对经常接触的公共用品和设施（如存储柜、电梯间按钮、扶梯扶手、卫生间门把手、公共垃圾桶等）要做好清洁消毒。</li><li>保持电梯、咨询台和售货区等区域环境整洁，及时清理垃圾。</li><li>公用洗手间要配备足够的洗手液（或肥皂），保证水龙头等供水设施正常工作。</li><li>应设置“一米线”，提醒顾客排队付款结账时保持安全距离。</li><li>通过管控分流，减少商场内顾客人数。</li><li>推荐顾客自助购物、非接触扫码付费，尽量减少排队时间。</li><li>工作人员应加强个人防护，佩戴口罩；做好手卫生，打喷嚏时用纸巾遮住口鼻或采用肘臂遮挡等。</li><li>顾客佩戴口罩，乘电梯时注意人员之间保持距离。</li><li>顾客佩戴口罩，乘电梯时注意人员之间保持距离。</li><li>通过海报、电子屏和宣传栏等方式加强健康知识宣传。</li><li>当出现新冠肺炎病例时，应在当地疾病预防控制中心的指导下对场所进行终末消毒，同时对空调通风系统进行清洗和消毒处理，经卫生学评价合格后方可重新启用。</li><li>中、高风险地区，建议商场应缩短营业时间，并控制顾客数量。  阅读已结束，获取文档需</li></ol><h2 id="Excel操作技巧"><a href="#Excel操作技巧" class="headerlink" title="Excel操作技巧"></a>Excel操作技巧</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>tab切换单元格</p><p>shift+tab返回上一个单元格</p><p>格子等宽可以对靠中间线双击</p><p>格子等宽选中所有列然后双击中间线   从A B C开始选列</p><p>ctrl+; 快速显示当日日期</p><p>ctrl+shift+↓ 选择整列</p><p>ctrl+shift+→ 任意方向键全选文档</p><p>左上角格式刷可先选中一个单位，然后给另外值进行单位添加</p><p>alt+= 快速相加求和</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>可用Ctrl框选多个不相连的范围数值</p><h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>绘制网格线时按shift切换橡皮 ESC键退出画笔模式</p><p>冻结窗格应该要冻结哪行的下一行，行和列都可以道理相同</p><p>视图→拆分 将页面一分为二方便比对两个表格</p><p>选用排序时只需选一个格，不能全选会打乱本身的顺序</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;参考材料&quot;&gt;&lt;a href=&quot;#参考材料&quot; class=&quot;headerlink&quot; title=&quot;参考材料&quot;&gt;&lt;/a&gt;参考材料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://m.dyzxw.org/?act=a&amp;cid=2&amp;aid=152940&quot;&gt;监察法实施条例&lt;/</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>各种问题总结 😓</title>
    <link href="http://example.com/2020/10/30/%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/10/30/%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-30T08:25:43.000Z</published>
    <updated>2022-03-28T13:45:54.741Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>VScode工具每次打开会替换窗口</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workbench.<span class="property">editor</span>.<span class="property">enablePreview</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>cnpm : 无法加载文件 node_global\cnpm.ps1，因为在此系统上禁止运行脚本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//更改权限 </span><br><span class="line">以管理员身份打开PowerShell执行Start-Process powershell -Verb runAs</span><br><span class="line">继续重新执行set-ExecutionPolicy RemoteSigned 选择 Y</span><br></pre></td></tr></table></figure><blockquote><p>博客在上传云服务器时候报错 Error Deployer not found:git</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-de</span><br></pre></td></tr></table></figure><h2 id="nvm管理工具命令和用法"><a href="#nvm管理工具命令和用法" class="headerlink" title="nvm管理工具命令和用法"></a>nvm管理工具命令和用法</h2><p><a href="https://github.com/coreybutler/nvm-windows/releases">nvm下载地址</a></p><p><strong>nvm-setup.zip 安装版 推荐使用</strong></p><ol><li><p>查看当前系统nodejs版本和列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm list [available]</span><br><span class="line">可选参数表示所有可下载列表</span><br></pre></td></tr></table></figure></li><li><p>安装版本号可自定义具体参数可按照第一条</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 12.16.1</span><br></pre></td></tr></table></figure></li><li><p>使用特定版本（第一条列表里显示有的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 12.16.1</span><br></pre></td></tr></table></figure></li><li><p>卸载不需要版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall 版本号</span><br></pre></td></tr></table></figure></li></ol><p><strong>nvm -v</strong>检查当前nvm版本  常用功能就以上 其他命令可参考下面链接</p><blockquote><p><a href="https://www.cnblogs.com/gaozejie/p/10689742.html">https://www.cnblogs.com/gaozejie/p/10689742.html</a></p></blockquote><h2 id="Google无法安装"><a href="#Google无法安装" class="headerlink" title="Google无法安装"></a>Google无法安装</h2><p>文件后缀改为xxx.reg</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"> </span><br><span class="line">;WARNING, this file will remove Google Chrome registry entries  </span><br><span class="line"> </span><br><span class="line">;from your Windows Registry. Consider backing up your registry before</span><br><span class="line"> </span><br><span class="line">; using this file: http://support.microsoft.com/kb/322756</span><br><span class="line"> </span><br><span class="line">; To run this file, save it as &#x27;remove.reg&#x27; on your desktop and double-click it.</span><br><span class="line"> </span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Classes\ChromeHTML] </span><br><span class="line"> </span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Clients\StartMenuInternet\chrome.exe] </span><br><span class="line"> </span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\RegisteredApplications]</span><br><span class="line"> </span><br><span class="line">&quot;Chrome&quot;=-</span><br><span class="line"> </span><br><span class="line">[-HKEY_CURRENT_USER\SOFTWARE\Classes\ChromeHTML] </span><br><span class="line"> </span><br><span class="line">[-HKEY_CURRENT_USER\SOFTWARE\Clients\StartMenuInternet\chrome.exe] </span><br><span class="line"> </span><br><span class="line">[HKEY_CURRENT_USER\SOFTWARE\RegisteredApplications]</span><br><span class="line"> </span><br><span class="line">&quot;Chrome&quot;=-</span><br><span class="line"> </span><br><span class="line">[-HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Uninstall\Chrome]</span><br><span class="line"> </span><br><span class="line">[-HKEY_CURRENT_USER\Software\Google\Update\Clients\&#123;8A69D345-D564-463c-AFF1-A69D9E530F96&#125;]</span><br><span class="line"> </span><br><span class="line">[-HKEY_CURRENT_USER\Software\Google\Update\ClientState\&#123;8A69D345-D564-463c-AFF1-A69D9E530F96&#125;]</span><br><span class="line"> </span><br><span class="line">[-HKEY_CURRENT_USER\Software\Google\Update\Clients\&#123;00058422-BABE-4310-9B8B-B8DEB5D0B68A&#125;]</span><br><span class="line"> </span><br><span class="line">[-HKEY_CURRENT_USER\Software\Google\Update\ClientState\&#123;00058422-BABE-4310-9B8B-B8DEB5D0B68A&#125;]</span><br><span class="line"> </span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Google\Update\ClientStateMedium\&#123;8A69D345-D564-463c-AFF1-A69D9E530F96&#125;]</span><br><span class="line"> </span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Google\Update\Clients\&#123;8A69D345-D564-463c-AFF1-A69D9E530F96&#125;]</span><br><span class="line"> </span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Google\Update\ClientState\&#123;8A69D345-D564-463c-AFF1-A69D9E530F96&#125;]</span><br><span class="line"> </span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Google\Update\Clients\&#123;8A69D345-D564-463c-AFF1-A69D9E530F96&#125;]</span><br></pre></td></tr></table></figure><h2 id="Windows批处理编程笔记"><a href="#Windows批处理编程笔记" class="headerlink" title="Windows批处理编程笔记"></a>Windows批处理编程笔记</h2><p><a href="https://www.cnblogs.com/klchang/p/4771101.html">Windows系统自带工具cmd命令</a></p><p><a href="https://blog.csdn.net/qq_42402854/article/details/93162387">Win10 cmd命令大全与快捷键</a></p><p><a href="https://blog.csdn.net/weixin_41665162/article/details/118667170">同学笔记</a></p><p><a href="https://www.w3cschool.cn/dosmlxxsc1/qsvorb.html">DOS命令学习手册</a></p><p>Ctrl+c 暂停cmd命令行操作</p><p>win + r -&gt; notepad -&gt; 记事本</p><p>dir查看当前目录下文件</p><p>mkdir xx 创建xx目录</p><p>ipconfig 本机ip地址</p><p>net user 本机系统账号</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> user test /delete </span><br><span class="line">删除某用户</span><br></pre></td></tr></table></figure><p>netstat -an 查看本机网络连接</p><p>80端口http</p><p>443端口https</p><p>444端口木马</p><p>扩展名需为.bat</p><p>@echo off关闭回显</p><p>echo相当于console.log</p><p>cd .. 切换到上级目录</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> &quot;hello world&quot;</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>结束 pause&gt;null</p><h2 id="批处理运算操作"><a href="#批处理运算操作" class="headerlink" title="批处理运算操作"></a>批处理运算操作</h2><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><p>*/%+-   </p><p><strong>命令模式</strong></p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> /a <span class="number">1</span>+<span class="number">2</span></span><br><span class="line">每次只能编辑一条</span><br></pre></td></tr></table></figure><p><strong>文本模式</strong> </p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /a var = <span class="number">1</span> + <span class="number">2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%var%</span></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p><strong>分组优先级加括号()</strong></p><h3 id="重定向运算"><a href="#重定向运算" class="headerlink" title="重定向运算"></a>重定向运算</h3><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;或&lt;</span><br><span class="line"><span class="built_in">echo</span> &quot;hello world&quot; &gt; a.txt</span><br><span class="line"><span class="built_in">type</span> a.txt</span><br><span class="line">&gt; 左边内容保存到右边区域，反之一样</span><br><span class="line">&gt; 输出某个文件内，删除原文件内容从新覆写</span><br><span class="line"><span class="built_in">type</span> xxx.txt 查看具体内容</span><br></pre></td></tr></table></figure><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;或&lt;&lt;</span><br><span class="line"><span class="built_in">echo</span> &quot;hello world&quot; &gt;&gt; a.txt</span><br><span class="line"><span class="built_in">type</span> a.txt</span><br><span class="line">尖号&gt;&gt; 左边内容追加到右边区域，反之一样</span><br><span class="line">&gt;&gt; 输出内容追加某个文件内，不会修改原文件内容</span><br><span class="line"><span class="built_in">type</span> xxx.txt 查看具体内容</span><br></pre></td></tr></table></figure><h3 id="多命令运算"><a href="#多命令运算" class="headerlink" title="多命令运算"></a>多命令运算</h3><p>&amp;&amp; 具有断路，第一个命令错误不会执行第二个命令</p><p>|| 短路 第一个命令执行成功，就不会执行第二个命令</p><h3 id="管道符号"><a href="#管道符号" class="headerlink" title="管道符号"></a>管道符号</h3><p>|  A|B</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dir</span> | <span class="built_in">find</span> &quot;.txt&quot;</span><br><span class="line">寻找筛选出 .txt文件</span><br><span class="line"></span><br><span class="line">netstat -an |<span class="built_in">find</span> &quot; ESTABLISHED&quot;</span><br><span class="line">筛选出当前对应主机与其他地址建立连接的内容</span><br><span class="line">通过|右边命令对竖线左边数据进行操作</span><br></pre></td></tr></table></figure><h2 id="批处理基本命令"><a href="#批处理基本命令" class="headerlink" title="批处理基本命令"></a>批处理基本命令</h2><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令 子命令 参数 操作 选项</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">命令帮助信息查看 /?  /help获取详细信息</span><br></pre></td></tr></table></figure><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">net</span> user test /?</span><br><span class="line"></span><br><span class="line"><span class="built_in">NET</span> USER</span><br><span class="line">[username [password | *] [options]] [/DOMAIN]</span><br><span class="line">         username &#123;password | *&#125; /ADD [options] [/DOMAIN]</span><br><span class="line">         username [/DELETE] [/DOMAIN]</span><br><span class="line">         username [/TIMES:&#123;times | ALL&#125;]</span><br><span class="line">         username [/ACTIVE: &#123;YES | NO&#125;]</span><br><span class="line"><span class="function">C:\<span class="title">Users</span>\17463&gt;<span class="title">net</span> <span class="title">user</span> <span class="title">test</span> <span class="title">test</span> /<span class="title">add</span></span></span><br><span class="line"><span class="function">命令成功完成。</span></span><br><span class="line"><span class="function">               命令 子命令 用户名 用户密码 操作        </span></span><br><span class="line"><span class="function"><span class="title">net</span> <span class="title">user</span> /<span class="title">help</span></span></span><br></pre></td></tr></table></figure><h3 id="批处理文件参数传递"><a href="#批处理文件参数传递" class="headerlink" title="批处理文件参数传递"></a>批处理文件参数传递</h3><p>.bat文件接收参数使用 %num</p><p>net user %1 %2 /add</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">1</span></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">2</span></span><br><span class="line"><span class="built_in">net</span> user %<span class="number">1</span> %<span class="number">2</span> /add</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cmd</span> -&gt; xxx.bat 第一个参数值 第二个参数值  </span><br><span class="line">传参数时 注意空格隔开</span><br></pre></td></tr></table></figure><h3 id="注释符拓展"><a href="#注释符拓展" class="headerlink" title="注释符拓展"></a>注释符拓展</h3><p>rem xxx</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">rem program for add new user</span></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">1</span></span><br><span class="line"><span class="built_in">echo</span> %<span class="number">2</span></span><br><span class="line"><span class="comment">rem use:1.bat user password</span></span><br><span class="line"><span class="built_in">net</span> user %<span class="number">1</span> %<span class="number">2</span> /add</span><br><span class="line"><span class="built_in">pause</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="更改cmd界面命令提示符"><a href="#更改cmd界面命令提示符" class="headerlink" title="更改cmd界面命令提示符"></a>更改cmd界面命令提示符</h3><p>颜色命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">color 0a</span><br><span class="line">color /?</span><br></pre></td></tr></table></figure><p>标题命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title &quot;hack&quot;</span><br></pre></td></tr></table></figure><h3 id="时间与日期命令"><a href="#时间与日期命令" class="headerlink" title="时间与日期命令"></a>时间与日期命令</h3><p>时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time /t</span><br><span class="line">获取当前时间</span><br></pre></td></tr></table></figure><p>日期</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date /t</span><br><span class="line">获取当前日期</span><br></pre></td></tr></table></figure><h3 id="启动命令"><a href="#启动命令" class="headerlink" title="启动命令"></a>启动命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start /B xxx.bat 参数 参数</span><br><span class="line">/B 不创建新窗口</span><br></pre></td></tr></table></figure><h3 id="调用其他bat文件"><a href="#调用其他bat文件" class="headerlink" title="调用其他bat文件"></a>调用其他bat文件</h3><p>call 调用其他bat文件执行命令行并传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">rem program for add new user</span><br><span class="line">echo %1</span><br><span class="line">echo %2</span><br><span class="line">rem use:1.bat user password</span><br><span class="line">net user %1 %2 /add</span><br><span class="line">rem 后面1%传入到2.bat文件内</span><br><span class="line">call 2.bat  %1</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h3 id="任务列表查看命令"><a href="#任务列表查看命令" class="headerlink" title="任务列表查看命令"></a>任务列表查看命令</h3><p>tasklist 该工具显示在本地或远程机器上当前运行的进程列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tasklist /S 192.168.0.108 /U administrator /P 856261</span><br><span class="line">tasklist /FI &quot;STATUS eq RUNNING&quot;  用filter过滤器 eq代表等于 running正在运行的任务</span><br><span class="line">tasklist /FI &quot;PID EQ 12352&quot; /FO table &gt; test.csv</span><br><span class="line">FO:table、list、csv 输出格式 表格列表 </span><br></pre></td></tr></table></figure><p>*表示任意字符</p><h3 id="任务关闭命令"><a href="#任务关闭命令" class="headerlink" title="任务关闭命令"></a>任务关闭命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">taskkill 使用该工具按照进程id（pid）或映像名称终止任务</span><br><span class="line">taskkill /IM notepad.exe</span><br><span class="line">taskkill /pid 14268 /T</span><br><span class="line">/t 关闭任务子进程</span><br></pre></td></tr></table></figure><h3 id="文件结构查看命令"><a href="#文件结构查看命令" class="headerlink" title="文件结构查看命令"></a>文件结构查看命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tree [driver]/A /F</span><br><span class="line">[driver:]：可以使用具体路径</span><br><span class="line">F：显示每个文件夹中文件的名称</span><br><span class="line">A：使用ASCII字符，而不是用扩展字符</span><br></pre></td></tr></table></figure><h3 id="关机命令"><a href="#关机命令" class="headerlink" title="关机命令"></a>关机命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shutdown /i </span><br><span class="line">/i:打开图形化操作</span><br><span class="line">shutdown -p 关闭计算机</span><br></pre></td></tr></table></figure><h3 id="计划任务命令"><a href="#计划任务命令" class="headerlink" title="计划任务命令"></a>计划任务命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">at</span><br></pre></td></tr></table></figure><h3 id="批处理环境变量"><a href="#批处理环境变量" class="headerlink" title="批处理环境变量"></a>批处理环境变量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set </span><br></pre></td></tr></table></figure><p><a href="https://www.bilibili.com/video/BV1Ca4y1s7gh?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1Ca4y1s7gh?spm_id_from=333.999.0.0</a></p><p><a href="https://www.bilibili.com/video/BV1U44y1T7W5?spm_id_from=333.851.b_7265636f6d6d656e64.7">https://www.bilibili.com/video/BV1U44y1T7W5?spm_id_from=333.851.b_7265636f6d6d656e64.7</a></p><p><a href="http://www.neat-reader.com/downloads/converter">http://www.neat-reader.com/downloads/converter</a></p><p><a href="https://www.bookzz.ren/Author/Kentaro%20Miura">https://www.bookzz.ren/Author/Kentaro%20Miura</a></p><p><a href="https://zh.ng1lib.org/s/JavaScript%201000?page=3">https://zh.ng1lib.org/s/JavaScript%201000?page=3</a></p><p><a href="https://www.bookmarkearth.com/plugin/index">https://www.bookmarkearth.com/plugin/index</a></p><p>npm install –save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org #配置国内的镜像源</span><br><span class="line">npm info hexo # 测试查看hexo的安装信息，是否是taobao.org的源</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com  安装淘宝镜像</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo #通过npm安装hexo博客框架</span><br><span class="line"># -g 指定全局安装，可以使用hexo命令</span><br><span class="line">hexo init test 初始化创建，创建test文件夹</span><br><span class="line">cd test 进入目录</span><br><span class="line">npm install 进一步安装hexo所需文件</span><br></pre></td></tr></table></figure><h3 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo : 无法加载文件 D:\node\nvm\v16.13.2\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft</span><br><span class="line">.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ hexo -v</span><br><span class="line">+ ~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br><span class="line">hexo框架权限不足</span><br></pre></td></tr></table></figure><p>解决问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、以管理员身份运行 Windows PowerShell(管理员)</span><br><span class="line">2、输入 set-ExecutionPolicy RemoteSigned ，然后输入A 回车</span><br><span class="line">3、还可以通过 get-ExecutionPolicy 查看当前的状态</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"> <span class="attr">repo:</span> <span class="string">https://gitee.com/mcweblog/mcweblog</span></span><br><span class="line"> <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="comment">#注：冒号后面需携空格</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“ssh-keygen -t rsa -C  youremail@example.com”</span><br><span class="line">git config --global user.email *********@qq.com # 设置gitee邮箱（gitee的注册邮箱）</span><br><span class="line">git config --global user.name &#x27;****&#x27;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;VScode工具每次打开会替换窗口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="常见问题" scheme="http://example.com/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>系统API</title>
    <link href="http://example.com/2020/06/05/%E7%B3%BB%E7%BB%9Fapi/"/>
    <id>http://example.com/2020/06/05/%E7%B3%BB%E7%BB%9Fapi/</id>
    <published>2020-06-05T13:46:28.000Z</published>
    <updated>2022-03-28T12:12:16.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-后端环境搭建"><a href="#一-后端环境搭建" class="headerlink" title="一. 后端环境搭建"></a>一. 后端环境搭建</h1><h2 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h2><p>基础配置 config/app.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 应用名称</span></span><br><span class="line">    <span class="string">&#x27;app_name&#x27;</span>               =&gt; <span class="string">&#x27;后台API&#x27;</span>,</span><br><span class="line">    <span class="comment">// 应用地址</span></span><br><span class="line">    <span class="string">&#x27;app_host&#x27;</span>               =&gt; <span class="string">&#x27;http://miaochen.cloud/&#x27;</span>,</span><br><span class="line">    <span class="comment">// 应用调试模式</span></span><br><span class="line">    <span class="string">&#x27;app_debug&#x27;</span>              =&gt; <span class="literal">true</span>,</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 是否强制使用路由</span></span><br><span class="line">    <span class="string">&#x27;url_route_must&#x27;</span>         =&gt; <span class="literal">true</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 路由是否完全匹配</span></span><br><span class="line">    <span class="string">&#x27;route_complete_match&#x27;</span>   =&gt; <span class="literal">true</span>,</span><br><span class="line">]   </span><br></pre></td></tr></table></figure><p>数据库配置 config/database.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 数据库类型</span></span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>            =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">    <span class="comment">// 服务器地址</span></span><br><span class="line">    <span class="string">&#x27;hostname&#x27;</span>        =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="comment">// 数据库名</span></span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>        =&gt; <span class="string">&#x27;qiushibkapi&#x27;</span>,</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>        =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>        =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="comment">// 端口</span></span><br><span class="line">    <span class="string">&#x27;hostport&#x27;</span>        =&gt; <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 数据集返回类型</span></span><br><span class="line">    <span class="string">&#x27;resultset_type&#x27;</span>  =&gt; <span class="string">&#x27;collection&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="2-返回状态码"><a href="#2-返回状态码" class="headerlink" title="2.返回状态码"></a>2.返回状态码</h2><table><thead><tr><th align="left">状态码</th><th>含义</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">200</td><td>OK</td><td align="left">请求成功</td></tr><tr><td align="left">201</td><td>CREATED</td><td align="left">创建成功</td></tr><tr><td align="left">202</td><td>ACCEPTED</td><td align="left">更新成功</td></tr><tr><td align="left">400</td><td>BAD REQUEST</td><td align="left">请求的地址不存在或者包含不支持的参数</td></tr><tr><td align="left">401</td><td>UNAUTHORIZED</td><td align="left">未授权</td></tr><tr><td align="left">403</td><td>FORBIDDEN</td><td align="left">被禁止访问</td></tr><tr><td align="left">404</td><td>NOT FOUND</td><td align="left">请求的资源不存在</td></tr><tr><td align="left">500</td><td>INTERNAL SERVER ERROR</td><td align="left">内部错误</td></tr></tbody></table><h1 id="二-【api开发】登录模块开发"><a href="#二-【api开发】登录模块开发" class="headerlink" title="二.【api开发】登录模块开发"></a>二.【api开发】登录模块开发</h1><h2 id="1-数据表设计"><a href="#1-数据表设计" class="headerlink" title="1. 数据表设计"></a>1. 数据表设计</h2><blockquote><p>用户表         user</p><p>id<br>username    用户名<br>userpic         头像<br>password     密码<br>phone           手机号码<br>email             邮箱<br>create_time      创建时间</p><p>status                状态  0禁用 1启用</p></blockquote><blockquote><p>用户资料表        userinfo</p><p>id<br>user_id        用户id<br>sex               性别<br>age               年龄<br>qg             情感<br>job            工作<br>birthday           生日<br>path              家乡</p></blockquote><blockquote><p>第三方登录表    user_bind<br>id<br>type            第三方类型（微信，微博，QQ，其他）<br>openid           openid<br>userid            用户id（默认是0）<br>nickname          第三方昵称<br>avatarurl           第三方头像</p></blockquote><h2 id="2-封装全局异常类"><a href="#2-封装全局异常类" class="headerlink" title="2. 封装全局异常类"></a>2. 封装全局异常类</h2><h2 id="3-封装全局验证层"><a href="#3-封装全局验证层" class="headerlink" title="3. 封装全局验证层"></a>3. 封装全局验证层</h2><h2 id="4-封装基类控制器"><a href="#4-封装基类控制器" class="headerlink" title="4. 封装基类控制器"></a>4. 封装基类控制器</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//api返回结果</span></span><br><span class="line"><span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showResCode</span>(<span class="params"><span class="variable">$msg</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$data</span> = [], <span class="variable">$code</span>=<span class="number">200</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$res</span> = [</span><br><span class="line">        <span class="string">&#x27;msg&#x27;</span>=&gt; <span class="variable">$msg</span> ? <span class="variable">$msg</span>:<span class="string">&#x27;未定义消息&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>=&gt; <span class="variable">$data</span> ? <span class="variable">$data</span>:[]</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$res</span>,<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//api返回无数据结果</span></span><br><span class="line"><span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showResCodeWithOutData</span>(<span class="params"><span class="variable">$msg</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$code</span>=<span class="number">200</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCode</span>(<span class="variable">$msg</span>,[],<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-手机验证码api"><a href="#5-手机验证码api" class="headerlink" title="5. 手机验证码api"></a>5. 手机验证码api</h2><h4 id="获取验证码流程："><a href="#获取验证码流程：" class="headerlink" title="获取验证码流程："></a>获取验证码流程：</h4><p>（1）接收手机号码</p><p>（2）验证手机号码合法性</p><p>（3）判断是否已经获取过验证码（判断缓存中是否存在当前手机号的验证码，有则提示“你已经获取过验证码了”）</p><p>（4）生成4位数随机数字</p><p>（5）发送短信（阿里大于）</p><p>（6）手机号=&gt;验证码 的形式保存在缓存中（60秒）</p><p>（7）提示成功</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送验证码</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendCode</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取用户提交手机号码</span></span><br><span class="line">    <span class="variable">$phone</span> = <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">param</span>(<span class="string">&#x27;phone&#x27;</span>);</span><br><span class="line">    <span class="comment">// 判断是否已经发送过</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Cache</span>::<span class="title function_ invoke__">get</span>(<span class="variable">$phone</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;你操作得太快了&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30001</span>]);</span><br><span class="line">    <span class="comment">// 生成4位验证码</span></span><br><span class="line">    <span class="variable">$code</span> = <span class="title function_ invoke__">random_int</span>(<span class="number">1000</span>,<span class="number">9999</span>);</span><br><span class="line">    <span class="comment">// 判断是否开启验证码功能</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.isopen&#x27;</span>))&#123;</span><br><span class="line">        <span class="title class_">Cache</span>::<span class="title function_ invoke__">set</span>(<span class="variable">$phone</span>,<span class="variable">$code</span>,<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.expire&#x27;</span>));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;验证码：&#x27;</span>.<span class="variable">$code</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30005</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发送验证码</span></span><br><span class="line">    <span class="variable">$res</span> = <span class="title class_">AlismsController</span>::<span class="title function_ invoke__">SendSMS</span>(<span class="variable">$phone</span>,<span class="variable">$code</span>);</span><br><span class="line">    <span class="comment">//发送成功 写入缓存</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res</span>[<span class="string">&#x27;Code&#x27;</span>]==<span class="string">&#x27;OK&#x27;</span>) <span class="keyword">return</span> <span class="title class_">Cache</span>::<span class="title function_ invoke__">set</span>(<span class="variable">$phone</span>,<span class="variable">$code</span>,<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.expire&#x27;</span>));</span><br><span class="line">    <span class="comment">// 无效号码</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res</span>[<span class="string">&#x27;Code&#x27;</span>]==<span class="string">&#x27;isv.MOBILE_NUMBER_ILLEGAL&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;无效号码&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30002</span>]);</span><br><span class="line">    <span class="comment">// 触发日限制</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res</span>[<span class="string">&#x27;Code&#x27;</span>]==<span class="string">&#x27;isv.DAY_LIMIT_CONTROL&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;今日你已经发送超过限制，改日再来&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30003</span>]);</span><br><span class="line">    <span class="comment">// 发送失败</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;发送失败&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30004</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>config/api.php（自定义配置文件）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// token失效时间，0代表永不失效</span></span><br><span class="line">    <span class="string">&#x27;token_expire&#x27;</span>=&gt;<span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 阿里大于</span></span><br><span class="line">    <span class="string">&#x27;aliSMS&#x27;</span>=&gt;[</span><br><span class="line">        <span class="string">&#x27;isopen&#x27;</span>=&gt; <span class="literal">false</span>,<span class="comment">//开启阿里大于</span></span><br><span class="line">        <span class="string">&#x27;accessKeyId&#x27;</span>=&gt;<span class="string">&#x27;&lt;accessKeyId&gt;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accessSecret&#x27;</span>=&gt;<span class="string">&#x27;&lt;accessSecret&gt;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;regionId&#x27;</span>=&gt;<span class="string">&#x27;cn-hangzhou&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;product&#x27;</span>=&gt;<span class="string">&#x27;Dysmsapi&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;version&#x27;</span>=&gt;<span class="string">&#x27;2017-05-25&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SignName&#x27;</span>=&gt;<span class="string">&#x27;&lt;YourSignName&gt;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;TemplateCode&#x27;</span>=&gt;<span class="string">&#x27;&lt;YourTemplateCode&gt;&#x27;</span>,</span><br><span class="line">        <span class="comment">// 验证码发送时间间隔（60秒）</span></span><br><span class="line">        <span class="string">&#x27;expire&#x27;</span>=&gt;<span class="number">60</span></span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="对接阿里大于sdk"><a href="#对接阿里大于sdk" class="headerlink" title="对接阿里大于sdk"></a>对接阿里大于sdk</h4><blockquote><p>文档地址：</p><p><a href="https://help.aliyun.com/document_detail/112186.html?spm=a2c4g.11174283.6.635.37eb2c42jFVxfS">https://help.aliyun.com/document_detail/112186.html?spm=a2c4g.11174283.6.635.37eb2c42jFVxfS</a></p></blockquote><p>（1）composer安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require alibabacloud/client</span><br></pre></td></tr></table></figure><p>（2）使用<a href="https://api.aliyun.com/#/?product=Dysmsapi&lang=PHP">OpenAPI Explorer</a>来生成相关API的Demo</p><blockquote><p>OpenAPI Explorer地址：</p><p><a href="https://api.aliyun.com/?spm=a2c4g.11186623.2.13.6a294e6afatgeU#/?product=Dysmsapi&amp;lang=PHP">https://api.aliyun.com/?spm=a2c4g.11186623.2.13.6a294e6afatgeU#/?product=Dysmsapi&amp;lang=PHP</a></p></blockquote><p>（3）\app\common\controller\AliSMSController.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">common</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="comment">// 引入阿里sdk</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">AlibabaCloud</span>\<span class="title">Client</span>\<span class="title">AlibabaCloud</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">AlibabaCloud</span>\<span class="title">Client</span>\<span class="title">Exception</span>\<span class="title">ClientException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">AlibabaCloud</span>\<span class="title">Client</span>\<span class="title">Exception</span>\<span class="title">ServerException</span>;</span><br><span class="line"><span class="comment">// 引入异常类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">lib</span>\<span class="title">exception</span>\<span class="title">BaseException</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlismsController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">SendSMS</span>(<span class="params"><span class="variable">$phone</span>,<span class="variable">$code</span></span>)</span>&#123;</span><br><span class="line">        <span class="title class_">AlibabaCloud</span>::<span class="title function_ invoke__">accessKeyClient</span>(<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.accessKeyId&#x27;</span>),<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.accessSecret&#x27;</span>))-&gt;<span class="title function_ invoke__">regionId</span>(<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.regionId&#x27;</span>))-&gt;<span class="title function_ invoke__">asGlobalClient</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$option</span>=[</span><br><span class="line">                <span class="string">&#x27;query&#x27;</span> =&gt; [</span><br><span class="line">                    <span class="string">&#x27;RegionId&#x27;</span> =&gt; <span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.regionId&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;PhoneNumbers&#x27;</span> =&gt; <span class="variable">$phone</span>,</span><br><span class="line">                    <span class="string">&#x27;SignName&#x27;</span> =&gt;<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.SignName&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;TemplateCode&#x27;</span> =&gt;<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.TemplateCode&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;TemplateParam&#x27;</span> =&gt;<span class="string">&#x27;&#123;&quot;code&quot;:&quot;&#x27;</span>.<span class="variable">$code</span>.<span class="string">&#x27;&quot;&#125;&#x27;</span>,</span><br><span class="line">                ],</span><br><span class="line">            ];</span><br><span class="line">            <span class="variable">$result</span> = <span class="title class_">AlibabaCloud</span>::<span class="title function_ invoke__">rpcRequest</span>()</span><br><span class="line">                    -&gt;<span class="title function_ invoke__">product</span>(<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.product&#x27;</span>))</span><br><span class="line">                    <span class="comment">// -&gt;scheme(&#x27;https&#x27;) // https | http</span></span><br><span class="line">                    -&gt;<span class="title function_ invoke__">version</span>(<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.version&#x27;</span>))</span><br><span class="line">                    -&gt;<span class="title function_ invoke__">action</span>(<span class="string">&#x27;SendSms&#x27;</span>)</span><br><span class="line">                    -&gt;<span class="title function_ invoke__">method</span>(<span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line">                    -&gt;<span class="title function_ invoke__">options</span>(<span class="variable">$option</span>)-&gt;<span class="title function_ invoke__">request</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getErrorMessage</span>(),<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30000</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServerException <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getErrorMessage</span>(),<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30000</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）使用方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">controller</span>\<span class="title">AliSMSController</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 生成验证码</span></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">random_int</span>(<span class="number">1000</span>,<span class="number">9999</span>);</span><br><span class="line"><span class="comment">// 发送短信</span></span><br><span class="line"><span class="title class_">AliSMSController</span>::<span class="title function_ invoke__">SendSMS</span>(<span class="variable">$phone</span>,<span class="variable">$code</span>);</span><br></pre></td></tr></table></figure><h2 id="6-路由分组操作"><a href="#6-路由分组操作" class="headerlink" title="6.路由分组操作"></a>6.路由分组操作</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 发送验证码</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;user/sendcode&#x27;</span>,<span class="string">&#x27;api/:version.User/sendCode&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="7-手机号登录api"><a href="#7-手机号登录api" class="headerlink" title="7. 手机号登录api"></a>7. 手机号登录api</h2><p>controller层：application\api\controller\v1\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手机号码登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">phoneLogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 验证登录信息</span></span><br><span class="line">    (<span class="keyword">new</span> <span class="title class_">UserValidate</span>())-&gt;<span class="title function_ invoke__">goCheck</span>(<span class="string">&#x27;phonelogin&#x27;</span>);</span><br><span class="line">    <span class="comment">// 手机登录</span></span><br><span class="line">    <span class="variable">$token</span> = (<span class="keyword">new</span> <span class="title class_">UserModel</span>())-&gt;<span class="title function_ invoke__">phoneLogin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCode</span>(<span class="string">&#x27;登录成功&#x27;</span>,[<span class="string">&#x27;token&#x27;</span>=&gt;<span class="variable">$token</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route层：route\route.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 手机登录</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;user/phonelogin&#x27;</span>,<span class="string">&#x27;api/:version.User/phoneLogin&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>validate层：application\common\validate\UserValidate.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$rule</span> = [</span><br><span class="line">    ...</span><br><span class="line">        <span class="string">&#x27;phone&#x27;</span>=&gt;<span class="string">&#x27;require|mobile&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;code&#x27;</span>=&gt;<span class="string">&#x27;require|number|length:4|isPefectCode&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$scene</span> = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;phonelogin&#x27;</span>=&gt;[<span class="string">&#x27;phone&#x27;</span>,<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line">    ...</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>BaseValidate：application\common\validate\BaseValidate.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 验证码验证</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isPefectCode</span>(<span class="params"><span class="variable">$value</span>, <span class="variable">$rule</span>=<span class="string">&#x27;&#x27;</span>, <span class="variable">$data</span>=<span class="string">&#x27;&#x27;</span>, <span class="variable">$field</span>=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 验证码不存在</span></span><br><span class="line">    <span class="variable">$beforeCode</span> = <span class="title function_ invoke__">cache</span>(<span class="variable">$data</span>[<span class="string">&#x27;phone&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$beforeCode</span>) <span class="keyword">return</span> <span class="string">&quot;请重新获取验证码&quot;</span>;</span><br><span class="line">    <span class="comment">// 验证验证码</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span> != <span class="variable">$beforeCode</span>) <span class="keyword">return</span> <span class="string">&quot;验证码错误&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>model层：application\common\model\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动写入时间</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$autoWriteTimestamp</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定用户信息表</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">userinfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">hasOne</span>(<span class="string">&#x27;Userinfo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断用户是否存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isExist</span>(<span class="params"><span class="variable">$arr</span>=[]</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_array</span>(<span class="variable">$arr</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;phone&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 手机号码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;phone&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;phone&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手机登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">phoneLogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取所有参数</span></span><br><span class="line">    <span class="variable">$param</span> = <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">param</span>();</span><br><span class="line">    <span class="comment">// 验证用户是否存在</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isExist</span>([<span class="string">&#x27;phone&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;phone&#x27;</span>]]);</span><br><span class="line">    <span class="comment">// 用户不存在，直接注册</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$user</span>)&#123;</span><br><span class="line">        <span class="comment">// 用户主表</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">create</span>([</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;phone&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;phone&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;phone&#x27;</span>],</span><br><span class="line">            <span class="comment">// &#x27;password&#x27;=&gt;password_hash($param[&#x27;phone&#x27;],PASSWORD_DEFAULT)</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="comment">// 在用户信息表创建对应的记录（用户存放用户其他信息）</span></span><br><span class="line">        <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">userinfo</span>()-&gt;<span class="title function_ invoke__">create</span>([ <span class="string">&#x27;user_id&#x27;</span>=&gt;<span class="variable">$user</span>-&gt;id ]);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">CreateSaveToken</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用户是否被禁用</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkStatus</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>());</span><br><span class="line">    <span class="comment">// 登录成功，返回token</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">CreateSaveToken</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成并保存token</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateSaveToken</span>(<span class="params"><span class="variable">$arr</span>=[]</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 生成token</span></span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">uniqid</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>)),<span class="literal">true</span>)));</span><br><span class="line">    <span class="variable">$arr</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="variable">$token</span>;</span><br><span class="line">    <span class="comment">// 登录过期时间</span></span><br><span class="line">    <span class="variable">$expire</span> =<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;expires_in&#x27;</span>,<span class="variable">$arr</span>) ? <span class="variable">$arr</span>[<span class="string">&#x27;expires_in&#x27;</span>] : <span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.token_expire&#x27;</span>);</span><br><span class="line">    <span class="comment">// 保存到缓存中</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Cache</span>::<span class="title function_ invoke__">set</span>(<span class="variable">$token</span>,<span class="variable">$arr</span>,<span class="variable">$expire</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>();</span><br><span class="line">    <span class="comment">// 返回token</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$token</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户是否被禁用</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params"><span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$status</span> = <span class="variable">$arr</span>[<span class="string">&#x27;status&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$status</span>==<span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;该用户已被禁用&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20001</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件（config/api.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// token过期时间</span></span><br><span class="line">    <span class="string">&#x27;token_expire&#x27;</span>=&gt;<span class="number">0</span>,</span><br><span class="line">    ...</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="8-账号密码登录api"><a href="#8-账号密码登录api" class="headerlink" title="8. 账号密码登录api"></a>8. 账号密码登录api</h2><p>controller层：application\api\controller\v1\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 账号密码登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 验证登录信息</span></span><br><span class="line">    (<span class="keyword">new</span> <span class="title class_">UserValidate</span>())-&gt;<span class="title function_ invoke__">goCheck</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="variable">$token</span> = (<span class="keyword">new</span> <span class="title class_">UserModel</span>())-&gt;<span class="title function_ invoke__">login</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCode</span>(<span class="string">&#x27;登录成功&#x27;</span>,[<span class="string">&#x27;token&#x27;</span>=&gt;<span class="variable">$token</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route层：route\route.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 账号密码登录</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;user/login&#x27;</span>,<span class="string">&#x27;api/:version.User/login&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>validate层：application\common\validate\UserValidate.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证规则</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$rule</span> = [</span><br><span class="line">    ...</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>=&gt;<span class="string">&#x27;require&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>=&gt;<span class="string">&#x27;require|alphaDash&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证场景</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$scene</span> = [</span><br><span class="line">    ...</span><br><span class="line">        <span class="string">&#x27;login&#x27;</span>=&gt;[<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>],</span><br><span class="line">    ...</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>model层：application\common\model\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断用户是否存在（在前面课程的基础上扩充）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isExist</span>(<span class="params"><span class="variable">$arr</span>=[]</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_array</span>(<span class="variable">$arr</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;phone&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 手机号码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;phone&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;phone&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用户id</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;id&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 用户名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;id&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;email&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 邮箱</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;email&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;email&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;username&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 用户名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;username&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;username&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 账号登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取所有参数</span></span><br><span class="line">    <span class="variable">$param</span> = <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">param</span>();</span><br><span class="line">    <span class="comment">// 验证用户是否存在</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isExist</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">filterUserData</span>(<span class="variable">$param</span>[<span class="string">&#x27;username&#x27;</span>]));</span><br><span class="line">    <span class="comment">// 用户不存在</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$user</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;昵称/邮箱/手机号错误&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20000</span>]);</span><br><span class="line">    <span class="comment">// 用户是否被禁用</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkStatus</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>());</span><br><span class="line">    <span class="comment">// 验证密码</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkPassword</span>(<span class="variable">$param</span>[<span class="string">&#x27;password&#x27;</span>],<span class="variable">$user</span>-&gt;password);</span><br><span class="line">    <span class="comment">// 登录成功 生成token，进行缓存，返回客户端</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">CreateSaveToken</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证用户名是什么格式，昵称/邮箱/手机号</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filterUserData</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$arr</span>=[];</span><br><span class="line">    <span class="comment">// 验证是否是手机号码</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;^1(3|4|5|7|8)[0-9]\d&#123;8&#125;$^&#x27;</span>, <span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;phone&#x27;</span>]=<span class="variable">$data</span>; </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证是否是邮箱</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]&#123;2,&#125;)$/&#x27;</span>, <span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;email&#x27;</span>]=<span class="variable">$data</span>; </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$arr</span>[<span class="string">&#x27;username&#x27;</span>]=<span class="variable">$data</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证密码</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPassword</span>(<span class="params"><span class="variable">$password</span>,<span class="variable">$hash</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$hash</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;密码错误&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20002</span>]);</span><br><span class="line">    <span class="comment">// 密码错误</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">password_verify</span>(<span class="variable">$password</span>,<span class="variable">$hash</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;密码错误&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20002</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-第三方登录api"><a href="#9-第三方登录api" class="headerlink" title="9. 第三方登录api"></a>9. 第三方登录api</h2><p>controller层：application\api\controller\v1\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第三方登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">otherLogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 验证登录信息</span></span><br><span class="line">    (<span class="keyword">new</span> <span class="title class_">UserValidate</span>())-&gt;<span class="title function_ invoke__">goCheck</span>(<span class="string">&#x27;otherlogin&#x27;</span>);</span><br><span class="line">    <span class="variable">$token</span> = (<span class="keyword">new</span> <span class="title class_">UserModel</span>())-&gt;<span class="title function_ invoke__">otherlogin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCode</span>(<span class="string">&#x27;登录成功&#x27;</span>,[<span class="string">&#x27;token&#x27;</span>=&gt;<span class="variable">$token</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route层：route\route.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 第三方登录</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;user/otherlogin&#x27;</span>,<span class="string">&#x27;api/:version.User/otherLogin&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>validate层：application\common\validate\UserValidate.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证规则</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$rule</span> = [</span><br><span class="line">    ...</span><br><span class="line">        <span class="string">&#x27;provider&#x27;</span>=&gt;<span class="string">&#x27;require&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;openid&#x27;</span>=&gt;<span class="string">&#x27;require&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;nickName&#x27;</span>=&gt;<span class="string">&#x27;require&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;avatarUrl&#x27;</span>=&gt;<span class="string">&#x27;require&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;expires_in&#x27;</span>=&gt;<span class="string">&#x27;require&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证场景</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$scene</span> = [</span><br><span class="line">    ...</span><br><span class="line">        <span class="string">&#x27;otherlogin&#x27;</span>=&gt;[<span class="string">&#x27;provider&#x27;</span>,<span class="string">&#x27;openid&#x27;</span>,<span class="string">&#x27;nickName&#x27;</span>,<span class="string">&#x27;avatarUrl&#x27;</span>,<span class="string">&#x27;expires_in&#x27;</span>],</span><br><span class="line">    ...</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>model层：application\common\model\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定第三方登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">userbind</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">hasMany</span>(<span class="string">&#x27;UserBind&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断用户是否存在（在前面课程的基础上扩充）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isExist</span>(<span class="params"><span class="variable">$arr</span>=[]</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_array</span>(<span class="variable">$arr</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;phone&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 手机号码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;phone&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;phone&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用户id</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;id&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 用户名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;id&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;email&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 邮箱</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;email&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;email&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;username&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 用户名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;username&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;username&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第三方参数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;provider&#x27;</span>,<span class="variable">$arr</span>)) &#123;</span><br><span class="line">        <span class="variable">$where</span> = [</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>=&gt;<span class="variable">$arr</span>[<span class="string">&#x27;provider&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;openid&#x27;</span>=&gt;<span class="variable">$arr</span>[<span class="string">&#x27;openid&#x27;</span>]</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">userbind</span>()-&gt;<span class="title function_ invoke__">where</span>(<span class="variable">$where</span>)-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户是否被禁用（在前面课程基础上扩展）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params"><span class="variable">$arr</span>,<span class="variable">$isReget</span> = <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$status</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$isReget</span>) &#123;</span><br><span class="line">        <span class="comment">// 账号密码登录 和 第三方登录</span></span><br><span class="line">        <span class="variable">$userid</span> = <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;user_id&#x27;</span>,<span class="variable">$arr</span>)?<span class="variable">$arr</span>[<span class="string">&#x27;user_id&#x27;</span>]:<span class="variable">$arr</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="comment">// 判断第三方登录是否绑定了手机号码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$userid</span> &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">        <span class="comment">// 查询user表</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">find</span>(<span class="variable">$userid</span>)-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">        <span class="comment">// 拿到status</span></span><br><span class="line">        <span class="variable">$status</span> = <span class="variable">$user</span>[<span class="string">&#x27;status&#x27;</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$status</span> = <span class="variable">$arr</span>[<span class="string">&#x27;status&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$status</span>==<span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;该用户已被禁用&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20001</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三方登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">otherlogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取所有参数</span></span><br><span class="line">    <span class="variable">$param</span> = <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">param</span>();</span><br><span class="line">    <span class="comment">// 解密过程（待添加）</span></span><br><span class="line">    <span class="comment">// 验证用户是否存在</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isExist</span>([<span class="string">&#x27;provider&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;provider&#x27;</span>],<span class="string">&#x27;openid&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;openid&#x27;</span>]]);</span><br><span class="line">    <span class="comment">// 用户不存在，创建用户</span></span><br><span class="line">    <span class="variable">$arr</span> = [];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$user</span>) &#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">userbind</span>()-&gt;<span class="title function_ invoke__">create</span>([</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;provider&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;openid&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;openid&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;nickname&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;nickName&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;avatarurl&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;avatarUrl&#x27;</span>],</span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$arr</span> = <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;expires_in&#x27;</span>] = <span class="variable">$param</span>[<span class="string">&#x27;expires_in&#x27;</span>]; </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">CreateSaveToken</span>(<span class="variable">$arr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用户是否被禁用</span></span><br><span class="line">    <span class="variable">$arr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkStatus</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>());</span><br><span class="line">    <span class="comment">// 登录成功，返回token</span></span><br><span class="line">    <span class="variable">$arr</span>[<span class="string">&#x27;expires_in&#x27;</span>] = <span class="variable">$param</span>[<span class="string">&#x27;expires_in&#x27;</span>]; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">CreateSaveToken</span>(<span class="variable">$arr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-auth中间件封装"><a href="#10-auth中间件封装" class="headerlink" title="10. auth中间件封装"></a>10. auth中间件封装</h2><p>权限验证层</p><ol><li>创建中间件</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测token合法性（用户是否已登陆）</span></span><br><span class="line">php think make:middleware ApiUserAuth</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 检测第三方登录用户是否已经绑定手机（如果没有绑定手机，在User主表中没有记录，没法进行下面操作）</span></span><br><span class="line">php think make:middleware ApiUserBindPhone</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 检测用户是否被禁用</span></span><br><span class="line">php think make:middleware ApiUserStatus</span><br></pre></td></tr></table></figure><ol start="2"><li>注册中间件（config/middleware.php）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">&#x27;ApiUserAuth&#x27;</span> =&gt; app\http\middleware\<span class="title class_">ApiUserAuth</span>::<span class="variable language_">class</span>,</span><br><span class="line">    <span class="string">&#x27;ApiUserStatus&#x27;</span> =&gt; app\http\middleware\<span class="title class_">ApiUserStatus</span>::<span class="variable language_">class</span>,</span><br><span class="line">    <span class="string">&#x27;ApiUserBindPhone&#x27;</span> =&gt; app\http\middleware\<span class="title class_">ApiUserBindPhone</span>::<span class="variable language_">class</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ol start="3"><li>中间件定义</li></ol><p>（1） 检测token合法性（app\http\middleware\ApiUserAuth.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">http</span>\<span class="title class_">middleware</span>;</span><br><span class="line"><span class="comment">// 引入异常类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">lib</span>\<span class="title">exception</span>\<span class="title">BaseException</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiUserAuth</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, \<span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 获取头部信息</span></span><br><span class="line">        <span class="variable">$param</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">header</span>();</span><br><span class="line">        <span class="comment">// 不含token</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;token&#x27;</span>,<span class="variable">$param</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;非法token，禁止操作&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20003</span>]);</span><br><span class="line">        <span class="comment">// 当前用户token是否存在（是否登录）</span></span><br><span class="line">        <span class="variable">$token</span> = <span class="variable">$param</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">        <span class="variable">$user</span> = \<span class="title class_">Cache</span>::<span class="title function_ invoke__">get</span>(<span class="variable">$token</span>);</span><br><span class="line">        <span class="comment">// 验证失败（未登录或已过期）</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$user</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;非法token，请重新登录&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20003</span>]);</span><br><span class="line">        <span class="comment">// 将token和userid这类常用参数放在request中</span></span><br><span class="line">        <span class="variable">$request</span>-&gt;userToken = <span class="variable">$token</span>;</span><br><span class="line">        <span class="variable">$request</span>-&gt;userId = <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;type&#x27;</span>,<span class="variable">$user</span>) ? <span class="variable">$user</span>[<span class="string">&#x27;user_id&#x27;</span>] : <span class="variable">$user</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="variable">$request</span>-&gt;userTokenUserInfo = <span class="variable">$user</span>; </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）检测第三方登录用户是否已经绑定手机（app\http\middleware\ApiUserBindPhone.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">http</span>\<span class="title class_">middleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">model</span>\<span class="title">User</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiUserBindPhone</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, \<span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$param</span> = <span class="variable">$request</span>-&gt;userTokenUserInfo;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">User</span>()) -&gt; <span class="title function_ invoke__">OtherLoginIsBindPhone</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>model层：application\common\model\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证第三方登录是否绑定手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">OtherLoginIsBindPhone</span>(<span class="params"><span class="variable">$user</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 验证是否是第三方登录</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;type&#x27;</span>,<span class="variable">$user</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>[<span class="string">&#x27;user_id&#x27;</span>]&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;请先绑定手机！&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20008</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$user</span>[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 账号密码登录</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$user</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）检测用户是否被禁用（app\http\middleware\ApiUserStatus.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">http</span>\<span class="title class_">middleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">model</span>\<span class="title">User</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiUserStatus</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, \<span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$param</span> = <span class="variable">$request</span>-&gt;userTokenUserInfo;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">User</span>()) -&gt; <span class="title function_ invoke__">checkStatus</span>(<span class="variable">$param</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>model层：application\common\model\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户是否被禁用（在前面课程的基础上扩充）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params"><span class="variable">$arr</span>,<span class="variable">$isReget</span> = <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$status</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$isReget</span>) &#123;</span><br><span class="line">        <span class="comment">// 账号密码登录</span></span><br><span class="line">        <span class="variable">$userid</span> = <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;user_id&#x27;</span>,<span class="variable">$arr</span>)?<span class="variable">$arr</span>[<span class="string">&#x27;user_id&#x27;</span>]:<span class="variable">$arr</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">find</span>(<span class="variable">$userid</span>)-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">        <span class="variable">$status</span> = <span class="variable">$user</span>[<span class="string">&#x27;status&#x27;</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$status</span> = <span class="variable">$arr</span>[<span class="string">&#x27;status&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$status</span>==<span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;该用户已被禁用&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20001</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>中间件使用（在路由中使用 route/route.php）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">middleware</span>([<span class="string">&#x27;ApiUserAuth&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要验证token，是否绑定手机，用户是否禁用（必须按顺序）</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">middleware</span>([<span class="string">&#x27;ApiUserAuth&#x27;</span>,<span class="string">&#x27;ApiUserBindPhone&#x27;</span>,<span class="string">&#x27;ApiUserStatus&#x27;</span>]);</span><br></pre></td></tr></table></figure><h2 id="11-退出登录api"><a href="#11-退出登录api" class="headerlink" title="11. 退出登录api"></a>11. 退出登录api</h2><p>controller层：application\api\controller\v1\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 退出登录</span></span><br><span class="line">    (<span class="keyword">new</span> <span class="title class_">UserModel</span>())-&gt;<span class="title function_ invoke__">logout</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCodeWithOutData</span>(<span class="string">&#x27;退出成功&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route层：route\route.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 退出登录</span></span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;user/logout&#x27;</span>,<span class="string">&#x27;api/:version.User/logout&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">middleware</span>([<span class="string">&#x27;ApiUserAuth&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>model层：application\common\model\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Cache</span>::<span class="title function_ invoke__">pull</span>(<span class="title function_ invoke__">request</span>()-&gt;userToken)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;你已经退出了&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30006</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-【api开发】文章分类模块开发"><a href="#三-【api开发】文章分类模块开发" class="headerlink" title="三.【api开发】文章分类模块开发"></a>三.【api开发】文章分类模块开发</h1><h2 id="1-数据表设计-1"><a href="#1-数据表设计-1" class="headerlink" title="1. 数据表设计"></a>1. 数据表设计</h2><blockquote><p>文章分类表 post_class</p><p>id<br>classname      分类名称<br>create_time    创建时间<br>status          分类状态  0禁用1启用</p></blockquote><h2 id="2-文章分类api开发"><a href="#2-文章分类api开发" class="headerlink" title="2.文章分类api开发"></a>2.文章分类api开发</h2><p>创建文章分类相关文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文章分类控制器</span></span><br><span class="line">php think make:controller api/v1/PostClass</span><br><span class="line"><span class="comment">// 创建文章分类模型</span></span><br><span class="line">php think make:model PostClass</span><br></pre></td></tr></table></figure><p>controller层：application\api\controller\v1\PostClass.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">model</span>\<span class="title">PostClass</span> <span class="keyword">as</span> <span class="title">PostClassModel</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取文章分类列表</span></span><br><span class="line">    <span class="variable">$list</span>=(<span class="keyword">new</span> PostClassModel)-&gt;<span class="title function_ invoke__">getPostClassList</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCode</span>(<span class="string">&#x27;获取成功&#x27;</span>,[<span class="string">&#x27;list&#x27;</span>=&gt;<span class="variable">$list</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route层：route\route.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 获取文章分类</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;postclass&#x27;</span>, <span class="string">&#x27;api/:version.PostClass/index&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>model层：application\common\model\PostClass.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有文章分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPostClassList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">field</span>(<span class="string">&#x27;id,classname&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;status&#x27;</span>,<span class="number">1</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-【api开发】话题分类模块"><a href="#四-【api开发】话题分类模块" class="headerlink" title="四.【api开发】话题分类模块"></a>四.【api开发】话题分类模块</h1><h2 id="1-数据表设计（同文章分类）"><a href="#1-数据表设计（同文章分类）" class="headerlink" title="1. 数据表设计（同文章分类）"></a>1. 数据表设计（同文章分类）</h2><h2 id="2-话题分类api开发"><a href="#2-话题分类api开发" class="headerlink" title="2. 话题分类api开发"></a>2. 话题分类api开发</h2><p>创建话题分类相关文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建话题分类控制器</span></span><br><span class="line">php think make:controller api/v1/TopicClass</span><br><span class="line"><span class="comment">// 创建话题分类模型</span></span><br><span class="line">php think make:model TopicClass</span><br></pre></td></tr></table></figure><p>controller层：application\api\controller\v1\TopicClass.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">model</span>\<span class="title">TopicClass</span> <span class="keyword">as</span> <span class="title">TopicClassModel</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取话题分类列表</span></span><br><span class="line">    <span class="variable">$list</span>=(<span class="keyword">new</span> TopicClassModel)-&gt;<span class="title function_ invoke__">getTopicClassList</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCode</span>(<span class="string">&#x27;获取成功&#x27;</span>,[<span class="string">&#x27;list&#x27;</span>=&gt;<span class="variable">$list</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route层：route\route.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 获取话题分类</span></span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;topicclass&#x27;</span>,<span class="string">&#x27;api/v1.TopicClass/index&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>model层：application\common\model\TopicClass.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有话题分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTopicClassList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">field</span>(<span class="string">&#x27;id,classname&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;status&#x27;</span>,<span class="number">1</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/06/05/tySEy4.png" alt="tySEy4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-后端环境搭建&quot;&gt;&lt;a href=&quot;#一-后端环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一. 后端环境搭建&quot;&gt;&lt;/a&gt;一. 后端环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-基本配置&quot;&gt;&lt;a href=&quot;#1-基本配置&quot; class=&quot;header</summary>
      
    
    
    
    <category term="系统API" scheme="http://example.com/categories/%E7%B3%BB%E7%BB%9FAPI/"/>
    
    
    <category term="系统API" scheme="http://example.com/tags/%E7%B3%BB%E7%BB%9FAPI/"/>
    
  </entry>
  
  <entry>
    <title>博客整体搭建流程</title>
    <link href="http://example.com/2019/10/17/blog/"/>
    <id>http://example.com/2019/10/17/blog/</id>
    <published>2019-10-17T02:37:32.000Z</published>
    <updated>2022-03-28T12:14:20.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo生成"><a href="#Hexo生成" class="headerlink" title="Hexo生成"></a>Hexo生成</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">npm install --save hexo-deployer-git</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><blockquote><p>关于博客内部主题配置参考相对应主题文档。</p><p>butterfly:<a href="https://jerryc.me/posts/21cfbf15/">https://jerryc.me/posts/21cfbf15/</a> </p></blockquote><p><strong>我的域名和服务器都是阿里的，这里推荐还是搞腾讯的吧，阿里虽然便宜坑蛮多的。</strong></p><p><a href="https://www.aliyun.com/">阿里云</a></p><p><strong>正常买域名和服务器备案即可，时间大概得一个月吧。</strong></p><h2 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h2><blockquote><p>之前是在git仓库跑起来的，后来觉得速度太慢就从阿里买了服务器和域名。</p><p>Linux这块真是卡了我好久 orz  这里参考了很多优秀博客文章。</p></blockquote><h3 id="生成git公钥"><a href="#生成git公钥" class="headerlink" title="生成git公钥"></a><strong>生成git公钥</strong></h3><p>在本地WIN10系统里弄</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">直接回车三次就行。</span><br></pre></td></tr></table></figure><p> <strong>生成的文件默认在~/.ssh目录中，看到有id_rsa，id_rsa.pub这些文件即可，Win10中就是 我的电脑/C盘/用户/你自己的用户名/.shh/ 就可以看到了 ！</strong></p><h3 id="阿里云Centos搭建环境"><a href="#阿里云Centos搭建环境" class="headerlink" title="阿里云Centos搭建环境"></a><strong>阿里云Centos搭建环境</strong></h3><p><strong>注意：这是在你远程链接阿里云服务器后</strong>！！！</p><p>下个Xhell5，哈哈因为5免费。</p><p><strong>安装git</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><p><strong>创建git账户（这部分基本Linux学习范围了，仅供参考）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure><p><strong>添加用户权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers   //vim 是编辑的意思</span><br><span class="line">ESC键 :set nu 然后 i 是编辑的意思</span><br><span class="line">ESC键 :wq 是保存退出</span><br></pre></td></tr></table></figure><p><strong>添加以下内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ALL = (ALL)  ALL</span><br></pre></td></tr></table></figure><p><strong>保存退出并修改权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><p><strong>设置git账户密码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure><p><strong>切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br><span class="line"># 然后将win10中生成的id_rsa.pub文件中的公钥复制到authorized_keys</span><br><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure><p><strong>在本地Git终端中测试是否能免密登录git，其中SERVER为填写自己的云主机IP，执行输入yes后不用密码就说明好了</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 注意此步骤跟xshell无关 是本机电脑用 git bash </span><br><span class="line">ssh -v git@SERVER</span><br><span class="line">server是你的服务器公共地址</span><br></pre></td></tr></table></figure><p><strong>创建目录 回到xshell</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#repo作为为Git仓库目录</span><br><span class="line">mkdir /var/repo</span><br><span class="line">chown -R git:git /var/repo</span><br><span class="line">chmod -R 755 /var/repo</span><br><span class="line">#hexo作为网站根目录</span><br><span class="line">mkdir /var/www/hexo</span><br><span class="line">chown -R git:git /var/www/hexo</span><br><span class="line">chmod -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure><p><strong>然后创建一个裸的 Git 仓库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd var/repo</span><br><span class="line">git init --bare hexoBlog.git</span><br></pre></td></tr></table></figure><p> 创建一个新的 Git 钩子，用于自动部署<br>在 /var/repo/hexoBlog.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p><strong>按 i 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录（配置文件等</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/hexoBlog.git checkout -f</span><br></pre></td></tr></table></figure><p><strong>修改文件权限，使得其可执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/repo/hexoBlog.git/hooks/post-receive</span><br><span class="line">chmod +x /var/repo/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>到这里，我们的 Git 仓库算是完全搭建好了。下面进行 Nginx 的配置。</p><h2 id="阿里云Centos配置Nginx"><a href="#阿里云Centos配置Nginx" class="headerlink" title="阿里云Centos配置Nginx"></a>阿里云Centos配置Nginx</h2><p><strong>注意： Linux面板6.0安装命令(暂时仅兼容Centos7.x，其它系统版本请安装5.9稳定版) ，这块就看你在买服务器时候选的系统版本。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><p>**Linux面板6.0升级专业版 **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://download.bt.cn/install/update6.sh|bash</span><br></pre></td></tr></table></figure><p> 安装完成后会显示面板后台地址·账号·密码。</p><p>打开面板后台地址登陆面板，选择Nginx的部署方案，静静等待部署。<br>部署完成，点击网站-添加站点-输入域名(没有域名的输入自己的IP地址)-底部的PHP版本选择”纯静态”(其他不改<br>或者根据自己的习惯来改)-提交。<br>网站创建完成后点击设置-配置文件 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    # server_name 填写自己的域名</span><br><span class="line">    server_name ali6.cn blog.ali6.cn;</span><br><span class="line">    index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    # 这里root填写自己的网站根目录，修改为/var/www/hexo</span><br><span class="line">    root /var/www/hexo;</span><br></pre></td></tr></table></figure><p>保存</p><p>点击设置-网站目录，修改为/var/www/hexo ，保存</p><p>重启宝塔面板服务，面板上有重启键，点下就行，都是图形界面简单。</p><h2 id="本地Win10安装部署Hexo"><a href="#本地Win10安装部署Hexo" class="headerlink" title="本地Win10安装部署Hexo"></a>本地Win10安装部署Hexo</h2><p><strong>配置git本地</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#定义邮箱(更换为你的邮箱地址就行)</span><br><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">#定义名称(更换自定义一个名称就行)</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure><p><strong>更改你博客里面的配置文件_config.yml</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  #server改为你的服务IP地址或解析后的域名</span><br><span class="line">  #例如我改为repo: git@mcweblog.com:/var/repo/blog.git</span><br><span class="line">  repo: git@server:/var/repo/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="博客速度优化"><a href="#博客速度优化" class="headerlink" title="博客速度优化"></a>博客速度优化</h2><p><strong>用的是3.9的gulp，4.0的不会….</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g gulp@3.9.1   //或者</span><br><span class="line">npm install --save-dev gulp@3.9.1</span><br></pre></td></tr></table></figure><p><strong>安装5个模块</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br></pre></td></tr></table></figure><h5 id="添加gulpfile-js（在博客根目录下）"><a href="#添加gulpfile-js（在博客根目录下）" class="headerlink" title="添加gulpfile.js（在博客根目录下）"></a>添加gulpfile.js（在博客根目录下）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">minifycss</span>(&#123;</span><br><span class="line">            <span class="attr">compatibility</span>: <span class="string">&#x27;ie8&#x27;</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-js&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/js/**/*.js&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-images&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/images/**/*.*&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">imagemin</span>(</span><br><span class="line">        [imagemin.<span class="title function_">gifsicle</span>(&#123;<span class="string">&#x27;optimizationLevel&#x27;</span>: <span class="number">3</span>&#125;), </span><br><span class="line">        imagemin.<span class="title function_">jpegtran</span>(&#123;<span class="string">&#x27;progressive&#x27;</span>: <span class="literal">true</span>&#125;), </span><br><span class="line">        imagemin.<span class="title function_">optipng</span>(&#123;<span class="string">&#x27;optimizationLevel&#x27;</span>: <span class="number">7</span>&#125;), </span><br><span class="line">        imagemin.<span class="title function_">svgo</span>()],</span><br><span class="line">        &#123;<span class="string">&#x27;verbose&#x27;</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/images&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;minify-html&#x27;</span>,<span class="string">&#x27;minify-css&#x27;</span>,<span class="string">&#x27;minify-js&#x27;</span>,<span class="string">&#x27;minify-images&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><blockquote><p>hexo g 或者 hexo g &amp;&amp; gulp </p></blockquote><p><strong>注意：nodejs需要10.0以下版本</strong></p><p>坑还是挺多的，有空在继续写。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hexo生成&quot;&gt;&lt;a href=&quot;#Hexo生成&quot; class=&quot;headerlink&quot; title=&quot;Hexo生成&quot;&gt;&lt;/a&gt;Hexo生成&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>网站收录</title>
    <link href="http://example.com/2019/07/07/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/"/>
    <id>http://example.com/2019/07/07/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/</id>
    <published>2019-07-07T14:22:44.000Z</published>
    <updated>2022-03-28T12:22:09.411Z</updated>
    
    <content type="html"><![CDATA[<p>测试pc端</p><h2 id="常用工具网站"><a href="#常用工具网站" class="headerlink" title="常用工具网站"></a>常用工具网站</h2><ul><li><a href="https://imgchr.com/">路过图床</a></li><li><a href="https://smallpdf.com/cn">在线转pdf文档</a></li><li><a href="https://www.bootcdn.cn/">BootCdn</a></li><li><a href="https://www.mspeed19.com/">喵MSS翻墙</a></li><li><a href="https://www.toolfk.com/">toolfk在线转换工具以及相关文档</a></li><li><a href="http://mackxin.com/nav.html#xin13">馨客栈</a></li><li><a href="https://www.cnblogs.com/pengchenggang/p/10349622.html">vscode打开新文件不替换旧文件</a></li><li><a href="http://tools.jb51.net/#home">脚本之家和相关技术文档</a></li><li><a href="https://www.itjc8.com/">IT教程吧</a></li><li><a href="https://w3techs.com/technologies/overview/javascript_library/all">相关框架库技术统计</a></li><li><a href="https://www.emojicopy.com/#emojicodes">emoji表情</a></li><li><a href="http://haojen.github.io/2016/09/03/Emoji-Demo/">emoji表情包使用方法</a></li><li><a href="https://blog.csdn.net/qq_22551385/article/details/82287502">vscode预览模式问题</a></li><li><a href="https://blog.51cto.com/zlong37/1975418">集成终端改成cmd</a></li><li><a href="https://codesandbox.io/">开发沙盒工具</a></li></ul><h2 id="前端学习文档"><a href="#前端学习文档" class="headerlink" title="前端学习文档"></a>前端学习文档</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/">MDN</a></li><li><a href="https://wangdoc.com/">网道</a></li><li><a href="https://humanwhocodes.com/">国外技术博客</a></li><li><a href="http://www.ecma-international.org/ecma-262/5.1/index.html#sec-11.2.5">ES5学习规范</a></li><li><a href="http://www.html5plus.org/doc/zh_cn/webview.html">H5+官网</a></li><li><a href="https://github.com/JacksonTian/fks">前端路线</a></li><li><a href="http://nav.web-hub.cn/">前端网站大全</a></li><li><a href="https://www.zhangxinxu.com/">张鑫旭博客</a></li><li><a href="https://www.html.cn/">HTML学习网</a></li><li><a href="http://www.pianshen.com/">程序员大本营</a></li><li><a href="https://www.jqhtml.com/category/article/framework">hello girl</a></li><li><a href="http://www.html5plus.org/doc/zh_cn/camera.html">H5+</a></li><li><a href="https://www.jianshu.com/p/288963680642">postcss学习</a></li><li><a href="https://www.omyleon.com/">web学习博客</a></li><li><a href="https://www.jianshu.com/u/cb593334c8bc">it老马</a></li><li><a href="http://komavideo.com/">小马视频</a></li><li><a href="https://stackoverflow.com/">国外问题技术论坛</a></li><li><a href="https://www.jianshu.com/p/97ba64888894">Postman教程大全 - 简书</a></li><li><a href="https://github.com/fouber/blog/issues/10">前端工程——基础篇 · Issue #10 · fouber/blog · GitHub</a></li></ul><h2 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h2><ul><li><a href="https://www.jianshu.com/p/c06fa1e1282a">Nodejs配置环境变量</a></li><li><a href="https://www.cnblogs.com/benpaodexiaopangzi/p/5856642.html">热部署</a></li></ul><h2 id="JavaScript技术文档"><a href="#JavaScript技术文档" class="headerlink" title="JavaScript技术文档"></a>JavaScript技术文档</h2><ul><li><a href="https://www.cnblogs.com/diligenceday/p/4175721.html">DOM几级事件文档</a></li><li><a href="https://www.jianshu.com/p/8c41a302bb17">DOM事件级别</a></li><li><a href="https://blog.csdn.net/qq_35087256/article/details/82669618">JS中的super和this</a></li><li><a href="https://juejin.im/post/5c52da9ee51d45221f242804#heading-5">前端路由跳转原理</a></li><li><a href="https://blog.csdn.net/u010176097/article/details/80348447">call、apply、bind区别</a></li><li><a href="https://www.cnblogs.com/blogs-8888/p/6518683.html">js中操作数组一些方法</a></li><li><a href="https://segmentfault.com/a/1190000016068235">es6学习笔记</a></li><li><a href="https://www.jianshu.com/p/e375ba1cfc47">js reduce使用</a></li><li><a href="https://tomotoes.com/blog/simplified-chinese-and-traditional-chinese-switching/">繁简切换字体</a></li><li><a href="https://www.cnblogs.com/mengfangui/p/9150458.html">es6动态计算属性名</a></li></ul><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><ul><li><a href="https://www.jianshu.com/p/81078efbef47">Ajax请求PHP接口</a></li><li><a href="https://www.cnblogs.com/lauhp/p/8979393.html">HTTP简介</a></li><li><a href="https://www.cnblogs.com/Brose/p/cors_ajax_withCredentials_firefox.html">ajax withCredentials在firefox下问题的解释</a></li><li><a href="https://www.cnblogs.com/twoeggg/p/8046183.html">跨域三种解决方式</a></li><li><a href="https://www.cnblogs.com/52fhy/p/5436673.html">http相关</a></li><li><a href="https://blog.csdn.net/fxbin123/article/details/80428216">postman相关</a></li></ul><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><ul><li><a href="https://www.jqhtml.com/6750.html">viewer图片插件</a></li><li><a href="https://api.jquery.com/category/attributes/">jQuery文档</a></li><li><a href="https://www.cnblogs.com/cqlb/p/9118186.html">jQuery获取当前屏幕各种高度</a></li></ul><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><ul><li><a href="https://ustbhuangyi.github.io/vue-analysis/">vue.js技术揭秘</a></li><li><a href="https://cli.vuejs.org/zh/">VUE-CLI构建工具</a></li><li><a href="https://segmentfault.com/a/1190000011007043">vue-cli本地环境API代理设置和解决跨域</a></li><li><a href="https://blog.csdn.net/qq_33295794/article/details/79024915">vue全家桶介绍</a></li><li><a href="https://blog.csdn.net/weixin_33908217/article/details/86025085">vue获取自定义属性的值</a></li><li><a href="https://www.zhihu.com/question/51907207">Vue2.0 中，“渐进式框架”和“自底向上增量开发的设计”这两个概念是什么？</a></li><li><a href="https://www.cnblogs.com/lemoncool/p/9645587.html">解决Vuex持久化插件-在F5刷新页面后数据不见的问题</a></li><li><a href="https://blog.csdn.net/sayoko06/article/details/85321802">hash和history区别</a></li><li><a href="https://www.cnblogs.com/lulianlian/p/7682790.html"> vue 路由传参 params 与 query两种方式的区别</a></li><li><a href="https://www.cnblogs.com/snowhite/p/7872503.html">vue中使用axios跨域</a></li><li><a href="https://www.jianshu.com/p/6262772bdc9c">vue首次加载缓慢解决办法</a></li><li><a href="https://www.cnblogs.com/ajuan/p/10070908.html">VUE浏览器关闭时清空localstrorge</a></li><li><a href="https://blog.csdn.net/dkr380205984/article/details/82185740">state,mapState,…mapState对象展开符详解</a></li><li><a href="https://www.cnblogs.com/hity-tt/p/7169307.html">基于vue的SPA单页面开发—性能篇</a></li><li><a href="https://blog.csdn.net/sone_yoonyul/article/details/78421717">使用vue默认选中单选框</a></li><li><a href="https://www.cnblogs.com/LoveAndPeace/p/7273648.html">vue组件中传值</a></li><li><a href="https://www.cnblogs.com/xiaotanke/p/7427636.html">vue中兄弟组件传值</a></li><li><a href="https://blog.csdn.net/wang_meiwei/article/details/75948844">vue2.0子同级之间组件交互</a></li><li><a href="https://blog.csdn.net/wxl1555/article/details/84646832">vue – 非父子组件传值，事件总线（eventbus）的使用方式</a></li><li><a href="https://blog.csdn.net/qq_36575992/article/details/80338538">axios使用学习</a></li><li><a href="https://segmentfault.com/a/1190000015684864">vue和微信小程序区别</a></li><li><a href="https://blog.csdn.net/zmkyf1993/article/details/80320802">vue中子组件methods获取props中的值</a></li><li><a href="https://www.cnblogs.com/beka/p/8583924.html">v-router路由传参</a></li><li><a href="https://blog.csdn.net/meng_suiga/article/details/77840890">vue实现双向绑定原理</a></li><li><a href="https://blog.csdn.net/huangxiaoguo1/article/details/80163585">vue实现Mint-ui实现下拉刷新</a></li><li><a href="https://www.cnblogs.com/liaoanran/p/8042893.html">用cli搭个项目</a></li><li><a href="https://www.jianshu.com/p/22f214bb4294?tdsourcetag=s_pcqq_aiomsg">vue在自定义组件中使用v-model</a></li><li><a href="https://www.cnblogs.com/shiningly/p/9471067.html">vue中watch详细用法</a></li><li><a href="https://www.jianshu.com/p/cc4253745b0f">vue.js做国际化</a></li><li><a href="https://www.jianshu.com/p/0d78ff9fe6ed">vue3.0使用</a></li><li><a href="https://www.jianshu.com/p/6c6cc02a9001">关于 The template root requires exactly one element 报错的解决方案</a></li></ul><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul><li><a href="http://react.shengxinjing.cn/">蜗牛老师</a></li></ul><h2 id="angular"><a href="#angular" class="headerlink" title="angular"></a>angular</h2><ul><li><a href="https://angular.io/cli">官网</a></li></ul><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><ul><li><a href="https://blog.csdn.net/cris_zz/article/details/82911393#_5">史上最完美的 markdown 配置全流程</a></li><li><a href="https://blog.csdn.net/cris_zz/article/details/82911393#_5">Markdown基本语法</a></li><li><a href="https://blog.csdn.net/cris_zz/article/details/82919401">typora用法</a></li><li><a href="https://blog.csdn.net/testcs_dn/article/details/45719357/#comments">Markdown编辑器语法</a></li><li><a href="https://www.jianshu.com/p/b421cc723da5">画流程图</a></li><li><a href="https://blog.csdn.net/lis_12/article/details/80693975">画图</a></li></ul><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/">官网</a></li></ul><h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html">官网</a></li><li><a href="https://blog.csdn.net/u011973968/article/details/80367921">微信小程序开发问题汇总</a></li><li><a href="https://segmentfault.com/a/1190000017288987">记录使用微信小程序的开发过程中遇到的各种难点及教程（不定时更新）</a></li><li><a href="https://segmentfault.com/a/1190000017288987">webview详解</a></li><li><a href="https://www.jianshu.com/p/d3edf5fa51cb?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation">webview使用</a></li><li><a href="https://blog.csdn.net/kingrome2017/article/details/80499184">微信小程序开发者文档 API 面试问答宝典</a></li><li><a href="https://blog.csdn.net/kingrome2017/article/details/80499184">微信小程序面试相关</a></li><li><a href="https://blog.csdn.net/sophie_u/article/details/71745125">微信小程序Tab选项卡：左右相互切换</a></li><li><a href="https://www.jianshu.com/p/04bf1103e40a">小程序自定义tabbar</a></li></ul><h2 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h2><p><a href="https://uniapp.dcloud.io/api/router?id=animation">官网</a></p><h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><ul><li><a href="https://www.cnblogs.com/qingqinglanlan/p/8334481.html">echarts配置相关</a></li></ul><h2 id="面试相关"><a href="#面试相关" class="headerlink" title="面试相关"></a>面试相关</h2><ul><li><a href="https://blog.csdn.net/valada/article/details/89472483?utm_source=feed1904231">前端面试</a></li><li><a href="https://www.cnblogs.com/ahao68/p/5431250.html">对css兼容性问题认识和解决</a></li><li><a href="https://www.cnblogs.com/haoyijing/p/5789348.html">前端面试题整理</a></li><li><a href="https://www.cnblogs.com/haoyijing/p/5815394.html#css1">css常见布局问题整理</a></li></ul><h2 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h2><ul><li><a href="https://blog.csdn.net/valada/article/details/89472483?utm_source=feed1904231">移动端H5适配</a></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul><li><a href="https://www.cnblogs.com/5201351/p/4208277.html">Linux清屏几种方式</a></li><li><a href="https://mirrors.ustc.edu.cn/">Another infinity系统下载站</a></li><li><a href="https://jingyan.baidu.com/article/cbf0e50091dd362eaa2893e3.html">vm报错</a></li><li><a href="https://zhidao.baidu.com/question/1578182316614871500.html">linux怎么通过shell查找到某一个文件的绝对路径</a></li></ul><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><ul><li><a href="https://blog.csdn.net/weixin_42420703/article/details/81384901">js实现Base64编码以及解码</a></li><li><a href="https://blog.csdn.net/weixin_42420703/article/details/88422441">js中的btoa和atob函数</a></li></ul><h2 id="手机底层"><a href="#手机底层" class="headerlink" title="手机底层"></a>手机底层</h2><ul><li><a href="https://blog.csdn.net/qq_36538012/article/details/79805673">H5调用底层知识</a></li><li><a href="https://blog.csdn.net/super_DuoLa/article/details/90207965">网页中实现安卓手机在线预览PDF文件</a></li></ul><h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><ul><li><a href="http://106.14.196.85:8888/cbe837e2/">宝塔面板</a></li><li><a href="https://blog.csdn.net/qq_38378384/article/details/79876344">用GitHub搭建一个自己网站</a></li><li><a href="https://juejin.im/entry/59ba97216fb9a00a6b6e50bf">hexo主题开发详谈</a></li><li><a href="https://github.com/hakimel/reveal.js/">把markdown变成PPT</a></li><li><a href="https://valine.js.org/#/configuration">valine评论</a></li><li><a href="http://106.14.196.85:8888/">宝塔地址</a></li><li><a href="https://segmentfault.com/a/1190000015131514?utm_source=tag-newest">用vue搭建博客</a></li><li><a href="https://www.jianshu.com/p/e1ccd49b4e5d">部署阿里云</a></li><li><a href="https://qiming.info/%E9%98%BF%E9%87%8C%E4%BA%91CentOS%E4%B8%8BHexo+Nginx%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B/">阿里云CentOS下Hexo+Nginx建站过程</a></li><li><a href="https://www.jianshu.com/p/0f9dfa9c141b">阿里云Centos7+Nginx部署Hexo静态博客</a></li><li><a href="https://juejin.im/post/5c7f66bff265da2db4144ba2">在 CentOS 系统服务器上利用 Hexo 和 Nginx 搭建个人博客</a></li><li><a href="https://www.cnblogs.com/fly_dragon/p/8718614.html"><a href="https://www.cnblogs.com/fly_dragon/p/8718614.html">CentOS搭建Git服务器及权限管理</a></a></li><li><a href="https://www.jianshu.com/p/70bf58c48010">HEXO 部署到云服务器详细指南</a></li><li><a href="https://www.jianshu.com/p/93b63852f0b3">Hexo博客之速度优化</a></li><li><a href="https://jerryc.me/">butterfly主题博客详细设置</a></li><li><a href="http://106.14.196.85:8888/">宝塔面板后台</a></li></ul><h2 id="Pets3"><a href="#Pets3" class="headerlink" title="Pets3"></a>Pets3</h2><ul><li><a href="http://tiku.ek100.cn/Learn/Index/433?Token=$Token$">未来教育刷题库</a></li></ul><h2 id="nas"><a href="#nas" class="headerlink" title="nas"></a>nas</h2><ul><li><a href="https://jingyan.baidu.com/article/ce43664932610f3773afd32f.html">怎么用群晖webdav实现外网映射网络驱动器</a></li><li><a href="http://littleroach110.net/2018/05/30/Personal-NAS-Server.html">基于Gen10和黑群晖的个人NAS服务器构建</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="http://miaosu.ys168.com/">miaoss翻墙下载地址</a></li><li><a href="https://www.processon.com/">在线作流程图网站</a></li><li><a href="https://www.typingclub.com/">打字俱乐部（练习打字速度）</a></li><li><a href="https://www.cnblogs.com/beli/p/6297741.html">十大排序算法</a></li><li><a href="https://segmentfault.com/q/1010000011384017">网站多语言实现</a></li><li><a href="https://www.cnblogs.com/ywffoo/p/5984590.html">F12防止扒代码</a></li><li><a href="https://segmentfault.com/a/1190000008168184">Iview作者自述</a></li><li><a href="https://www.xiaokesoso.com/s/search?q=es6&currentPage=1">小可搜搜技术文档相关</a></li><li><a href="https://www.jianshu.com/p/d0472c608d2f">开发环境和生产环境区别</a></li><li><a href="http://code.tarena.com.cn/WEBCode/wfd1810/">笔记下载</a></li><li><a href="http://jxjygl.bjut.edu.cn/entity/student/main_frame.jsp">工大网址</a></li><li><a href="https://doc.apipost.cn/4a77c87f97fb686b">APIpost使用文档</a></li><li><a href="https://blog.csdn.net/qq_33745501/article/details/80271129">npm安装时–save 和 –dev区别</a></li><li><a href="https://blog.csdn.net/xiaomobeila/article/details/54945844">Hbuilder使用文档</a></li><li><a href="http://niuini.com/">NUUINI3D模型网</a></li><li><a href="http://bm.ruankao.org.cn/sign/welcome">计算机软考</a></li><li><a href="https://github.com/bytebook/blog">总结的项目库</a></li><li><a href="https://segmentfault.com/a/1190000015646531">解决npm ERR! Unexpected end of JSON input while parsing near的方法汇总</a></li><li><a href="https://www.jianshu.com/p/caa1801213ee">gulp4降低版本</a></li><li><a href="https://squoosh.app/">图片瘦身</a></li><li><a href="https://www.snipaste.com/">截屏工具</a></li><li><a href="http://www.net.cn/static/customercare/yourip.asp">万网获取本地公网ip地址</a></li><li><a href="https://www.bootcss.com/p/git-guide/">git操作简易指南</a></li><li><a href="https://blog.csdn.net/xvshu/article/details/80571897">二维码登录概要设计</a></li><li><a href="https://www.cnblogs.com/meishandehaizi/p/5863241.html">使用sentry集中管理</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/">docker学习</a></li><li><a href="https://blog.csdn.net/weixin_42703239/article/details/81638325">超链打开QQ对话框</a></li><li><a href="https://www.html.cn/doc/webpack2/">webpack学习文档</a></li><li><a href="https://blog.csdn.net/sma2mmm/article/details/83827813">webpack学习</a></li><li><a href="https://cloud.tencent.com/document/product/382/9557">腾讯云短信学习</a></li><li><a href="https://www.w3cplus.com/mobile/vw-layout-in-vue.html">移动端适配</a></li><li><a href="https://github.com/whxaxes/node-test">实例资料</a></li><li><a href="https://www.myperfectresume.com/">简历制作</a></li><li><a href="https://blog.csdn.net/qq_38698753/article/details/93190356">vscode使用技巧</a></li><li><a href="http://miaosu.ys168.com/">秒速翻墙</a></li></ul><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><ul><li><a href="https://www.bilibili.com/video/av27791861">零基础快速入门自学48个国际音标元音辅音发音读法_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li><li><a href="https://www.bilibili.com/video/av69564237">不死记硬背如何快速掌握英语入门日常1500基础词汇量的背单词方法_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li><li><a href="https://www.bilibili.com/video/av51510495">2019英语零基础语法入门班,系列自学课程之初高中英语语法_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li></ul><h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><ul><li><a href="http://bbs.itzmx.com/thread-19539-1-1.html"><strong>SSTAP游戏加速器搭建一个自己的服务端教程</strong></a></li><li><a href="https://www.993dy.com/">LOL电影天堂</a></li><li><a href="https://www.hdchina.net/">HDCHINA</a></li><li><a href="http://www.4kjia.com/4kuhd">4k家园</a></li><li><a href="http://www.4btbtt.com/">bt之家</a></li><li><a href="https://wallhaven.cc/">国外壁纸站</a></li><li><a href="https://wallhere.com/zh/login">国外壁纸站</a></li><li><a href="https://unsplash.com/">Unsplash 图库</a></li><li><a href="https://pics.alphacoders.com/,https://wall.alphacoders.com/">img深渊</a></li><li><a href="http://www.mangabz.com/">Mangbz漫画网</a></li><li><a href="http://www.yinfans.me/">4K电影网</a></li></ul><h2 id="偷个懒"><a href="#偷个懒" class="headerlink" title="偷个懒"></a>偷个懒</h2><ul><li><p><a href="http://code.tarena.com.cn/">code.tarena.com.cn</a></p><p><a href="https://blog.csdn.net/Li_dengke/article/details/101385345">Vue项目打包成移动端APP_JavaScript_追梦&amp;天空的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/ljy-/articles/12131510.html">uni-app引入官方uni.css样式库 - 本溢 - 博客园</a></p><p><a href="https://daneden.github.io/animate.css/">Animate.css</a></p><p><a href="https://www.cnblogs.com/putao1/p/10141875.html">uni-app的专属强大自适应单位upx，但是这个这是一个大坑，不能动态赋值解决办法 - 蒲涛- - 博客园</a></p><p><a href="https://www.cnblogs.com/wuyuchao/p/8483919.html">大型vue单页面项目优化总结 - 卢沟晓月 - 博客园</a></p><p><a href="https://192.168.0.101:5001/">苗宸</a></p><p><a href="http://www.itmk8.com/forum.php?mod=forumdisplay&fid=37&page=1">web前端IT慕课吧 -</a></p><p><a href="https://blog.csdn.net/xr510002594/article/details/82683693">(3条消息)关于Invalid prop: type check failed for prop row. Expected String, got Object.的问题及审查办法_JavaScript_Dreamer_xr的博客-CSDN博客</a></p><p><a href="https://tool.lu/">在线工具 - 程序员的工具箱</a></p><p><a href="https://xoyozo.net/Blog/Details/dcloud-uni-app-debug">使用 DCloud 工具 HBuilder X 开发 uni-app 项目踩过的一些坑 - XOYOZO</a></p><p><a href="https://www.pinterest.com.mx/pin/807692514405845761/?nic_v1=1aYW2AJ38IlmV4VEa4FE/r92b95PbMvG/cYpoXNkKLVdQ90D8sJvJbPYLmUDIZCAsi">(58) Pinterest</a></p><p><a href="https://caniuse.com/#home">Can I use… Support tables for HTML5, CSS3, etc</a></p><p><a href="https://www.pexels.com/video/waves-rushing-to-the-shore-1128104/">Waves Rushing To The Shore · Free Stock Video</a></p><p><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm">NPM镜像-NPM下载地址-NPM安装教程-阿里巴巴开源镜像站</a></p><p><a href="https://developer.aliyun.com/learning/roadmap/frontend?spm=a2c6h.12883283.1362935.3.200e201cKC05sh">前端开发学习路线（学+测） - 阿里云开发者社区</a></p><p><a href="https://developer.aliyun.com/?spm=a2c6h.14029880.1364563.1.735975d7rdYalA">阿里云开发者社区-阿里云官网开发者社区_云计算社区</a></p><p><a href="https://www.bilibili.com/video/BV1hW411i7wK?from=search&seid=3646154184767855781">毕业论文格式设置方法（Microsoft word）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p><a href="https://www.jianshu.com/p/0c1c288ee8fc">marquee 标签参数详细说明 - 简书</a></p><p><a href="https://ask.dcloud.net.cn/docs/">文档 - DCloud问答</a></p><p><a href="http://127.0.0.1:5500/page.html">消息</a></p><p><a href="https://blog.csdn.net/qq_34926773/article/details/77861832">(3条消息)大三期末前端页面开发论文_JavaScript_qq_34926773的博客-CSDN博客</a></p><p><a href="https://baijiahao.baidu.com/s?id=1635111761268888039&wfr=spider&for=pc">直接拿来用！前端如何快速实现跨平台开发？</a></p><p><a href="https://www.cnblogs.com/suihang/p/10998997.html">uni-app中onLoad不起作用 - 一只菜鸟攻城狮啊 - 博客园</a></p><p><a href="https://www.jb51.net/article/72680.htm">Navicat for MySQL(mysql图形化管理工具)是什么？_Mysql_脚本之家</a></p><p><a href="https://www.jianshu.com/p/7125360f3d2a">uni-app开发app之一uni-app优缺点 - 简书</a></p><p><a href="https://cli.im/">草料二维码生成器</a></p><p><a href="http://www.ruanyifeng.com/blog/2020/01/deno-intro.html">Deno 运行时入门教程：Node.js 的替代品 - 阮一峰的网络日志</a></p><p><a href="https://www.52pojie.cn/thread-1063977-1-1.html">求uni-app实战仿微信app开发全套 - 『悬赏问答区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p><a href="https://learnku.com/articles/34942">uni-App 仿微信 App 即时通讯|vue+uniapp 聊天 | Vue.js 技术论坛</a></p><p><a href="https://github.com/YuPeng1115/uni-app-miliao">YuPeng1115/uni-app-miliao: 基于uni-app开发的与机器人聊天界面，跨平台多端开发H5/微信小程序/APP等的单应用程序。</a></p><p><a href="https://www.zhihu.com/question/27024197?sort=created">简洁的界面怎么样让用户觉得很有细节？ - 知乎</a></p><p><a href="https://wenku.baidu.com/view/83899998f705cc17552709ba.html">软件开发基本原则 - 百度文库</a></p><p><a href="http://www.360doc.com/content/15/0310/10/15989917_453992159.shtml">软件开发基本原则</a></p><p>[VideoSrt - 自动识别,为视频生成中英字幕<a href="https://www.appinn.com/videosrt-for-windows/">Win 开源] - 小众软件</a></p><p><a href="https://zhidao.baidu.com/question/377513684.html">linux 下目录的含义，比如lib是放什么文件的，还有dev什么的，有好几个文件名称，都分别是什么意思_百度知道</a></p><p><a href="https://www.php.cn/php-weizijiaocheng-416401.html">如何在Windows上安装PHP7？-php教程-PHP中文网</a></p><p><a href="https://blog.csdn.net/weixin_44542598/article/details/86504818">vscode 打开新文件覆盖窗口，始终显示一个窗口_开发工具_weixin_44542598的博客-CSDN博客</a></p><p><a href="https://www.xiwnn.com/">茜文的博客</a></p><p><a href="http://www.1ppt.com/tags/2556/">论文答辩PPT - 第一PPT</a></p><p><a href="https://zhidao.baidu.com/question/200567393.html">JAVA中protected的作用_百度知道</a></p><p><a href="https://www.bt.cn/bbs/thread-21690-1-1.html">SSH连接失败的解决办法 - Linux面板 - 宝塔面板论坛</a></p><p>[使用composer提示<a href="https://www.tuhongwei.com/web/414">ErrorException]proc_get_status() has been disabled for security reasons的解决方法 | 涂红伟</a></p><p><a href="https://blog.csdn.net/weixin_41326021/article/details/81004981">微信小程序开发聊天室——实时聊天，支持图片预览_网络_weixin_41326021的博客-CSDN博客</a></p><p><a href="http://106.14.196.85:8888/">宝塔Linux面板</a></p><p><a href="https://blog.csdn.net/fengtao0821/article/details/106355066">✍Hexo博客搭建✍搭建个人博客Hexo框架出现hexo:无法加载文件脚本文件解决方案_fengtao0821的博客-CSDN博客_hexo:无法加载文件c:\users\覃海冰\appdata\roaming\npm\hex</a></p><p><a href="http://xh.5156edu.com/page/z1015m9220j18754.html">颜色表及html代码</a></p><p><a href="https://www.jianshu.com/p/84568e364ee8">深入理解什么是RESTful API ？ - 简书</a></p><p><a href="https://blog.csdn.net/jiezhang656/article/details/102573935">关于前后端分离的几点学习_jiezhang656的专栏-CSDN博客</a></p><p><a href="https://www.zhihu.com/question/304700221/answer/549267236">为什么苹果允许用户安装未受信任的企业级开发者所开发的软件？ - 知乎</a></p><p><a href="https://uniapp.dcloud.io/frame?id=%E5%B0%BA%E5%AF%B8%E5%8D%95%E4%BD%8D">框架简介 - uni-app官网</a></p></li></ul><p><a href="https://www.yujianxinliu.com/ecy/826.html">《Wallpaper Engine》动态壁纸推荐：静守时光，以待流年_ACG资源「遇见心流」</a></p><p><a href="https://segmentfault.com/a/1190000017342116">Vue学习路线图 - 个人文章 - SegmentFault 思否</a></p><p><a href="http://www.kaoshi5.com/">2020年考试时间表 - 各种证书考证日历安排</a></p><p><a href="https://petschko.org/tools/mv_decrypter/#restore-images">Petschko的RPG-Maker-MV解密器</a></p><p><a href="https://blog.csdn.net/llwy1428/article/details/92834705">谷歌浏览器截取长屏幕（全屏截图）_一花一世界-CSDN博客_谷歌浏览器长截图</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;测试pc端&lt;/p&gt;
&lt;h2 id=&quot;常用工具网站&quot;&gt;&lt;a href=&quot;#常用工具网站&quot; class=&quot;headerlink&quot; title=&quot;常用工具网站&quot;&gt;&lt;/a&gt;常用工具网站&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://imgchr.com/&quot;&gt;路过图床&lt;</summary>
      
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="工具网站" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript（下）</title>
    <link href="http://example.com/2019/07/05/JavaScript%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://example.com/2019/07/05/JavaScript%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2019-07-05T06:16:52.000Z</published>
    <updated>2022-03-28T12:14:44.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RegEXP对象"><a href="#RegEXP对象" class="headerlink" title="RegEXP对象"></a>RegEXP对象</h2><ul><li><p>什么是: 专门保存一条正则表达式，并提供用<strong>正则表达式执行验证</strong>和<strong>查找功能的API</strong> 的对象</p></li><li><p>何时: 只要在程序中保存一条正则表达式或使用正则表达式<strong>执行验证</strong>和<strong>查找</strong>时</p><p><strong>两种创建方式</strong></p></li><li><p><code>用//: var reg=/正则/ig</code><br>问题: 正则是写死的，无法再运行时动态生成正则表达式</p></li><li><p><code>用new: var reg=new RegExp(“正则”,”ig”)</code><br>好处: 参数是一个字符串格式的正则表达式，所以可以用任何程序的手段先动态生成字符串，再传给new RegExp变为正则表达式对象——动态生成正则<br><strong>API:</strong> </p><ol><li><p>验证: 验证一个字符串的格式是否符合正则表达式的要求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool=reg.<span class="title function_">test</span>(str)</span><br><span class="line">验证str是否符合reg的格式要求</span><br><span class="line">问题: test其实是只要找到符合规则的，就返回<span class="literal">true</span>，不要求从头到尾完整匹配</span><br><span class="line">比如: <span class="regexp">/\d&#123;6&#125;/</span>.<span class="title function_">test</span>(“123456a”) -&gt; <span class="literal">true</span></span><br><span class="line">解决: 今后只要验证，必须前加^，后加$，表示必须从头到尾完全匹配才行</span><br><span class="line">比如: <span class="regexp">/^\d&#123;6&#125;$/</span>.<span class="title function_">test</span>(“123456a”) -&gt; <span class="literal">false</span></span><br><span class="line">   其实: reg.<span class="title function_">test</span>()也可判断一句话中是否包含敏感词，且更简单。</span><br><span class="line">比如: <span class="keyword">if</span>(reg.<span class="title function_">test</span>(msg)) 如果msg中包含符合eg的敏感词</span><br></pre></td></tr></table></figure></li><li><p>查找: 既查找每个关键词的内容，又查找每个关键词的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=reg.<span class="title function_">exec</span>(str)</span><br><span class="line"> 让reg去str中找下一个符合规则的关键词的内容和位置</span><br><span class="line"> 返回值: 和str.<span class="title function_">match</span>()不加g的情况是一样的</span><br><span class="line">arr[“<span class="number">0</span>”: 关键词, “index”: i ]</span><br><span class="line">如果找不到了，返回<span class="literal">null</span></span><br><span class="line"> vs str.<span class="title function_">match</span>() :</span><br><span class="line">str.<span class="title function_">match</span>()始终只能找第一个关键词</span><br><span class="line">reg.<span class="title function_">exec</span>()反复调用时，可自动向后找下一个</span><br></pre></td></tr></table></figure></li></ol></li></ul><p><strong>总结: 查找关键词: 5种</strong></p><ol><li><p>只判断是否包含: <code>var bool=reg.test(str)</code></p></li><li><p>查找一个固定关键词的位置:<code> var i=str.indexOf(“关键词”)</code></p></li><li><p>查找一个可变关键词的位置:<code> var i=str.search(/正则/i)</code></p></li><li><p>查找第一个关键词的内容和位置:<br><code>var arr=str.match(/正则/i)</code><br><code> arr[“0”:关键词, “index”: i ]</code></p></li><li><p>查找所有关键词的内容: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=str.<span class="title function_">match</span>(<span class="regexp">/正则/ig</span>)</span><br><span class="line">arr[关键词<span class="number">1</span>, 关键词<span class="number">2</span>, … ]</span><br><span class="line">\<span class="number">6.</span> 查找所有关键词的内容和位置: </span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr=reg.<span class="title function_">exec</span>(str);</span><br><span class="line">    <span class="keyword">if</span>(arr!=<span class="literal">null</span>)</span><br><span class="line">        arr[“<span class="number">0</span>”:关键词, “index”: i ]</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><ul><li><p>什么是: 保存一段可重用的代码段的程序结构，再起一个名字</p></li><li><p>何时: 如果一段代码可能被反复使用</p></li><li><p>程序的重要设计原则之一: DRY Don’t Repeat Yourself</p><p><strong>创建: 3种:</strong> </p></li></ul><ol><li><strong>用声明方式</strong> </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(形参列表)&#123; 函数体; <span class="keyword">return</span> 返回值 &#125;</span><br></pre></td></tr></table></figure><p>​      <code>问题: 会被声明提前(hoist)</code></p><p>​       回顾: 声明提前: 当程序开始执行前，先将var声明的变量和function声明的函数提前到当前作用域的顶部，集中创建。<strong>赋值留在原地</strong>。</p><p>​      习惯: 所有声明都集中放在当前作用域的顶部。</p><ol start="2"><li><strong>用赋值方式</strong>: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>函数名=<span class="keyword">function</span> (<span class="params">形参列表</span>)&#123; 函数体; <span class="keyword">return</span> 返回值 &#125;</span><br></pre></td></tr></table></figure><p>揭露了js中函数的本质: 函数其实是一个保存代码片段的对象，函数名其实就是一个普通的变量。</p><p><code>不会被声明提前！</code></p><ol start="3"><li><strong>用new:</strong> </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="keyword">new</span> <span class="title class_">Function</span>(“形参<span class="number">1</span>”,…,”函数体; <span class="keyword">return</span> 返回值”)</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a><strong>匿名函数</strong></h3><ul><li>什么是: 定义函数时不指定函数名的函数</li><li>为什么: 节约内存</li><li>匿名函数用完后，不再被任何变量引用着，就被垃圾回收！</li><li>何时: 如果一个函数只用一次时</li></ul><p><strong>两个场景:</strong> </p><ol><li><strong>回调函数</strong>: </li></ol><p><code>什么是: 自己定义函数，却给别人去调用</code></p><ol start="2"><li><strong>自调函数</strong>:</li></ol><ul><li>自调：函数定义后，立刻自己调用自己执行一次</li><li>为什么: 避免使用全局变量，避免全局污染</li><li>何时: 用匿名函数划分临时作用域，避免使用全局变量</li><li>如何: (function(){ … })()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function是创建一个函数的意思——动作</span></span><br><span class="line"><span class="comment">//返回函数地址，比如0x1234</span></span><br><span class="line"><span class="comment">//0x1234() 调用匿名函数</span></span><br></pre></td></tr></table></figure><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><ul><li>作用域英文原文为<strong>scope</strong>，本意就是”<strong>范围</strong>“的意思</li><li>作用域是指一个数据的可用范围</li><li>定义作用域是为了<strong>避免内外不同范围的数据之间不互相干扰</strong></li><li><strong>JavaScript</strong>程序中，也包含<strong>两级作用域</strong>：<ul><li>全局作用域：指的是从任何范围都可访问</li><li>函数作用域：指仅限于函数内才可访问的范围</li></ul></li><li>定义在不同范围的变量也有不同的名称。<ul><li>全局变量：是指保存在全局作用域中的变量。全局变量可在程序中的任何位置都可访问。</li><li>局部变量：是指保存在某一个函数内的变量。局部变量只能在函数内部使用。</li></ul></li><li>函数执行时，也有两级范围的数据可用，分别是：<ul><li>自己的函数作用域：其中包含自家的数据</li><li>全局作用域：整个全局的数据</li></ul></li></ul><p><code>使用时，按照就近原则，优先使用自己函数作用域中的变量，自己没有，才使用全局范围内的。</code></p><blockquote><p>作用域链，就是由多级作用域组成的链式结构</p></blockquote><ul><li><p>当调用函数时，函数将自己能用到的所有作用域都用”锁链”串联（引用）起来。</p><p><strong>作用链：</strong></p><ol><li>串联着当前函数所使用的所有作用域范围，保存着当前函数可用的所有变量</li><li>控制着变量的使用顺序：先局部，后全局，只要局部有就不会去全局查找数据。</li></ol></li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul><li>为一个函数保护一个专属的变量：<ul><li>使用闭包原因：变量在函数外部很容易会造成全局污染，函数在调用后不会保留内部数据，即调用一次便会重新定义一次就是不可重用的意思，闭包，是既重用变量又保护变量不会被篡改的一种编程方法。</li></ul></li><li>闭包：<ul><li>在函数的外部包裹一个函数把要保护的变量包裹起来。</li><li>想用获取到内层被包裹的函数就要用到外层函数的返回值return</li><li>调用外层函数：获得内层函数，保存到全局变量中：由此返回的东西变成了变量的值，变成了函数名：由于内层函数变成了外层函数的孩子，他们之间有total链接，所以外层函数的变量 不会被重置。</li></ul></li></ul><p><code>只要希望既重用变量，又保护变量不会被篡改时，就要用闭包为一个函数保管专属的变量。</code></p><ul><li><strong>步骤：</strong><ul><li>外层函数包裹内层函数和要保护的变量</li><li>外层函数返回内层函数对象到外部</li><li>外部使用者调用外层函数，获得内层函数对象，并保存在外部变量中反复使用。</li></ul></li></ul><p><code>创建内层函数时，内层函数[[scope]]属性，始终拴着自己可用的外层函数作用域</code></p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>什么是: 程序都是用对象结构来描述现实中一个具体事物的属性和功能</li><li>为什么: 便于大量数据的管理和维护</li><li>如何: 三大特点: <strong>封装，继承，多态</strong></li></ul><h4 id="封装"><a href="#封装" class="headerlink" title="封装:"></a><strong>封装:</strong></h4><ul><li>什么是: 用对象结构集中存储一个事物的所有属性和功能</li><li><code>为什么: 便于大量数据的管理和维护</code></li><li>何时: 今后，只要使用面向对象思想，都要先将零散的数据封装为对象</li></ul><p><strong>三种创建方式</strong>： </p><ol><li><strong>用{}创建对象:</strong> </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  属性名:值,</span><br><span class="line">     … : …,</span><br><span class="line">  方法名:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    … <span class="variable language_">this</span>.属性名 …</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>访问对象成员(属性+方法): 对象.成员名</li><li><code>问题: 对象自己的方法内，要使用当前对象自己的属性，不能直接写属性名——报错！未定义</code></li><li>原因: 对象不是作用域！所以不在方法的作用域链上，所以，即使自己的方法，也不能直接访问自己对象的属性</li></ul><p>解决: </p><ul><li>不好的解决: 写死“对象名.属性名”</li><li>问题: 如果对象名发生改变，被迫同时修改方法内的语句</li><li>好的解决: “this.属性名”</li><li>this: 自动引用正在调用当前方法的.前的对象</li><li>何时: 只要对象自己的方法，要访问自己的属性时，必须加this.</li></ul><p><code>常犯错误: 以定义方法的位置来判断this的指向。</code></p><ul><li>正确: this与定义的位置无关，只与调用时.前的对象有关。2种:<ul><li>obj.fun() this-&gt;obj</li><li>fun()  this默认-&gt;window</li></ul></li></ul><ol start="2"><li><strong>用new的方式创建:</strong> </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">      obj.属性名=值</span><br><span class="line">  obj.方法名=<span class="keyword">function</span>(<span class="params"></span>)&#123; … &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>js中对象的本质: js中一切对象底层都是关联数组</li><li><strong>访问对象的成员: 2种:</strong><ul><li>obj[“属性名”]=obj.属性名</li></ul></li><li>如果属性名是动态变化的，必须用<code>obj[表达式] !!!!!</code></li><li>访问对象中不存在的属性: 不报错！返回<code>undefined</code></li><li>随时可给对象添加任何新属性: 不报错！而是自动创建</li><li>前两种方式: 一次只能创建一个对象</li><li>如果反复创建多个相同结构的对象时，代码大量冗余——不便于维护</li></ul><ol start="3"><li><strong>用构造函数创建对象</strong> </li></ol><ul><li>什么是构造函数: 描述一类对象相同结构的函数</li><li>为什么**: 代码重用**</li><li>何时: 反复创建多个相同结构的对象时</li></ul><p>创建方式:</p><ol><li><strong>定义构造函数:</strong> </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 类型名()&#123;</span><br><span class="line">  <span class="variable language_">this</span>.属性名=值;</span><br><span class="line">  <span class="variable language_">this</span>.方法名=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     … <span class="variable language_">this</span>.属性名 …</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>用构造函数反复创建多个相同结构的对象</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> 类型名();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>new: 4件事:</strong> </p><ol><li>创建一个空对象</li><li>自动设置继承关系</li><li>调用构造函数，并将构造函数中的所有this，自动替换为新的空对象通过强行给新对象赋值的方式，向新对象中添加新属性</li><li>返回新对象地址</li></ol><p>  <strong>构造函数的问题：如果将方法定义放在构造函数中，会导致每次创建新对象时，都重复创建方法的副本——浪费内存</strong></p><p><code>  解决: 保存在一处，共用！</code></p><h4 id="继承"><a href="#继承" class="headerlink" title="继承:"></a>继承:</h4><ul><li>什么是: 父对象的成员，子对象无需重复创建，就可直接使用</li><li>为什么: 代码重用，节约内存</li><li>何时: 所有子对象，需要相同的方法或属性时，只要在父对象中添加一次，所有子对象就可共用</li><li>如何: js中继承，都是继承原型对象(prototype)</li></ul><blockquote><p>创建原型对象: 不用创建，买一增一</p></blockquote><ul><li><p>每创建一个构造函数，都附赠一个空的原型对象</p></li><li><p>构造函数.prototype=自己的原型对象</p><p><strong>何时继承:</strong> </p></li></ul><ol><li><p><strong>new的第2步，自动设置继承关系</strong></p></li><li><p><strong>子对象. _<em>proto</em>_ = 构造函数.prototytpe</strong></p><p><strong>如何向原型对象中添加共有成员: 强行赋值:</strong> </p></li></ol><p>​     <code>构造函数.prototype.共有成员=值</code></p><p>  <strong>11种内置类型，也都有原型对象:</strong> </p><ul><li><p>将来只要能new的都是一种类型</p></li><li><p>只要是一种类型，都包含2部分组成: </p><ul><li>构造函数: 专门用于创建该类型的子对象</li><li>原型对象:专门用于保存该类型的子对象共有的成员</li></ul><p> <strong>比如: Array, Date, RegExp, Function, …</strong></p><p><strong>原型链:</strong> </p></li><li><p>什么是: 由多级父元素逐级继承形成的链式结构</p></li><li><p>保存着: 所有对象可访问的属性和方法</p></li><li><p>控制着属性和方法的使用顺序: 先用自己的，自己没有才延原型链向上找</p></li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态:"></a>多态:</h4><ul><li><p>什么是: 一个函数在不同情况下表现出不同的状态</p><p><strong>包括: 2种:</strong> </p></li></ul><ol><li><strong>重载:</strong></li></ol><ul><li><p>什么是: 多个相同名称不同参数列表的函数，调用时可自动根据传入参数的不同，选择对应的函数执行。</p></li><li><p>为什么: 减少API的个数，减轻调用者的负担</p></li><li><p>何时: 1件事，可能根据传入参数不同，执行不同的处理过程时</p><p><code>问题: js语法默认不支持重载效果</code></p></li><li><p>为什么: js中不允许多个同名函数同时存在</p><ul><li>如果同时存在，最后一个同名函数会覆盖之前所有</li></ul></li></ul><p><code>解决: 变通实现</code></p><ol><li>只定义一个函数，不定义参数列表</li><li>调用函数时，按需传入参数</li><li>所有参数都会被函数中的内置对象arguments自动接收。</li><li>arguments: 每个函数中自动创建的可接受所有实参列表的类数组对象(长的像数组的对象) 与数组相比<ol><li>数组: 相同: 1. 下标, 2. .length, 3. 遍历</li></ol></li></ol><p>​          不同: 不是数组类型，API不通用！</p><ol start="5"><li>函数中根据参数列表的个数和内容，动态选择执行一种处理逻辑</li><li><strong>重写(override)</strong></li></ol><ul><li>什么是重写: 子对象觉得父对象的成员不好用，可在本地定义自有同名成员，覆盖父对象的成员</li><li>何时: 只要觉得父对象的成员不好用，都可重写一个新的</li><li>如何: 只要在子对象本地定义同名成员即可</li></ul><h2 id="静态方法与实例方法"><a href="#静态方法与实例方法" class="headerlink" title="静态方法与实例方法"></a>静态方法与实例方法</h2><ul><li>什么是实例方法: 给某个类型的子对象调用的方法</li><li>何时: 如果要求，方法执行时，必须先有一个具体的子对象，才能用。</li><li>如何: 要么直接定义在对象上，要么定义在对象的原型对象上</li><li>什么是静态方法: 不需要具体对象，也可直接执行的方法<ul><li>何时: 如果不需要任何具体对象，也想调用函数时</li><li>如何: 将函数定义在构造函数对象上<ul><li>构造函数.静态方法=function(){ … }</li><li>调用时: 构造函数.静态方法();</li></ul></li></ul></li></ul><h2 id="自定义继承关系"><a href="#自定义继承关系" class="headerlink" title="自定义继承关系"></a><strong>自定义继承关系</strong></h2><ol><li>只修改一个对象的父对象: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">child.<span class="property">__proto__</span>=father</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(child,father)</span><br><span class="line">设置set  child 的<span class="keyword">of</span>  爹prototype 为 father</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>问题: 一次只能改一个子对象的父类</code></p><ol start="2"><li>同时修改所有子对象的原型对象</li></ol><ul><li>其实就是修改构造函数的prototype属性</li><li>构造函数.prototype = father</li><li>时机: 必须在定义完构造函数后，开始创建子对象之前，就要更换。</li></ul><ol start="3"><li>正式的两种类型间的继承: </li></ol><p><code> 问题: 两种类型间包含了部分相同的属性结构和方法定义</code></p><p> <code>解决: 抽象父类型: </code></p><p>  <strong>步骤:</strong> </p><ul><li><p>定义抽象父类型: </p><ul><li>在父类型构造函数中包含相同的属性定义</li><li>在父类型的原型对象中包含相同的方法定义</li><li>删除子类型中相同的内容</li></ul></li><li><p>让子类型继承抽象父类型: </p><ul><li><p>让子类型构造函数继承父类型构造函数</p></li><li><p>```js<br>Object.setPrototypeOf(<br> 子类型.prototype, 父类型.prototype<br>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 让子类型构造函数借用父类型构造函数</span><br><span class="line"></span><br><span class="line">**错误: 直接调用父类型构造:** </span><br><span class="line"></span><br><span class="line"> 父类型(参数值)</span><br><span class="line"></span><br><span class="line">后果: 父类型构造函数中的this-&gt;window</span><br><span class="line"></span><br><span class="line">`解决: 函数内的this不是想要的，都可用.call()的方式，将正确的this注射进函数内，替换其中错误的this`</span><br><span class="line"></span><br><span class="line">**正确的方法:**</span><br><span class="line"></span><br><span class="line"> 父类型构造.call(正确的this,参数值..)</span><br><span class="line"></span><br><span class="line">结果: 执行时，父类型构造中的this，被外部正确的this给替换了！</span><br><span class="line"></span><br><span class="line">## ES5</span><br><span class="line"></span><br><span class="line">### 严格模式</span><br><span class="line"></span><br><span class="line">- 比普通js运行机制要求跟严格的执行模式</span><br><span class="line">- 何时: 今后，所有项目代码，都必须运行在严格模式下！</span><br><span class="line">- 如何: 在当前作用域顶部: “**use strict**”;</span><br><span class="line">  - 如果加载&lt; script &gt;元素或js文件顶部，则整段js代码都启用严格模式</span><br><span class="line">  - 如果只加在函数内的顶部，则仅函数内启用严格模式</span><br><span class="line"></span><br><span class="line">**要求:** </span><br><span class="line"></span><br><span class="line">1. 禁止给未声明的变量赋值: </span><br><span class="line"></span><br><span class="line">普通js中，可以给未声明的变量赋值</span><br><span class="line"></span><br><span class="line">结果: 会自动在全局创建该变量</span><br><span class="line"></span><br><span class="line">2. 静默失败升级为错误: </span><br><span class="line"></span><br><span class="line">静默失败: 执行不成功，也不报错！</span><br><span class="line"></span><br><span class="line">3. 普通函数调用/匿名函数自调中的this，不再指向window，而是undefined</span><br><span class="line">4. 屏蔽了arguments.callee</span><br><span class="line"></span><br><span class="line">- 什么是arguments.callee: 函数内自动创建的，引用当前函数本身的关键字。</span><br><span class="line">- 何时: 在使用递归算法时，可在函数内避免写死当前函数名。</span><br><span class="line">- 屏蔽arguments.callee是在屏蔽递归算法</span><br><span class="line">- 为什么: 递归算法效率极低，重复计算量太大！</span><br><span class="line"></span><br><span class="line">### **保护对象**</span><br><span class="line"></span><br><span class="line">1. 保护单个属性:</span><br><span class="line"></span><br><span class="line">**ES5将对象属性划分为两大类:**</span><br><span class="line"></span><br><span class="line">- **命名属性: 凡是可用.直接访问到的属性**</span><br><span class="line">  - 又被分为两大类: </span><br><span class="line">    - 数据属性: 直接存储属性值的属性</span><br><span class="line">    - 访问器属性: 不直接存储属性值，专门提供对另一个数据属性的保护</span><br><span class="line">- **内部属性: 不能用.直接访问的属性**</span><br><span class="line"></span><br><span class="line">**ES5将每个数据属性，都变成一个缩微的小对象：**</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">  &#123; //四大特性: </span><br><span class="line">    value: //实际存储属性值,</span><br><span class="line">    writable: true/false, //控制是否可修改</span><br><span class="line">    enumerable: true/false, //控制是否可被for in遍历</span><br><span class="line">    //但是，用.依然可强行访问该属性</span><br><span class="line">    configurable: true/false, //控制是否可删除该属性</span><br><span class="line">    //控制是否可修改另外两个特性</span><br><span class="line">    //一旦改为false不可逆</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>四大特性: value, writable, enumerable, configurable</strong></p><p><code>获取: var 属性对象=Object.getOwnPropertyDescriptor(obj,”属性名”)</code></p><p><strong>修改四大特性:</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,”属性名”,&#123;</span><br><span class="line">   开关: <span class="literal">true</span>/<span class="literal">false</span>,</span><br><span class="line">     … : …</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>问题: 一次只能修改一个属性的四大特性</code></p><p><strong>解决：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj,&#123;</span><br><span class="line">  属性名:&#123;</span><br><span class="line">    开关: <span class="literal">true</span>/<span class="literal">false</span>,</span><br><span class="line">     … : … </span><br><span class="line">&#125;,</span><br><span class="line">  属性名:&#123;</span><br><span class="line">    开关: <span class="literal">true</span>/<span class="literal">false</span>,</span><br><span class="line">     … : … </span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>问题: 无法使用自定义的规则保护属性</code></p><p> <strong>解决：</strong></p><ul><li>访问器属性: 访问器属性是不保存属性值，仅提供对另一个数据属性的保护</li><li>何时: 使用自定义规则保护属性时</li><li>前提: 先有一个实际存储数据的隐藏的数据属性</li></ul><p><strong>定义访问器:</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj,&#123;</span><br><span class="line">        _数据属性:&#123; <span class="attr">enumerable</span>:<span class="literal">false</span>,<span class="attr">configurable</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">        访问器属性:&#123;</span><br><span class="line">          <span class="attr">get</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_</span>数据属性&#125;,</span><br><span class="line">          <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(value符合规则)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_</span>数据属性=value;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(“自定义错误信息”)</span><br><span class="line">&#125;,</span><br><span class="line">        <span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configurable</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>保护对象的结构: 3个层次:</strong> </p><ol><li>防扩展: 禁止给对象添加新属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`Object.preventExtensions(obj)`</span></span><br><span class="line">          阻止    扩展</span><br><span class="line">设置obj对象，禁止扩展新属性</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>密封: 在防扩展基础上，再禁止删除所有属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title class_">Object</span>.<span class="title function_">seal</span>(obj)</span><br><span class="line">本质: 在设置防扩展同时，自动设置所有属性的configurable为<span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>冻结: 在密封基础上禁止修改属性值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj)</span><br><span class="line">本质: 在密封基础上，自动将所有属性的writable设置为<span class="literal">false</span>！</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>补充：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(): 没有构造函数，也想创建子对象</span><br><span class="line"><span class="keyword">var</span> child=<span class="title class_">Object</span>.<span class="title function_">create</span>(father,&#123;</span><br><span class="line">         <span class="comment">//defineProperties的语法</span></span><br><span class="line">         属性:&#123; 四大特性 &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//创建新对象child，然后让child继承father，并为新对象添加自有属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="替换this"><a href="#替换this" class="headerlink" title="替换this"></a>替换this</h3><p>  <strong>.call/apply/bind</strong></p><ul><li>调用一次函数，并<strong>临时替换</strong>函数中的this为指定对象：.call或者apply<ul><li>fun.call(obj,实参…)<ul><li>调用一次函数执行</li><li>在执行时临时替换其中的this为obj</li></ul></li></ul></li><li>.apply可打散数组为单个参数值后，分别传入函数:<ul><li>如果函数需要多个参数值，但给的参数值却集中保存在一个数组中。</li><li>fun.apply(obj,[ ])</li></ul></li><li>.bind基于原函数创建一个完全相同的新函数，并永久绑定this为指定对象<ul><li>var newFun=fun.bind(obj,实参…)</li><li>创建一个和fun完全相同的新函数newFun</li><li>永久将newFun中的this绑定为obj</li><li>永久将newFun中的部分参数绑定为实参…</li><li>固定用法:<code> 如果替换回调函数中的this，必须用.bind()</code><ul><li>因为回调函数不是立刻执行！且不止执行一次！</li></ul></li></ul></li></ul><h3 id="数组API"><a href="#数组API" class="headerlink" title="数组API"></a><strong>数组API</strong></h3><ol><li>查找: 查找一个指定的元素在数组中的位置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同字符串操作: <span class="keyword">var</span> i=arr.<span class="title function_">indexOf</span>(元素, starti)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>判断: 判断数组中的元素是否符合要求<ol><li>判断是否所有元素都符合要求：</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool=arr.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">elem,i,arr</span>)&#123;</span><br><span class="line">  <span class="comment">//elem: 当前元素值</span></span><br><span class="line">  <span class="comment">//i: 当前位置</span></span><br><span class="line">  <span class="comment">//arr: 当前数组</span></span><br><span class="line">  <span class="keyword">return</span> 判断条件;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//every会拿着回调函数去每个元素上执行一次</span></span><br><span class="line"><span class="comment">//每次执行时，都会将当前元素值，当前所在位置，当前数组对象，传入函数中</span></span><br><span class="line"><span class="comment">//函数内用提供的参数值，判断当前元素是否符合条件，并返回判断结果</span></span><br><span class="line"><span class="comment">//必须回调函数在每个元素上执行时，都返回true，整体判断结果才返回true！</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>判断是否包含符合要求的元素:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool=arr.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">elem,i,arr</span>)&#123;</span><br><span class="line">  <span class="comment">//elem: 当前元素值</span></span><br><span class="line">  <span class="comment">//i: 当前位置</span></span><br><span class="line">  <span class="comment">//arr: 当前数组</span></span><br><span class="line">  <span class="keyword">return</span> 判断条件;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>遍历: 对每个元素都执行相同的操作</p><ol><li><p>直接修改原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">elem,i,arr</span>)&#123;</span><br><span class="line">  elem…</span><br><span class="line">  arr[i]…</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//forEach会拿着回调函数去每个元素上执行一次</span></span><br><span class="line"><span class="comment">//每次执行时，回调函数内都可用arr[i]修改原数组中的每个元素值。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>不直接修改原数组，而是返回新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr=arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">elem,i,arr</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> 新值</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//map先创建一个新的空数组</span></span><br><span class="line"><span class="comment">//然后拿着回调函数去每个元素上执行一次</span></span><br><span class="line"><span class="comment">//每次执行时，都将回调函数返回的新值，放入新数组中相同位置</span></span><br><span class="line"><span class="comment">//最后，将保存新值的新数组返回，原数组保持不变</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>过滤: 复制出原数组中符合条件的元素，组成新数组</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subArr=arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem,i,arr</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> 条件</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//filter先创建一个新的空数组</span></span><br><span class="line"><span class="comment">//会拿着回调函数去每个元素上执行一次</span></span><br><span class="line"><span class="comment">//每次执行时，都获得当前元素的判断结果</span></span><br><span class="line"><span class="comment">//只有返回结果为true的元素，才被放入新数组中返回</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>汇总: 对数组中的元素进行各种统计，得出最终结论</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result=arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev,elem,i,arr</span>)&#123;</span><br><span class="line">     <span class="comment">//prev: 截至到当前元素之前的临时汇总值</span></span><br><span class="line">     <span class="keyword">return</span> prev+elem;</span><br><span class="line">&#125;,base) <span class="comment">//开始初始值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;RegEXP对象&quot;&gt;&lt;a href=&quot;#RegEXP对象&quot; class=&quot;headerlink&quot; title=&quot;RegEXP对象&quot;&gt;&lt;/a&gt;RegEXP对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是: 专门保存一条正则表达式，并提供用&lt;strong&gt;正则表达式执行验</summary>
      
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>BOM&amp;DOM</title>
    <link href="http://example.com/2019/07/02/BOM-DOM/"/>
    <id>http://example.com/2019/07/02/BOM-DOM/</id>
    <published>2019-07-02T01:52:31.000Z</published>
    <updated>2022-03-28T12:15:06.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是DOM-Document-Object-Model"><a href="#什么是DOM-Document-Object-Model" class="headerlink" title="什么是DOM: Document Object Model"></a>什么是DOM: Document Object Model</h2><ol><li>DOM就是专门操作网页内容的API标准——W3C</li><li>何时: 只要用js操作网页的内容</li><li>包括: 增删改查+事件绑定</li></ol><span id="more"></span><h2 id="DOM-Tree"><a href="#DOM-Tree" class="headerlink" title="DOM Tree"></a>DOM Tree</h2><ul><li>什么是: 在内存中存储一个网页中所有内容的树形结构</li><li>为什么: 只有树形结构才能灵活保存上下级包含关系</li><li>何时: 浏览器每加载一个网页，就会读取网页内容，并在内存中创建DOM数。</li><li>网页中每项内容，都是DOM树上的节点对象: <ul><li>整个DOM树只有唯一一个根节点: <strong>document对象</strong></li></ul></li><li>每个节点对象上，都有三个属性: <ul><li>.nodeType: 节点类型, 值为数字<ul><li>何时: <strong>当获得一个节点对象，需要判断节点的类型时</strong></li></ul></li><li>包括: document   9  根节点<ul><li>element     1  元素节点</li><li>attribute     2  属性节点</li><li>text             3   文本节点</li><li><code>问题: 只能判断类型，不能进一步判断元素名</code></li></ul></li><li>.nodeName: 节点名称<ul><li>何时: 希望进一步判断节点/元素的名称时</li></ul></li><li>包括: document  #document<ul><li>element   全大写的标签名</li><li>attribute   属性名</li><li>text       #text</li></ul></li><li>.nodeValue: 节点值<ul><li>何时: 几乎不用</li></ul></li><li>包括: document   null<ul><li>element     null</li><li>attribute    属性值</li><li>text        文本的内容</li></ul></li></ul></li></ul><h2 id="查找的几种方式"><a href="#查找的几种方式" class="headerlink" title="查找的几种方式"></a>查找的几种方式</h2><ul><li><p>何时: 修改/删除元素前都要先找到要操作的元素</p></li><li><p><strong>不需要查找就可直接获得</strong>的重要元素: </p><ul><li><strong>html   document.documentElement</strong></li><li><strong>head   document.head</strong></li><li><strong>body   document.body</strong></li><li><strong>form   document.forms[i/id]</strong></li></ul></li><li><p>按节点间关系查找</p></li><li><p>节点树: 包含所有网页内容（元素，文本，属性）的树结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> <span class="variable constant_">HTML</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM Tree<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//当 window 加载后——事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//希望等网页加载后，再执行以下代码，以确保所有网页中的内容都已经可用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//获得body元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> body=<span class="variable language_">document</span>.<span class="property">body</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(body.<span class="property">nodeName</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//获得body下所有直接子元素，应该只有三个</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> children=body.<span class="property">children</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(children);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//获得body下第一个直接子元素span</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> span=body.<span class="property">firstElementChild</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(span);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//获得body下最后一个直接子元素script</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> script=body.<span class="property">lastElementChild</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(script);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//获得h1元素，可以是: </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> h1=<span class="comment">//span.nextElementSibling;//span的弟弟</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//script.previousElementSibling;//script的哥哥</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">children[<span class="number">1</span>]<span class="comment">//body的第二个孩子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(h1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>两大类关系:</strong> </p></li></ul><ol><li><strong>父子:</strong> </li></ol><ul><li>elem.parentNode  找elem的父节点</li><li>elem.childNodes   找elem的所有直接子节点</li><li>elem.firstChild     找elem的第一个直接子节点</li><li>elem.lastChild     找elem的最后一个直接子节点</li></ul><ol start="2"><li><strong>兄弟:</strong> </li></ol><ul><li><p>elem.nextSibling   找elem的下一个兄弟</p></li><li><p>elem.previousSibling 找elem的前一个兄弟</p><p><code>问题: 受看不见的空字符的影</code></p><p><strong>解决: 元素树: 仅包含元素节点的树结构</strong></p></li><li><p>元素树不是一棵新树，而是节点树中的一个子集</p></li><li><p>优点: 不受看不见的空字符的干扰！</p></li></ul><p><strong>两大类关系:</strong> </p><ol><li><strong>父子:</strong> </li></ol><ul><li>elem.parentElement          找elem的父元素</li><li>elem.children                      找elem的所有直接子元素</li><li>elem.firstElementChild    找elem的第一个直接子元素</li><li>elem.lastElementChild     找elem的最后一个直接子元素</li></ul><ol start="2"><li><strong>兄弟:</strong> </li></ol><ul><li><p>elem.nextElementSibling   找elem的下一个兄弟元素</p></li><li><p>elem.previousElementSibling 找elem的前一个兄弟元素</p><p><strong>递归遍历一个父元素下所有后代元素:</strong></p><p> <strong>两个步骤:</strong> </p></li></ul><ol><li>定义函数，仅遍历直接子元素</li><li>在遍历直接子元素时，对每个直接子元素调用和父元素完全相同的操作</li></ol><p><code> 问题: 必须先获得一个元素，才能按节点间关系查找</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> <span class="variable constant_">HTML</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>遍历节点树<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello World !<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;uname&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>综艺</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>跑男<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;uname&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>极限<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>剧集<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//定义一个函数，用于遍历任意给定父元素parent下的所有后代元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">getChildren</span>(<span class="params">parent</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//1. 先仅遍历当前父元素的直接子元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//1.1获得指定的父元素parent的直接子元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> children=parent.<span class="property">children</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//1.2遍历当前父元素的所有直接子元素并输出元素名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">for</span>(<span class="keyword">var</span> child <span class="keyword">of</span> children)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//console.log(child.nodeName);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">if</span>(child.<span class="property">innerHTML</span>===<span class="string">&quot;&#123;&#123;uname&#125;&#125;&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">child.<span class="property">innerHTML</span>=uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//2. 对每个直接子元素调用和父元素完全相同的操作</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">arguments</span>.<span class="title function_">callee</span>(child);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> uname=<span class="string">&quot;dingding&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//当 window 加载完 才自动执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//遍历body元素下的所有后代元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">getChildren</span>(<span class="variable language_">document</span>.<span class="property">body</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code> 解决: 用HTML特征查找</code></p><p><strong>按HTML特征查找:</strong></p><p>  何时: 在没有获得任何元素情况下，可作为首次查找之用</p><p>  包括: 4种</p><ol><li>按id查找一个元素: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elem=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p> 强调:</p><ol><li>按id查找，必须用document调用</li><li>只能找到一个元素</li></ol><p><strong>按标签名查找:</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elems=任意父元素.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;标签名&quot;</span>);</span><br></pre></td></tr></table></figure><p>强调: </p><ul><li>可用任意父元素调用: <ul><li>比如: 在ul下找li; 在table下找td; 在select下找option</li></ul></li><li>可找到多个，所以返回多个元素组成的类数组对象</li><li>按标签名查找不仅查找直接子元素，且在所有后代中查找符合条件的</li></ul><p><strong>按name属性查找:</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elems=<span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure><p>强调: </p><ul><li>只能用document调用</li><li>返回多个元素组成的类数组对象</li></ul><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="jjzPjZ" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="jjzPjZ">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/jjzPjZ/">  jjzPjZ</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="bPvdXr" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="bPvdXr">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/bPvdXr/">  bPvdXr</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p><strong>按class查找:</strong> </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var elems=任意父元素.getElementsByClassName(<span class="string">&quot;class&quot;</span>)</span><br></pre></td></tr></table></figure><p>强调: </p><ol><li>可用任意父元素调用</li><li>返回多个元素组成的类数组对象</li><li>不仅查找直接子元素，且在所有后代中查找。</li><li>如果一个元素同时被多个class修饰，那么只要用其中一个class，就可找到该元素。</li></ol><p> <strong>按选择器查找: 2种情况:</strong> </p><ol><li>只查找一个符合条件的元素: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elem=任意父元素.<span class="title function_">querySelector</span>(<span class="string">&quot;选择器&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>查找多个符合条件的元素: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elems=任意父元素.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;选择器&quot;</span>)</span><br></pre></td></tr></table></figure><p>优化: 按HTML查找 vs 按选择器查找</p><ol><li>返回值: </li></ol><ul><li>按HTML查找返回动态集合: 不实际存储属性值，每次访问集合内容，都重新查找DOM树</li><li>按选择器查找返回非动态集合: 实际存储所有属性值，每次访问集合内容，不需要重新查找DOM树</li></ul><ol start="2"><li>首次查找效率: </li></ol><ul><li>按HTML查找快</li><li>按选择器查找慢</li></ul><ol start="3"><li>易用性: </li></ol><ul><li><p>按选择器查找，简单又强大</p></li><li><p>按HTML查找，相对繁琐</p><p><strong>总结:</strong></p></li></ul><ol><li><p>当仅靠一个条件就可找到元素时，首选按HTML查找</p></li><li><p>当查找条件复杂时，首选按选择器查找，简单易用</p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="gNeaYg" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="gNeaYg">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/gNeaYg/">  gNeaYg</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></li></ol><h2 id="修改的几种方式"><a href="#修改的几种方式" class="headerlink" title="修改的几种方式"></a>修改的几种方式</h2><p> <strong>内容: 获取或修改元素的内容3种:</strong> </p><ul><li>获取或修改元素的原始HTML片段内容: <code>elem.innerHTML</code></li><li>获取或修改元素的纯文本内容: </li><li>elem.textContent 对比 innerHTML: <ul><li>将特殊符号翻译为正文</li><li>去掉了内嵌标签</li></ul></li><li>获取或修改表单元素的内容: elem.value</li></ul><p><strong>属性: 3种:</strong> </p><p><strong>HTML标准属性: HTML标准中规定的元素具有的属性，两种：</strong></p><ul><li>核心DOM API: 最初DOM标准中指定的，可以访问所有结构化文档的API<ul><li>四种方式: <ul><li>获取属性值: elem.getAttribute(“属性名”)</li><li>修改属性值: elem.setAttribute(“属性名”,”新属性值”)</li><li>判断是否包含指定属性: elem.hasAttribute(“属性名”)</li><li>移除属性: elem.removeAttribute(“属性名”)</li></ul></li><li>HTML DOM API: 对常用DOM API提供了简化版本<ul><li>对于标准属性: HTML DOM已经将所有标准属性都提前内置在了元素对象中，可用.直接访问。如果没有出现在页面上的标准属性值，默认为””</li><li>elem.标准属性名</li><li>特例: html元素的class属性:</li><li>应该换成: elem.className =&gt; &lt; elem class=”” &gt;</li><li>因为class是ES中的保留字</li></ul></li></ul></li><li><strong>四大状态属性:</strong> <ul><li><code>enabled    disabled     checked     selected</code></li><li>值都不是字符串，而是bool类型</li><li>不能用核心DOM 4个API修改</li><li>只能用**.**直接访问</li><li>CSS3: 状态伪类选择器: </li><li><code>:selected  :checked  :disabled   :enabled</code><ul><li>选中处于某种状态的元素</li></ul></li></ul></li><li><strong>自定义扩展属性:</strong> <ul><li>什么是: HTML标准中没有规定的，程序员自行添加的属性</li><li>何时:<ul><li>在客户端临时缓存业务数据，减少向服务器端发送请求的次数</li><li>代替其他选择器(id,class,元素)，为元素绑定行为</li></ul></li><li>理由：<ul><li>id 只能选一个元素</li><li>元素 限制太死板</li><li>class 是样式专用，不稳定</li><li>解决: 今后只要为元素添加行为，都应该用自定义扩展属性</li></ul></li></ul></li></ul><p><strong>bootstrap:</strong> </p><ol><li>为想要添加行为的元素，指定自定义扩展属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a data-toggle=<span class="string">&quot;dropdown&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>用属性选择器找到有自定义扩展属性的元素绑定行为: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elems=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;[data-toggle=dropdown]&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> elem <span class="keyword">of</span> elems)</span><br><span class="line">    elem.<span class="property">on</span>事件名=<span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如何:</p><ol><li>定义时: &lt;ANY 自定义属性名=”值”</li><li>获取或设置自定义属性的值:</li></ol><p>不能用**.<strong>修改，因为</strong>内存中的元素对象中不包含自定义扩展属性**</p><p>用核心DOM API可以访问自定义扩展属性: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">elem.<span class="title function_">getAttribute</span>(<span class="string">&quot;属性名&quot;</span>)</span><br><span class="line"></span><br><span class="line">elem.<span class="title function_">setAttribute</span>(<span class="string">&quot;属性名&quot;</span>,<span class="string">&quot;新值&quot;</span>)</span><br><span class="line"></span><br><span class="line">elem.<span class="title function_">hasAttribute</span>(<span class="string">&quot;属性名&quot;</span>)</span><br><span class="line"></span><br><span class="line">elem.<span class="title function_">removeAttribute</span>(<span class="string">&quot;属性名&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>HTML5:</strong> </p><ol><li>如果在定义自定义扩展属性时加了data-前缀</li><li>在程序中: elem.dataset.属性名</li></ol><p>其中: <code>dataset可自动收集data-*开头的属性</code></p><p>样式: </p><ol><li>修改一个css样式: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elem.<span class="property">style</span>.<span class="property">css</span>属性名=<span class="string">&quot;新值&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中: style代表元素开始标签中的内联样式style属性</p><p>强调: 所有css属性名都要去-，变驼峰命名</p><ol start="2"><li>获取一个css样式: </li></ol><p>错误: elem.style 只能获得内联样式</p><p>解决: 今后只要获取css属性值，都用计算后的样式</p><p>什么是计算后的样式: 最终应用到元素上的所有css属性的集合。</p><p>还将相对单位的属性值计算为绝对单位(px)</p><p>​     如何: </p><ol><li>先获得计算后的完整样式对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> style=<span class="title function_">getComputedStyle</span>(elem)</span><br></pre></td></tr></table></figure><ol start="2"><li>从style中获得想要的css属性值</li></ol><p>​       style.css属性名</p><p>强调: 计算后的所有样式，只读。因为计算后的样式来源不确定，不知道多少地方正在同时使用。</p><p>总结: 今后只要修改css属性，都用elem.style.css属性=值</p><p>今后只要获取css属性，都用getComputedStyle</p><p>问题: elem.style，一次只能修改一个css属性</p><p>如果批量修改多个css属性时，代码繁琐</p><p>解决: 今后只要批量应用样式，都用class</p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="wLmKvq" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="wLmKvq">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/wLmKvq/">  wLmKvq</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="JQLYdP" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="JQLYdP">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/JQLYdP/">  JQLYdP</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="WqzQQM" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="WqzQQM">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/WqzQQM/">  WqzQQM</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="添加-删除"><a href="#添加-删除" class="headerlink" title="添加/删除"></a>添加/删除</h2><p> <strong>添加 :</strong> </p><ol><li>先创建一个空元素对象: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    相当于:  &lt; a &gt;&lt; /a&gt;</p><ol start="2"><li>设置关键属性: </li></ol><p>​    a.innerHTML=”go to tmooc”;  =&gt; <a> go to tmooc </a></p><p>​    a.href=”<a href="http://tmooc.cn&quot;/">http://tmooc.cn&quot;</a> </p><p>​    =&gt; &lt; a href=”<a href="http://tmooc.cn/">http://tmooc.cn</a> “&gt; go to tmooc &lt; /a&gt;</p><ol start="3"><li>将新元素添加到DOM树上指定位置</li><li>父元素.appendChild(a) 将a追加到父元素下最后一个孩子之后</li><li>父元素.insertBefore(a, child) 将a插入在父元素下一个现有child元素之前</li><li>父元素.replaceChild(a, child) 用a代替父元素下现有的child子元素</li></ol><p> <code>优化: 尽量减少操作DOM树的次数: </code></p><p><code>为什么: 每修改一次DOM树，就会导致重排重绘，降低页面加载的效率。</code></p><p>   原理: </p><p>​    html-&gt;DOM Tree ←修改</p><p>​            ↓</p><p>​          Render Tree -&gt; 重排-&gt;重绘paint</p><p>​            ↑</p><p>​    css -&gt; CSS Model</p><p>解决: 2种: </p><ol><li>当同时添加父元素和子元素时，应该先在内存中将所有字元素加入父元素下，最后再一次性将父元素添加到DOM树</li><li>如果父元素已经在页面上了，要同时添加多个平级子元素时，应该找一个临时的父元素，先将所有子元素加入临时的父元素中，最后，再将临时的父元素添加到DOM树</li></ol><p>临时的父元素: 文档片段 <strong>document fragment</strong></p><p>=什么: 内存中，临时存储多个子元素的虚拟父元素</p><p>何时: 要同时添加多个平级子元素到DOM树时</p><p>如何: 3步: </p><ol><li>创建文档片段对象: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> frag=<span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>将子元素添加到文档片段中: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frag.<span class="title function_">appendChild</span>(child)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>将frag整体一次性添加到DOM树</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父元素.<span class="title function_">appendChild</span>(frag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 删除: </p><p><strong>父元素.removeChild(child)</strong></p><p><strong>child.parentNode.removeChild(child)</strong></p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="RzMWoK" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="RzMWoK">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/RzMWoK/">  RzMWoK</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="qzoOvq" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="qzoOvq">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/qzoOvq/">  qzoOvq</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="HTML-DOM-常用对象"><a href="#HTML-DOM-常用对象" class="headerlink" title="HTML DOM 常用对象"></a>HTML DOM 常用对象</h2><p> Image: 唯一的简化: var img=new Image();</p><p> Select/Option</p><p><strong>Select属性:</strong></p><ul><li>.selectedIndex 自动获得当前选中的option的下标i</li><li>.options 快速获得当前select下所有option的集合</li><li>.options.length 表示select下option的个数</li><li>.length 简化.options.length</li><li>方法: .add(opt) 简化.appendChild(opt)</li><li>问题: 不支持文档片段</li><li>.remove(i) 移除i位置的一个option</li></ul><p> <strong>Option:</strong> </p><p>最大的简化: var opt=new Option(text, value)</p><p>新建一个option元素，同时设置其内容和值</p><p><strong>Table/…:</strong></p><p>逐级管理: </p><p>table管着行分组:</p><p>创建(行分组): 创建行分组，同时将行分组立刻就添加到table中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thead=table.<span class="title function_">createTHead</span>()</span><br><span class="line"><span class="comment">//createElement(thead);table.appendChild(thead)</span></span><br><span class="line"><span class="keyword">var</span> tfoot=table.<span class="title function_">createTFoot</span>()</span><br><span class="line"><span class="keyword">var</span> tbody=table.<span class="title function_">createTBody</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除(行分组):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">table.<span class="title function_">deleteTHead</span>();</span><br><span class="line">table.<span class="title function_">deleteTFoot</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获得(行分组):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">table.<span class="property">tHead</span>      </span><br><span class="line">table.<span class="property">tFoot</span></span><br><span class="line">table.<span class="property">tBodies</span>[i]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>行分组管着行:</p><p>创建一个新行:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tr=行分组.<span class="title function_">insertRow</span>(i);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>在行分组的第i行位置前插入一个新行，并返回新行对象。原i位置的行及其之后的行被向后挤压顺移一位</code></p><p>固定套路: </p><ol><li>在行分组末尾追加一个新行: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tr=行分组.<span class="title function_">insertRow</span>()</span><br><span class="line"><span class="comment">//createElement(tr) 行分组.appendChild(tr)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>在行分组第一行之前插入一个新行:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tr=行分组.<span class="title function_">insertRow</span>(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除现有行: </p><p>不好: 行分组.deleteRow(i)</p><p><strong>问题: 因为.前的主语是行分组，所以i要求是行在行分组内的相对下标位置。而tr有一个rowIndex属性，虽然可获得行的下标位置，但是是相对于整个表格的位置。</strong></p><p>好的: table.deleteRow(tr.rowIndex)</p><p>获取某一个行: 行分组.rows[i]</p><p>行管着格:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">添加: <span class="keyword">var</span> td=tr.<span class="title function_">insertCell</span>(i) <span class="comment">//省略i，默认在末尾追加</span></span><br><span class="line"></span><br><span class="line">局限: 只能添加td，不能添加th</span><br><span class="line"></span><br><span class="line">删除: tr.<span class="title function_">deleteCell</span>(i)</span><br><span class="line"></span><br><span class="line">获取: tr.<span class="property">cells</span>[i]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>Form:</strong> </p><p>获取: var form=document.forms[i/id]</p><p>属性: </p><ul><li>.elements 获得表单中所有表单元素(input, button, textarea, select)的集合</li><li>.elements.length 获得表单中表单元素的个数</li><li>.length =&gt; .elements.length</li></ul><p>方法: form.submit() 代替提交按钮手动提交表单</p><p>自定义表单提交: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span></span><br><span class="line">    .<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//先验证所有表单元素的值是否符合要求</span></span><br><span class="line">    <span class="comment">//只有所有表单都符合要求</span></span><br><span class="line">    <span class="comment">//才手动调用form.submit()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  表单元素对象: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取表单元素: var elem=form.elements[i/name/id]</span><br><span class="line"></span><br><span class="line">如果表单元素有name属性: form.name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    方法: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elem.<span class="title function_">focus</span>()</span><br><span class="line">elem.<span class="title function_">blur</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="WqzQWL" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="WqzQWL">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/WqzQWL/">  WqzQWL</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="什么是BOM-Browser-Object-Model"><a href="#什么是BOM-Browser-Object-Model" class="headerlink" title="什么是BOM: Browser Object Model"></a>什么是BOM: Browser Object Model</h2><p> BOM是专门操作浏览器窗口或软件的API——没有标准</p><p>何时: 操作浏览器窗口，或访问浏览器软件的信息时包含: </p><p>  <strong>window:</strong> </p><ol><li>history</li><li>location</li><li>navigator</li><li>document</li><li>screen</li><li>event</li></ol><p><strong>window对象:</strong> </p><ol><li><p>代替ES标准中的global充当全局作用域对象</p></li><li><p>封装所有原生API的大的对象，包括:</p><p><code>ES+DOM+BOM</code></p></li></ol><p> <strong>属性:</strong> </p><p>  <strong>窗口大小:</strong> </p><ol><li>完整窗口大小: <strong>[window.]outerWidth/outerHeight</strong></li><li>文档显示区大小: <strong>[window.]innerWidth/innerHeight</strong></li></ol><p>打开和关闭窗口</p><ol><li>打开一个新窗口：**[window.]open()** </li><li>关闭当前窗口：<strong>close()</strong> </li></ol><h3 id="history"><a href="#history" class="headerlink" title="history:"></a><strong>history:</strong></h3><p>什么是: 当前窗口中，保存当前窗口打开后成功访问过的url的<strong>历史记录栈</strong></p><p>何时: 用程序实现前进和后退时</p><p> 如何:</p><ul><li>history.go(i)</li><li>前进一步: history.go(1)</li><li>后退一步: history.go(-1)</li><li>后退两步: history.go(-2)</li><li>刷新: history.go(0)</li></ul><h3 id="location"><a href="#location" class="headerlink" title="location:"></a><strong>location:</strong></h3><p>什么是: 保存地址栏中正在打开的url的信息的对象</p><p>还提供了操作页面跳转的API</p><p> 何时:</p><ol><li>获得当前url相关的信息</li><li>页面跳转</li></ol><p>如何: </p><p>属性:</p><ul><li><p>.href  获得当前完整的url信息</p></li><li><p>.protocol  获得url中的协议部分</p></li><li><p>.host      获得url中的主机名+端口号部分</p></li><li><p>.hostname  获得url中的主机名</p></li><li><p>.port      获得url中的端口号部分</p></li><li><p>.pathname 获得url中的相对路径部分</p></li><li><p>.hash      获得url中的#锚点地址部分</p></li><li><p>.search     获得url中的?查询字符串部分</p><p>方法: </p></li></ul><ol><li>在当前窗口打开，可后退: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">open</span>(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;_self&quot;</span>)</span><br><span class="line">location.<span class="property">href</span>=<span class="function"><span class="params">url</span> =&gt;</span> location.<span class="title function_">assign</span>(<span class="string">&quot;url&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>在当前窗口打开，进制后退:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="title function_">replace</span>(<span class="string">&quot;新url&quot;</span>)</span><br><span class="line">用<span class="string">&quot;新url&quot;</span>代替history数组中当前旧的url，以此来阻止后退。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>刷新的2种方式: </li><li>普通刷新: 优先从本地浏览器缓存中获取资源，除非本地缓存没有或过期，才被迫从服务器重新下载</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="title function_">go</span>(<span class="number">0</span>)</span><br><span class="line"><span class="variable constant_">F5</span></span><br><span class="line">location.<span class="title function_">reload</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>强制刷新: 强制浏览器跳过本地缓存，总是直接从服务器下载新资源。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="title function_">reload</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>打开新链接方式总结<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*打开新链接方式总结：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">1. 在当前窗口打开，可后退</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">html:&lt;a href=&quot;url&quot; target=&quot;_self&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">js:open(&quot;url&quot;,&quot;_self&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">2. 在当前窗口打开，不可后退</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">js: location.replace(&quot;新url&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">3. 在新窗口打开，可打开多个</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">html:&lt;a href=&quot;url&quot; target=&quot;_blank&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">js:open(&quot;url&quot;,&quot;_blank&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">4. 在新窗口打开，只能打开一个</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">html: &lt;a href=&quot;url&quot; target=&quot;自定义窗口名&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">js: open(&quot;url&quot;,&quot;自定义窗口名&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">其实每个窗口在浏览器内存中都有一个唯一的窗口名</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">浏览器规定，同名的窗口只能打开一个</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">窗口名一般在打开新链接时，临时定义: </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">如何: 2种: </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">1. &lt;a href=&quot;url&quot; target=&quot;自定义窗口名&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">2. open(&quot;url&quot;,&quot;自定义窗口名&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">预定义窗口名: </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">_self: 表示自动获得原窗口的名字作为新窗口名</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">_blank: 表示不定义窗口名，浏览器会自动随机分配窗口名</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">open1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//open(&quot;http://tmooc.cn&quot;,&quot;_self&quot;);</span></span></span><br><span class="line"><span class="language-javascript">location.<span class="property">href</span>=<span class="string">&quot;http://tmooc.cn&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">open2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">location.<span class="title function_">replace</span>(<span class="string">&quot;http://tmooc.cn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">open3</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">open</span>(<span class="string">&quot;http://tmooc.cn&quot;</span>,<span class="string">&quot;_blank&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">open4</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">open</span>(<span class="string">&quot;http://tmooc.cn&quot;</span>,<span class="string">&quot;tmooc&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tmooc.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>在当前窗口打开，可后退<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:open1()&quot;</span>&gt;</span>在当前窗口打开，可后退(js)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:open2()&quot;</span>&gt;</span>在当前窗口打开，不可后退(js)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tmooc.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>在新窗口打开，可打开多个<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:open3()&quot;</span>&gt;</span>在新窗口打开，可打开多个(js)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tmooc.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;tmooc&quot;</span>&gt;</span>在新窗口打开，只能打开一个<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:open4()&quot;</span>&gt;</span>在新窗口打开，只能打开一个(js)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator:"></a>navigator:</h3><p>什么是: 封装浏览器配置信息的对象</p><p>何时: 只要获取浏览器的配置信息</p><p>包括: </p><ul><li>.cookieEnabled 判断当前浏览器是否启用cookie!</li><li>什么是cookie: 在客户端本地硬盘持久保存一个数据的小文件</li><li>.plugins 封装浏览器安装的插件信息的集合</li><li>什么是插件: 为浏览器添加新功能的小程序</li><li>何时: 判断浏览器是否安装了指定的插件: </li><li>navigator.plugins[“完整插件名”]!==undefined 说明安装了</li><li>.userAgent 保存浏览器名称和版本号的字符串</li><li>何时: 只要精确判断浏览器的名称和版本号时</li></ul><h3 id="定时器"><a href="#定时器" class="headerlink" title="**定时器: **"></a>**定时器: **</h3><p>周期性定时器: </p><p>什么是: 让程序每隔一段时间间隔，反复执行一项任务</p><p>如何: 3件事: </p><ol><li>先定义一个任务函数</li><li>启动定时器: 将任务函数放入定时器中反复执行: </li><li>var n=setInterval(任务函数, 间隔ms)</li></ol><p>强调: </p><ol><li>如果定时器可能被停止，则必须在启动是获得定时器的需要n。</li><li>任务函数后，不要加()，因为不是立刻执行，且不止执行一次。</li></ol><p>停止定时器: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clearInterval</span>(n) <span class="comment">//停止n号定时器</span></span><br></pre></td></tr></table></figure><p> 一次性定时器: </p><p>什么是: 让程序先等待一段时间后，再延迟执行一项任务</p><p>如何: 3件事</p><ol><li>任务函数</li><li>启动定时器: 开始等待，等待结束后，自动执行一次任务。任务执行后，自动停止。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="built_in">setTimeout</span>(任务函数, 等待ms)</span><br></pre></td></tr></table></figure><ol start="3"><li>关闭定时器: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clearTimeout</span>(n)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;倒计时&lt;/title&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .pause&#123;</span><br><span class="line">      width:12px; height:25px; background:#fff;</span><br><span class="line">      border:0;</span><br><span class="line">      border-left:2px solid #000;</span><br><span class="line">      border-right:2px solid #000;</span><br><span class="line">    &#125;</span><br><span class="line">    .play&#123;</span><br><span class="line">      width:0; padding:0; height:25px; background:#fff;</span><br><span class="line">      border:12px solid #fff;</span><br><span class="line">      border-left:12px solid #000;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"></span><br><span class="line"> &lt;body&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    距离下一个假期还有: &lt;span id=&quot;time&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;button id=&quot;btn&quot; class=&quot;pause&quot;&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function task()&#123;</span><br><span class="line">  var end=new Date(&quot;2019/01/10 17:36:30&quot;);</span><br><span class="line">  var now=new Date();</span><br><span class="line">  var s=parseInt((end-now)/1000);</span><br><span class="line">  if(s==0)&#123;//如果s等于0说明倒计时结束</span><br><span class="line">    clearInterval(n);//就停止定时器</span><br><span class="line">    var span=document.getElementById(&quot;time&quot;)</span><br><span class="line">    span.innerHTML=&quot;过年啦！&quot;;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    var d=parseInt(s/3600/24);</span><br><span class="line">    if(d&lt;10) d=&quot;0&quot;+d;</span><br><span class="line">    //s/3600/24,再下取整</span><br><span class="line">    var h=parseInt(s%(3600*24)/3600);</span><br><span class="line">    if(h&lt;10) h=&quot;0&quot;+h;</span><br><span class="line">    //s/(3600*24)的余数,再/3600,再下去整</span><br><span class="line">    var m=parseInt(s%3600/60);</span><br><span class="line">    if(m&lt;10) m=&quot;0&quot;+m;</span><br><span class="line">    //s/3600的余数,再/60，再下取整</span><br><span class="line">    s%=60;//s/60的余数</span><br><span class="line">    if(s&lt;10) s=&quot;0&quot;+s;</span><br><span class="line">    //距离下一个假期还有: ?天?小时?分?秒</span><br><span class="line">    var span=document.getElementById(&quot;time&quot;)</span><br><span class="line">    span.innerHTML=d+&quot;天&quot;+h+&quot;小时&quot;+m+&quot;分&quot;+s+&quot;秒&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task();</span><br><span class="line">var n=setInterval(task,1000);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片移入移出效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#slider</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>:<span class="number">200px</span>; <span class="attribute">height</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#555</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#slider</span>&gt;<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>:absolute; <span class="attribute">top</span>:<span class="number">0</span>; <span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>:all .<span class="number">5s</span> linear;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#slider</span>&gt;<span class="selector-tag">img</span><span class="selector-class">.show</span>&#123;  <span class="attribute">opacity</span>:<span class="number">1</span>;  &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;slider&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/2.jpg&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/3.jpg&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/4.jpg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> num=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;slider&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> imgs=div.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        imgs[num].<span class="property">className</span>=<span class="string">&quot;&quot;</span>;      </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(num==imgs.<span class="property">length</span>-<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            num=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            imgs[num].<span class="property">className</span>=<span class="string">&quot;show&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            num++;</span></span><br><span class="line"><span class="language-javascript">            imgs[num].<span class="property">className</span>=<span class="string">&quot;show&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(timer,<span class="number">3000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   function task()&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     var img=document.getElementsByClassName(&quot;show&quot;)[0];</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     img.className=&quot;&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     if(img.nextElementSibling!==null)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       img.nextElementSibling.className=&quot;show&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     &#125;else&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       img.parentElement.children[0].className=&quot;show&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   var n=setInterval(task,1000);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   var div=document.getElementById(&quot;slider&quot;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   div.onmouseover=function()&#123;             //鼠标进入div时</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     clearInterval(n);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   div.onmouseout=function()&#123;              //鼠标移出div时</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       n=setInterval(task,1000);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// function task()&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   var img=document.getElementsByClassName(&quot;show&quot;)[0];</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   if(img.nextElementSibling!==null)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     img.nextElementSibling.className=&quot;show&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   &#125;else&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     img.parentElement.ch=ildren[0].className=&quot;show&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li>什么是事件: 浏览器内容或元素状态的变化</li><li>什么是事件处理函数: 当事件发生时，自动调用的函数</li><li>何时: 如果希望事件发生时，能自动执行一项任务</li><li>如何绑定事件处理函数: 3种: </li></ul><ol><li>在HTML中: &lt;ANY on事件名=”处理函数()”</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">js</span>: <span class="keyword">function</span> 处理函数()&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>  <code> 问题: 不符合内容与行为分离的原则，不便于维护</code></p><ol start="2"><li>在js中绑定，赋值方式:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elem.<span class="property">on</span>事件名=处理函数;</span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>   <code>问题: 一个事件只能绑定一个处理函数</code></p><ol start="3"><li>在js中绑定，添加事件监听对象的方式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">elem.<span class="title function_">addEventListener</span>(<span class="string">&quot;事件名&quot;</span>,处理函数)</span><br><span class="line"></span><br><span class="line">在elem元素的监听队列中添加一个监听<span class="string">&quot;事件名&quot;</span>的对象，其中包含一个处理函数。</span><br><span class="line"></span><br><span class="line">当elem元素上发生<span class="string">&quot;事件名&quot;</span>时，会遍历监听队列，找到符合条件的处理函数，自动执行处理函数。</span><br><span class="line"></span><br><span class="line">elem.<span class="title function_">removeEventListener</span>(<span class="string">&quot;事件名&quot;</span>,原处理函数)</span><br></pre></td></tr></table></figure><p><code> 强调: 如果一个处理函数有可能被移除时，则绑定时就要用有名称的函数作为处理函数。</code></p><p><code>移除时才能通过函数名找到绑定时使用的原函数</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>...<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnShoot&quot;</span>&gt;</span>shoot<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnAward&quot;</span>&gt;</span>获得跟踪导弹<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnBreak&quot;</span>&gt;</span>失去跟踪导弹<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btnShoot=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btnShoot&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    btnShoot.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发射普通子弹····&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btnAward=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btnAward&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">shoot2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;发射跟踪导弹=&gt;=&gt;=&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    btnAward.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        btnShoot.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,shoot2);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    btnBreak.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;                        <span class="comment">//如果一个元素有可能被移除不要用匿名函数去定义</span></span></span><br><span class="line"><span class="language-javascript">        btnShoot.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>,shoot2);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> **事件模型: 在发生事件时，浏览器的执行过程 分为3个阶段: ** </p><ol><li><p>捕获: 由外向内，记录各级父元素上绑定的处理函数</p></li><li><p>目标触发: 优先触发目标元素上的处理函数: </p><p>​     <code>目标元素: 事件最初实际发生在的元素</code></p></li><li><p>冒泡: 由内向外，依次触发捕获时记录的各级父元素上的处理函数</p></li></ol><p>事件对象: 事件发生时，自动创建的，保存事件信息，并提供操作事件的API  的对象</p><p>何时: 获取事件信息，或修改事件的默认特性时</p><p>获取: 事件对象总是作为处理函数的第一个参数，默认传入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elem.<span class="property">on</span>事件名=<span class="keyword">function</span>(<span class="params">e</span>)&#123;  e-&gt;event  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>事件处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/2.css&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">d1.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;d1:789&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">d2.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">e.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;d2:456&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">d3.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">e.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;d3:123&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为当事件发生时: elem.on事件名( event )</p><p>API: </p><ol><li>取消冒泡: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="title function_">stopPropagation</span>();</span><br><span class="line"><span class="comment">//停止 蔓</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>利用冒泡: </li></ol><p>优化: 尽量减少事件监听对象的个数</p><p>为什么: 浏览器触发事件是采用遍历的方式找到的监听对象。监听对象多，遍历就慢。</p><p>如何: 如果多个子元素需要绑定相同的事件处理函数时，其实只要在父元素上绑定一次即可。所有子元素共用。</p><p>两个难题: </p><ol><li>获得目标元素: </li></ol><p>​            错误: this -&gt; 父元素</p><p>​            正确: e.target 代替this</p><ol start="2"><li>判断目标元素是否想要的！</li></ol><p>阻止默认行为: e.preventDefault()</p><ol><li>a当按钮用时: 如果href=”#xxx”, 会擅自修改地址栏中的url</li><li>提交按钮: 也能实现自定义提交。</li></ol><p>自定义提交: 2种: </p><ol><li>```js<br>input type=button<br>btn.onclick=function(){ <pre><code>//先验证//如果都验证通过//才form.submit()</code></pre>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```js</span><br><span class="line">   input type=submit</span><br><span class="line">   //表单提交过程: </span><br><span class="line">   //点submit按钮-&gt;触发form.onsubmit()-&gt;正式提交</span><br><span class="line">   //先验证</span><br><span class="line">   //如果有一项验证未通过</span><br><span class="line">   //就阻止提交</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ol><p><strong>鼠标坐标:</strong> </p><ol><li><p>相对于屏幕左上角: <strong>e.screenX  e.screenY</strong></p></li><li><p>相对于文档显示区左上角: <strong>e.clientX   e.clientY</strong></p></li><li><p>相对于当前事件所在元素左上角的偏移量: <strong>e.offsetX   e.offsetY</strong></p></li><li><p><img src="https://s2.ax1x.com/2019/07/01/Z8zGIx.png" alt="Z8zGIx.png"></p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="rEdxJj" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="rEdxJj">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/rEdxJj/">  rEdxJj</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></li></ol><p><strong>滚动事件:</strong> </p><p>​      //当窗口中的内容发生滚动时，自动执行</p><p>​      window.onscroll=function(){</p><p>​        //获得页面滚动过的距离: 页面顶部超出文档显示区的距离。</p><p>​        var scrollTop=document.body.scrollTop</p><p>​                 ||document.documentElement.scrollTop</p><p>​      }</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>根据页面滚动位置显示浮动框<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span>&#123;<span class="attribute">height</span>:<span class="number">2000px</span>;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#toTop</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>:fixed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toTop&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onscroll</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> scrollTop=<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(scrollTop);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(scrollTop&gt;=<span class="number">500</span>&amp;&amp;scrollTop&lt;=<span class="number">1000</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      toTop.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      toTop.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是DOM-Document-Object-Model&quot;&gt;&lt;a href=&quot;#什么是DOM-Document-Object-Model&quot; class=&quot;headerlink&quot; title=&quot;什么是DOM: Document Object Model&quot;&gt;&lt;/a&gt;什么是DOM: Document Object Model&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;DOM就是专门操作网页内容的API标准——W3C&lt;/li&gt;
&lt;li&gt;何时: 只要用js操作网页的内容&lt;/li&gt;
&lt;li&gt;包括: 增删改查+事件绑定&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES7</title>
    <link href="http://example.com/2019/06/28/ES7/"/>
    <id>http://example.com/2019/06/28/ES7/</id>
    <published>2019-06-28T07:31:29.000Z</published>
    <updated>2022-03-28T12:15:23.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES7-预览"><a href="#ES7-预览" class="headerlink" title="ES7 预览"></a>ES7 预览</h2><ul><li>数组<ul><li><code>arr.includes()</code> 数组是否包含某个东西</li><li>数组的 arr.keys(), arr,entries()</li><li>for … in 遍历数组 下标 key</li><li>for … of 遍历数组 值 value, 不能用于json</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 循环的时下标 key</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 循环的是值 value</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&#x27;</span>+i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> arr.<span class="title function_">entries</span>()) &#123;<span class="comment">//结构赋值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&#x27;</span> + key + value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = &#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="number">7</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> json) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数字<ul><li>求幂  3**8   代表：3的8次方</li></ul></li><li>字符串<ul><li>padStart()/padEnd() 指定宽度，不够就补空格或指定字符</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=&#x27;</span> + <span class="string">&#x27;abcd&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="string">&#x27;=&#x27;</span>)<span class="comment">//补几位  第二个参数补什么东西</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=&#x27;</span> + <span class="string">&#x27;abcd&#x27;</span>.<span class="title function_">padEnd</span>(<span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">=00abcd=</span><br><span class="line">=abcd00=</span><br></pre></td></tr></table></figure><ul><li>容忍度<ul><li>[1, 2, 3,] 老版数组最后不能有逗号，新的可以有</li><li>函数参数最后多的逗号也可以</li></ul></li><li>async await<ul><li>和 generator yield 类似</li><li>generator 不可以写成箭头函数， async 可以</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ES7-预览&quot;&gt;&lt;a href=&quot;#ES7-预览&quot; class=&quot;headerlink&quot; title=&quot;ES7 预览&quot;&gt;&lt;/a&gt;ES7 预览&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组&lt;ul&gt;
&lt;li&gt;&lt;code&gt;arr.includes()&lt;/code&gt; 数组是否包含某个东</summary>
      
    
    
    
    
    <category term="JavaScript新语法" scheme="http://example.com/tags/JavaScript%E6%96%B0%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="http://example.com/2019/06/28/ES6/"/>
    <id>http://example.com/2019/06/28/ES6/</id>
    <published>2019-06-28T07:21:50.000Z</published>
    <updated>2022-03-28T12:15:29.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript的ES6怎么来的"><a href="#JavaScript的ES6怎么来的" class="headerlink" title="JavaScript的ES6怎么来的"></a>JavaScript的ES6怎么来的</h2><ul><li><p>ECMAScript 和 JavaScript</p><ul><li>ECMA 是标准，JS 是实现</li><li>ECMAScript 简称 ECMA 或 ES</li></ul></li><li><p>历史版本</p><ul><li><p>1996, ES1.0 Netscape 将 JS 提交给 ECMA 组织，ES 正式出现</p></li><li><p>1999, ES3.0 被广泛支持</p></li><li><p>2011, ES5.1 成为 ISO 国际标准</p></li><li><p>2015, ES6.0 正式发布</p><span id="more"></span></li></ul></li></ul><h2 id="ES6兼容性"><a href="#ES6兼容性" class="headerlink" title="ES6兼容性"></a>ES6兼容性</h2><ul><li><p>ES6(ES2015) 支持的环境 IE10+, Chrome, FireFox, 移动端, NodeJS</p></li><li><p>解决不兼容办法，编译、转换</p><ul><li>在线转换</li><li>或者提前编译</li></ul></li><li><p><a href="https://www.babeljs.cn/">Babel 中文网</a></p><ul><li><p><a href="http://www.ruanyifeng.com/blog/2016/01/babel.html">Babel 入门教程 阮一峰</a></p></li><li><p>Babel 是一个 JavaScript 编译器</p></li><li><p>SystemJS是一个体积小的打包工具</p></li><li><p>一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行</p></li><li><p>现在就用 ES6 编写程序，而不用担心现有环境是否支持</p><ul><li>```html<script src="browser.js"></script><script text/babel>es6等语句</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## let和const以及var声明区别</span><br><span class="line"></span><br><span class="line">**变量提升：使用`var`声明变量，变量的创建并不在声明变量的地方，而是会在当前作用域的顶部。**</span><br><span class="line"></span><br><span class="line">如果声明在函数内，则变量的创建则会在函数作用域的顶部；如果声明不在函数内，则会提升到全局作用域的顶部。</span><br><span class="line"></span><br><span class="line">&gt; 示例</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">function getValue(condition)&#123;</span><br><span class="line">if(condition)&#123;</span><br><span class="line">var value = &quot;yes&quot;;</span><br><span class="line">return value;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">//value 在此处可访问，值为 undefined</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">//value 在此处可访问，值为 undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>等价于（var变量提升到当前函数作用域的顶部）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">condition</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> value;</span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">value = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//value 在此处可访问，值为 undefined</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//value 在此处可访问，值为 undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由变量提升会带来循环变量过度共享的问题</p></blockquote><h3 id="let声明"><a href="#let声明" class="headerlink" title="let声明"></a>let声明</h3><p>与var声明变量语法一致，但是let声明变量不会<strong>变量提升</strong>，变量的作用域只会限制在当前代码块中。由于let变量并不会提升到代码块的顶部，因此，要想让整个代码块能给访问到let变量，需要将let声明指定到代码块的顶部。</p><blockquote><p>示例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">condition</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line"><span class="keyword">let</span> value = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//value 在此处不可访问</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//value 在此处不可访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>let变量禁止重复声明：如果一个标识符已经在代码块内部中被定义，那么使用let以同样的标识符声明变量则会报错</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">43</span>；</span><br><span class="line"><span class="keyword">let</span> count; <span class="comment">//重复声明，报错</span></span><br></pre></td></tr></table></figure><h3 id="const声明"><a href="#const声明" class="headerlink" title="const声明"></a>const声明</h3><blockquote><p>const声明基本变量</p></blockquote><p><strong>const声明：使用const声明一个常量，一旦设置之后就不能再被修改，否则会报错。也就是说，使用const声明变量后要立即初始化</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> type;</span><br><span class="line">type=<span class="string">&#x27;TEST&#x27;</span>; <span class="comment">//Uncaught SyntaxError: Missing initializer in const declaration</span></span><br><span class="line"></span><br><span class="line">正确的为：</span><br><span class="line"><span class="keyword">const</span> type=<span class="string">&#x27;TEST&#x27;</span></span><br><span class="line">-----------------------------</span><br><span class="line"><span class="keyword">const</span> type=<span class="string">&#x27;TEST&#x27;</span></span><br><span class="line">type = <span class="string">&#x27;DEBUG&#x27;</span> <span class="comment">//ObjectMethod.html:244 Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><blockquote><p>const声明对象</p></blockquote><p><strong>const只会阻止变量绑定以及变量的修改，但是不会阻止对象成员变量的修改。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;nancy&#x27;</span>&#125;;</span><br><span class="line">person.<span class="property">name</span>= <span class="string">&#x27;nike&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">//nike</span></span><br><span class="line">person = &#123;&#125;; <span class="comment">//Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h3 id="let与const的比较"><a href="#let与const的比较" class="headerlink" title="let与const的比较"></a>let与const的比较</h3><blockquote><p>相同点</p></blockquote><ol><li><p><strong>不存在变量提升</strong>：let与const声明变量都不会存在<strong>变量提升</strong>，都只在块级作用域内，如果试图在代码块外访问let或者const变量都会报错；</p></li><li><p><strong>禁止重复声明</strong>：如果在同一作用域内，禁止let或者const使用以被定义的标识符声明变量；</p></li><li><p><strong>都具有暂时性死区（temporal dead zone，TDZ ）</strong>：使用let或者const声明变量，如果在声明处之前访问变量会报错。在变量当前作用域的块内，变量声明处之前被称之为TDZ。</p></li><li><p><strong>不会覆盖全局对象上的属性</strong>：let变量或者const变量会在全局作用域上创建新的变量，但是不会绑定到全局对象上（浏览器则是window对象），而var变量在全局作用域上会绑定到全局对象，也就是说，var全局变量可能会无意覆盖掉全局对象上的一些属性。</p><p>var RegExp = ‘hello’;</p><pre><code>console.log(window.RegExp);        //hello</code></pre><h2 id="console-log-window-RegExp-RegExp-RegExp覆盖掉window对象中的RegExp属性"><a href="#console-log-window-RegExp-RegExp-RegExp覆盖掉window对象中的RegExp属性" class="headerlink" title="console.log(window.RegExp===RegExp); //RegExp覆盖掉window对象中的RegExp属性"></a>console.log(window.RegExp===RegExp); //RegExp覆盖掉window对象中的RegExp属性</h2><p>​    let RegExp = ‘hello’;<br>​    console.log(window.RegExp);<br>​    console.log(window.RegExp===RegExp); //false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">condition</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line"><span class="comment">//value的TDZ</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>不同点</p></blockquote><ol><li><p>const不能再赋值，let声明的变量可以重复赋值;</p><p>​    </p></li></ol><h3 id="块级绑定的使用场景"><a href="#块级绑定的使用场景" class="headerlink" title="块级绑定的使用场景"></a>块级绑定的使用场景</h3><ol><li><p>循环内的let声明</p><p>在循环中使用var变量，由于var变量存在变量提升，每次迭代共享同一个var变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">//输出5</span></span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">//输出5</span></span><br></pre></td></tr></table></figure><blockquote><p>解决方法：将var变量改为let变量</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将var改成let之后</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 0,1,2,3,4</span></span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)<span class="comment">//Uncaught ReferenceError: i is not defined i无法污染外部函数</span></span><br></pre></td></tr></table></figure><p>let变量不会变量提升，let变量作用域不会逃离出for循环外，因此不会污染外部函数。而在for循环中也不会每次迭代都共享同一变量，而是会分别使用let变量副本。</p></li><li><p>循环内const声明</p><p>在普通的for循环中使用const变量，由于const变量不可修改，因此会报错。而在for-in或者for-of循环中可以使用const变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4];</span><br><span class="line">for(const item of arr)&#123;</span><br><span class="line">console.log(item); //输出1,2,3,4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.var变量提升</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">condition</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line"><span class="comment">//value的TDZ</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getValue</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="keyword">const</span> type=<span class="string">&#x27;TEST&#x27;</span></span><br><span class="line">type = <span class="string">&#x27;DEBUG&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(type);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.const声明对象，可以修改成员</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;nancy&#x27;</span>&#125;;</span><br><span class="line">person.<span class="property">name</span>= <span class="string">&#x27;nike&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.const变量可以用于for-in和for-of循环</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> arr)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//let和const变量不会覆盖全局对象上的属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RegExp</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">RegExp</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">RegExp</span>===<span class="title class_">RegExp</span>);</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>let和const变量都不会进行提升，并且只会在声明它们的代码块内部存在。由于变量能够在必要位置被准确声明，其表现更加接近其他语言；</li><li>块级绑定存在暂时性死区（TDZ ） ，试图在声明位置之前访问它就会导致错误；</li><li>let 与 const 的表现在很多情况下都相似于 var ，然而在循环中就不是这样。在 for-in<br>与 for-of 循环中， let 与 const 都能在每一次迭代时创建一个新的绑定，这意味着在循环体内创建的函数可以使用当前迭代所绑定的循环变量值（而不是像使用 var 那样，共享同一变量值）。同时在基础的for循环中，使用const变量会出错。</li></ol><p><strong>最佳实践</strong>：在默认情况下使用 const ，而只在你知道变量值需要被更改的情况下才使用 let 。</p><h2 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="字符串处理方法"></a>字符串处理方法</h2><blockquote><p>codePointAt()方法</p></blockquote><p>ES6 为全面支持 UTF-16 而新增的方法之一是 <code>codePointAt(</code>) ，它可以在给定字符串中按位<br>置提取 <code>Unicode</code> 代码点。该方法接受的是码元位置而非字符位置，并返回一个整数值。</p><blockquote><p>String.fromCodePoint()方法</p></blockquote><p>可以使用<code>codePointAt()</code> 来提取字符串内中某个字符的代码点，也可以借助 <code>String.fromCodePoint()</code>用给定的代码点来产生包含单个字符的字符串</p><blockquote><p>normalize()方法</p></blockquote><p>Unicode 另一个有趣之处是，不同的字符在排序或其它一些比较操作中可能会被认为是相同<br>的。有两种方式可以定义这种关联性：第一种是<strong>规范相等性</strong>（canonical equivalence ） ，<br>意味着两个代码点序列在所有方面都被认为是可互换的。例如，两个字符的组合可以按规范<br>等同于另一个字符。第二种<strong>关联性是兼容性</strong>（compatibility ） ，两个兼容的代码点序列看起<br>来有差别，但在特定条件下可互换使用。</p><p>ES6 给字符串提供了** normalize()** 方法，以支持 Unicode 标准形式。因此，在比较字符时，可以先将字符用同一种标准化方法，让它们标准化，再进行比较，例如，比较字符数组中的大小：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> compare = <span class="keyword">function</span>(<span class="params">values=[]</span>)&#123;</span><br><span class="line">values.<span class="title function_">sort</span>(<span class="function">(<span class="params">first,second</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> firstNormalized = first.<span class="title function_">normalize</span>();</span><br><span class="line"><span class="keyword">let</span> secondNormalized = second.<span class="title function_">normalize</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (firstNormalized &lt; secondNormalized) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstNormalized === secondNormalized) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;g&#x27;</span>];</span><br><span class="line"><span class="title function_">compare</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[&quot;a&quot;, &quot;c&quot;, &quot;g&quot;, &quot;z&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p>识别子字符串的方法</p></blockquote><p>为了识别字符串是否存在于其他字符串中，ES6提供了相应的方法来满足这类需求：</p><ul><li>includes()方法：在给定文本存在于字符串中的任意位置时会返回 <code>true</code>，否则会返回 <code>false</code>；</li><li>startsWith() 方法：在给定文本出现在字符串起始处时返回 <code>true</code> ，否则返回 <code>false</code> ；</li><li>endsWith() 方法：在给定文本出现在字符串结尾处时返回 <code>true</code> ，否则返回 <code>false</code> 。</li></ul><p>每个方法都接受两个参数：需要搜索的文本，以及可选的搜索起始位置索引。当提供了第二<br>个参数时， <code>includes()</code> 与 <code>startsWith() </code>方法会从该索引位置开始尝试匹配；当第二个参数未提供时， <code>includes()</code> 与 <code>startsWith(</code>) 方法会从字符串起始处开始查找，而 <code>endsWith() </code>方法则从尾部减去第二个参数后的位置作为起始位置。</p><blockquote><p>repeat()方法</p></blockquote><p>ES6 还为字符串添加了一个 repeat() 方法，它接受一个参数作为字符串的重复次数，返回一个将初始字符串重复指定次数的新字符串。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//repeat()方法</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>)); <span class="comment">//xxx</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">2</span>)); <span class="comment">//hello worldhello world</span></span><br></pre></td></tr></table></figure><h3 id="模板字面量"><a href="#模板字面量" class="headerlink" title="模板字面量"></a>模板字面量</h3><blockquote><p>基本语法</p></blockquote><p>模板字面量的最简单语法，是使用反引号<code>（ </code> ）` 来包裹普通字符串，而不是用双引号或单引号，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模板字面量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  message = <span class="string">`hello world`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">//hello world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> message); <span class="comment">//string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="property">length</span>); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>若想字符串中包含反引号，可以使用反斜杠<code>（\）</code>进行转义即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  message = <span class="string">`\`hello world\``</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">//`hello world`</span></span><br></pre></td></tr></table></figure><blockquote><p>多行字符串</p></blockquote><p>使用模板字面量可以轻松创建多行字符串，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">`hello</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">world`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">输出：</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">world</span><br></pre></td></tr></table></figure><blockquote><p>替换位</p></blockquote><p><strong>替换位可以嵌入到模板字面量中，替换位最终可以转换为字符串的一部分输出。替换位可以是任意的js表达式。</strong>替换位的语法采用 <code>$&#123;&#125;</code> 表示。</p><p>例如，替换位为变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> msg = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> message = <span class="string">`<span class="subst">$&#123;msg&#125;</span> world`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><p><strong>替换位不仅仅可以是简单的变量，还可以嵌入计算表达式、函数调用等，甚至还可以将模板字面量作为替换位嵌入到另一个模板字面量中。</strong></p><h3 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h3><p>一个<strong>模板标签</strong>（template tag ） 能对模板字面量进行转换并返回最终的字符串值，标签在模板的起始处被指定，即在第一个 ` 之前。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let message = tag`Hello world`;</span><br></pre></td></tr></table></figure><p> <code>tag</code> 就是会被应用到 <code>Hello world</code> 模板字面量上的模板标签。</p><blockquote><p>定义标签</p></blockquote><p>一个标签（tag ） 仅是一个函数，它被调用时接收需要处理的模板字面量数据。标签所接收的数据被划分为独立片段，并且必须将它们组合起来以创建结果。第一个参数是个数组，包含被 JS 解释过的字面量字符串，随后的参数是每个替换位的解释值。</p><p>标签函数的参数一般定义为剩余参数形式，以便更容易处理数据，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tag</span>(<span class="params">literals, ...substitutions</span>) &#123;</span><br><span class="line"><span class="comment">// 返回一个字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用模板字面量中的原始值</p></blockquote><p><strong>模板标签也能访问字符串的原始信息，主要指的是可以访问字符在转义之前的形</strong>式。获取原始字符串值的最简单方式是使用内置的 <code>String.raw()</code> 标签。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message1 = <span class="string">`Multiline\nstring`</span>,</span><br><span class="line">message2 = <span class="title class_">String</span>.<span class="property">raw</span><span class="string">`Multiline\nstring`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message1); <span class="comment">// &quot;Multiline</span></span><br><span class="line">   <span class="comment">// string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message2); <span class="comment">// &quot;Multiline\nstring&quot;</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式的改动"><a href="#正则表达式的改动" class="headerlink" title="正则表达式的改动"></a>正则表达式的改动</h3><ol><li><p>正则表达式<code>u</code>标识：你可以使用正则表达式来完成字符串的很多通用操作。但要记住，正则表达式假定单个字符使用一个 16 位的码元来表示。为了解决这个问题， ES6 为正则表达式定义了用于处理Unicode 的 <code>u</code> 标志。当一个正则表达式设置了 <code>u </code>标志时，它的工作模式将切换到针对字符，而不是针对码元。</p></li><li><p>正则表达的<code>y</code>标志： <code>y</code> 标志影响正则表达式搜索时的粘连（ <code>sticky</code> ） 属性，它表示从正则表达式的 lastIndex 属性值的位置开始检索字符串中的匹配字符。如果在该位置没有匹配成功，那么正则表达式将停止检索；</p></li><li><p>复制正则表达式：使用RegExp构造器时允许使用第二个参数，并且让它覆盖第一个参数中的标志；</p></li><li><p>flag属性：ES6 新增了 flags 属性用于配合 source 属性，让标志的获取变得更容易。例如：</p><p>var re = /ab/g;</p><pre><code>console.log(re.source); // abconsole.log(re.flags); // g</code></pre><p>本例查找了 re 的所有标志并将其打印到控制台，所用的代码量要比 <code>toString()</code> 方式少得多。同时使用 <code>source</code> 和 <code>flags</code> 允许你直接提取正则表达式的组成部分，而不必将正则表达式转换为字符串。</p></li></ol><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//codePointAt()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var text = &quot;a&quot; ;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(text.charCodeAt(0)); // 55362</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(text.charCodeAt(1)); // 57271</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(text.charCodeAt(2)); // 97</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(text.codePointAt(0)); // 134071</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(text.codePointAt(1)); // 57271</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(text.codePointAt(2)); // 97</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//normalize()方法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let compare = function(values=[])&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// values.sort((first,second)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let firstNormalized = first.normalize();</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let secondNormalized = second.normalize();</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// if (firstNormalized &lt; secondNormalized) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// return -1;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125; else if (firstNormalized === secondNormalized) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// return 0;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125; else &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// return 1;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let arr = [&#x27;a&#x27;,&#x27;z&#x27;,&#x27;c&#x27;,&#x27;g&#x27;];</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// compare(arr);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(arr);//[&quot;a&quot;, &quot;c&quot;, &quot;g&quot;, &quot;z&quot;]</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// //repeat()方法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(&#x27;x&#x27;.repeat(3)); //xxx</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(&#x27;hello world&#x27;.repeat(2)); //hello worldhello world</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//模板字面量</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let  message = `\`hello world\``;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(message); //`hello world`</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(typeof message); //string</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(message.length); //1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let message = `hello</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// world`;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(message);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//模板字面量</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let msg = &#x27;hello&#x27;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let message = `$&#123;msg&#125; world`;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(message); //hello world</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let message1 = `Multiline\nstring`,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// message2 = String.raw`Multiline\nstring`;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(message1); // &quot;Multiline</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    // string&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(message2); // &quot;Multiline\nstring&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> re = <span class="regexp">/ab/g</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">source</span>); <span class="comment">// ab</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">flags</span>); <span class="comment">// g</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="函数相关"><a href="#函数相关" class="headerlink" title="函数相关"></a>函数相关</h2><ol><li><p>函数参数默认值</p><p>let defaultFunc = function(url,tomeout=2000,callback={}){};</p><pre><code>    //使用默认的timeout和callback    defaultFunc(&#39;/url&#39;);    //使用默认的callback    defaultFunc(&#39;/url&#39;,100);    //使用指定的timeout和callback    defaultFunc(&#39;/url&#39;,100,function(body)&#123;        doSomething(body);    &#125;)</code></pre><blockquote><p>函数参数默认值的指定顺序可以随意</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//需要指定默认参数的可选参数timeout，排在callback</span><br><span class="line">let defaultFunc = function(url,tomeout=2000,callback)&#123;&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>只有在未传递参数，或者参数为undefined时，才会使用默认参数，null值被认为是有效的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//null被认为是有效的，不会使用timeout的默认值</span><br><span class="line">defaultFunc(&#x27;/url&#x27;,null,function(body)&#123;</span><br><span class="line">doSomething(body);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>函数参数默认值表达式</p><p>除了直接使用具体值赋给函数参数默认值外，函数参数默认值还可以有表达式构成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function getValue()&#123;return 5&#125;;</span><br><span class="line">function test(a,b=getValue())&#123;</span><br><span class="line">return a+b;</span><br><span class="line">&#125;</span><br><span class="line">//调用getValue</span><br><span class="line">console.log(test(1)); //6</span><br><span class="line">//不使用b的默认值s</span><br><span class="line">console.log(test(1,2)); //3</span><br></pre></td></tr></table></figure><blockquote><p><strong>可以使用前面的参数，来作为后面参数的默认值。前面的参数默认值不能引用后面的参数值</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function add(a,b=1)&#123;return a+b&#125;;  </span><br><span class="line">console.log(add(1,1));  //2</span><br><span class="line">function addition(a=b,b)&#123;return a+b&#125;;</span><br><span class="line">console.log(addition(undefined,1)); //Uncaught ReferenceError: b is not defined</span><br></pre></td></tr></table></figure><blockquote><p>函数参数默认值存在暂时性死区（TDZ），在函数参数默认值表达式中，还未初始化赋值的参数值无法作为其他参数的默认值 </p></blockquote></li><li><p>函数参数默认值对arguments对象的影响</p><ul><li><p>ES5中，在非严格模式下，arguments对象能够反映出具名参数的变化，当具名参数值更新的时候，arguments对象中相应的元素值也会更新。在严格模式下不能反映出具名参数的变化</p><p>function testArgs(a,b){</p><pre><code>    console.log(a===arguments[0]); //true    console.log(b===arguments[1]); //true    a=&#39;c&#39;;    b=&#39;d&#39;;    console.log(a===arguments[0]); //true    console.log(b===arguments[1]); //true&#125;testArgs(&#39;a&#39;,&#39;b&#39;);</code></pre></li><li><p>在ES6中，参数默认值与arguments对象分离，即被赋予参数默认值的参数无法从arguments对象中获取。另外，无论是非严格模式下，还是在严格模式下，具名参数的更改都不会在arguments对象中更新。  </p></li></ul></li></ol><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>ES6中，当参数个数无法确定时，可以使用剩余参数（rest parameter）来表示，剩余参数就相当于一个容器，调用函数时传入几个参数值，这个容器就装载几个参数值。剩余参数能够将多个独立的参数合并到一个数组中去，剩余参数表示为<code>...keys</code>,有三个点加上一个具名参数标识符组成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">rp</span>(<span class="params">...keys</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(keys.<span class="property">length</span>)&#125;</span><br><span class="line"><span class="title function_">rp</span>(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><blockquote><p>具名参数只能放在参数组最后面，并且只能有且仅有一个剩余参数。剩余参数不能作为对象字面量的setter属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">...names</span>); <span class="comment">//Setter function argument must not be a rest parameter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在Function构造器中能够将函数体以字符串的形式作为函数的参数，并且支持参数默认值以及剩余参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;first&quot;</span>,<span class="string">&quot;second&quot;</span>,<span class="string">&quot;return first+second&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">1</span>)); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>扩展运算符能够将数组分离，将分割后单独的参数值传递给函数，能够替代apply()方法的使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">0</span>,...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]));  <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h3 id="new-target属性"><a href="#new-target属性" class="headerlink" title="new.target属性"></a>new.target属性</h3><p>能够使用<code>new.target</code>属性来判断函数是否利用<code>new</code>来进行调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">target</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">new</span>.<span class="property">target</span>!==<span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通过new来调用&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不是通过new来调用&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="块级函数"><a href="#块级函数" class="headerlink" title="块级函数"></a>块级函数</h3><p>在代码块中能够声明函数，函数也被称之为<strong>块级函数</strong>，在严格模式下，块级函数会提升到当前所处代码块的顶部，在整个代码块中都能够被访问，在代码块外的地方就不能被访问。而在非严格模式下，块级函数会被提升到全局作用域。</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数提供了一种更加简洁的函数书写方式，并且与传统函数有很多不同的地方。箭头函数基本的语法为：<code>参数 =&gt; 函数体</code>。</p><p>根据参数的个数以及函数体的行数有多种变形：</p><ol><li>无参数时，可以使用圆括号()表示；当只有一个参数时可以省略圆括号()；当有多个参数时可以使用圆括号包裹，并参数之间用逗号进行分隔；</li><li>当函数体有多行语句时，使用大括号{}包裹起来，就像写正常的函数一样；当只有一行语句时，并需要返回结果时，可以省去大括号{}，结果会自动返回。</li><li>如果需要返回对象的话，需要使用圆括号()将对象包裹起来，为了防止对象字面量被认为是函数体语句。</li></ol><p>箭头函数的特性：</p><ol><li><p>没有this、super、arguments，new.target绑定：this、super、arguments以及内部函数的new.target的值由所在的最近的外部非箭头函数来决定；</p></li><li><p>没有arguments对象绑定，但是能够访问包含它的外部函数的arguments对象；</p><p>let outer = function(arg){</p><pre><code>    return ()=&gt;arguments[0];&#125;let inner = outer(7);console.log(inner()) //7</code></pre></li><li><p>不能使用new来调用：箭头函数没有[[Construct]]方法，因此不能被用为构造函数，使用new调用函数会抛出错误；</p></li><li><p>没有原型：没有使用new，因此没有prototype属性；</p></li><li><p>不能修改this：不能通过call(),apply()以及bind()方法修改this；</p></li><li><p>不允许使用重复的具名参数：箭头函数不允许拥有重复的具名参数，无论是否在严格模式下；而传统函数只有在严格模式下才禁止使用重复的具名参数；</p></li></ol><h3 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h3><p>尾调用是指在一个函数内最后的语句调用了另外一个函数，这个函数会重新创建新的栈帧并置于调用栈之上，如果调用次数过多，会导致内存过大。当满足以下条件时，执行引擎会针对尾调用进行优化，不再重新创建新的栈帧，而是会复用当前栈帧：</p><ol><li><p>尾调用不能引用当前栈帧中的变量；</p></li><li><p>进行尾调用的函数在尾调用返回结果后不能做额外任何操作；</p></li><li><p>尾调用的结果作为当前函数的返回值；</p><p>//尾递归优化</p><pre><code>&#39;use strict&#39;</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//满足尾调用优化条件</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">doElse</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> tmp = <span class="title function_">doElse</span>();</span><br><span class="line"><span class="comment">//尾调用函数结果没有直接返回，因此不满足</span></span><br><span class="line"><span class="comment">//尾调用优化条件</span></span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//尾调用函数后有其他额外操作，结果没有</span></span><br><span class="line"><span class="comment">//立即返回，因此不满足尾调用优化条件</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+<span class="title function_">doElse</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>由于闭包会持有外部函数的变量，因此对闭包的尾调用优化很难处理，但是，在递归操作中，可以利用到尾调用优化，减少栈帧个数，降低内存。</p><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//函数参数默认值</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> defaultFunc = <span class="keyword">function</span>(<span class="params">url,tomeout=<span class="number">2000</span>,callback=&#123;&#125;</span>)&#123;&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defaultFunc</span>(<span class="string">&#x27;/url&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defaultFunc</span>(<span class="string">&#x27;/url&#x27;</span>,<span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defaultFunc</span>(<span class="string">&#x27;/url&#x27;</span>,<span class="number">100</span>,<span class="keyword">function</span>(<span class="params">body</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">doSomething</span>(body);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//ES5非严格模式下具名参数对arguments对象的影响</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">testArgs</span>(<span class="params">a,b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(b===<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span></span><br><span class="line"><span class="language-javascript">a=<span class="string">&#x27;c&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">b=<span class="string">&#x27;d&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(b===<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">testArgs</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//函数参数默认值表达式</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="number">5</span>&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b=getValue()</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> a+b;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>(<span class="number">1</span>));</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>(<span class="number">1</span>,<span class="number">2</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b=<span class="number">1</span></span>)&#123;<span class="keyword">return</span> a+b&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">1</span>));</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addition</span>(<span class="params">a=b,b</span>)&#123;<span class="keyword">return</span> a+b&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addition</span>(<span class="literal">undefined</span>,<span class="number">1</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">rp</span>(<span class="params">...keys</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(keys.<span class="property">length</span>)&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">rp</span>(<span class="number">1</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person =&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">...names</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;first&quot;</span>,<span class="string">&quot;second&quot;</span>,<span class="string">&quot;return first+second&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">1</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//扩展运算符</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">0</span>,...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//new.target属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">target</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(<span class="keyword">new</span>.<span class="property">target</span>!==<span class="string">&#x27;undefined&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通过new来调用&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不是通过new来调用&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> test = <span class="keyword">new</span> <span class="title function_">target</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//箭头函数没有arguments对象绑定</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> outer = <span class="keyword">function</span>(<span class="params">arg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="function">()=&gt;</span><span class="variable language_">arguments</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> inner = <span class="title function_">outer</span>(<span class="number">7</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">inner</span>());</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//尾递归优化</span></span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;use strict&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//满足尾调用优化条件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="title function_">doElse</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> tmp = <span class="title function_">doElse</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//尾调用函数结果没有直接返回，因此不满足</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//尾调用优化条件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> tmp;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//尾调用函数后有其他额外操作，结果没有</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//立即返回，因此不满足尾调用优化条件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="number">1</span>+<span class="title function_">doElse</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对象类别"><a href="#对象类别" class="headerlink" title="对象类别"></a>对象类别</h2><p>对象有以下几种类别：</p><ul><li>普通对象：拥有JS对象所有默认的内部行为；</li><li>奇异对象：其内部行为在某些方面有别于默认行为；</li><li>标准对象：在ES6中被定义的对象，例如Array,Date等；</li><li>内置对象：在脚本开始运行的时候由JS运行环境提供的对象，所有的标准对象都是内置对象</li></ul><h3 id="对象字面量语法的扩展"><a href="#对象字面量语法的扩展" class="headerlink" title="对象字面量语法的扩展"></a>对象字面量语法的扩展</h3><blockquote><p>属性初始化的速记法</p></blockquote><p>属性初始化器的速记法可以用来消除属性名和本地变量的重复情况，可以使用作用域内的变量值赋值给同名属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">name</span>:name,</span><br><span class="line"><span class="attr">age</span>:age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于属性名和本地变量名相同，可以采用</span></span><br><span class="line"><span class="comment">//属性初始化器的速记法，等价于</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">name,</span><br><span class="line">age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法简写</p></blockquote><p>在对象字面量的写法中，为一个对象添加一个方法，需要指定对象的属性以及具体的函数声明。ES6提供了一种方法简写语法，通过省略function关键字，能够让为对象添加方法的语法更加简洁。有一个重要的区别是：**方法简写能够使用<code>super</code>，而非简写的方法不能使用<code>super</code>**。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法简写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">sayName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>需计算属性名</p></blockquote><p>需计算属性名规则允许对象字面量中属性名是变量、字符串字面量或者由变量计算而得的，具体写法是通过方括号[]包含属性名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需计算属性名</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> firstName = <span class="string">&#x27;first name&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> suffix = <span class="string">&#x27;@github.com&#x27;</span></span><br><span class="line"><span class="keyword">let</span> email = <span class="string">&#x27;email&#x27;</span>;</span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line">person[firstName] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">//字符串字面量</span></span><br><span class="line">person[<span class="string">&#x27;last name&#x27;</span>]= <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="comment">//变量计算而得到的</span></span><br><span class="line">person[email+suffix] = <span class="string">&#x27;example@github.com&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>Object.is()</p></blockquote><p>JS中比较两个值是否相同的时候会使用严格等于运算符<code>===</code>，但是，使用严格运算符式，+0和-0会认为这两者是相等的，而<code>NaN===NaN</code>是不相等的，使用Object.is()方法来判断这两者情况与使用严格相等符会有所不同，其他情况和使用严格相等运算符基本一致；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span>==-<span class="number">0</span>);  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span>===-<span class="number">0</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>,-<span class="number">0</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>==<span class="title class_">NaN</span>); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>===<span class="title class_">NaN</span>); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>==<span class="string">&#x27;5&#x27;</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>===<span class="string">&#x27;5&#x27;</span>); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">5</span>,<span class="string">&#x27;5&#x27;</span>)) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p>Object.assign()</p></blockquote><p>一个对象从另外一个对象获取属性和方法，这是典型的混入（Mixin）模式，Object.assign()方法可以更简洁的实现对象混入，该方法需要一个接受者对象和若干个供应者对象。接收者会按照供应者在参数中的顺序来依次接收它们的属性，这意味着，第二个供应者可能会覆盖第一个供应者相同的属性；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person=&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> car =&#123;</span><br><span class="line"><span class="attr">brand</span>:<span class="string">&#x27;BWM&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj,person,car);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;name: &quot;hello&quot;, age: 5, brand: &quot;BWM&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>Object.assign()方法并未在接受者上创建访问器属性，即使供应者拥有访问器属性，由于Object.assign()方法使用赋值运算符，供应者的访问器属性会转换成接受者的数据属性；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> receiver = &#123;&#125;,</span><br><span class="line">supplier = &#123;</span><br><span class="line"><span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;file.js&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(receiver, supplier);</span><br><span class="line"><span class="keyword">let</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(receiver, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">value</span>); <span class="comment">// &quot;file.js&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">get</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>允许重复的属性</p></blockquote><p>在ES5严格模式下，为对象字面量中属性会检查是否重复，如果重复的话就会抛出一个错误。而在ES6中，无论是在严格模式下还是非严格模式下，都不再检查属性是否重复，当属性重复的时候，后面的属性会覆盖前面的属性；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重复的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">//world</span></span><br></pre></td></tr></table></figure><p>​        </p><blockquote><p>自有属性的枚举顺序</p></blockquote><p>ES6规定了自有属性的枚举顺序，会依次按照数字类型键-&gt;字符串类型键-&gt;符号类型键的枚举顺序：</p><ol><li>所有的数字类型键，按升序排列；</li><li>所有的字符串类型键，按被添加到对象的顺序排列；</li><li>所有的符号类型，也按添加顺序排列</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自有属性的枚举顺序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">c</span>: <span class="number">1</span>,</span><br><span class="line"><span class="number">2</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">d</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));<span class="comment">//012acbd</span></span><br></pre></td></tr></table></figure><h3 id="更强大的原型"><a href="#更强大的原型" class="headerlink" title="更强大的原型"></a>更强大的原型</h3><blockquote><p>修改对象原型</p></blockquote><p>在ES6中可以通过Object.setPrototypeOF()方法修改对象的原型，该方法包含了两个参数：一个是被修改原型的对象，一个是将被指定的原型；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog =&#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> friend = <span class="title class_">Object</span>.<span class="title function_">create</span>(person); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(friend.<span class="title function_">getName</span>()); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(friend)===person); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(friend,dog); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(friend.<span class="title function_">getName</span>()); <span class="comment">//world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(friend)===dog); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>使用super引用</p></blockquote><p>能够使用<code>super</code>引用，来访问原型中的方法，假如需要覆盖对象中的同名方法可以这样做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog =&#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">getName</span>()+<span class="string">&#x27; world;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">​</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(dog,person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="title function_">getName</span>()); <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><p><strong>如果使用super引用的话，只能在方法简写中才能使用，否则就会报错：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dog =&#123;</span><br><span class="line"><span class="attr">getNanem</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">getName</span>()+<span class="string">&#x27; world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">报错：<span class="title class_">Uncaught</span> <span class="title class_">SyntaxError</span>: <span class="string">&#x27;super&#x27;</span> keyword unexpected here</span><br></pre></td></tr></table></figure><blockquote><p>方法定义</p></blockquote><p>在ES6之前，方法的概念从未被正式定义，而在ES6中做出了正式定义：方法是拥有一个[[HomeObject]]内部属性的函数，此内部属性指向该方法所属的对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不是方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>ES6通过对对象功能的扩展，让ES6更加简单易用和更加强大，在对象功能上具体有这样一些改进：</p><p><strong>针对对象字面量：</strong></p><ol><li>速记法属性能够更加轻易的将作用域内的变量值赋值给同名属性；</li><li>需计算属性名规则能够更方便的将，变量、字符串字面量以及通过变量计算的结果作为属性；</li><li>方法简写法能够省略function关键字以及冒号：，让方法的定义更加简洁；</li><li>舍弃了重复属性的检查，让后面的属性覆盖掉前面同名属性的属性值；</li><li>指定了数字类型键-&gt;字符串类型键-&gt;符号类型键的对象自有属性的枚举顺序。</li></ol><p><strong>针对对象原型：</strong></p><ol><li>Object.assign()方法能够将多个提供者对象的属性整合到接受者对象中，能够方便实现对象的混入模式；</li><li>Object.is()方法在处理特殊值时比严格比较符更加安全；</li><li>Object.setPrototypeOf()方法能够更加方便更改一个对象的原型；</li><li>提供super关键字，访问原型上的方法。</li></ol><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性构造器的速记法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">name,</span><br><span class="line">age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">createPerson</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">18</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法简写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">sayName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">需计算属性名</span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> firstName = <span class="string">&#x27;first name&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> suffix = <span class="string">&#x27;@github.com&#x27;</span></span><br><span class="line"><span class="keyword">let</span> email = <span class="string">&#x27;email&#x27;</span>;</span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line">person[firstName] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">//字符串字面量</span></span><br><span class="line">person[<span class="string">&#x27;last name&#x27;</span>]= <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="comment">//变量计算而得到的</span></span><br><span class="line">person[email+suffix] = <span class="string">&#x27;example@github.com&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>()方法</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span>==-<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span>===-<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>,-<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>==<span class="title class_">NaN</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>===<span class="title class_">NaN</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>==<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>===<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">5</span>,<span class="string">&#x27;5&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>()</span><br><span class="line"><span class="keyword">let</span> person=&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> car =&#123;</span><br><span class="line"><span class="attr">brand</span>:<span class="string">&#x27;BWM&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj,person,car);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> receiver = &#123;&#125;,</span><br><span class="line">supplier = &#123;</span><br><span class="line"><span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;file.js&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(receiver, supplier);</span><br><span class="line"><span class="keyword">let</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(receiver, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">value</span>); <span class="comment">// &quot;file.js&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">get</span>); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重复的属性</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//自有属性的枚举顺序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">c</span>: <span class="number">1</span>,</span><br><span class="line"><span class="number">2</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">d</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));<span class="comment">//012acbd</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property">setPrototypeOf</span>方法</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog =&#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> friend = <span class="title class_">Object</span>.<span class="title function_">create</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(friend.<span class="title function_">getName</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(friend)===person);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(friend,dog);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(friend.<span class="title function_">getName</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(friend)===dog);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不是方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog =&#123;</span><br><span class="line"><span class="attr">getNanem</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">getName</span>()+<span class="string">&#x27; world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(dog,person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="title function_">getName</span>()); <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><blockquote><p>对象解构语法</p></blockquote><p>对象解构语法在赋值语句的左侧使用了对象字面量，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125;=person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//18</span></span><br></pre></td></tr></table></figure><p>在声明变量name,age的时候，利用对象解构的方式，将person对象中name,age属性分别赋值给变量name和age，类似于简写的属性初始化器；</p><blockquote><p>解构赋值</p></blockquote><p><strong>对象解构不仅可以用于变量声明，还可以用于变量赋值</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">age= <span class="number">20</span>;</span><br><span class="line">(&#123;name,age&#125;=person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//18</span></span><br></pre></td></tr></table></figure><p>name,age变量在声明变量的时候就已经完成了变量初始化操作，之后利用对象解构的方式实现变量赋值。<strong>注意：必须使用圆括号来包裹解构赋值语句，否则暴露的花括号会被解析成代码块语句，而代码块语句不允许在赋值（=）语句左侧出现。圆括号标示了里面的花括号并不是块语句，而是被解释成表达式，从而完成了赋值操作</strong>；</p><p>对象解构不仅可以用于变量赋值，任何期望赋值的地方都可以使用对象解构方式赋值，如传递给函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">age= <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">is</span>(value,person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>(&#123;name,age&#125;=person));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//18</span></span><br></pre></td></tr></table></figure><p>调用函数test的时候就是使用解构赋值的方式来传递入参；</p><blockquote><p>默认值</p></blockquote><p>如果在使用对象解构赋值的时候，没有在对象中找到同名属性的话，那么本地变量就会赋值为<code>undefined</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">age= <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">is</span>(value,person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(&#123;name,age,value&#125;=person);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>为了不让变量值为<code>undefined</code>，可以为变量设置默认值。设置变量默认值使用等号“=”，等号右侧为需要设置的默认值，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">age= <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">is</span>(value,person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(&#123;name,age,value=<span class="literal">true</span>&#125;=person);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>利用等号为value设置默认值true。</p><blockquote><p>设置不同名本地变量</p></blockquote><p>使用解构赋值，也可以为不同名的变量赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">age= <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(&#123;<span class="attr">name</span>:localName,<span class="attr">age</span>:localAge&#125;=person);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localName); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localAge); <span class="comment">//18</span></span><br></pre></td></tr></table></figure><p>使用冒号“：”可以为不同名的变量完成赋值，冒号左边为对象的属性名，冒号的右边为另外的变量名。</p><p>同样的可以为非同名的变量设置默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">age= <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&#123;<span class="attr">name</span>:localName,<span class="attr">age</span>:localAge,value=<span class="literal">true</span>&#125;=person);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localName); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localAge); <span class="comment">//18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>嵌套的对象解构</p></blockquote><p>对象解构不仅可以处理属性值为基本类型值的对象的解构，还可以被用于嵌套的对象解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line"><span class="attr">loc</span>: &#123;</span><br><span class="line"><span class="attr">start</span>: &#123;</span><br><span class="line"><span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">column</span>: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">end</span>: &#123;</span><br><span class="line"><span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">column</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>&#123;<span class="attr">loc</span>:&#123;start&#125;&#125;=node;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(start.<span class="property">line</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(start.<span class="property">column</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>同样的，在嵌套的对象解构中依然也可以为不同名的变量赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line"><span class="attr">loc</span>: &#123;</span><br><span class="line"><span class="attr">start</span>: &#123;</span><br><span class="line"><span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">column</span>: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">end</span>: &#123;</span><br><span class="line"><span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">column</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>&#123;<span class="attr">loc</span>:&#123;<span class="attr">start</span>:localStart&#125;&#125;=node;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localStart.<span class="property">line</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localStart.<span class="property">column</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h3 id="数组结构"><a href="#数组结构" class="headerlink" title="数组结构"></a>数组结构</h3><blockquote><p>数组解构的语法</p></blockquote><p>数组解构与对象结构十分相似，对象解构是通过对象的<strong>属性名</strong>去查找对象中的属性值，然后进行赋值给变量，而数组解构则是通过数组的<strong>索引</strong>去找到具体值，再去赋值给变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> [first,second]=arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>将数组arr中第一个元素和第二个元素分别赋值给first和second。如果只想要数组中第三个元素值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> [,,third]=arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(third);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>两个逗号”,”相当于占位符，前两个元素值不直接赋值给变量，仅仅将数组中的第3个元素值，赋值给变量third。    </p><blockquote><p>解构赋值</p></blockquote><p>可以在赋值表达式中使用数组解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> first = <span class="number">5</span>,second = <span class="number">6</span>;</span><br><span class="line">[first,second] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p><strong>与对象解构赋值和数组解构赋值相比起来，不需要使用圆括号”()”将赋值表达式包裹起来。</strong></p><p>使用数组解构，可以十分方便的完成变量值交换：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">[first,second] = arr;</span><br><span class="line">[first,second]=[second,first];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><blockquote><p>默认值</p></blockquote><p>与对象解构赋值一样，数组解构赋值同样可以使用默认值，<strong>当指定位置的项不存在或者其值为undefined</strong>，那么该默认值就会被使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">[first,second,third=<span class="number">3</span>] = arr;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(third);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><blockquote><p>嵌套的解构</p></blockquote><p>与嵌套对象解构一样，嵌套的数组也可以解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> [first,[second]]=array;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><blockquote><p>剩余项</p></blockquote><p>数组解构中有一个类似于剩余参数的概念，可以使用<code>...</code>语法来将剩余项目给一个指定的变量，这种语法称之为剩余项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//剩余项</span></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> [first,...subArr]=array;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subArr.<span class="property">length</span>);<span class="comment">//4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subArr[<span class="number">0</span>]);<span class="number">2</span></span><br></pre></td></tr></table></figure><p>将数组array中除了第一项外的其他项都赋给了变量<code>subArr</code>，剩余项<code>subArr</code>的长度为4，并且第一个元素为2；</p><p><strong>使用剩余项，可以很方便的完成数组复制：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组复制</span></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> [...clonedArr]=array;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clonedArr);<span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><blockquote><p>混合解构</p></blockquote><p>对象解构和数组解构可以混合在一起使用，这样就可以创建更加复杂的解构表达式，提取我们想要的内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line"><span class="attr">loc</span>: &#123;</span><br><span class="line"><span class="attr">start</span>: &#123;</span><br><span class="line"><span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">column</span>: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">end</span>: &#123;</span><br><span class="line"><span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">column</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">range</span>: [<span class="number">0</span>, <span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">loc</span>:&#123;start&#125;,<span class="attr">range</span>:[rangeArr]&#125;=node;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(start.<span class="property">line</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rangeArr); <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h3 id="参数解构"><a href="#参数解构" class="headerlink" title="参数解构"></a>参数解构</h3><p>当一个函数的入参既有必选参数，又有可选参数的时候，可选参数的部分可以利用解构的方式来定义，同时，如果利用到解构，需要为其设置默认值，否则会报错。因此，参数解构的规范形式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">name, value,</span></span><br><span class="line"><span class="params">&#123;</span></span><br><span class="line"><span class="params">secure = <span class="literal">false</span>,</span></span><br><span class="line"><span class="params">path = <span class="string">&quot;/&quot;</span>,</span></span><br><span class="line"><span class="params">domain = <span class="string">&quot;example.com&quot;</span>,</span></span><br><span class="line"><span class="params">expires = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.now() + <span class="number">360000000</span>)</span></span><br><span class="line"><span class="params">&#125; = &#123;&#125;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此代码中参数解构给每个属性都提供了默认值，所以你可以避免检查指定属性是否已被传入<br>（以便在未传入时使用正确的值） 。而整个解构的参数同样有一个默认值，即一个空对象，<br>令该参数成为可选参数。这么做使得函数声明看起来比平时要复杂一些，但却是为了确保每<br>个参数都有可用的值而付出的微小代价。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ol><li>解构使得在 JS 中操作对象与数组变得更容易。使用熟悉的对象字面量与数组字面量语法，可以将数据结构分离并只获取你感兴趣的信息。对象解构模式允许你从对象中进行提取，而数组模式则能用于数组。</li><li>对象与数组解构都能在属性或项未定义时为其提供默认值；在赋值表达式右侧的值为 null<br>或 undefined 时，两种模式都会抛出错误。你也可以在深层嵌套的数据结构中使用对象与数<br>组解构，下行到该结构的任意深度。</li><li>使用 var 、 let 或 const 的解构声明来创建变量，就必须提供初始化器。解构赋值能替代其他赋值，并且允许你把值解构到对象属性或已存在的变量上。</li><li>参数解构使用解构语法作为函数的参数，让“选项”（options ） 对象更加透明。你实际感兴趣的数据可以与具名参数一并列出。解构的参数可以是对象模式、数组模式或混合模式，并且你能使用它们的所有特性。</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 对象解构赋值</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person =&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">name = <span class="string">&#x27;world&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">age= <span class="number">20</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">(&#123;<span class="attr">name</span>:localName,<span class="attr">age</span>:localAge,value=<span class="literal">true</span>&#125;=person);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(localName); <span class="comment">//hello</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(localAge); <span class="comment">//18</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//嵌套的对象解构</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> node = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="string">&quot;Identifier&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">loc</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">start</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">line</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">column</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">end</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">line</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">column</span>: <span class="number">4</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span>&#123;<span class="attr">loc</span>:&#123;<span class="attr">start</span>:localStart&#125;&#125;=node;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(localStart.<span class="property">line</span>); <span class="comment">// 1</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(localStart.<span class="property">column</span>);<span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 数组解构</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">[first,second,third=<span class="number">3</span>] = arr;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(third);<span class="comment">//3</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 嵌套解构</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> array = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>]</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> [first,[second]]=array;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 剩余项</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> [first,...subArr]=array;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(subArr.<span class="property">length</span>);<span class="comment">//4</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(subArr[<span class="number">0</span>]);<span class="number">2</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//数组复制</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> [...clonedArr]=array;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(clonedArr);<span class="comment">//[1,2,3,4,5]</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 混合解构</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> node = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="string">&quot;Identifier&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">loc</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">start</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">line</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">column</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">end</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">line</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">column</span>: <span class="number">4</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">range</span>: [<span class="number">0</span>, <span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> &#123;<span class="attr">loc</span>:&#123;start&#125;,<span class="attr">range</span>:[rangeArr]&#125;=node;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(start.<span class="property">line</span>); <span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(rangeArr); <span class="comment">//0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 参数解构</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">name, value,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">&#123;</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">secure = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">path = <span class="string">&quot;/&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">domain = <span class="string">&quot;example.com&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">expires = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.now() + <span class="number">360000000</span>)</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">&#125; = &#123;&#125;</span></span></span><br><span class="line"><span class="params"><span class="language-javascript"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// ...</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Symbol基础"><a href="#Symbol基础" class="headerlink" title="Symbol基础"></a>Symbol基础</h2><h3 id="创建符号值"><a href="#创建符号值" class="headerlink" title="创建符号值"></a><strong>创建符号值</strong></h3><p>在 JS 已有的基本类型（字符串、数值、布尔类型、 <code>null</code> 与 <code>undefined</code> ） 之外， ES6 引入了一种新的基本类型：符号（<code>Symbol</code> ） 。 符号起初被设计用于创建对象私有成员，而这也是 JS 开发者期待已久的特性。在符号诞生之前，将字符串作为属性名称导致属性可以被轻易访问，无论命名规则如何。而“私有名称”意味着开发者可以创建非字符串类型的属性名称，由此可以防止使用常规手段来探查这些名称。</p><blockquote><p>创建符号值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="title class_">Symbol</span>(<span class="string">&#x27;first Name&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">person[firstName] = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[firstName]); <span class="comment">//hello world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstName); <span class="comment">//Symbol(first Name)</span></span><br></pre></td></tr></table></figure><p>此代码创建了一个符号类型的 <code>firstName</code> 变量，并将它作为 <code>person</code> 对象的一个属性，而每次访问该属性都要使用这个符号值。<code>Symbol</code> 函数还可以接受一个额外的参数用于描述符号值，该描述并不能用来访问对应属性，但它能用于调试。符号的描述信息被存储在内部属性 <code>[[Description]]</code> 中，当符号的 <code>toString() </code>方法被显式<br>或隐式调用时，该属性都会被读取。在本例中， <code>console.log()</code> 隐式调用了 <code>firstName</code> 变量的 <code>toString()</code> 方法，于是描述信息就被输出到日志。此外没有任何办法可以从代码中直接访问 <code>[[Description]]</code> 属性。</p><h3 id="使用符号值"><a href="#使用符号值" class="headerlink" title="使用符号值"></a>使用符号值</h3><p><strong>可以在任意使用 需计算属性名 的场合中使用符号值，比如在对象字面量中可以使用符号值来作为对象属性，另外还可以在<code>Object.defineProperty()</code>方法或<code>Object.defineProperties()</code>方法中使用。</strong></p><p>共享符号值</p><p>如果想在不同的代码中共享同一个符号值的话，应使用 <code>Symbol.for()</code> 方法而不是 <code>Symbol()</code> 方法。 <code>Symbol.for()</code>方法仅接受单个字符串类型的参数，作为目标符号值的标识符，同时此参数也会成为该符号的描述信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//共享符号值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uid = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;uid&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">person[uid] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;uid&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> car = &#123;&#125;;</span><br><span class="line">car[id] = <span class="string">&#x27;88888888&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uid===id); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><code>Symbol.for()</code> 方法首先会搜索全局符号注册表，看是否存在一个键值为 <code>&quot;uid</code>“ 的符号值。<br>若是，该方法会返回这个已存在的符号值；否则，会创建一个新的符号值，并使用该键值将<br>其记录到全局符号注册表中，然后返回这个新的符号值。这就意味着此后使用同一个键值去调用 <code>Symbol.for() </code>方法都将会返回同一个符号值。</p><p>还可以使用 <code>Symbol.keyFor()</code> 方法在全局符号注册表中根据<strong>符号值</strong>检索出对应的<strong>键值</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(uid)); <span class="comment">//uid</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(id)); <span class="comment">//uid</span></span><br></pre></td></tr></table></figure><h3 id="符号值的转换"><a href="#符号值的转换" class="headerlink" title="符号值的转换"></a>符号值的转换</h3><p>类型转换是 JS 语言重要的一部分，能够非常灵活地将一种数据类型转换为另一种。然而符号类型在进行转换时非常不灵活，因为其他类型缺乏与符号值的合理等价，尤其是符号值<strong>无法被转换为字符串值或数值</strong>，在逻辑运算符中会被认为等价于 <code>true</code>。</p><p>例如，可使用String()方法获取符号值的描述信息，但是如果使用符号值在字符串中拼接，则会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(uid));<span class="comment">//Symbol(uid)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uid+<span class="string">&quot;&quot;</span>); <span class="comment">//Uncaught TypeError: Cannot convert a Symbol value to a string</span></span><br></pre></td></tr></table></figure><h3 id="检索符号属性"><a href="#检索符号属性" class="headerlink" title="检索符号属性"></a>检索符号属性</h3><p><code>Object.keys()</code> 与 <code>Object.getOwnPropertyNames() </code>方法可以检索对象的所有属性名称，前者<br>返回所有的<strong>可枚举属性名</strong>称，而后者则返回<strong>所有属性名称</strong>，无论是否可以可枚举，然而<strong>两者都不能返回符号类型的属性</strong>。因此，在ES6中新增了<br><code>Object.getOwnPropertySymbols()</code> 方法，以便让你可以检索对象的符号类型属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uid = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;uid&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">person[uid] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> symbols = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbols.<span class="property">length</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbols[<span class="number">0</span>]); <span class="comment">//Symbol(uid)</span></span><br></pre></td></tr></table></figure><h2 id="知名符号"><a href="#知名符号" class="headerlink" title="知名符号"></a>知名符号</h2><p>ES6 定义了“知名符号”来代表 JS 中一些公共行为，而这些行为此前被认为只能是内部操作，但在ES6中使用了知名符号来暴露了内部方法，提供了更加方便的调用这种公用方法的一种方式。每一个知名符号都对应全局 <code>Symbol</code> 对象的一个属性，例如 <code>Symbol.create </code>。</p><p>知名符号有：</p><ul><li><strong>Symbol.hasInstance</strong> ：供 instanceof 运算符使用的一个方法，用于判断对象继承关系；</li><li><strong>Symbol.isConcatSpreadable</strong> ：一个布尔类型值，在集合对象作为参数传递给<br>Array.prototype.concat() 方法时，指示是否要将该集合的元素扁平化；</li><li><strong>Symbol.iterator</strong> ：返回迭代器的一个方法；</li><li><strong>Symbol.match</strong> ：供 String.prototype.match() 函数使用的一个方法，用于比较字符串；</li><li><strong>Symbol.replace</strong> ：供 String.prototype.replace() 函数使用的一个方法，用于替换子字符串；</li><li><strong>Symbol.search</strong> ：供 String.prototype.search() 函数使用的一个方法，用于定位子字符；</li><li><strong>Symbol.species</strong> ：用于产生派生对象的构造器；</li><li><strong>Symbol.split</strong> ：供 String.prototype.split() 函数使用的一个方法，用于分割字符串；</li><li><strong>Symbol.toPrimitive</strong> ：返回对象所对应的基本类型值的一个方法；</li><li><strong>Symbol.toStringTag</strong> ：供 String.prototype.toString() 函数使用的一个方法，用于创建对象的描述信息；</li><li><strong>Symbol.unscopables</strong> ：一个对象，该对象的属性指示了哪些属性名不允许被包含在with 语句中；</li></ul><h3 id="Symbol-hasInstance属性"><a href="#Symbol-hasInstance属性" class="headerlink" title="Symbol.hasInstance属性"></a>Symbol.hasInstance属性</h3><p>每个函数都具有一个 <code>Symbol.hasInstance</code> 属性，用于判断指定对象是否为本函数的一个实例。这个方法定义在 <code>Function.prototype</code> 上，因此所有函数都继承了面对 <code>instanceof</code> 运算符时的默认行为。 <code>Symbol.hasInstance</code> 属性自身是不可写入、不可配置、不可枚举的，从而保证它不会被错误地重写。</p><p><code>Symbol.hasInstance</code> 方法只接受单个参数，即需要检测的值。如果该值是本函数的一个实例，则方法会返回 <code>true</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Array</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="title class_">Array</span>[<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](obj)</span><br></pre></td></tr></table></figure><h3 id="Symbol-isConcatSpreadable属性"><a href="#Symbol-isConcatSpreadable属性" class="headerlink" title="Symbol.isConcatSpreadable属性"></a>Symbol.isConcatSpreadable属性</h3><p><code>Symbol.isConcatSpreadable </code>属性是一个布尔类型的属性，它表示拥有长度<code>length</code>属性与数值类型的键的类数组的对象，在调用 <code>concat()</code> 方法时，会将数值键对应的值分离为单独项，添加在数组的后部，完成数组拼接。</p><p>它只出现在特定类型的对象上，用来标示该对象在作为<code> concat()</code> 参数时应如何工作，从而有效改变该对象的默认行为。你可以用它来定义任意类型的对象，让该对象在参与 <code>concat()</code> 调用时能够表现得像数组一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Symbol.isConcatSpreadable属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> collection = &#123;</span><br><span class="line"><span class="number">0</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="number">1</span>:<span class="string">&#x27;world&#x27;</span>,</span><br><span class="line"><span class="attr">length</span>:<span class="number">2</span>,</span><br><span class="line">[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>]:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;es6&#x27;</span>].<span class="title function_">concat</span>(collection);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[&quot;es6&quot;, &quot;hello&quot;, &quot;world&quot;]</span></span><br></pre></td></tr></table></figure><p> Symbol.match 、 Symbol.replace 、 Symbol.search与Symbol.split</p><p>在 JS 中，字符串与正则表达式有着密切的联系，尤其是字符串具有几个可以接受正则表达式作为参数的方法：</p><ul><li>match(regex) ：判断指定字符串是否与一个正则表达式相匹配；</li><li>replace(regex, replacement) ：对正则表达式的匹配结果进行替换；</li><li>search(regex) ：在字符串内对正则表达式的匹配结果进行定位；</li><li>split(regex) ：使用正则表达式将字符串分割为数组</li></ul><p>ES6 定义了 4 个符号以及对应的方法，可以将正则表达式作为字符串对应方法的第一个参数传入， <code>Symbol.match</code> 对应 <code>match()</code> 方法， <code>Symbol.replace</code> 对应 <code>replace()</code> ，<code>Symbol.search</code>对应 <code>search()</code>， <code>Symbol.split</code> 则对应 <code>split()</code> 。这些符号属性被定义在 <code>RegExp.prototype </code>上作为默认实现，以供对应的字符串方法使用。</p><h3 id="Symbol-toPrimitive"><a href="#Symbol-toPrimitive" class="headerlink" title="Symbol.toPrimitive"></a>Symbol.toPrimitive</h3><p>JS 经常在使用特定运算符的时候试图进行隐式转换，以便将对象转换为基本类型值。例如，当你使用相等（<code>==</code> ） 运算符来对字符串与对象进行比较的时候，该对象会在比较之前被转换为一个基本类型值。到底转换为什么基本类型值，在此前属于内部操作，而 ES6 则通过<code>Symbol.toPrimitive</code> 属性将其暴露出来，以便让对应方法可以被修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Temperature</span>(<span class="params">degrees</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">degrees</span> = degrees;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title class_">Temperature</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>] = <span class="keyword">function</span>(<span class="params">hint</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (hint) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;string&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">degrees</span> + <span class="string">&quot;\u00b0&quot;</span>; <span class="comment">// 温度符号</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;number&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">degrees</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;default&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">degrees</span> + <span class="string">&quot; degrees&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> freezing = <span class="keyword">new</span> <span class="title class_">Temperature</span>(<span class="number">32</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(freezing + <span class="string">&quot;!&quot;</span>); <span class="comment">// &quot;32 degrees!&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(freezing / <span class="number">2</span>); <span class="comment">// 16</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(freezing)); <span class="comment">// &quot;32°&quot;</span></span><br></pre></td></tr></table></figure><p>这段脚本定义了一个 Temperature 构造器，并重写了其原型上的<code>Symbol.toPrimitive</code> 方法。返回值会依据方法的提示性参数而有所不同，可以使用字符串模式、数值模式或是默认模式，而该提示性参数会在调用时由 JS 引擎自动填写。字符串模式中， Temperature 函数返回的温度会附带着 Unicode 温度符号；数值模式只会返回温度数值；而默认模式中，返回的温度会附带着字符串 “degrees” 。</p><h3 id="Symbol-toStringTag"><a href="#Symbol-toStringTag" class="headerlink" title="Symbol.toStringTag"></a>Symbol.toStringTag</h3><p>ES6 通过 <code>Symbol.toStringTag</code> 重定义了相关行为，该符号代表了所有对象的一个属性，定义了 <code>Object.prototype.toString.call()</code> 被调用时应当返回什么值。对于数组来说，在<code>Symbol.toStringTag</code> 属性中存储了 “Array” 值，于是该函数的返回值也就是 “Array” 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">toStringTag</span>] = <span class="string">&#x27;person&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">toString</span>()); <span class="comment">//[object person]</span></span><br></pre></td></tr></table></figure><h3 id="Symbol-unscopables"><a href="#Symbol-unscopables" class="headerlink" title="Symbol.unscopables"></a>Symbol.unscopables</h3><p><code>Symbol.unscopables</code> 符号在 <code>Array.prototype</code> 上使用，以指定哪些属性不允许在 <code>with</code> 语句内被绑定。 <code>Symbol.unscopables</code> 属性是一个对象，当提供该属性时，它的键就是用于忽略<code>with</code> 语句绑定的标识符，键值为 <code>true</code> 代表屏蔽绑定。以下是数组的 <code>Symbol.unscopables</code>属性的默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认内置在 ES6 中</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">unscopables</span>] = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>), &#123;</span><br><span class="line"><span class="attr">copyWithin</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">entries</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">fill</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">find</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">findIndex</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">keys</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">values</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ol><li>虽然符号类型的属性不是真正的私有属性，但它们难以被无意修改，因此在需要提供保护以防止开发者改动的场合中，它们非常合适；</li><li>为符号提供描述信息以便更容易地辨识它们的值。当需要在不同代码片段中共享符号，可以是用S<code>ymbol.for()</code>在全局符号注册表中共享符号；</li><li><code>Object.keys()</code> 或 <code>Object.getOwnPropertyNames()</code> 不会返回符号值，因此 ES6 新增了一个<code>Object.getOwnPropertySymbols() </code>方法，允许检索符号类型的对象属性。同时依然可以使用<code>Object.defineProperty()</code> 与 <code>Object.defineProperties()</code> 方法对符号类型的属性进行修改；</li><li>“知名符号”使用了全局符号常量（例如 <code>Symbol.hasInstance</code> ） ，为常规对象定义了一些功能，而这些功能原先仅限内部使用。这些符号按规范使用 <code>Symbol.</code> 的前缀，允许开发者通过多种方式去修改常规对象的行为。</li></ol><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let firstName = Symbol(&#x27;first Name&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// person[firstName] = &#x27;hello world&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(person[firstName]); //hello world</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(firstName); //Symbol(first Name)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//共享符号值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let uid = Symbol.for(&#x27;uid&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// person[uid] = &#x27;hello&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let symbols = Object.getOwnPropertySymbols(person);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(symbols.length); //1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(symbols[0]); //Symbol(uid)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let id = Symbol.for(&#x27;uid&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let car = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// car[id] = &#x27;88888888&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(uid===id); //true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Symbol.keyFor(uid)); //uid</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Symbol.keyFor(id)); //uid</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(String(uid));//Symbol(uid)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(uid+&quot;&quot;); //Uncaught TypeError: Cannot convert a Symbol value to a string</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //Symbol.isConcatSpreadable属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let collection = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 0:&#x27;hello&#x27;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 1:&#x27;world&#x27;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// length:2,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// [Symbol.isConcatSpreadable]:true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let arr = [&#x27;es6&#x27;].concat(collection);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(arr); //[&quot;es6&quot;, &quot;hello&quot;, &quot;world&quot;]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// function Temperature(degrees) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.degrees = degrees;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Temperature.prototype[Symbol.toPrimitive] = function(hint) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// switch (hint) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// case &quot;string&quot;:</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return this.degrees + &quot;\u00b0&quot;; // 温度符号</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// case &quot;number&quot;:</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return this.degrees;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// case &quot;default&quot;:</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return this.degrees + &quot; degrees&quot;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let freezing = new Temperature(32);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(freezing + &quot;!&quot;); // &quot;32 degrees!&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(freezing / 2); // 16</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(String(freezing)); // &quot;32°&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// function Person(name)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.name = name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Person.prototype[Symbol.toStringTag] = &#x27;person&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = new Person(&#x27;hello world&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(person.toString()); //[object person]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 默认内置在 ES6 中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">unscopables</span>] = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>), &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">copyWithin</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">entries</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">fill</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">find</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">findIndex</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">keys</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">values</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="ES6中的Set"><a href="#ES6中的Set" class="headerlink" title="ES6中的Set"></a>ES6中的Set</h2><p>ES6中提供了Set数据容器，这是一个能够<strong>存储无重复值</strong>的有序列表。</p><blockquote><p>创建Set</p></blockquote><p>通过<code>new Set()</code>可以创建Set，然后通过<code>add</code>方法能够向Set中添加数据项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Set</span></span><br><span class="line"><span class="keyword">let</span> set= <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p><strong>Set内部使用Object.is()方法来判断两个数据项是否相等，唯一不同的是+0和-0在Set中被判断为是相等的。</strong></p><p>同时可以使用数组来构造Set，或者说具有迭代器的对象都可以用来构造Set，并且Set构造器会确保不会存在重复的数据项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><blockquote><p>检查某个值是否存在于Set中</p></blockquote><p>可以使用<code>has()</code>方法来判断某个值是否存在于Set中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">5</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p>删除值</p></blockquote><p>使用delete()方法从Set中删除某个值，或者使用clear()方法从Set中删除所有值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>);<span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">5</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">1</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><blockquote><p>forEach()方法</p></blockquote><p>可以使用<code>forEach</code>方法来遍历Set中的数据项，该方法传入一个回调函数<code>callback</code>，还可以传入一个<code>this</code>，用于回调函数之中：</p><p>回调函数callback中有三个参数：</p><ol><li><p>元素值；</p></li><li><p>元素索引；</p></li><li><p>将要遍历的对象；</p><p>let set = new Set([1,2,3,3,3,3]);</p><pre><code>    set.forEach(function (value,key,ownerSet) &#123;        console.log(value);        console.log(key);                &#125;)</code></pre></li></ol><p>Set中的value和key是相同的，这是为了让Set的forEach方法和数组以及Map的forEach方法保持一致，都具有三个参数。</p><p>在forEach方法中传入<code>this</code>，给回调函数使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> operation =&#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">iterate</span>(<span class="params">set=[]</span>)&#123;</span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value,key,ownerSet</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">print</span>(value);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">print</span>(key);</span><br><span class="line">&#125;,<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">operation.<span class="title function_">iterate</span>(set);</span><br><span class="line"></span><br><span class="line">输出：<span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>如果回调函数使用箭头函数的话，就可以省略<code>this</code>的入参，这是因为箭头函数会通过作用域链找到当前this对象，将上面的示例代码使用箭头函数来写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> operation =&#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">iterate</span>(<span class="params">set=[]</span>)&#123;</span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value,key</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">print</span>(value);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">print</span>(key);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">operation.<span class="title function_">iterate</span>(set);</span><br></pre></td></tr></table></figure><blockquote><p>将Set转换成数组</p></blockquote><p>将数组转换成Set十分容易，可以将数组传入Set构造器即可；而将Set转换成数组，需要使用扩展运算符。扩展运算符能将数组中的数据项切分开，作为独立项传入到函数，如果将扩展运算符用于可迭代对象的话，就可以将可迭代对象转换成数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [...arr]=set;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure><blockquote><p>Weak Set</p></blockquote><p>Set在存放对象时，实际上是存放的是对象的引用，即Set也被称之为Strong Set。如果所存储的对象被置为null，但是Set实例仍然存在的话，对象依然无法被垃圾回收器回收，从而无法释放内存：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="keyword">let</span> key=&#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> key2 = &#123;&#125;;</span><br><span class="line">set.<span class="title function_">add</span>(key);</span><br><span class="line">set.<span class="title function_">add</span>(key2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">key=<span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>可以看出就算对象key置为null，但是由于是强引用的方式，Set实例还存在，对象key依然不会被回收。</p><p>如果想让对象key正常释放的话，可以使用Weak Set，此时，<strong>存放的是对象的弱引用，当对象只被Set弱引用的话，并不会阻止对象实例被回收</strong>。Weka Set同Set的用法几乎一致。可以使用add()方法增加数据项，使用has()方法检查Weak Set中是否包含某项，以及使用delete()方法删除某一项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"><span class="keyword">let</span> key = &#123;&#125;;</span><br><span class="line">set.<span class="title function_">add</span>(key);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(key)); <span class="comment">//true</span></span><br><span class="line">set.<span class="title function_">delete</span>(key);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(key)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>但需要注意的是：Weak Set构造器不接受基本类型数据，只接受对象。同样的可以使用可迭代的对象如数组，来作为构造器参数，来创建Weak Set。</p><blockquote><p>Weak Set和Set之间的差异</p></blockquote><p>对于Weak Set和Set之间的重要差异：</p><ol><li>对于Weak Set实例，若调用了add()方法时传入了非对象的参数，则会抛出错误。如果在has()或者delete()方法中传入了非对象的参数则会返回false；</li><li>Weak Set不可迭代，因此不能用于for-of循环；</li><li>Weak Set 无法暴露出任何迭代器（例如 keys() 与 values() 方法） ，因此没有任何编程手段可用于判断 Weak Set 的内容；</li><li>Weak Set没有forEach()方法；</li><li>Weak Set没有size属性；</li></ol><h2 id="ES6中的Map"><a href="#ES6中的Map" class="headerlink" title="ES6中的Map"></a>ES6中的Map</h2><p>ES6中提供了Map数据结构，能够存放键值对，其中，键的去重是通过Object.is()方法进行比较，键的数据类型可以是基本类型数据也可以是对象，而值也可以是任意类型数据。</p><blockquote><p>对Map的操作</p></blockquote><ol><li><p>使用<code>set()</code>方法可以给Map添加键值对</p><p>let map = new Map();</p><pre><code>    map.set(&#39;title&#39;,&#39;hello world&#39;);    map.set(&#39;year&#39;,&#39;2018&#39;);    </code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure></li></ol><p>通过<code>set()</code>方法往Map中增加了两个键值对后，可以看到Map的大小就为2；</p><ol start="2"><li><p>通过get()方法可以从Map中提取值</p><p>let map = new Map();</p><pre><code>    map.set(&#39;title&#39;,&#39;hello world&#39;);    map.set(&#39;year&#39;,&#39;2018&#39;);    </code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;title&#x27;</span>)); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure></li><li><p>has(),delete()以及clear()方法</p></li></ol><p>为了和Set的操作保持一致，Map中同样有has()方法，用来检查某个数据项是否存在于Map中，使用delete方法可以从Map中删除一个数据项，使用clear方法可以删除Map中所有的数据项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;2018&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;year&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line">map.<span class="title function_">delete</span>(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;title&#x27;</span>)); <span class="comment">//false</span></span><br><span class="line">map.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">//0</span></span><br></pre></td></tr></table></figure><blockquote><p>Map的初始化</p></blockquote><p>与Set的初始化一样，Map也可以用数组来初始化Map，该数组中的每一个数据项也是数组，数组的第一个数据项代表键值对的键，第二个数据项是键值对的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组来创建Map</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;hello world&#x27;</span>],[<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;2018&#x27;</span>]]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;title&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;year&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><blockquote><p>Map的forEach方法</p></blockquote><p>与Set一样，Map也拥有<code>forEach</code>方法，该方法也接收一个回调函数，该回调函数有三个参数：</p><ol><li><p>键值对的键；</p></li><li><p>键值对的值；</p></li><li><p>当前Map对象引用；</p><p>let map = new Map([[‘title’,’hello world’],[‘year’,’2018’]]);</p><pre><code>    map.forEach((value,key,ownerMap)=&gt;&#123;        console.log(value);        console.log(key);    &#125;);    </code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">title</span><br><span class="line">2018</span><br><span class="line">year</span><br></pre></td></tr></table></figure></li></ol><p>与Set的forEach一样，可以在回调函数中传入<code>this引用</code>。</p><blockquote><p>Weak Map</p></blockquote><p>Weak Map对Map而言，就像是Weak Set相对于Set一样：<strong>Weak Map(或者Weak Set)都是存储对象弱引用的方式，在Weak Map（或者Weak Set）中，所有的键都必须是对象（尝试使用非对象的键会抛出错误），而且这些对象都是弱引用，不会干扰到垃圾回收。当Weak Map中的键在Weak Map之外不存在引用时，该键值对会被移除。</strong></p><blockquote><p>Weak Map的操作</p></blockquote><ol><li>Weak Map的初始化</li></ol><p> Weak Map的键必须是对象，值可以是任意类型，初始化同Map一样，也可是使用数组来创建一个 Weak Map ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组来创建一个Weak Map</span></span><br><span class="line"><span class="keyword">let</span> key = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> key2 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([[key,<span class="string">&#x27;hello&#x27;</span>],[key2,<span class="string">&#x27;world&#x27;</span>]]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(key)); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(key2)); <span class="comment">//world</span></span><br></pre></td></tr></table></figure><ol start="2"><li>has方法以及delete方法</li></ol><p>与Map一样，可以使用has()方法来检查Weak Map中是否存在某一个键值对，使用delete()方法可以删除一个键值对。clear() 方法不存在，这是因为没必要对键进行枚举，并且枚举 Weak Map 也是不可能的，这与 Weak Set 相同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> key = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> key2 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([[key,<span class="string">&#x27;hello&#x27;</span>],[key2,<span class="string">&#x27;world&#x27;</span>]]);</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">delete</span>(key);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(key)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p>Weak Map 的用法与局限性</p></blockquote><p>当决定是要使用 Weak Map 还是使用正规 Map 时，首要考虑因素在于你是否只想使用对象类型的键。如果你打算这么做，那么最好的选择就是 Weak Map 。因为它能确保额外数据在不再可用后被销毁，从而能优化内存使用并规避内存泄漏。</p><p>要记住 Weak Map 只为它们的内容提供了很小的可见度，因此你<strong>不能使用 forEach() 方法、size 属性或 clear() 方法来管理其中的项</strong>。如果你确实需要一些检测功能，那么正规 Map会是更好的选择，只是一定要确保留意内存的使用。</p><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><ol><li>Set 是无重复值的有序列表。根据 <code>Object.is() </code>方法来判断其中的值不相等，以保证无重复。 Set 会自动移除重复的值，因此你可以使用它来过滤数组中的重复值并返回结果。 Set并不是数组的子类型，所以你无法随机访问其中的值。但你可以使用<code> has()</code> 方法来判断某个值是否存在于 Set 中，或通过 <code>size</code> 属性来查看其中有多少个值。 Set 类型还拥有<code>forEach() </code>方法，用于处理每个值。</li><li>Weak Set 是只能包含对象的特殊 Set 。其中的对象使用弱引用来存储，意味着当 Weak Set中的项是某个对象的仅存引用时，它不会屏蔽垃圾回收。由于内存管理的复杂性， Weak Set的内容不能被检查，因此最好将 Weak Set 仅用于追踪需要被归组在一起的对象。</li><li>Map 是有序的键值对，其中的键允许是任何类型。与 Set 相似，通过调用 <code>Object.is() </code>方法来判断重复的键，这意味着能将数值 5 与字符串 “5” 作为两个相对独立的键。使用<code>set()</code> 方法能将任何类型的值关联到某个键上，并且该值此后能用 <code>get()</code> 方法提取出来。Map 也拥有一个 <code>size</code> 属性与一个 <code>forEach()</code> 方法，让项目访问更容易。</li><li>Weak Map 是只能包含对象类型的键的特殊 Map 。与 Weak Set 相似，键的对象引用是弱引用，因此当它是某个对象的仅存引用时，也不会屏蔽垃圾回收。当键被回收之后，所关联的值也同时从 Weak Map 中被移除。</li></ol><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//Set</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let set= new Set();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set.add(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set.add(&#x27;1&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.size);//2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let set = new Set([1,2,3,3,3,3]);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.size);//3</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.has(5)); //false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set.delete(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.has(1)); //false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.size); //2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let set = new Set([1,2,3,3,3,3]);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let operation =&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// print(value)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// iterate(set=[])&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set.forEach((value,key)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.print(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.print(key);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// operation.iterate(set);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let [...arr]=set;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(arr);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//强引用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let set = new WeakSet();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let key = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set.add(key);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.has(key)); //true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set.delete(key);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.has(key)); //false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//Map的基本操作</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let map = new Map();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// map.set(&#x27;title&#x27;,&#x27;hello world&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// map.set(&#x27;year&#x27;,&#x27;2018&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.has(&#x27;year&#x27;)); //true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// map.delete(&#x27;title&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.has(&#x27;title&#x27;)); //false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// map.clear();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.size); //0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.get(&#x27;title&#x27;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.size); //2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//使用数组来创建Map</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let map = new Map([[&#x27;title&#x27;,&#x27;hello world&#x27;],[&#x27;year&#x27;,&#x27;2018&#x27;]]);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// map.forEach((value,key,ownerMap)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(key);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.has(&#x27;title&#x27;)); //true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.has(&#x27;year&#x27;)); //true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.size); //2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//使用数组来创建一个Weak Map</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> key = &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> key2 = &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([[key,<span class="string">&#x27;hello&#x27;</span>],[key2,<span class="string">&#x27;world&#x27;</span>]]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(key)); <span class="comment">//hello</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(key2)); <span class="comment">//world</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">map.<span class="title function_">delete</span>(key);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(key));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="迭代器和迭代器"><a href="#迭代器和迭代器" class="headerlink" title="迭代器和迭代器"></a>迭代器和迭代器</h2><blockquote><p>何为迭代器？</p></blockquote><p>迭代器是被设计专用于迭代的对象，带有特定接口。所有的迭代器对象都拥有 next() 方<br>法，会返回一个结果对象。该结果对象有两个属性：对应下一个值的 value ，以及一个布尔<br>类型的 done ，其值为 true 时表示没有更多值可供使用。迭代器持有一个指向集合位置的<br>内部指针，每当调用了 next() 方法，迭代器就会返回相应的下一个值。</p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><blockquote><p>何为生成器？</p></blockquote><p><strong>生成器（generator ） 是能返回一个迭代器的函数</strong>。生成器函数由放在 function 关键字之后的一个星号（ * ） 来表示，并能使用新的 <code>yield</code> 关键字。将星号紧跟在 function 关键字之后，或是在中间留出空格，都是没问题的。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>*<span class="title function_">generator</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">generator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>生成器函数最有意思的地方是它们会在每一个<code>yield</code>语句后停止，例如在上面的代码中执行<code>yield 1</code>后，该函数不会在继续往下执行。等待下一次调用<code>next()</code>后，才会继续往下执行<code>yield 2 </code>。</p><p><strong>除了使用函数声明的方式创建一个生成器外，还可以使用函数表达式来创建一个生成器。由于生成器就是一个函数，同样可以使用对象字面量的方式，将对象的属性赋值为一个生成器函数。</strong></p><h3 id="可迭代对象与for-of循环"><a href="#可迭代对象与for-of循环" class="headerlink" title="可迭代对象与for-of循环"></a>可迭代对象与for-of循环</h3><p>可迭代对象是包含<code>Symbol.iterator</code>属性的对象，这个<code>Symbol.iterator</code>属性对应着能够返回该对象的迭代器的函数。在ES6中，所有的集合对象（数组、Set和Map）以及字符串都是可迭代对象，因此它们都被指定了默认的迭代器。可迭代对象可以与ES6中新增的<code>for-of</code>循环配合使用。</p><p>迭代器解决了<code>for</code>循环中追踪索引的问题，而<code>for-of</code>循环，则是完全删除追踪集合索引的需要，更能专注于操作集合内容。<code>for-of</code>循环在循环每次执行时会调用可迭代对象的<code>next()</code>方法，并将结果对象的<code>value</code>值存储在一个变量上，循环过程直到结果对象<code>done</code>属性变成<code>true</code>为止：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> arr)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line">输出结果为：<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span></span><br></pre></td></tr></table></figure><p><code>for-of</code>循环首先会调用arr数组中<code>Symbol.iterator</code>属性对象的函数，就会获取到该数组对应的迭代器，接下来<code>iterator.next()</code>被调用，迭代器结果对象的<code>value</code>属性会被放入到变量<code>num</code>中。数组中的数据项会依次存入到变量<code>num</code>中，直到迭代器结果对象中的<code>done</code>属性变成<code>true</code>为止，循环就结束。</p><blockquote><p>访问可迭代对象的默认迭代器</p></blockquote><p>可以使用可迭代对象的Symbol.iterator来访问对象上可返回迭代器的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">//访问默认迭代器</span></span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p><strong>通过Symbol.iterator属性获取到该对象的可返回迭代器的函数，然后执行该函数得到对象的可迭代器。</strong>同样的，可是使用<code>Symbol.iterato</code>r属性来检查对象是否是可迭代对象。</p><blockquote><p>创建可迭代对象</p></blockquote><p>数组，Set等集合对象是默认的迭代器，当然也可以为对象创建自定义的迭代器，使其成为可迭代对象。那么迭代器如何生成？我们已经知道，生成器就是一个可以返回迭代器的函数，因此自定义迭代器，就是写一个生成器函数。同时，可迭代对象必须具有<code>Symbol.iterator</code>属性，并且该属性对应着一个能够返回迭代器的函数，因此只需要将这个生成器函数赋值给<code>Symbol.iterator</code>属性即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建可迭代对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"><span class="attr">items</span>:[],</span><br><span class="line"></span><br><span class="line">*[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">items</span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> item;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">items</span>.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">obj.<span class="property">items</span>.<span class="title function_">push</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> obj)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：<span class="number">1</span>，<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="内置的迭代器"><a href="#内置的迭代器" class="headerlink" title="内置的迭代器"></a>内置的迭代器</h3><p>ES6中许多内置类型已经包含了默认的迭代器，只有当默认迭代器满足不了时，才会创建自定义的迭代器。如果新建对象时，要想把该对象转换成可迭代对象的话，一般才会需要自定义迭代器。</p><blockquote><p>集合迭代器 </p></blockquote><p>ES6中有三种集合对象：数组、Map和Set，这三种类型都拥有默认的迭代器：</p><ul><li>entries()：返回一个包含键值对的迭代器；</li><li>values()：返回一个包含集合中的值的迭代器；</li><li>keys()：返回一个包含集合中的键的迭代器；</li></ul><ol><li>调用entries()迭代器会在每次调用next()方法返回一个双项数组，此数组代表集合数据项中的键和值：对于数组来说，第一项是数组索引；对于Set来说，第一项是值（因为Set的键和值相同），对于Map来说，就是键值对的值；</li><li>values()迭代器能够返回集合中的每一个值；</li><li>keys()迭代器能够返回集合中的每一个键；</li></ol><blockquote><p>集合的默认迭代器 </p></blockquote><p>当for-of循环没有显式指定迭代器时，集合对象会有默认的迭代器。values()方法是数组和Set默认的迭代器，而entries()方法是Map默认迭代器。</p><blockquote><p>字符串的迭代器 </p></blockquote><p>ES6旨在为Unicode提供了完全支持，字符串的默认迭代器就是解决字符串迭代问题的一种尝试，这样一来，借助字符串默认迭代器就能处理字符而非码元：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//字符串默认迭代器</span><br><span class="line">let str =&#x27;A   B&#x27;;</span><br><span class="line">for(let s of str)&#123;</span><br><span class="line">console.log(s); //A  B</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>扩展运算符与非数组的可迭代对象</p></blockquote><p>扩展运算符能作用于所有可迭代对象，并且会使用默认迭代器来判断需要哪些值。在数组字面量中可以使用扩展运算符将可迭代对象填充到数组中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//扩展运算符可作用到所有可迭代对象</span><br><span class="line">let arr = [1,2,3];</span><br><span class="line">let array = [...arr];</span><br><span class="line">console.log(array); [1,2,3]</span><br></pre></td></tr></table></figure><p>并且，可以不限次数在数组字面量中使用扩展运算符，而且可以在任意位置用扩展运算符将可迭代对象填充到数组中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3];</span><br><span class="line">let arr2 = [7,8,9];</span><br><span class="line">let array = [...arr,5,...arr2];</span><br><span class="line">console.log(array); //1,2,3,5,7,8,9</span><br></pre></td></tr></table></figure><h3 id="迭代器高级功能"><a href="#迭代器高级功能" class="headerlink" title="迭代器高级功能"></a>迭代器高级功能</h3><p>能够通过next()方法向迭代器传递参数<strong>，当一个参数传递给next()方法时，该参数就会成为生成器内部yield语句中的变量值。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代器的高级功能</span></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">generator</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> first = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> second = <span class="keyword">yield</span> first+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> third = <span class="keyword">yield</span> second+<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">generator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="number">4</span>)); <span class="comment">//&#123;value: 6, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="number">5</span>)); <span class="comment">//&#123;value: 8, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>示例代码中，当通过next()方法传入参数时，会赋值给yield语句中的变量。</p><blockquote><p>在迭代器中抛出错误</p></blockquote><p>能传递给迭代器的不仅是数据，还可以是错误，迭代器可以选择一个<code>throw()</code>方法，用于指示迭代器应在恢复执行时抛出一个错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代器抛出错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">generator</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> first = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> second = <span class="keyword">yield</span> first+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> third = <span class="keyword">yield</span> second+<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">generator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="number">4</span>)); <span class="comment">//&#123;value: 6, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="keyword">throw</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Error!&#x27;</span>))); <span class="comment">//Uncaught Error: Error!</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//不会执行</span></span><br></pre></td></tr></table></figure><p>在生成器中同样可以使用<code>try-catch</code>来捕捉错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">generator</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> first = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> second;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">second = <span class="keyword">yield</span> first+<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">second = <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> third = <span class="keyword">yield</span> second+<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">generator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="number">4</span>)); <span class="comment">//&#123;value: 6, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="keyword">throw</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Error!&#x27;</span>))); <span class="comment">//&#123;value: 9, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>生成器的return语句</p></blockquote><p>由于生成器是函数，你可以在它内部使用 <code>return</code> 语句，既可以让生成器早一点退出执行，也可以指定在 <code>next()</code> 方法最后一次调用时的返回值。大多数情况，迭代器上的<br><code>next()</code> 的最后一次调用都返回了 <code>undefined</code> ，但你还可以像在其他函数中那样，使用<br><code>return</code> 来指定另一个返回值。在生成器内， return 表明所有的处理已完成，因此 done<br>属性会被设为 true ，而如果提供了返回值，就会被用于 value 字段。比如，利用return让生成器更早的退出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gene</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gene</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>由于使用return语句，能够让生成器更早结束，因此在第二次以及第三次调用next()方法时，返回结果对象为：<code>&#123;value: undefined, done: true&#125;</code>。</p><p>还可以使用return语句指定最后返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gene</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;finish&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gene</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &quot;finish&quot;, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>当第二次调用next()方法时，返回了设置的返回值：<code>finish</code>。第三次调用 <code>next()</code> 返回了一个对象，其 <code>value</code> 属性再次变回<code>undefined</code> ，你在 <code>return</code> 语句中指定的任意值都只会在结果对象中出现一次，此后 <code>value</code> 字段就会被重置为 <code>undefined</code> 。</p><blockquote><p>生成器委托</p></blockquote><p>生成器委托是指：将生成器组合起来使用，构成一个生成器。组合生成器的语法需要<code>yield</code>和<code>*</code>，<code>*</code>落在<code>yield</code>关键字与生成器函数名之间即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gene1</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gene2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">combined</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> * <span class="title function_">gene1</span>();</span><br><span class="line"><span class="keyword">yield</span> * <span class="title function_">gene2</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">combined</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &quot;red&quot;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &quot;green&quot;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: 2, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>此例中将生成器gene1和gene2组合而成生成器combined，每次调用combined的next()方法时，实际上会委托到具体的生成器中，当gene1生成器中所有的yield执行完退出之后，才会继续执行gene2，当gene2执行完退出之后，也就意味着combined生成器执行结束。</p><p>在使用生成器委托组合新的生成器时，前一个执行的生成器返回值可以作为下一个生成器的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用生成器返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gene1</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gene2</span>(<span class="params">count</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;repeat&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">combined</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">yield</span> * <span class="title function_">gene1</span>();</span><br><span class="line"><span class="keyword">yield</span> result;</span><br><span class="line"><span class="keyword">yield</span>*<span class="title function_">gene2</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">combined</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &quot;repeat&quot;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &quot;repeat&quot;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>此例中，生成器gene1的返回值，就作为了生成器gene2的参数。</p><h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><blockquote><p>一个简单的任务运行器</p></blockquote><p>生成器函数中yield能暂停运行，当再次调用next()方法时才会重新往下运行。一个简单的任务执行器，就需要传入一个生成器函数，然后每一次调用next()方法就会“一步步”往下执行函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任务执行器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">taskDef</span>) &#123;</span><br><span class="line"><span class="comment">// 创建迭代器，让它在别处可用</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="title function_">taskDef</span>();</span><br><span class="line"><span class="comment">// 启动任务</span></span><br><span class="line"><span class="keyword">let</span> result = task.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// 递归使用函数来保持对 next() 的调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">step</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 如果还有更多要做的</span></span><br><span class="line"><span class="keyword">if</span> (!result.<span class="property">done</span>) &#123;</span><br><span class="line">result = task.<span class="title function_">next</span>();</span><br><span class="line"><span class="title function_">step</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 开始处理过程</span></span><br><span class="line"><span class="title function_">step</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">run</span>(<span class="keyword">function</span>*() &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">yield</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">yield</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>run()</code> 函数接受一个任务定义（即一个生成器函数） 作为参数，它会调用生成器来创建一个<br>迭代器，并将迭代器存放在 <code>task</code> 变量上。第一次对 <code>next()</code> 的调用启动<br>了迭代器，并将结果存储下来以便稍后使用。<code> step()</code> 函数查看<code> result.done</code> 是否为 <code>false</code>，如果是就在递归调用自身之前调用 <code>next()</code> 方法。每次调用 <code>next()</code> 都会把返回的结果保<br>存在 <code>result</code> 变量上，它总是会被最新的信息所重写。对于 <code>step()</code> 的初始调用启动了处理<br>过程，该过程会查看 <code>result.done</code> 来判断是否还有更多要做的工作。</p><blockquote><p>能够传递数据的任务运行器</p></blockquote><p>如果需要传递数据的话，也很容易，也就是将上一次<code>yield</code>的值，传递给下一次<code>next()</code>调用即可，仅仅只需要传送结果对象的<code>value</code>属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任务执行器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">taskDef</span>) &#123;</span><br><span class="line"><span class="comment">// 创建迭代器，让它在别处可用</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="title function_">taskDef</span>();</span><br><span class="line"><span class="comment">// 启动任务</span></span><br><span class="line"><span class="keyword">let</span> result = task.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// 递归使用函数来保持对 next() 的调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">step</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 如果还有更多要做的</span></span><br><span class="line"><span class="keyword">if</span> (!result.<span class="property">done</span>) &#123;</span><br><span class="line">result = task.<span class="title function_">next</span>(result.<span class="property">value</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">value</span>); <span class="comment">//6 undefined</span></span><br><span class="line"><span class="title function_">step</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 开始处理过程</span></span><br><span class="line"><span class="title function_">step</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">run</span>(<span class="keyword">function</span>*() &#123;</span><br><span class="line"><span class="keyword">let</span> value = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">yield</span> value+<span class="number">5</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>异步任务</p></blockquote><p>上面的例子是简单的任务处理器，甚至还是同步的。实现任务器也主要是迭代器在每一次调用<code>next()</code>方法时彼此间传递静态参数。如果要将上面的任务处理器改装成异步任务处理器的话，就需要<code>yield</code>能够返回一个<strong>能够执行回调函数的函数，并且回调参数为该函数的参数</strong>即可。</p><p><strong>什么是有回调函数的函数？</strong></p><p>有这样的示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">callback</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line"><span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数<code>fetchData</code>返回的是一个函数，并且所返回的函数能够接受一个函数callback。当执行返回的函数时，实际上是调用回调函数<code>callback</code>。但目前而言，回调函数callback还是同步的，可以改造成异步函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">callback</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125;, <span class="number">50</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单的异步任务处理器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步任务处理器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">taskDef</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行生成器，创建迭代器</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="title function_">taskDef</span>();</span><br><span class="line"><span class="comment">//启动任务</span></span><br><span class="line"><span class="keyword">let</span> result = task.<span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">step</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(!result.<span class="property">done</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_">typeof</span>(result.<span class="property">value</span>)===<span class="string">&#x27;function&#x27;</span> )&#123;</span><br><span class="line">result.<span class="title function_">value</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">result = task.<span class="title function_">next</span>();</span><br><span class="line"><span class="title function_">step</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">step</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<br>​<br>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">run</span>(<span class="keyword">function</span> *()&#123;</span><br><span class="line"><span class="comment">//返回一个能够返回执行回调函数的函数，并且回调函数还是该</span></span><br><span class="line"><span class="comment">//函数的参数</span></span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(callback,<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的示例代码就是一个简单的异步任务处理器，有这样几点要点：</p><ol><li>使用生成器构造迭代器，所以在<code>run</code>方法中传入的是生成器函数；</li><li>生成器函数中<code>yield</code>关键字，返回的是<strong>一个能够执行回调函数的函数，并且回调函数是该函数的一个参数</strong>；</li></ol><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><ol><li>使用迭代器可以用来遍历集合对象包含的数据，调用迭代器的<code>next()</code>方法可以返回一个结果对象，其中<code>value</code>属性代表值，<code>done</code>属性用来表示集合对象是否已经到了最后一项，如果集合对象的值全部遍历完后，<code>done</code>属性为<code>true</code>；</li><li><code>Symbol.iterator</code>属性被用于定义对象的默认迭代器，使用该属性可以为对象自定义迭代器。当<code>Symbol.iterator</code>属性存在时，该对象可以被认为是可迭代对象；</li><li>可迭代对象可以使用for-of循环，for-of循环不需要关注集合对象的索引，更能专注于对内容的处理；</li><li>数组、Set、Map以及字符串都具有默认的迭代器；</li><li>扩展运算符可以作用于任何可迭代对象，让可迭代对象转换成数组，并且扩展运算符可以用于数组字面量中任何位置中，让可迭代对象的数据项一次填入到新数组中；</li><li>生成器是一个特殊的函数，语法上使用了<code>*</code>，yield能够返回结果，并能暂停继续往下执行，直到调用next()方法后，才能继续往下执行。使用生成器委托能够将两个生成器合并组合成一个生成器；</li><li>能够使用生成器构造异步任务处理器；</li></ol><h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//生成器</span><br><span class="line"></span><br><span class="line">// function*generator()&#123;</span><br><span class="line"></span><br><span class="line">// yield 1;</span><br><span class="line">// yield 2;</span><br><span class="line">// yield 3;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// let iterator = generator();</span><br><span class="line">// console.log(iterator.next().value);</span><br><span class="line">// console.log(iterator.next().value);</span><br><span class="line"></span><br><span class="line">// let arr = [1,2,3];</span><br><span class="line">// // for(let num of arr)&#123;</span><br><span class="line">// // console.log(num);</span><br><span class="line">// // &#125;</span><br><span class="line"></span><br><span class="line">// //访问默认迭代器</span><br><span class="line"></span><br><span class="line">// let iterator = arr[Symbol.iterator]();</span><br><span class="line">// console.log(iterator.next().value);</span><br><span class="line">// console.log(iterator.next().value);</span><br><span class="line"></span><br><span class="line">//创建可迭代对象</span><br><span class="line"></span><br><span class="line">// let obj = &#123;</span><br><span class="line">// items:[],</span><br><span class="line"></span><br><span class="line">// *[Symbol.iterator]()&#123;</span><br><span class="line">// for(let item of this.items)&#123;</span><br><span class="line">// yield item;</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// obj.items.push(1);</span><br><span class="line">// obj.items.push(2);</span><br><span class="line"></span><br><span class="line">// for(let num of obj)&#123;</span><br><span class="line">// console.log(num);</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">//字符串默认迭代器</span><br><span class="line">// let str =&#x27;A   B&#x27;;</span><br><span class="line">// for(let s of str)&#123;</span><br><span class="line">// console.log(s);</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">//扩展运算符可作用到所有可迭代对象</span><br><span class="line">// let arr = [1,2,3];</span><br><span class="line">// let arr2 = [7,8,9];</span><br><span class="line">// let array = [...arr,5,...arr2];</span><br><span class="line">// console.log(array);</span><br><span class="line"></span><br><span class="line">//迭代器的高级功能,next()方法传递参数</span><br><span class="line">// function * generator()&#123;</span><br><span class="line">// let first = yield 1;</span><br><span class="line">// let second = yield first+2;</span><br><span class="line">// let third = yield second+3;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// let iterator = generator();</span><br><span class="line">// console.log(iterator.next()); //&#123;value: 1, done: false&#125;</span><br><span class="line">// console.log(iterator.next(4)); //&#123;value: 6, done: false&#125;</span><br><span class="line">// console.log(iterator.next(5)); //&#123;value: 8, done: false&#125;</span><br><span class="line">// console.log(iterator.next()); //&#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">//迭代器抛出错误</span><br><span class="line"></span><br><span class="line">// function * generator()&#123;</span><br><span class="line">// let first = yield 1;</span><br><span class="line">// let second;</span><br><span class="line">// try&#123;</span><br><span class="line">// second = yield first+2;</span><br><span class="line">// &#125;catch(ex)&#123;</span><br><span class="line">// second = 6</span><br><span class="line">// &#125;</span><br><span class="line">// let third = yield second+3;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// let iterator = generator();</span><br><span class="line">// console.log(iterator.next()); //&#123;value: 1, done: false&#125;</span><br><span class="line">// console.log(iterator.next(4)); //&#123;value: 6, done: false&#125;</span><br><span class="line">// console.log(iterator.throw(new Error(&#x27;Error!&#x27;))); //&#123;value: 9, done: false&#125;</span><br><span class="line">// console.log(iterator.next()); //&#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">//生成器的return语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// function * gene()&#123;</span><br><span class="line">// yield 1;</span><br><span class="line">// return &#x27;finish&#x27;;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// let iterator = gene();</span><br><span class="line">// console.log(iterator.next());//&#123;value: 1, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: &quot;finish&quot;, done: true&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">//生成器委托</span><br><span class="line"></span><br><span class="line">// function * gene1()&#123;</span><br><span class="line">// yield &#x27;red&#x27;;</span><br><span class="line">// yield &#x27;green&#x27;;</span><br><span class="line"></span><br><span class="line">// &#125;</span><br><span class="line">// function * gene2()&#123;</span><br><span class="line">// yield 1;</span><br><span class="line">// yield 2;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// function * combined()&#123;</span><br><span class="line">// yield * gene1();</span><br><span class="line">// yield * gene2();</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// let iterator = combined();</span><br><span class="line">// console.log(iterator.next());//&#123;value: &quot;red&quot;, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: &quot;green&quot;, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: 1, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: 2, done: true&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">// //利用生成器返回值</span><br><span class="line"></span><br><span class="line">// function * gene1()&#123;</span><br><span class="line">// yield 1;</span><br><span class="line">// return 2;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// function * gene2(count)&#123;</span><br><span class="line"></span><br><span class="line">// for(let i=0;i&lt;count;i++)&#123;</span><br><span class="line">// yield &#x27;repeat&#x27;;</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// function * combined()&#123;</span><br><span class="line">// let result = yield * gene1();</span><br><span class="line">// yield result;</span><br><span class="line">// yield*gene2(result);</span><br><span class="line">// &#125;</span><br><span class="line">// let iterator = combined();</span><br><span class="line">// console.log(iterator.next());//&#123;value: 1, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: 2, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: &quot;repeat&quot;, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: &quot;repeat&quot;, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">// //任务执行器</span><br><span class="line">// function run(taskDef) &#123;</span><br><span class="line">// // 创建迭代器，让它在别处可用</span><br><span class="line">// let task = taskDef();</span><br><span class="line">// // 启动任务</span><br><span class="line">// let result = task.next();</span><br><span class="line">// // 递归使用函数来保持对 next() 的调用</span><br><span class="line">// function step() &#123;</span><br><span class="line">// // 如果还有更多要做的</span><br><span class="line">// if (!result.done) &#123;</span><br><span class="line">// result = task.next(result.value);</span><br><span class="line">// console.log(result.value);</span><br><span class="line">// step();</span><br><span class="line">// &#125;</span><br><span class="line">// &#125; </span><br><span class="line">// // 开始处理过程</span><br><span class="line">// step();</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// run(function*() &#123;</span><br><span class="line">// let value = yield 1;</span><br><span class="line">// yield value+5;</span><br><span class="line">// &#125;);</span><br><span class="line"></span><br><span class="line">//异步任务处理器</span><br><span class="line"></span><br><span class="line">function run(taskDef)&#123;</span><br><span class="line"></span><br><span class="line">//执行生成器，创建迭代器</span><br><span class="line">let task = taskDef();</span><br><span class="line">//启动任务</span><br><span class="line">let result = task.next();</span><br><span class="line"></span><br><span class="line">function step()&#123;</span><br><span class="line">while(!result.done)&#123;</span><br><span class="line">if(typeof(result.value)===&#x27;function&#x27; )&#123;</span><br><span class="line">result.value(()=&gt;&#123;</span><br><span class="line">console.log(&#x27;hello world&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">result = task.next();</span><br><span class="line">step();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">step();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run(function *()&#123;</span><br><span class="line">//返回一个能够返回执行回调函数的函数，并且回调函数还是该</span><br><span class="line">//函数的参数</span><br><span class="line">yield function(callback)&#123;</span><br><span class="line">setTimeout(callback,3000);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="推荐blue老师的库源码—"><a href="#推荐blue老师的库源码—" class="headerlink" title="推荐blue老师的库源码—"></a>推荐blue老师的库源码—</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=runner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runner</span>(<span class="params">_gen</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gen=<span class="title function_">_gen</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">_next</span>();</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_next</span>(<span class="params">_last_res</span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> res=gen.<span class="title function_">next</span>(_last_res);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(!res.<span class="property">done</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> obj=res.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">          obj.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">_next</span>(res);</span><br><span class="line">          &#125;, <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">reject</span>(err);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> obj==<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(obj.<span class="property">constructor</span>.<span class="title function_">toString</span>().<span class="title function_">startsWith</span>(<span class="string">&#x27;function GeneratorFunction()&#x27;</span>))&#123;</span><br><span class="line">            <span class="title function_">runner</span>(obj).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="title function_">_next</span>(res), reject);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">_next</span>(<span class="title function_">obj</span>());</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="title function_">_next</span>(obj);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res.<span class="property">value</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>简单使用</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> runner=<span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a=<span class="keyword">yield</span> <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">var</span> b=<span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">runner</span>(<span class="keyword">function</span>* ()&#123;</span><br><span class="line">  <span class="keyword">var</span> num=<span class="keyword">yield</span> gen;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);   <span class="comment">//excepted 17</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h2><blockquote><p>基本的类声明</p></blockquote><p>类声明以<code>class</code>关键字开始，其后是类的名称；类中的方法就像是对象字面量中的方法简写，并且方法之间不需要使用逗号：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonClass</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">PersonClass</span>(<span class="string">&quot;hello class&quot;</span>);</span><br><span class="line">person.<span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure><p>类声明语法允许使用<code>constructor</code>直接定义一个构造器，而不需要先定义一个函数，再把它当做构造器来使用。类中的方法使用的函数简写语法，省略了关键字<code>function</code>。</p><p>使用class关键字来定义一个类型，有这样几个要点：</p><ol><li>类声明不会被提升，这与ES6之前通过函数定义不同。类声明与使用<code>let</code>定义一样，因此也存在暂时性死区；</li><li>类声明中的所有代码会自动运行在严格模式下，并且无法退出严格模式；</li><li>类的所有方法都是不可枚举的；</li><li>类的所有内部方法都没有<code>[[Constructor]]</code>，因此使用<code>new</code>来调用他们会抛出错误；</li><li>调用类构造器时不使用<code>new</code>，会抛出错误；</li><li>试图在类的内部方法中重写类名，会抛出错误；</li></ol><h3 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h3><p>类与函数有相似之处，都有两种形式：声明与表达式。函数声明与类声明都以关键词开始（分别是function和class），之后就是标识符（即函数名或者类名）。如果需要定义匿名函数，则function后面就无需有函数名，类似的，如果采用类表达式，关键是class后也无需有类名；</p><blockquote><p>基本的类表达式</p></blockquote><p>使用类表达式，将上例改成如下形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">PersonClass</span> = <span class="keyword">class</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">PersonClass</span>(<span class="string">&quot;hello class&quot;</span>);</span><br><span class="line">person.<span class="title function_">sayName</span>(); <span class="comment">//hello  class</span></span><br></pre></td></tr></table></figure><p><strong>示例代码中就定义了一个匿名的类表达式，如果需要定义一个具名的类表达式，只需要像定义具名函数一样，在class关键字后面写上类名即可。</strong></p><h3 id="类的重要要点"><a href="#类的重要要点" class="headerlink" title="类的重要要点"></a>类的重要要点</h3><blockquote><p>作为一级公民的类</p></blockquote><p>在编程中，<strong>能够被当作值来使用的就成为一级公民（first-class citizen）</strong>。既然都当作值使用，就说明它能够作为参数传递给函数、能作为函数的返回值也能用来给变量赋值。JS中的函数是一等公民，类也是一等公民。</p><p>例如，将类作为参数传递给函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function createObj(classDef)&#123;</span><br><span class="line">return new classDef();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let obj = createObj(class&#123;</span><br><span class="line">sayName()&#123;</span><br><span class="line">console.log(&#x27;hello&#x27;); //hello</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj.sayName();</span><br></pre></td></tr></table></figure><p><strong>类表达式另一个重要用途是实现立即调用类构造器以创建单例。</strong>语法是使用<code>new</code>来配合类表达式使用，并在表达式后面添加括号()：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//立即调用构造器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="keyword">class</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">sayName</span>(); <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><blockquote><p>访问器属性</p></blockquote><p>自有属性需要在类构造器中创建，而类还允许创建访问器属性。为了创建一个<code>getter</code>，要使用<code>get</code>关键字，并要与后面的标识符之间留出空格；创建<code>setter</code>使用相同的方式，只需要将关键字换成<code>set</code>即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonClass</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> name; <span class="comment">//不要使用this.name会导致无限递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>)&#123;</span><br><span class="line">name=value; <span class="comment">//不要使用this.value会导致无限递归</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">PersonClass</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// hello</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">//world</span></span><br><span class="line"><span class="keyword">let</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(<span class="title class_">PersonClass</span>.<span class="property"><span class="keyword">prototype</span></span>,<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get&#x27;</span> <span class="keyword">in</span> descriptor); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>需计算属性名</p></blockquote><p>对象字面量和类之间的相似点有很多，类方法与类访问器属性都能使用需计算属性名的方式，语法与对象字面量中需计算属性名一样，都是使用方括号[]来包裹表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需计算属性名</span></span><br><span class="line"><span class="keyword">let</span> methodName =<span class="string">&#x27;sayName&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> propertyName = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonClass</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line">get [propertyName]()&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">set [propertyName](value)&#123;</span><br><span class="line">name = value;</span><br><span class="line">&#125;</span><br><span class="line">[methodName]()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">PersonClass</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">person.<span class="title function_">sayName</span>(); <span class="comment">//hello world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><blockquote><p>生成器方法</p></blockquote><p>在对象字面量中定义一个生成器：只需要在方法名前附加一个星号<code>*</code>即可，这一语法对类同样有效，允许将类的任意内部方法编程生成器方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成器方法：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GeneClass</span>&#123;</span><br><span class="line"></span><br><span class="line">*<span class="title function_">generator</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">GeneClass</span>();</span><br><span class="line"><span class="keyword">let</span> iterator = obj.<span class="title function_">generator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>可迭代对象用于<code>Symbol.iterator</code>属性，并且该属性指向生成器函数。因此，在类定义中同样可以使用<code>Symbol.iterator</code>属性来定义生成器方法，从而定义出类的默认迭代器。同时也可以通过生成器委托的方式，将数组、Set、Map等迭代器委托给自定义类的迭代器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Collection</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> = [];</span><br><span class="line">&#125; </span><br><span class="line">*[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">items</span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> item;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> collection = <span class="keyword">new</span> <span class="title class_">Collection</span>();</span><br><span class="line">collection.<span class="property">items</span>.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">collection.<span class="property">items</span>.<span class="title function_">push</span>(<span class="number">2</span>);</span><br><span class="line">collection.<span class="property">items</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> collection) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>静态成员</p></blockquote><p>ES6的类简化了静态成员的创建，只要在方法与访问器属性的名称前添加<code>static</code>关键字即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonClass</span> &#123;</span><br><span class="line"><span class="comment">// 等价于 PersonType 构造器</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="title function_">create</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PersonClass</span>(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="title class_">PersonClass</span>.<span class="title function_">create</span>(<span class="string">&quot;Nicholas&quot;</span>);</span><br></pre></td></tr></table></figure><p>通过在方法前加上<code>static</code>关键字，使其转换成静态方法。能在类中的任何方法与访问器属性上使用 <code>static</code> 关键字，唯一限制是不能将它用于 <code>constructor</code> 方法的定义。<strong>静态成员不能用实例来进行访问，始终需要用类自身才能访问它们。</strong></p><blockquote><p>类继承</p></blockquote><p>使用关键字extends可以完成类继承，同时使用super关键字可以在派生类上访问到基类上的方法，包括构造器方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类继承</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rec</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">width,height</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getArea</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span>*<span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Rec</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">width,height</span>)&#123;</span><br><span class="line"><span class="variable language_">super</span>(width,height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(square.<span class="title function_">getArea</span>()); <span class="comment">//10000</span></span><br></pre></td></tr></table></figure><p>关于类继承，还有这样几个要点：</p><ol><li><strong>在派生类中方法会覆盖掉基类中的同名方法，</strong>例如在派生类<code>Square</code>中有<code>getArea()</code>方法的话就会覆盖掉基类<code>Rec</code>中的<code>getArea()</code>方法；</li><li>如果基类中包含了静态成员，那么这些静态成员在派生类中也是可以使用的。注意：<strong>静态成员只能通过类名进行访问，而不是使用对象实例进行访问</strong>；</li></ol><blockquote><p>从表达式中派生类</p></blockquote><p>在ES6中派生类<strong>最大的能力就是能够从表达式中派生类</strong>，只要一个表达式能够返回的对象具有<code>[[Constructor]]</code>属性以及原型，你就可以对该表达式使用<code>extends</code>进行继承。<strong>由于extends后面能够接收任意类型的表达式，这就带来了巨大的可能性，可以动态决定基类，因此一种对象混入的方式：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从表达式中派生类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">SerializableMixin</span> = &#123;</span><br><span class="line"><span class="title function_">serialize</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">AreaMixin</span> = &#123;</span><br><span class="line"><span class="title function_">getArea</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span> * <span class="variable language_">this</span>.<span class="property">width</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mixin</span>(<span class="params">...mixins</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> base = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(base.<span class="property"><span class="keyword">prototype</span></span>, ...mixins);</span><br><span class="line"><span class="keyword">return</span> base;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">mixin</span>(<span class="title class_">AreaMixin</span>, <span class="title class_">SerializableMixin</span>) &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">length</span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">length</span> = length;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">width</span> = length;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">getArea</span>()); <span class="comment">// 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">serialize</span>()); <span class="comment">// &quot;&#123;&quot;length&quot;:3,&quot;width&quot;:3&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><code>mixin() </code>函数接受代表混入对象的任意数量的参数，它创建了一个名为 <code>base</code> 的函数，并将每个混入对象的属性都赋值到新函数的原型上。此函数随后被返回，于是 <code>Square</code> 就能够对其使用 <code>extends</code> 关键字了。注意由于仍然使用了 <code>extends</code> ，你就必须在构造器内调用 <code>super()</code>。若多个混入对象拥有相同的属性，则只有最后添加<br>的属性会被保留。</p><h3 id="继承内置对象"><a href="#继承内置对象" class="headerlink" title="继承内置对象"></a>继承内置对象</h3><p>在E6中能够通过<code>extends</code>继承JS中内置对象，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line"><span class="comment">// 空代码块</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="title class_">MyArray</span>();</span><br><span class="line">colors[<span class="number">0</span>] = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="property">length</span>); <span class="comment">// 1</span></span><br><span class="line">colors.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors[<span class="number">0</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>Symbol.species</p></blockquote><p>属性<code>Symbol.species</code>被用于<strong>定义静态访问器属性</strong>，该属性值<strong>用来指定类的构造器</strong>。当创建一个新的对象实例时，就需要通过<code>Symbol.species</code>属性获取到构造器，从而新建对象实例。</p><p>下面内置对象都定义了<code>Symbol.species</code>属性：</p><ul><li>Array;</li><li>ArrayBuffer;</li><li>Map;</li><li>Promise;</li><li>RegExp;</li><li>Set;</li><li>类型化数组</li></ul><p>例如在自定义类型中，使用<code>Symbol.species</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">static</span> get [<span class="title class_">Symbol</span>.<span class="property">species</span>]() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">clone</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="variable language_">this</span>.<span class="property">constructor</span>[<span class="title class_">Symbol</span>.<span class="property">species</span>](<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDerivedClass1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MyClass</span> &#123;</span><br><span class="line"><span class="comment">// 空代码块</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDerivedClass2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">static</span> get [<span class="title class_">Symbol</span>.<span class="property">species</span>]() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">MyClass</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> <span class="title class_">MyDerivedClass1</span>(<span class="string">&quot;foo&quot;</span>),</span><br><span class="line">clone1 = instance1.<span class="title function_">clone</span>(),</span><br><span class="line">instance2 = <span class="keyword">new</span> <span class="title class_">MyDerivedClass2</span>(<span class="string">&quot;bar&quot;</span>),</span><br><span class="line">clone2 = instance2.<span class="title function_">clone</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone1 <span class="keyword">instanceof</span> <span class="title class_">MyClass</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone1 <span class="keyword">instanceof</span> <span class="title class_">MyDerivedClass1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone2 <span class="keyword">instanceof</span> <span class="title class_">MyClass</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone2 <span class="keyword">instanceof</span> <span class="title class_">MyDerivedClass2</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>此处, <code>MyDerivedClass1</code> 继承了 <code>MyClass</code> ，并且未修改 <code>Symbol.species</code> 属性。由于<br><code>this.constructor[Symbol.species]</code> 会返回 <code>MyDerivedClass1</code> ，当 <code>clone()</code> 被调用时，它就<br>返回了 <code>MyDerivedClass1</code> 的一个实例。 <code>MyDerivedClass2</code> 类也继承了 <code>MyClass</code> ，但重写了<br><code>Symbol.species </code>，让其返回 <code>MyClass</code> 。当 <code>clone()</code> 在 <code>MyDerivedClass2</code> 的一个实例上被调<br>用时，返回值就变成 <code>MyClass</code> 的一个实例。使用 <code>Symbol.species </code>，任意派生类在调用应当<br>返回实例的方法时，都可以判断出需要返回什么类型的值。</p><blockquote><p>在类构造器中使用new.target</p></blockquote><p>使用<code>new.target</code>属性能够判断当前实例对象是由哪个类构造器进行创建的，简单的情况下，<code>new.target</code>属性就等于该类的构造器函数，同时new.target属性也只能在构造器内被定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rec</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span>.<span class="property">target</span>===<span class="title class_">Rec</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Rec</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rec = <span class="keyword">new</span> <span class="title class_">Rec</span>();</span><br><span class="line"><span class="keyword">let</span> square = <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line"></span><br><span class="line">输出：<span class="literal">true</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>当创建<code>Rec</code>对象实例时，<code>new.target</code>指代的是<code>Rec</code>自身的构造器，因此<code>new.target===Rec</code>会返回<code>true</code>，而<code>Rec</code>的派生类<code>Square</code>的<code>new.target</code>会指向它自身的构造器，因此<code>new.target===Rec</code>会返回false;</p><p><strong>可以使用new.target来创建一个抽象基类：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rec</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">new</span>.<span class="property">target</span>===<span class="title class_">Rec</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;abstract class&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Rec</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rec = <span class="keyword">new</span> <span class="title class_">Rec</span>(); <span class="comment">//Uncaught Error: abstract class</span></span><br><span class="line"><span class="keyword">let</span> square = <span class="keyword">new</span> <span class="title class_">Square</span>(); <span class="comment">//不会报错</span></span><br></pre></td></tr></table></figure><p>当试图创建一个Rec实例对象时，会抛出错误，因此Rec可以当做一个抽象基类。</p><h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><ol><li>ES6中的类使用关键字class进行定义，即可以采用类声明的方式也可以采用类表达式进行定义。 此外，类构造器被调用时不能缺少 new ，确保了不能意外地将类作为函数来调用用。 </li><li>基于类的继承允许你从另一个类、函数或表达式上派生新的类。这种能力意味着你可以调用一个函数来判断需要继承的正确基类，也允许你使用混入或其他不同的组合模式来创建一个新类。新的继承方式让继承内置对象（例如数组） 也变为可能，并且其工作符合预期。</li><li>可以使用<code>new.target</code>来判断创建实例对象时所用的类构造器。利用<code>new.target</code>可以用来创建一个抽象基类；</li></ol><p>总之，类是 JS 的一项新特性，它提供了更简洁的语法与更好的功能，通过安全一致的方式来自定义一个对象类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//类表达式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let PersonClass = class &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(name)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.name = name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// sayName()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(this.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = new PersonClass(&quot;hello class&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// person.sayName();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//类作为参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// function createObj(classDef)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return new classDef();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let obj = createObj(class&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// sayName()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;hello&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// obj.sayName();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//立即调用构造器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = new class&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(name)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.name = name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// sayName()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(this.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;(&#x27;hello world&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// person.sayName(); //hello world</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//访问器属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class PersonClass&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(name)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.name = name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// get name()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set name(value)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// name=value;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = new PersonClass(&#x27;hello&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(person.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// person.name = &#x27;world&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(person.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let descriptor = Object.getOwnPropertyDescriptor(PersonClass.prototype,&#x27;name&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;get&#x27; in descriptor);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //需计算属性名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let methodName =&#x27;sayName&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let propertyName = &#x27;name&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class PersonClass&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(name)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.name = name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// get [propertyName]()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set [propertyName](value)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// name = value;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// [methodName]()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return console.log(this.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = new PersonClass(&#x27;hello world&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// person.sayName();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(person.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //生成器方法：</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class GeneClass&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// *generator()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// yield 1;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// yield 2;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let obj = new GeneClass();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let iterator = obj.generator();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(iterator.next().value); //1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(iterator.next().value); //2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(iterator.next().value); //undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//自定义类的默认迭代器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class Collection &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.items = [];</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// *[Symbol.iterator]() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// for(let item of this.items)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// yield item;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let collection = new Collection();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// collection.items.push(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// collection.items.push(2);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// collection.items.push(3);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// for (let x of collection) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(x);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//静态成员</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class PersonClass &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 等价于 PersonType 构造器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(name) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.name = name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// static create(name) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return new PersonClass(name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = PersonClass.create(&quot;Nicholas&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //类继承</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class Rec&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(width,height)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.width = width;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.height = height;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// getArea()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return this.width*this.height;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class Square extends Rec&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(width,height)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// super(width,height);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let square = new Square(100,100);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(square.getArea()); //10000</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //从表达式中派生类</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let SerializableMixin = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// serialize() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return JSON.stringify(this);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let AreaMixin = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// getArea() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return this.length * this.width;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// function mixin(...mixins) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// var base = function() &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Object.assign(base.prototype, ...mixins);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return base;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class Square extends mixin(AreaMixin, SerializableMixin) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(length) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// super();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.length = length;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.width = length;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let x = new Square(3);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(x.getArea()); // 9</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(x.serialize()); // &quot;&#123;&quot;length&quot;:3,&quot;width&quot;:3&#125;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//继承内置对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class MyArray extends Array &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 空代码块</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let colors = new MyArray();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// colors[0] = &quot;red&quot;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(colors.length); // 1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// colors.length = 0;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(colors[0]); // undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Symbol.species</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class MyClass &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// static get [Symbol.species]() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return this;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(value) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.value = value;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// clone() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return new this.constructor[Symbol.species](this.value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class MyDerivedClass1 extends MyClass &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 空代码块</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class MyDerivedClass2 extends MyClass &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// static get [Symbol.species]() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return MyClass;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let instance1 = new MyDerivedClass1(&quot;foo&quot;),</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// clone1 = instance1.clone(),</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// instance2 = new MyDerivedClass2(&quot;bar&quot;),</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// clone2 = instance2.clone();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(clone1 instanceof MyClass); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(clone1 instanceof MyDerivedClass1); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(clone2 instanceof MyClass); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(clone2 instanceof MyDerivedClass2); // false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//new.target</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Rec</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">if</span>(<span class="keyword">new</span>.<span class="property">target</span>===<span class="title class_">Rec</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;abstract class&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Rec</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> rec = <span class="keyword">new</span> <span class="title class_">Rec</span>(); <span class="comment">//Uncaught Error: abstract class</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> square = <span class="keyword">new</span> <span class="title class_">Square</span>(); <span class="comment">//不会报错</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="数组新方法"><a href="#数组新方法" class="headerlink" title="数组新方法"></a>数组新方法</h2><p>在 ES6 之前创建数组主要存在两种方式： <code>Array</code> 构造器与数组字面量写法。这两种方式都需要将数组的项分别列出，并且还要受到其他限制。将“类数组对象”（即：拥有数值类型索引与长度属性的对象） 转换为数组也并不自由，经常需要书写额外的代码。为了使数组更易创建，ES6 新增了<code> Array.of()</code> 与 <code>Array.from()</code> 方法。</p><blockquote><p>Array.of()方法</p></blockquote><p>Array.of()方法会将方法的传入参数全部作为数组里的数据内容，而不管参数的数量与类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let items = Array.of(1,&#x27;2&#x27;);</span><br><span class="line">console.log(items); //Array(2)</span><br><span class="line">console.log(items.length); //2</span><br></pre></td></tr></table></figure><blockquote><p>Array.from()方法</p></blockquote><p>可使用Array.from()方法可以将类数组对象和可迭代对象转换成数组。该方法接收三个参数：</p><ol><li>待转换的可迭代对象或者类数组对象（具有数值索引和长度属性的对象）；</li><li>可选的映射函数；</li><li>指定映射函数内部的 <code>this</code> 值；</li></ol><p><strong>映射转换</strong></p><p>如果你想实行进一步的数组转换，你可以向 Array.from() 方法传递一个映射用的函数作为第二个参数。此函数会将类数组对象的每一个值转换为目标形式，并将其存储在目标数组的对应位置上。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function trans(values)&#123;</span><br><span class="line">return Array.from(arguments,item=&gt;item+1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(trans(1,2,3)); //[2, 3, 4]</span><br></pre></td></tr></table></figure><p><strong>可迭代对象上使用</strong></p><p><code>Array.from()</code> 方法不仅可用于类数组对象，也可用于可迭代对象，也就是说可以将任意包含 <code>Symbol.iterator</code> 属性的对象转换成数组，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">*[Symbol.iterator]()&#123;</span><br><span class="line">yield 1;</span><br><span class="line">yield 2;</span><br><span class="line">yield 3;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(Array.from(obj)); //[1, 2, 3]</span><br></pre></td></tr></table></figure><h3 id="find-和findIndex-方法"><a href="#find-和findIndex-方法" class="headerlink" title="find()和findIndex()方法"></a>find()和findIndex()方法</h3><p><code> indexOf()</code>和<code>lastIndexOf()</code>方法用于查找特定值在数组中的位置，而如果需要查找在数组中满足特定条件的元素就需要使用<code>find()</code>和<code>findIndex()</code>方法。</p><p><code>find()</code> 方法和 <code>findIndex()</code> 方法均接受两个参数：一个是回调函数、一个是可选的指定回调函数中的 <code>this</code> 值。回调函数中有三个参数：</p><ol><li>数组中的数据项元素；</li><li>元素在数组中的索引位置；</li><li>数组实例对象本身；</li></ol><p>回调函数与 <code>map()</code> 和 <code>forEach()</code> 等方法的回调函数中的参数一致。例如，需要找到在数组中大于5的元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">5</span>)); <span class="comment">//8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">5</span>)); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>可以看出，<code>find() </code>方法返回的是满足特定条件的数据项，而 <code>findIndex()</code> 方法返回的是满足特定条件的元素索引。</p><h3 id="fill-方法"><a href="#fill-方法" class="headerlink" title="fill()方法"></a>fill()方法</h3><p><code>fill() </code>方法能使用特定值填充数组中的一个或多个元素。当只使用一个参数的时候，该方法会用该参数的值填充整个数组。若你不想改变数组中的所有元素，而只想改变其中一部分，那么可以使用<strong>可选的起始位置参数与结束位置参数（不包括结束位置的那个元素）</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">fill</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)); <span class="comment">//[1, 5, 1, 1]</span></span><br></pre></td></tr></table></figure><p>若只给定起始位置，不指定结束位置的话，默认结束位置为数组末尾。</p><h3 id="copyWithin-方法"><a href="#copyWithin-方法" class="headerlink" title="copyWithin()方法"></a>copyWithin()方法</h3><p><code>copyWithin()</code> 方法与 <code>fill()</code> 类似，可以一次性修改数组的多个元素。不过，与 <code>fill()</code> 使用单个值来填充数组不同， <code>copyWithin()</code> 方法允许你在数组内部复制自身元素。为此你需要传递两个参数给 <code>copyWithin()</code> 方法：从什么位置开始进行填充，以及被用来复制的数据的起始位置索引，以及可选的复制结束的位置（不包含该位置）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//copyWithin()</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">copyWithin</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>)); <span class="comment">//[1, 5, 1, 5]</span></span><br></pre></td></tr></table></figure><h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let arr = Array.of(1,5,8,9);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(arr.find(item=&gt;item&gt;5)); //8</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(arr.findIndex(item=&gt;item&gt;5)); //2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//fill()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let arr = Array.of(1,5,8,9);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(arr.fill(1,2,4)); //[1, 5, 1, 1]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //copyWithin()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(arr.copyWithin(2,0,2)); //[1, 5, 1, 5]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let buffer = new ArrayBuffer(10);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(buffer.byteLength); //10</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let buf = buffer.slice(4,8);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(buf.byteLength); //4</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let buffer = new ArrayBuffer(2),</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// view = new DataView(buffer);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// view.setInt8(0,1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(view.getInt8(0)); //1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Int8Array</span>(<span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">arr[<span class="number">3</span>] = <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="类型化数组"><a href="#类型化数组" class="headerlink" title="类型化数组"></a>类型化数组</h2><p>ES6 采纳了类型化数组，将其作为语言的一个正式部分，以确保在 JS 引擎之间有更好的兼容性，并确保与 JS 数组有更好的互操作性。</p><h3 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a>数值数据类型</h3><p>JS 数值使用 IEEE 754 标准格式存储，使用 64 位来存储一个数值的浮点数表示形式，该格式在 JS 中被同时用来表示整数与浮点数；当值改变时，可能会频繁发生整数与浮点数之间的格式转换。而类型化数组则允许存储并操作八种不同的数值类型：</p><ol><li>8 位有符号整数（int8）</li><li>8 位无符号整数（uint8）</li><li>16 位有符号整数（int16）</li><li>16 位无符号整数（uint16）</li><li>32 位有符号整数（int32）</li><li>32 位无符号整数（uint32）</li><li>32 位浮点数（float32）</li><li>64 位浮点数（float64）</li></ol><p>所有与类型化数组相关的操作和对象都围绕着这八种数据类型。为了使用它们，要先创建一个数组缓冲区用于存储数据。</p><h3 id="数组缓冲区"><a href="#数组缓冲区" class="headerlink" title="数组缓冲区"></a>数组缓冲区</h3><p>数组缓冲区（array buffer） 是内存中包含一定数量字节的区域，而所有的类型化数组都基于数组缓冲区。创建数组缓冲区使用 ArrayBuffer 构造器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>调用 <code>ArrayBuffer</code> 构造器时，只需要传入单个数值用于指定缓冲区包含的字节数，而本例就创建了一个 10 字节的缓冲区。当数组缓冲区被创建完毕后，你就可以通过检查 <code>byteLength</code>属性来获取缓冲区的字节数。</p><p>还可以使用<code>slice()</code>方法来创建一个包含已有缓冲区部分内容的数组缓冲区，其中<code>slice()</code>方法可以使用起始位置和结束位置（不包含结束位置）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">let</span> buf = buffer.<span class="title function_">slice</span>(<span class="number">4</span>,<span class="number">8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="property">byteLength</span>); <span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>仅仅创建一个数组缓冲器不能写入数据，是没有任何意义的。要想写入数据，需要创建视图（view）。</p><h3 id="使用视图操作数组缓冲区"><a href="#使用视图操作数组缓冲区" class="headerlink" title="使用视图操作数组缓冲区"></a>使用视图操作数组缓冲区</h3><p>数组缓冲区代表了一块内存区域，而视图（views） 则是你操作这块区域的接口。视图工作在数组缓冲区或其子集上，可以读写某种数值数据类型的数据。 DataView 类型是数组缓冲区的通用视图，允许你对前述所有八种数值数据类型进行操作。</p><p>创建视图，需要使用 DataView() 构造器，可以指定可选参数-字节偏移量以及所要包含的字节数。如果不指定所要包含的字节数，则默认为从字节偏移量直到数组缓冲区的末尾。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jslet buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">10</span>),</span><br><span class="line">view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer, <span class="number">5</span>, <span class="number">2</span>);js</span><br></pre></td></tr></table></figure><p>此例中的 <code>view</code> 只能使用索引值为 5 与 6 的字节。使用这种方式，你可以在同一个数组缓冲区上创建多个不同的视图，这样有助于将单块内存区域供给整个应用使用，而不必每次在有需要时才动态分配内存。</p><blockquote><p>获取视图信息</p></blockquote><p>可以通过视图的可读属性来获取视图的信息：</p><ul><li>buffer ：该视图所绑定的数组缓冲区；</li><li>byteOffset ：传给 DataView 构造器的第二个参数，如果当时提供了的话（默认值为0）;</li><li>byteLength ：传给 DataView 构造器的第三个参数，如果当时提供了的话（默认值为该缓冲区的 byteLength 属性。</li></ul><blockquote><p>读取或写入数据</p></blockquote><p>对应于 JS 所有八种数值数据类型， <code>DataView</code> 视图的原型分别提供了在数组缓冲区上写入数据的一个方法、以及读取数据的一个方法。所有方法名都以“set”或“get”开始，其后跟随着对应数据类型的缩写。下面列出了能够操作 <code>int8</code> 或 <code>uint8</code> 类型的读取/写入方法：</p><ul><li>getInt8(byteOffset, littleEndian) ：从 byteOffset 处开始读取一个 int8 值；</li><li>setInt8(byteOffset, value, littleEndian) ：从 byteOffset 处开始写入一个 int8 值；</li><li>getUint8(byteOffset, littleEndian) ：从 byteOffset 处开始读取一个无符号 int8 值；</li><li>setUint8(byteOffset, value, littleEndian) ：从 byteOffset 处开始写入一个无符号int8 值。</li></ul><p>get”方法接受两个参数：开始进行读取的字节偏移量、以及一个可选的布尔值，后者用于指定读取的值是否采用低字节优先方式（注：默认值为 false ） 。“set”方法则接受三个参数：开始进行写入的字节偏移量、需要写入的数据值、以及一个可选的布尔值用于指定是否采用低字节优先方式存储数据。</p><p><strong>如果针对的是16位或者32位整数的话，只需要将上面的方法中的8，相应的改变成16或者32，就可以操作16位或者32值。</strong></p><p><strong>操作浮点数，提供了下面这些方法：</strong></p><ul><li>getFloat32(byteOffset, littleEndian) ：从 byteOffset 处开始读取一个 32 位的浮点数；</li><li>setFloat32(byteOffset, value, littleEndian) ：从 byteOffset 处开始写入一个 32 位的浮点数；</li><li>getFloat64(byteOffset, littleEndian) ：从 byteOffset 处开始读取一个 64 位的浮点数；</li><li>setFloat64(byteOffset, value, littleEndian) ：从 byteOffset 处开始写入一个 64 位的浮点数；</li></ul><p>例如使用上述这些视图上的方法来进行操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">2</span>),</span><br><span class="line">view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer);</span><br><span class="line"></span><br><span class="line">view.<span class="title function_">setInt8</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="title function_">getInt8</span>(<span class="number">0</span>)); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h3 id="类型化数组就是视图"><a href="#类型化数组就是视图" class="headerlink" title="类型化数组就是视图"></a>类型化数组就是视图</h3><p>ES6 的类型化数组实际上也是针对数组缓冲区的特定类型视图，你可以使用这些数组对象来处理特定的数据类型，而不必使用通用的 DataView 对象。一共存在八种特定类型视图，对应着八种数值数据类型。类型化数组的构造器有：Int8Array、Uint8Array、Uint8ClampedArray、Int16Array、Uint16Array、Int32Array、Uint32Array、Float32Array、Float64Array。</p><blockquote><p>创建特定类型视图</p></blockquote><p>创建特定类型视图有三种方式：</p><ol><li><p>第一种方式是使用与创建 DataView 时相同的参数，即：一个数组缓冲区、一个可选的字节偏移量、以及一个可选的字节数量；</p></li><li><p>第二种方式是传递单个数值给类型化数组的构造器，此数值表示该数组包含的元素数量（而不是分配的字节数） 。构造器将会创建一个新的缓冲区，分配正确的字节数以便容纳指定数量的数组元素，而你也可以使用 length 属性来获取这个元素数量；</p></li><li><p>第三种方式是向构造器传递单个对象参数，可以是下列四种对象之一：</p><ol><li>类型化数组：数组所有元素都会被复制到新的类型化数组中。例如，如果你传递一个 int8类型的数组给 Int16Array 构造器，这些 int8 的值会被复制到 int16 数组中。新的类型化数组与原先的类型化数组会使用不同的数组缓冲区。</li><li>可迭代对象：该对象的迭代器会被调用以便将数据插入到类型化数组中。如果其中包含了不匹配视图类型的值，那么构造器就会抛出错误。</li><li>数组：该数组的元素会被插入到新的类型化数组中。如果其中包含了不匹配视图类型的值，那么构造器就会抛出错误。</li><li>类数组对象：与传入数组的表现一致。</li></ol><p>//第一种方式<br>let buffer = new ArrayBuffer(10),<br>view1 = new Int8Array(buffer),<br>view2 = new Int8Array(buffer, 5, 2);</p><p>//第二种方式<br>let ints = new Int16Array(2),<br>floats = new Float32Array(5);</p><p>//第三种方式<br>let ints1 = new Int16Array([25, 50]),<br>ints2 = new Int32Array(ints1);</p></li></ol><h3 id="类型化数组与常规数组的相似点"><a href="#类型化数组与常规数组的相似点" class="headerlink" title="类型化数组与常规数组的相似点"></a>类型化数组与常规数组的相似点</h3><p>类型化数组在很多场景中都可以像常规数组那样被使用。例如，你可以使用 length 属性来获取类型化数组包含的元素数量，还可以使用数值类型的索引值来直接访问类型化数组的元素。它们二者具有的相似点：</p><blockquote><ol><li>公共方法</li></ol></blockquote><p>类型化数组拥有大量与常规数组等效的方法：</p><ul><li>copyWithin()</li><li>entries()</li><li>fill()</li><li>filter()</li><li>find()</li><li>findIndex()</li><li>forEach()</li><li>indexOf()</li><li>join()</li><li>keys()</li><li>lastIndexOf()</li><li>map()</li><li>reduce()</li><li>reduceRight()</li><li>reverse()</li><li>slice()</li><li>some()</li><li>sort()</li><li>values()</li></ul><blockquote><p>相同的迭代器</p></blockquote><p>与常规数组相同，类型化数组也拥有三个迭代器，它们是 <code>entries()</code> 方法、 <code>keys() </code>方法与<code>values()</code> 方法。这就意味着你可以对类型化数组使用扩展运算符，或者对其使用 <code>for-of</code> 循环，就像对待常规数组。</p><blockquote><p>of()和from()方法</p></blockquote><p>所有的类型化数组都包含静态的<code> of()</code> 与 <code>from()</code> 方法，作用类似于 <code>Array.of()</code> 与<code>Array.from()</code> 方法。其中的区别是类型化数组的版本会返回类型化数组，而不返回常规数组。</p><h3 id="类型化数组与常规数组的差异"><a href="#类型化数组与常规数组的差异" class="headerlink" title="类型化数组与常规数组的差异"></a>类型化数组与常规数组的差异</h3><p>二者最重要的区别就是类型化数组并不是常规数组，类型化数组并不是从 Array 对象派生的，使用 <code>Array.isArray()</code> 去检测会返回 <code>false</code> 。</p><blockquote><p>行为差异</p></blockquote><p>常规数组可以被伸展或是收缩，然而类型化数组却会<strong>始终保持自身大小不变</strong>。你可以对常规数组一个不存在的索引位置进行赋值，但在类型化数组上这么做则会被忽略。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="title class_">Int16Array</span>([<span class="number">25</span>, <span class="number">50</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints[<span class="number">0</span>]); <span class="comment">// 25</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints[<span class="number">1</span>]); <span class="comment">// 50</span></span><br><span class="line">ints[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints[<span class="number">2</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>在本例中，尽管对索引值 2 的位置进行了赋值为 5 的操作，但 ints 数组却完全没有被伸展，数组的长度属性保持不变，所赋的值也被丢弃了。</p><p><strong>类型化数组也会对数据类型进行检查以保证只使用有效的值，当无效的值被传入时，将会被替换为 0</strong> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="title class_">Int16Array</span>([<span class="string">&quot;hi&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints.<span class="property">length</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints[<span class="number">0</span>]); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>这段代码试图用字符串值 “hi” 创建一个 Int16Array ，而字符串对于类型化数组来说当然是无效的值，因此该字符串被替换为 0 并插入数组。此数组的长度仅仅是 1 ，而 ints[0]只包含了 0 这个值。</p><p><strong>所有在类型化数组上修改项目值的方法都会受到相同的限制，例如当 map() 方法使用的映射函数返回一个无效值的时候，类型化数组会使用 0 来代替返回值</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="title class_">Int16Array</span>([<span class="number">25</span>, <span class="number">50</span>]),</span><br><span class="line">mapped = ints.<span class="title function_">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="string">&quot;hi&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped[<span class="number">0</span>]); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped[<span class="number">1</span>]); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped <span class="keyword">instanceof</span> <span class="title class_">Int16Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>由于字符串值 “hi” 并不是一个 16 位整数，它在结果数组中就被替换成为 0 。</p><blockquote><p>遗漏的方法</p></blockquote><p>尽管类型化数组拥有常规数组的很多同名方法，但仍然缺少了几个数组方法，包括下列这些：</p><ul><li>concat()</li><li>pop()</li><li>push()</li><li>shift()</li><li>splice()</li><li>unshift()</li></ul><blockquote><p>附加的方法</p></blockquote><p>类型化数组还有两个常规数组所不具备的方法： <code>set()</code> 方法与 <code>subarray()</code> 方法。这两个方法作用相反： <code>set()</code> 方法从另一个数组中复制元素到当前的类型化数组，而 <code>subarray()</code> 方法则是将当前类型化数组的一部分提取为新的类型化数组。</p><p>**set() 方法接受一个数组参数（无论是类型化的还是常规的） 、以及一个可选的偏移量参数，后者指示了从什么位置开始插入数据（默认值为 0 ） **。数组参数中的数据会被复制到目标类型化数组中，并会确保数据值有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="title class_">Int16Array</span>(<span class="number">4</span>);</span><br><span class="line">ints.<span class="title function_">set</span>([<span class="number">25</span>, <span class="number">50</span>]);</span><br><span class="line">ints.<span class="title function_">set</span>([<span class="number">75</span>, <span class="number">100</span>], <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints.<span class="title function_">toString</span>()); <span class="comment">// 25,50,75,100</span></span><br></pre></td></tr></table></figure><p>这段代码创建了一个包含四个元素的 <code>Int16Array</code> ；第一次调用 <code>set()</code> 复制了两个值到数组起始的两个位置；而第二次调用<code> set()</code> 则使用了一个值为 2 的偏移量参数，指明应当从数组的第三个位置（索引 2 ） 开始放置所复制的数据。</p><p><code>subarray()</code> 方法接受一个可选的开始位置索引参数、以及一个可选的结束位置索引参数（像<code>slice()</code> 方法一样，结束位置的元素不会被包含在结果中） ，并会返回一个新的类型化数组。你可以同时省略这两个参数，从而创建原类型化数组的一个复制品。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="title class_">Int16Array</span>([<span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>]),</span><br><span class="line">subints1 = ints.<span class="title function_">subarray</span>(),</span><br><span class="line">subints2 = ints.<span class="title function_">subarray</span>(<span class="number">2</span>),</span><br><span class="line">subints3 = ints.<span class="title function_">subarray</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subints1.<span class="title function_">toString</span>()); <span class="comment">// 25,50,75,100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subints2.<span class="title function_">toString</span>()); <span class="comment">// 75,100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subints3.<span class="title function_">toString</span>()); <span class="comment">// 50,75</span></span><br></pre></td></tr></table></figure><p>本例中利用 <code>ints</code> 数组创建了三个类型化数组。 <code>subints1</code> 数组是 <code>ints</code> 的一个复制品，包含了原数组的所有信息；而 <code>subints2</code> 则从原数组的索引 2 位置开始复制，因此包含了原数组的最末两个元素（即 75 与 100 ） ；最后的 <code>subints3</code> 数组值包含了原数组的中间两个元素，因为调用 <code>subarray()</code> 时同时使用了起始位置与结束位置参数。</p><h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><ol><li>ES6 延续了 ES5 的工作以便让数组更加有用。新增了两种创建数组的方式： Array.of() 方法、以及 Array.from() 方法，其中后者可以将可迭代对象或类数组对象转换为正规数组；</li><li>fill() 方法与 copyWithin() 方法允许你替换数组内的元素。 find() 方法与 findIndex() 方法在数组中查找满足特定条件的元素时会非常有用，其中前者会返回满足条件的第一个元素，而后者会返回该元素的索引位置；</li><li>类型化数组并不是严格的数组，它们并没有继承 Array 对象，但它们的外观和行为都与数组有许多相似点。类型化数组包含的数据类型是八种数值数据类型之一，基于数组缓冲区对象建立，用于表示按位存储的一个数值或一系列数值。类型化数组能够明显提升按位运算的性能，因为它不像 JS 的常规数值类型那样需要频繁进行格式转换。</li></ol><h2 id="Promise基础"><a href="#Promise基础" class="headerlink" title="Promise基础"></a>Promise基础</h2><blockquote><p>什么是回调地狱？</p></blockquote><p>当使用回调函数来进行事件处理的时候，如果嵌套多层回调函数的时候，就会出现回调地狱，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">method1</span>(<span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">method2</span>(<span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">method3</span>(<span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">method4</span>(<span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">method5</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>像本例一样嵌套多个方法调用会创建错综复杂的代码，会难以理解与调试。当想要实现更复<br>杂的功能时，回调函数也会存在问题。要是你想让两个异步操作并行运行，并且在它们都结<br>束后提醒你，那该怎么做？要是你想同时启动两个异步操作，但只采用首个结束的结果，那<br>又该怎么做？而使用Promise就能避免回调地狱的情况。</p><p>Promise可以当做是一个占位符，表示异步操作的执行结果。函数可以返回一个Promise，而不必订阅一个事件或者向函数传递一个回调函数。</p><blockquote><p>Promise的生命周期</p></blockquote><p>每个 Promise 都会经历一个短暂的生命周期，初始为挂起状态（pending state） ，这表示异步操作尚未结束。一个挂起的 Promise 也被认为是未决的（unsettled )。一旦异步操作结束， Promise就会被认为是已决的（settled ） ，并进入两种可能状态之一：</p><ol><li><strong>已完成（fulfilled ）</strong> ： Promise 的异步操作已成功结束；</li><li><strong>已拒绝（rejected ）</strong> ： Promise 的异步操作未成功结束，可能是一个错误，或由其他原因导致。</li></ol><p>内部的<code> [[PromiseState]]</code> 属性会被设置为<code> &quot;pending&quot;</code> 、 <code>&quot;fulfilled&quot;</code> 或 “rejected”<code>，以反映</code>Promise<code> 的状态。该属性并未在 Promise 对象上被暴露出来，</code>因此你无法以编程方式判断 <code>Promise</code> 到底处于哪种状态。不过你可以使用<code>then()</code>方法在 Promise 的状态改变时执行一些特定操作。</p><ol><li><p><strong>then()方法</strong></p><p><code>then() </code>方法在所有的 Promise 上都存在，并且接受两个参数。第一个参数是 Promise 被完成时要调用的函数，异步操作的结果数据都会被传入这个完成函数。第二个参数则是 Promise 被拒绝时要调用的函数，与完成函数相似，拒绝函数会被传入与拒绝相关联的任何附加数据。then()方法的两个参数是可选的，因此可以自由组合监听完成和失败的处理函数；</p></li><li><p><strong>catch()方法</strong></p><p>Promise有catch()方法，等同于只传递拒绝处理函数给then()方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">promise.catch(function(err) &#123;</span><br><span class="line">// 拒绝</span><br><span class="line">console.error(err.message);</span><br><span class="line">&#125;);</span><br><span class="line">// 等同于：</span><br><span class="line">promise.then(null, function(err) &#123;</span><br><span class="line">// 拒绝</span><br><span class="line">console.error(err.message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>创建未决的Promise</p></blockquote><p>使用Promise构造器可以创建一个Promise实例，此构造器接收一个参数：一个被称之为执行器（excutor）的函数，该函数包含了<code>resolve()</code>函数和<code>reject()</code>函数这两个参数。<code>resolve()</code>函数在异步任务执行成功时调用，而<code>reject()</code>函数在异步任务执行失败时调用。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve,reject)&#123;</span><br><span class="line">console.log(&#x27;hi, promise&#x27;);</span><br><span class="line">resolve();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(()=&gt;&#123;</span><br><span class="line">console.log(&#x27;hi, then&#x27;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&#x27;hi&#x27;);</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">hi, promise</span><br><span class="line">hi</span><br><span class="line">hi then</span><br></pre></td></tr></table></figure><p>从输出结果可以看出，Promise构造器中的代码是最先执行的，而<code>then()</code>代码是最后执行的，这是因为只有在Promise中的处理器函数执行结束之后，then()方法中的完成处理函数或者拒绝处理函数才会添加到作业队列的尾部。</p><blockquote><p>创建已决的Promise</p></blockquote><ol><li>使用<code>Promise.resolve()</code></li></ol><p><code>Promise.resolve()</code>方法接收一个参数，并会返回一个处于已完成状态的 <code>Promise</code> ，在<code>then()</code>方法中使用完成处理函数才能提取该完成态的<code>Promise</code>传递的值，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let promise = Promise.resolve(&#x27;hi&#x27;);</span><br><span class="line">promise.then((value)=&gt;&#123;</span><br><span class="line">console.log(value); //hi</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用Promise.reject()</li></ol><p>可以使用<code>Promise.reject()</code>方法来创建一个已拒绝状态的<code>Promise</code>，同样只有在拒绝处理函数中或者<code>catch()</code>方法中才能接受<code>reject()</code>方法传递的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let reject = Promise.reject(&#x27;reject&#x27;);</span><br><span class="line"></span><br><span class="line">reject.catch((value)=&gt;&#123;</span><br><span class="line">console.log(value); //reject</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>非Promise的thenable</p></blockquote><p>当一个对象拥有一个能接受<code>resolve</code>与<code>reject</code>参数的<code>then()</code>方法时，该对象就会被认为是一个非<code>Promise</code>的<code>thenable</code>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let thenable = &#123;</span><br><span class="line"></span><br><span class="line">then:function(resolve,reject)&#123;</span><br><span class="line">resolve(&#x27;hi&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Promise.resolve()</code>与<code>Promise.reject()</code>方法都能够接受非Promise的thenable作为参数，当传入了非Promise的thenable时，这些方法会创建一个新的Promise，并且可以使用then()方法对不同状态进行操作：</p><p>创建一个已完成的Promise</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let thenable = &#123;</span><br><span class="line"></span><br><span class="line">then:function(resolve,reject)&#123;</span><br><span class="line">resolve(&#x27;hi&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let promise = Promise.resolve(thenable);</span><br><span class="line">promise.then((value)=&gt;&#123;</span><br><span class="line">console.log(value); //hi</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同样利用thenable可以创建一个已拒绝的Promise:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let thenable = &#123;</span><br><span class="line"></span><br><span class="line">then:function(resolve,reject)&#123;</span><br><span class="line">reject(&#x27;hi&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let promise = Promise.resolve(thenable);</span><br><span class="line">promise.then(null,(value)=&gt;&#123;</span><br><span class="line">console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>执行器错误</p></blockquote><p>当执行器内部抛出错误，那么Promise的拒绝处理函数就会被调用，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve,reject)&#123;</span><br><span class="line">throw new Error(&#x27;Error!&#x27;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.catch(function(msg)&#123;</span><br><span class="line">console.log(msg); //error</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise链"><a href="#Promise链" class="headerlink" title="Promise链"></a>Promise链</h3><p>除了使用单个Promise外，多个Promise可以进行级联使用，实际上<code>then()</code>方法或者<code>catch()</code>方法会返回一个新的Promise，仅当前一个Promise被决议之后，后一个Promise才会进行处理。</p><blockquote><p>串联Promise</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Error!&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以看出当p1的<code>then()</code>方法执行结束后会返回一个Promise，因此，在此基础上可以继续执行<code>catch()</code>方法。同时，<strong>Promise链允许捕获前一个Promise的错误</strong>。</p><blockquote><p>Promise链中传递值</p></blockquote><p><strong>Promise链的另一个重要方面是能从一个Promise传递数据给另一个Promise的能力。</strong>前一个Promise的完成处理函数的返回值，传递到下一个Promise中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise链传递值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>value+<span class="number">1</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>p1的完成处理函数返回了<code>value+1</code>，也就是<code>2</code>，会传入到下一个Promise的完成处理函数，因此，第二个<code>then()</code>方法中的完成处理函数就会输出<code>2</code>。拒绝处理函数同样可以被用于在Promise链中传递数据。</p><blockquote><p>Promise链中传递Promise</p></blockquote><p>在完成或者拒绝处理函数中可以返回基本类型值，从而可以在Promise链中传递。另外，在Promise链中也可以传递对象，如果传递的是Promise对象，就需要额外的处理：</p><p><strong>传递已完成状态的Promise</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line"><span class="keyword">return</span> p2;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line">输出：<span class="number">1</span>  <span class="number">2</span></span><br></pre></td></tr></table></figure><p>p1中返回了Promise对象<code>p2</code>，当<code>p2</code>完成时，才会调用第二个<code>then()</code>方法，将值<code>value</code>传到完成处理函数中。若<code>Promise</code>对象<code>p2</code>被拒绝后，第二个<code>then()</code>方法中的完成处理函数就不会执行，只能通过拒绝处理函数才能接收到p2传递的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">reject</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line"><span class="keyword">return</span> p2;</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="响应多个Promise"><a href="#响应多个Promise" class="headerlink" title="响应多个Promise"></a>响应多个Promise</h3><p>如果想监视多个Promise的状态，从而决定下一步动作，可以使用ES6提供的两个方法：<code>Promise.all()</code>和<code>Promise.race()</code>；</p><blockquote><p>Promise.all()</p></blockquote><p>Promise.all()方法能接受单个可迭代对象（如数组）作为参数，可迭代对象的元素都是Promise。该方法会返回一个Promise，只有传入所有的Promise都已完成，所返回的Promise才会完成，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">js<span class="comment">//Promise.all()</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]);</span><br><span class="line">p4.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//[1,2,3]</span></span><br><span class="line">&#125;)js</span><br></pre></td></tr></table></figure><p>对 <code>Promise.all()</code> 的调用创建了新的<code>Promise p4 </code>，在 <code>p1</code> 、 <code>p2</code> 与 <code>p3</code> 都被完成后， <code>p4</code> 最终会也被完成。传递给 <code>p4</code> 的完成处理函数的结果是一个包含每个决议值（1 、 2 与 3 ） 的数组，这些值的存储顺序保持了待决议的 <code>Promise</code> 的顺序（与完成的先后顺序无关） ，因此你可以将结果匹配到每个<code>Promise</code>。</p><p><strong>若传递给<code> Promise.all()</code> 的某个 Promise 被拒绝了，那么方法所返回的 Promise 就会立刻被拒绝，而不必等待其他的 Promise 结束</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise.all()</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">reject</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]);</span><br><span class="line">p4.<span class="title function_">catch</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在此例中， p2 被使用数值 2 进行了拒绝，则 p4 的拒绝处理函数就立刻被调用，而不会<br>等待 p1 或 p3 结束执行（它们仍然会各自结束执行，只是 p4 不等它们） 。</p><p><strong>拒绝处理函数总会接受到单个值，而不是一个数组。该值是被拒绝的Promise所返回的拒绝值。</strong></p><blockquote><p>Promise.race()</p></blockquote><p><code>Promise.race()</code>方法接收一个元素是Promise的可迭代对象，并返回一个新的Promise。一旦传入<code>Promise.race()</code>的可迭代对象中有一个Promise是已决状态，那么返回的Promise对象就会立刻成为已决状态。</p><p>而<code>Promise.all()</code>方法得必须等到所有传入的Promise全部变为已决状态，所返回的Promise才会已决。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3]);</span><br><span class="line">p4.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise.race() 方法传入的Promise中哪一个Promise先变成已完成状态，就会将值传递给所返回的Promise对象的完成处理函数中。若哪一个Promise最先变成已拒绝状态，同样的，会将值传递给<code>p4</code>的拒绝处理函数中。</p><h3 id="继承Promise"><a href="#继承Promise" class="headerlink" title="继承Promise"></a>继承Promise</h3><p>可以继承Promise实现自定义的Promise，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Promise</span> &#123;</span><br><span class="line"><span class="comment">// 使用默认构造器</span></span><br><span class="line"><span class="title function_">success</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">failure</span>(<span class="params">reject</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">catch</span>(reject);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">42</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">success</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 42</span></span><br><span class="line">&#125;).<span class="title function_">failure</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在此例中， MyPromise 从 Promise 上派生出来，并拥有两个附加方法。 <code>success()</code> 方法模拟了 <code>resolve()</code> ， <code>failure()</code> 方法则模拟了 <code>reject()</code> 。</p><h3 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3><ol><li>Promise 具有三种状态：挂起、已完成、已拒绝。一个 <code>Promise</code> 起始于挂起态，并在成功时转为完成态，或在失败时转为拒绝态。 <code>then()</code> 方法允许你绑定完成处理函数与拒绝处理函数，而 <code>catch()</code> 方法则只允许你绑定拒绝处理函数；</li><li>能够将多个Promise串联起来组成Promise链，并且能够在中间传递值，甚至是传递Promise对象。 then() 的调用都创建并返回了一个新的 Promise ，只有在前一个 Promise 被决议过，新 Promise 也会被决议。 同时也可以使用Promise.all()和Promise.race()方法来管理多个Promise。</li></ol><h3 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//创建未决的Promise</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let promise = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;hi, promise&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// promise.then(()=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;hi, then&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;hi&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//创建已决的Promise</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let promise = Promise.resolve(&#x27;hi&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// promise.then((value)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let reject = Promise.reject(&#x27;reject&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// reject.catch((value)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//非Promise的thenable</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let thenable = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// then:function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// reject(&#x27;hi&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let promise = Promise.resolve(thenable);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// promise.then(null,(value)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//执行器错误</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let promise = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;Error!&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// promise.catch(function(msg)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(msg);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//串联Promise</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p1 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(&#x27;hi&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// p1.then((value)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;Error!&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;).catch(function(error)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(error);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //Promise链传递值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p1 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// p1.then(value=&gt;value+1)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// .then(value=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//Promise链中传递Promise对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p1 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p2 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// reject(2);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// p1.then(value=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return p2;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;).catch(value=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //Promise.all()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p1 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p2 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// reject(2);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p3 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(3);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p4 = Promise.all([p1,p2,p3]);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// p4.catch(value=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Array.isArray(value)); //true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value); //2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//Promise.race()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p1 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p2 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(2);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p3 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(3);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p4 = Promise.race([p1,p2,p3]);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// p4.then(value=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Array.isArray(value)); //false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value); //1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//继承Promise</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">MyPromise</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Promise</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 使用默认构造器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">success</span>(<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(resolve, reject);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">failure</span>(<span class="params">reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">catch</span>(reject);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">resolve</span>(<span class="number">42</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">promise.<span class="title function_">success</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 42</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;).<span class="title function_">failure</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="代理和反射"><a href="#代理和反射" class="headerlink" title="代理和反射"></a>代理和反射</h2><blockquote><p>代理是什么？</p></blockquote><p>通过调用 <code>new Proxy()</code> ，你可以创建一个代理用来替代另一个对象（被称之为目目标对象） ，这个代理对目标对象进行了虚拟，因此该代理与该目标对象表面上可以被当作同一个对象来对待。</p><p>代理允许你拦截目标对象上的底层操作，而这本来是JS引擎的内部能力，拦截行为适用了一个能响应特定操作的函数（被称之为陷阱）；</p><blockquote><p>反射是什么？</p></blockquote><p>被<code>Reflect</code>对象所代表的反射接口，<strong>是给底层操作提供默认行为的方法的集合，这些操作是能够被代理重写的</strong>。每个代理陷阱都有一个对应的反射方法，每个方法都与对应的陷阱函数同名，并且接收的参数也与之一致。</p><blockquote><p>创建一个简单的代理</p></blockquote><p>使用Proxy构建可以创建一个简单的代理对象，需要传递两个参数：<strong>目标对象以及一个处理器，后者是定义一个或多个陷阱函数的对象</strong>。如果不定义陷阱函数，则依然使用目标对象的默认行为。</p><h3 id="常用陷阱函数"><a href="#常用陷阱函数" class="headerlink" title="常用陷阱函数"></a>常用陷阱函数</h3><h3 id="基本陷阱函数"><a href="#基本陷阱函数" class="headerlink" title="基本陷阱函数"></a>基本陷阱函数</h3><p><strong>1.使用Set陷阱函数验证属性值</strong></p><p>假如有这样一个场景，必须要求对象的属性值必须只能是数值，这就意味着该对象每个新增属性时都要被验证，并且在属性不为数值属性时就应该抛出错误。因此就需要使用<code>set</code>陷阱函数来重写<code>set</code>函数的默认行为，<code>set</code>陷阱函数接收四个参数：</p><ol><li>trapTarget：代理的目标对象；</li><li>key：需要写入的属性的键；</li><li>value：被写入属性的值；</li><li>receiver：操作发生的对象（通常是代理对象）</li></ol><p><code>Reflect.set()</code>是<code>set</code>陷阱函数对应的反射方法，同时也是<code>set</code>操作的默认行为，<code>Reflect.set()</code>方法与<code>set</code>陷阱函数一样，能够接受四个参数。</p><p>针对上述场景，示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//set陷阱函数</span><br><span class="line">let target = &#123;</span><br><span class="line">name:&#x27;target&#x27;</span><br><span class="line">&#125;</span><br><span class="line">let proxy = new Proxy(target,&#123;</span><br><span class="line">set(tarpTarget,key,value,receiver)&#123;</span><br><span class="line"></span><br><span class="line">if(!tarpTarget.hasOwnProperty(key))&#123;</span><br><span class="line">if(isNaN(value))&#123;</span><br><span class="line">throw new Error(&#x27;property must be number&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return Reflect.set(tarpTarget,key,value,receiver);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.msg=&#x27;hello proxy&#x27;; //Uncaught Error: property must be number</span><br></pre></td></tr></table></figure><p>通过set陷阱函数就可以检测设置属性时属性值的类型，当属性值不是数字时，就会抛出错误。</p><p><strong>2.使用get陷阱函数进行对象外形验证</strong></p><p><strong>对象外形（Object Shape）指的是对象已有的属性与方法的集合。</strong>能够使用代理很方便进行对象外形验证。由于使用属性验证只需要在读取属性时被触发，因此只需要使用<code>get陷阱函数</code>。该函数接受三个参数：</p><ol><li>trapTarget：代理的目标对象；</li><li>key：需要读取的属性的键；</li><li>receiver：操作发生的对象（通常是代理对象）；</li></ol><p>相应的<code>Reflect.get()</code>方法同样拥有这三个参数。进行对象外形验证的示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//get陷阱函数</span><br><span class="line"></span><br><span class="line">let target=&#123;</span><br><span class="line">name:&#x27;hello world&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let proxy = new Proxy(target,&#123;</span><br><span class="line">get(tarpTarget,key,receiver)&#123;</span><br><span class="line">if(!(key in tarpTarget))&#123;</span><br><span class="line">throw new Error(&#x27;不存在该对象&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">return Reflect.get(tarpTarget,key,receiver);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(proxy.name); //hello world</span><br><span class="line">console.log(proxy.age); // Uncaught Error: 不存在该对象</span><br></pre></td></tr></table></figure><p>使用<code>get陷阱函数</code>进行对象外形验证，由于<code>target</code>对象存在<code>name</code>属性，所以可以正常返回，当获取<code>age</code>属性时，由于该属性并不存在，所以会抛出错误。</p><p><strong>3.使用has陷阱函数隐藏属性</strong></p><p><code>in </code>运算符用于判断指定对象中是否存在某个属性，如果对象的属性名与指定的字符串或符号值相匹配，那么<code>in</code>运算符就会返回<code>true</code>。无论该属性是对象自身的属性还是其原型的属性。</p><p><code>has陷阱函数</code>会在使用<code>in</code>运算符的情况下被调用，控制in运算符返回不同的结果，<code>has陷阱函数</code>会传入两个参数：</p><ol><li>trapTarget：代理的目标对象；</li><li>key：属性键；</li></ol><p><code>Reflect.has()</code>方法接收相同的参数，并向<code>in</code>运算符返回默认的响应结果，用于返回默认响应结果。</p><p>例如想要隐藏value属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//has陷阱函数</span><br><span class="line">let target = &#123;</span><br><span class="line">value:&#x27;hello world&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let proxy = new Proxy(target,&#123;</span><br><span class="line">has(tarpTarget,key)&#123;</span><br><span class="line">if(Object.is(key,&#x27;value&#x27;))&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">Reflect.has(tarpTarget,key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&#x27;value&#x27; in proxy); //false</span><br></pre></td></tr></table></figure><p>使用<code>has陷阱函数</code>，能够控制<code>in</code>运算符的结果，<code>value</code>属性在<code>target对象</code>中存在，通过代理的<code>has陷阱函数</code>使得在检查<code>value</code>属性时返回<code>false</code>，达到隐藏属性的效果。</p><p><strong>4.使用deleteProperty陷阱函数避免属性被删除</strong></p><p><code>deleteProperty</code> 陷阱函数会在使用<code>delete</code> 运算符删除对象属性时被调用，该方法接收两个参数：</p><ol><li>trapTarget：代理的目标对象；</li><li>key：需要删除的键；</li></ol><p><code>Reflect.deleteProperty()</code> 方法也接受这两个参数，并提供了 <code>deleteProperty</code> 陷阱函数的默认实现。你可以结合 <code>Reflect.deleteProperty() </code>方法以及 <code>deleteProperty</code> 陷阱函数，来修改 <code>delete</code> 运算符的行为。例如，能确保 value 属性不被删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let target = &#123;</span><br><span class="line">name: &quot;target&quot;,</span><br><span class="line">value: 42</span><br><span class="line">&#125;;</span><br><span class="line">let proxy = new Proxy(target, &#123;</span><br><span class="line">deleteProperty(trapTarget, key) &#123;</span><br><span class="line">if (key === &quot;value&quot;) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return Reflect.deleteProperty(trapTarget, key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 尝试删除 proxy.value</span><br><span class="line">console.log(&quot;value&quot; in proxy); // true</span><br><span class="line">let result1 = delete proxy.value;</span><br><span class="line">console.log(result1); // false</span><br></pre></td></tr></table></figure><h3 id="原型代理上的陷阱函数"><a href="#原型代理上的陷阱函数" class="headerlink" title="原型代理上的陷阱函数"></a>原型代理上的陷阱函数</h3><p>在调用Object.setPrototypeOf()和getPrototypeOf()方法时，可以使用<code>setPrototypeOf</code>和<code>getPrototypeOf</code>陷阱函数来影响Object上相应的两个方法的效果。setPrototypeOf陷阱函数接收两个参数：</p><ol><li>trapTarget：代理的目标对象；</li><li>proto：需要被用作原型的对象；</li></ol><p><code>setPrototypeOf()</code>方法与<code>Reflect.setPrototypeOf()</code>传入相同的参数。另外，getPrototypeOf陷阱函数只接收<code>trapTarget</code>参数，<code>Reflect.getPrototype</code>也只接收一个参数。</p><p>例如，通过返回 null 隐藏了代理对象的原型，并且使得该原型不可被修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//原型代理上的陷阱函数</span><br><span class="line"></span><br><span class="line">let target = &#123;&#125;;</span><br><span class="line">let proxy = new Proxy(target, &#123;</span><br><span class="line">getPrototypeOf(trapTarget) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;,</span><br><span class="line">setPrototypeOf(trapTarget, proto) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">let targetProto = Object.getPrototypeOf(target);</span><br><span class="line">let proxyProto = Object.getPrototypeOf(proxy);</span><br><span class="line">console.log(targetProto === Object.prototype); // true</span><br><span class="line">console.log(proxyProto === Object.prototype); // false</span><br><span class="line">console.log(proxyProto); // null</span><br><span class="line">// 成功</span><br><span class="line">Object.setPrototypeOf(target, &#123;&#125;);</span><br><span class="line">// 抛出错误</span><br><span class="line">Object.setPrototypeOf(proxy, &#123;&#125;);</span><br></pre></td></tr></table></figure><p>使用 <code>target</code> 对象作为参数调用<code>Object.getPrototypeOf()</code> 会返回一个对象值；而使用 proxy 对象调用该方法则会返回<code>null</code> ，因为 <code>getPrototypeOf</code> 陷阱函数被调用了。类似的，使用 target 去调用<code>Object.setPrototypeOf()</code> 会成功；而由于 <code>setPrototypeOf</code> 陷阱函数的存在，使用 <code>proxy</code>则会引发错误。</p><p>2.3 对象可扩展性的陷阱函数</p><p>ES5 通过<code> Object.preventExtensions()</code> 与 <code>Object.isExtensible()</code> 方法给对象增加了可扩展性。而 ES6 则通过 <code>preventExtensions</code> 与 <code>isExtensible</code> 陷阱函数允许代理拦截对于底层对象的方法调用。这两个陷阱函数都接受名为 <code>trapTarget</code> 的单个参数，此参数代表代理的目标对象。 <code>isExtensible</code> 陷阱函数必须返回一个布尔值用于表明目标对象是否可被扩展，而 <code>preventExtensions</code> 陷阱函数也需要返回一个布尔值，用于表明操作是否已成功。同时也存在<code>Reflect.preventExtensions()</code> 与<code> Reflect.isExtensible()</code> 方法，用于实现默认的行为。这两个方法都返回布尔值，因此它们可以在对应的陷阱函数内直接使用。</p><p>例如，不想让代理对象的<code>Object.preventExtensios()</code>操作成功，可以强制<code>preventExtensions</code>陷阱函数返回<code>false</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//对象可扩展性的陷阱函数</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let target = &#123;&#125;;</span><br><span class="line">let proxy = new Proxy(target, &#123;</span><br><span class="line">isExtensible(trapTarget) &#123;</span><br><span class="line">return Reflect.isExtensible(trapTarget);</span><br><span class="line">&#125;,</span><br><span class="line">preventExtensions(trapTarget) &#123;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(Object.isExtensible(target)); // true</span><br><span class="line">console.log(Object.isExtensible(proxy)); // true</span><br><span class="line">Object.preventExtensions(proxy);</span><br><span class="line">console.log(Object.isExtensible(target)); // true</span><br><span class="line">console.log(Object.isExtensible(proxy)); // true</span><br></pre></td></tr></table></figure><h3 id="属性描述符的陷阱函数"><a href="#属性描述符的陷阱函数" class="headerlink" title="属性描述符的陷阱函数"></a>属性描述符的陷阱函数</h3><p>ES5 最重要的特征之一就是引入了<code>Object.defineProperty()</code>方法用于定义属性的特性。在JS 之前的版本中，没有方法可以定义一个访问器属性，也不能让属性变成只读或是不可枚举。而这些特性都能够利用 <code>Object.defineProperty() </code>方法来实现，并且你还可以利用<code>Object.getOwnPropertyDescriptor() </code>方法来检索这些特性。代理允许你使用 <code>defineProperty</code> 与 <code>getOwnPropertyDescriptor</code> 陷阱函数，来分别拦截对于<code>Object.defineProperty()</code> 与 <code>Object.getOwnPropertyDescriptor()</code> 的调用。 <code>defineProperty</code><br>陷阱函数接受下列三个参数：</p><ol><li>trapTarget ：需要被定义属性的对象（即代理的目标对象） ；</li><li>key ：属性的键（字符串类型或符号类型） ；</li><li>descriptor ：为该属性准备的描述符对象。</li></ol><p><code>defineProperty</code> 陷阱函数要求你在操作成功时返回 <code>true</code> ，否则返回 <code>false</code> 。<code>getOwnPropertyDescriptor</code> 陷阱函数则只接受 <code>trapTarget</code> 与 <code>key</code> 这两个参数，并会返回对应的描述符。 <code>Reflect.defineProperty()</code> 与 <code>Reflect.getOwnPropertyDescriptor()</code> 方法作为上述陷阱函数的对应方法，接受与之相同的参数。</p><p><code>defineProperty</code> 陷阱函数要求你返回一个布尔值用于表示操作是否已成功。当它返回 <code>true</code>时， <code>Object.defineProperty()</code> 会正常执行；而如果它返回了 <code>false</code> ，则<code>Object.defineProperty() </code>会抛出错误。 你可以使用该功能来限制哪些属性可以被<code>Object.defineProperty()</code> 方法定义。</p><p><code>etOwnPropertyDescriptor</code> 陷阱函数有一个微小差异，要求返回值必须是 <code>null</code> 、<br><code>undefined</code> ，或者是一个对象。如果返回值是一个对象，则只允许该对象拥有 <code>enumerable</code><br>、 <code>configurable</code> 、 <code>value</code> 、 <code>writable</code> 、 <code>get</code> 或 <code>set</code> 这些自有属性</p><h3 id="ownKeys陷阱函数"><a href="#ownKeys陷阱函数" class="headerlink" title="ownKeys陷阱函数"></a>ownKeys陷阱函数</h3><p><code>ownKeys</code> 代理陷阱拦截了内部方法 <code>[[OwnPropertyKeys]]</code> ，并允许你返回一个数组用于重写该行为。返回的这个数组会被用于四个方法： <code>Object.keys()</code> 方法、<code>Object.getOwnPropertyNames()</code> 方法、<code>Object.getOwnPropertySymbols()</code>方法与<code>Object.assign()</code> 方法，其中 <code>Object.assign()</code> 方法会使用该数组来决定哪些属性会被复制。</p><p><code>ownKeys</code> 陷阱函数接受单个参数，即目标对象，同时必须返回一个数组或者一个类数组对象。你可以使用 <code>ownKeys</code> 陷阱函数去过滤特定的属性，以避免这些属性被<code> Object.keys()</code> 方法、<code> Object.getOwnPropertyNames()</code> 方法、<code>Object.getOwnPropertySymbols()</code> 方法或 <code>Object.assign()</code> 方法使用。</p><h3 id="apply与construct陷阱函数"><a href="#apply与construct陷阱函数" class="headerlink" title="apply与construct陷阱函数"></a>apply与construct陷阱函数</h3><p>只有 <code>apply</code> 与 <code>construct</code> 要求代理目标对象必须是一个函数。函数拥有两个内部方法：<code> [[Call]]</code> 与 <code>[[Construct]]</code> ，前者会在函数被直接调用时执行，而后者会在函数被使用 <code>new</code> 运算符调用时执行。 <code>apply</code> 与 <code>construct</code>陷阱函数对应着这两个内部方法，并允许你对其进行重写。<code>apply</code> 陷阱函数会接收到下列三个参数（ <code>Reflect.apply()</code> 也会接收这些参数） ：</p><ol><li>trapTarget ：被执行的函数（即代理的目标对象） ；</li><li>thisArg ：调用过程中函数内部的 this 值；</li><li>argumentsList ：被传递给函数的参数数组。</li></ol><p>当使用 <code>new</code> 去执行函数时， <code>construct</code> 陷阱函数会被调用并接收到下列两个参数：</p><ol><li>trapTarget ：被执行的函数（即代理的目标对象） ；</li><li>argumentsList ：被传递给函数的参数数组。</li></ol><p><code>Reflect.construct() </code>方法同样会接收到这两个参数，还会收到可选的第三参数 <code>newTarget</code>，如果提供了此参数，则它就指定了函数内部的 <code>new.target</code> 值。</p><p>使用apply和construct陷阱函数有这样一些应用场景：</p><blockquote><p>验证函数的参数</p></blockquote><p>假如需要保证所有参数都是某个特定类型，可使用 <code>apply</code> 陷阱函数进行验证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//apply和construct陷阱函数</span><br><span class="line"></span><br><span class="line">let sum = function (arr=[]) &#123;</span><br><span class="line">return arr.reduce((previous,current)=&gt;previous+current);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let proxy = new Proxy(sum,&#123;</span><br><span class="line">apply(trapTarget,thisArg,argumentList)&#123;</span><br><span class="line">argumentList[0].forEach((item)=&gt;&#123;</span><br><span class="line">if(typeof item != &#x27;number&#x27;)&#123;</span><br><span class="line">throw new Error(&#x27;不是数字类型&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">return Reflect.apply(trapTarget,thisArg,argumentList);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">construct(trapTarget,argumentList)&#123;</span><br><span class="line">throw new Error(&#x27;不能使用new&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(proxy([1,2,3,4])); // 10</span><br><span class="line">console.log(proxy([1, &quot;2&quot;, 3, 4]));//Uncaught Error: 不是数字类型Uncaught Error: 不是数字类型</span><br><span class="line">let result = new proxy(); //Uncaught Error: 不能使用new</span><br></pre></td></tr></table></figure><h3 id="可被撤销的代理"><a href="#可被撤销的代理" class="headerlink" title="可被撤销的代理"></a>可被撤销的代理</h3><p>在被创建之后，代理通常就不能再从目标对象上被解绑。有的情况下你可能想撤销一个代理以便让它不能再被使用。当你想通过公共接口向外提供一个安全的对象，并且要求要随时都能切断对某些功能的访问，这种情况下可被撤销的代理就会非常有用。<br>你可以使用<code>Proxy.revocable()</code>方法来创建一个可被撤销的代理，该方法接受的参数与<code>Proxy</code> 构造器的相同：一个目标对象、一个代理处理器，而返回值是包含下列属性的一个对象：</p><ol><li>proxy ：可被撤销的代理对象；</li><li>revoke ：用于撤销代理的函数；</li></ol><p>当 <code>revoke()</code> 函数被调用后，就不能再对该 <code>proxy</code> 对象进行更多操作。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let target = &#123;</span><br><span class="line">name: &quot;target&quot;</span><br><span class="line">&#125;;</span><br><span class="line">let &#123; proxy, revoke &#125; = Proxy.revocable(target, &#123;&#125;);</span><br><span class="line">console.log(proxy.name); // &quot;target&quot;</span><br><span class="line">revoke();</span><br><span class="line">// 抛出错误</span><br><span class="line">console.log(proxy.name);</span><br></pre></td></tr></table></figure><p>这个例子创建了一个可被撤销的代理，它对<code>Proxy.revocable()</code>方法返回的对象进行了解构<br>赋值，把同名属性的值赋给了 <code>proxy</code> 与 <code>revoke</code> 变量。此时 <code>proxy</code> 对象和代理的目标对象一样，于是 <code>proxy.name</code> 属性的值就是 <code>&quot;target&quot;</code> ，因为它直接传递了<br><code>target.name</code> 的值。然而一旦<code> revoke()</code> 函数被调用， 代理对象就和所代理的目标对象就解除“绑定”关系，之后试图访问 <code>proxy.name</code> 会抛出错误。</p><h3 id="将代理对象作为原型使用"><a href="#将代理对象作为原型使用" class="headerlink" title="将代理对象作为原型使用"></a>将代理对象作为原型使用</h3><p><strong>代理对象可以被作为原型使用，在把代理对象作为原型时，仅当操作的默认行为会按惯例追踪原型时，代理陷阱才会被调用。</strong>因此，将代理对象作为原型时，常见的应用场景有：</p><p><strong>1.在原型上使用get陷阱函数</strong></p><p>当内部方法 <code>[[Get]]</code> 被调用以读取属性时，该操作首先会查找对象的自有属性；如果指定名称的属性没有找到，则会继续在对象的原型上进行属性查找；这个流程会一直持续到没有原型可供查找为止。得益于这个流程，若你设置了一个 <code>get</code> 代理陷阱，则只有在对象不存在指定名称的自有属性时，该陷阱函数才会在对象的原型上被调用。当所访问的属性无法保证存在时，你可以使用 <code>get</code> 陷阱函数来阻止预期外的行为。例如，创建了一个对象，当你尝试去访问一个不存在的属性时，它会抛出错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//原型上使用get陷阱函数</span><br><span class="line"></span><br><span class="line">let target = &#123;&#125;;</span><br><span class="line">let newTarget  = Object.create(new Proxy(</span><br><span class="line">target,&#123;</span><br><span class="line">get(trapTarget,key,receiver)&#123;</span><br><span class="line">throw new Error(&#x27;不存在该属性&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">newTarget.name = &#x27;hello world&#x27;;</span><br><span class="line">console.log(newTarget.name); //hello world</span><br><span class="line"></span><br><span class="line">console.log(newTarget.age); //Uncaught Error: 不存在该属性</span><br></pre></td></tr></table></figure><p>由于 <code>name</code> 属性存在，所以不会调用 <code>get</code> 陷阱函数，而 <code>age</code> 属性在对象上并不存在，所以，会从原型上去找该属性，因此，会触发 <code>get</code> 陷阱函数，从而抛出错误。</p><p><strong>2.在原型上使用 <code>set</code> 陷阱函数</strong></p><p>内部方法 <code>[[Set]]</code> 同样会查找对象的自有属性，并在必要时继续对该对象的原型进行查找。当你对一个对象属性进行赋值时，如果指定名称的自有属性存在，值就会被赋在该属性上；而若该自有属性不存在，则会继续检查对象的原型，但默认情况下它会在对象实例（而非原型） 上创建一个新的属性用于赋值，无论同名属性是否存在于原型上。</p><p><strong>3.在原型上使用has陷阱函数</strong></p><p> <code>has</code> 陷阱函数会拦截对象上 <code>in</code> 运算符的使用。 <code>in</code> 运算符首先查找对象上指定名称的自有属性；如果不存在同名自有属性，则会继续查找对象的原型；如果原型上也不存在同名自有属性，那么就会沿着原型链一直查找下去，直到找到该属性、或者没有更<br>多原型可供查找时为止。<code>has</code> 陷阱函数只在原型链查找触及原型对象的时候才会被调用。</p><p><strong>当使用代理作为原型时，这只会在指定名称的自有属性不存在时，才会触发 <code>has</code> 陷阱函数。</strong></p><h3 id="将代理作为类的原型"><a href="#将代理作为类的原型" class="headerlink" title="将代理作为类的原型"></a>将代理作为类的原型</h3><p>代理对象不能直接作为类的原型，因为类的 <code>prototype</code> 属性是不可写入的。但是，可以使用继承来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//代理对象作为类的原型</span><br><span class="line"></span><br><span class="line">function NoSuchProperty() &#123;</span><br><span class="line">// empty</span><br><span class="line">&#125; </span><br><span class="line">NoSuchProperty.prototype = new Proxy(&#123;&#125;, &#123;</span><br><span class="line">get(trapTarget, key, receiver) &#123;</span><br><span class="line">throw new ReferenceError(`$&#123;key&#125; doesn&#x27;t exist`);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">class Square extends NoSuchProperty &#123;</span><br><span class="line">constructor(length, width) &#123;</span><br><span class="line">super();</span><br><span class="line">this.length = length;</span><br><span class="line">this.width = width;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">let shape = new Square(2, 6);</span><br><span class="line">let area1 = shape.length * shape.width;</span><br><span class="line">console.log(area1); // 12</span><br><span class="line">// 由于 &quot;wdth&quot; 不存在而抛出了错误</span><br><span class="line">let area2 = shape.length * shape.wdth;</span><br></pre></td></tr></table></figure><p><code>Square</code> 类继承了 <code>NoSuchProperty</code> 类，因此该代理就被加入了 <code>Square</code> 类的原型链。随后<code>shape</code> 对象被创建为 <code>Square</code> 类的一个实例，让它拥有两个属性： <code>length</code> 与 <code>width</code> 。由于 <code>get</code> 陷阱函数永远不会被调用，因此能够成功读取这两个属性的值。只有访问 <code>shape</code> 上不存在的属性时（例如这里的 <code>shape.wdth</code> 拼写错误） ，才触发了 <code>get</code> 陷阱函数并导致错误被抛出。</p><h3 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h3><ol><li>在 ES6 之前，特定对象（例如数组） 会显示出一些非常规的、无法被开发者复制的行为，而代理的出现改变了这种情况。代理允许你为一些 JS 底层操作自行定义非常规行为，因此你就可以通过代理陷阱来复制 JS 内置对象的所有行为。在各种不同操作发生时（例如对于 <code>in</code>运算符的使用） ，这些代理陷阱会在后台被调用。</li><li>反射接口也是在 ES6 中引入的，允许开发者为每个代理陷阱实现默认的行为。每个代理陷阱在 <code>Reflect</code> 对象（ES6 的另一个新特性） 上都有一个同名的对应方法。将代理陷阱与反射接口方法结合使用，就可以在特定条件下让一些操作有不同的表现，有别于默认的内置行为。</li><li>可被撤销的代理是一种特殊的代理，可以使用 <code>revoke()</code> 函数去有效禁用。 <code>revoke()</code> 函数终结了代理的所有功能，因此在它被调用之后，所有与代理属性交互的意图都会导致抛出错误。</li><li>尽管直接使用代理是最有力的使用方式，但你也可以把代理用作另一个对象的原型。但只有很少的代理陷阱能在作为原型的代理上被有效使用，包括 <code>get</code> 、 <code>set</code> 与 <code>has</code> 这几个，这让这方面的用例变得十分有限</li></ol><h3 id="案例-6"><a href="#案例-6" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //set陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// name:&#x27;target&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(target,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set(tarpTarget,key,value,receiver)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if(!tarpTarget.hasOwnProperty(key))&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if(isNaN(value))&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;property must be number&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return Reflect.set(tarpTarget,key,value,receiver);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// proxy.msg=&#x27;hello proxy&#x27;; //Uncaught Error: property must be number</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //get陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target=&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// name:&#x27;hello world&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(target,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// get(tarpTarget,key,receiver)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if(!(key in tarpTarget))&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;不存在该对象&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return Reflect.get(tarpTarget,key,receiver);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy.name); //hello world</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy.age); // Uncaught Error: 不存在该对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //has陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// value:&#x27;hello world&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(target,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// has(tarpTarget,key)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if(Object.is(key,&#x27;value&#x27;))&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return false;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Reflect.has(tarpTarget,key);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;value&#x27; in proxy); //false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//deleteProperty陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// name: &quot;target&quot;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// value: 42</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(target, &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// deleteProperty(trapTarget, key) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if (key === &quot;value&quot;) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return false;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; else &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return Reflect.deleteProperty(trapTarget, key);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 尝试删除 proxy.value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&quot;value&quot; in proxy); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let result1 = delete proxy.value;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(result1); // false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //原型代理上的陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(target, &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// getPrototypeOf(trapTarget) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return null;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// setPrototypeOf(trapTarget, proto) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return false;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let targetProto = Object.getPrototypeOf(target);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxyProto = Object.getPrototypeOf(proxy);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(targetProto === Object.prototype); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxyProto === Object.prototype); // false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxyProto); // null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 成功</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Object.setPrototypeOf(target, &#123;&#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 抛出错误</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Object.setPrototypeOf(proxy, &#123;&#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//对象可扩展性的陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(target, &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// isExtensible(trapTarget) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return Reflect.isExtensible(trapTarget);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// preventExtensions(trapTarget) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Object.isExtensible(target)); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Object.isExtensible(proxy)); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Object.preventExtensions(proxy);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Object.isExtensible(target)); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Object.isExtensible(proxy)); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//defineProperty</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(&#123;&#125;, &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// defineProperty(trapTarget, key, descriptor) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if (!isNaN(key)) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return false;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return Reflect.defineProperty(trapTarget, key, descriptor);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Object.defineProperty(proxy,&#x27;name&#x27;,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// value:&#x27;hello world&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy.name); // &quot;proxy&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Object.defineProperty(proxy,&#x27;age&#x27;,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// value:20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy.age); // &quot;proxy&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //apply和construct陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let sum = function (arr=[]) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return arr.reduce((previous,current)=&gt;previous+current);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(sum,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// apply(trapTarget,thisArg,argumentList)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// argumentList[0].forEach((item)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if(typeof item != &#x27;number&#x27;)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;不是数字类型&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return Reflect.apply(trapTarget,thisArg,argumentList);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// construct(trapTarget,argumentList)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;不能使用new&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy([1,2,3,4])); // 10</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy([1, &quot;2&quot;, 3, 4]));//Uncaught Error: 不是数字类型Uncaught Error: 不是数字类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let result = new proxy(); //Uncaught Error: 不能使用new</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//可被插销的代理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// name: &quot;target&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let &#123; proxy, revoke &#125; = Proxy.revocable(target, &#123;&#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy.name); // &quot;target&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// revoke();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 抛出错误</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//原型上使用get陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let newTarget  = Object.create(new Proxy(</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// target,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// get(trapTarget,key,receiver)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;不存在该属性&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// ));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// newTarget.name = &#x27;hello world&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(newTarget.name); //hello world</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(newTarget.age); //Uncaught Error: 不存在该属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//代理对象作为类的原型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">NoSuchProperty</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// empty</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">NoSuchProperty</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">get</span>(<span class="params">trapTarget, key, receiver</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReferenceError</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> doesn&#x27;t exist`</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">NoSuchProperty</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">constructor</span>(<span class="params">length, width</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">super</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">length</span> = length;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">width</span> = width;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> shape = <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">2</span>, <span class="number">6</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> area1 = shape.<span class="property">length</span> * shape.<span class="property">width</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(area1); <span class="comment">// 12</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 由于 &quot;wdth&quot; 不存在而抛出了错误</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> area2 = shape.<span class="property">length</span> * shape.<span class="property">wdth</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="什么是模块？"><a href="#什么是模块？" class="headerlink" title="什么是模块？"></a>什么是模块？</h2><p>模块（Modules ） 是使用不同方式加载的 JS 文件（与 JS 原先的脚本加载方式相对） 。这种不同模式很有必要，因为它与脚本（script ） 有大大不同的语义：</p><ol><li>模块代码自动<strong>运行在严格模式</strong>下，并且没有任何办法跳出严格模式；</li><li>在模块的顶级作用域创建的变量，<strong>不会被自动添加到共享的全局作用域</strong>，它们只会在<strong>模块顶级作用域</strong>的内部存在；</li><li>模块顶级作用域的 <code>this</code> 值为 <code>undefined</code> ；</li><li>模块不允许在代码中使用 HTML 风格的注释（这是 JS 来自于早期浏览器的历史遗留特性） ；</li><li>对于需要让模块外部代码访问的内容，模块必须导出它们；</li><li>允许模块从其他模块导入绑定；</li></ol><h3 id="基本的导出"><a href="#基本的导出" class="headerlink" title="基本的导出"></a>基本的导出</h3><p>可以使用 <code>export</code> 关键字将已发布代码部分公开给其他模块。最简单方法就是将 <code>export</code>放置在<strong>任意变量、函数或类声明</strong>之前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 导出数据</span><br><span class="line">export var color = &quot;red&quot;;</span><br><span class="line">export let name = &quot;Nicholas&quot;;</span><br><span class="line">export const magicNumber = 7;</span><br><span class="line">// 导出函数</span><br><span class="line">export function sum(num1, num2) &#123;</span><br><span class="line">return num1 + num1;</span><br><span class="line">&#125; </span><br><span class="line">// 导出类</span><br><span class="line">export class Rectangle &#123;</span><br><span class="line">constructor(length, width) &#123;</span><br><span class="line">this.length = length;</span><br><span class="line">this.width = width;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">// 此函数为模块私有</span><br><span class="line">function subtract(num1, num2) &#123;</span><br><span class="line">return num1 - num2;</span><br><span class="line">&#125; </span><br><span class="line">// 定义一个函数……</span><br><span class="line">function multiply(num1, num2) &#123;</span><br><span class="line">return num1 * num2;</span><br><span class="line">&#125; </span><br><span class="line">// ……导出一个函数引用</span><br><span class="line">export &#123; multiply &#125;;</span><br></pre></td></tr></table></figure><p>此例中有几点需要注意。首先，除了 <code>export</code> 关键字之外，每个声明都与正常形式完全一样。<strong>每个被导出的函数或类都有名称，这是因为导出的函数声明与类声明必须要有名称</strong>。你不能使用这种语法来导出匿名函数或匿名类，除非使用了 <code>default</code> 关键字 。其次，细看一下 <code>multiply()</code> 函数，它并没有在定义时被导出。这是因为你不仅能导出声明，还可以导出引用（即代码最后一行） 。最后请注意，此例并未导出<code>subtract()</code> 函数。此函数在模块外部不可访问，因为任意没有被显式导出的变量、函数或类都会在模块内保持私有。</p><h3 id="基本的导入"><a href="#基本的导入" class="headerlink" title="基本的导入"></a>基本的导入</h3><p>一旦你有了包含导出的模块，就能在其他模块内使用 <code>import</code> 关键字来访问已被导出的功能。 import 语句有两个部分，<strong>一是需要导入的标识符，二是需导入的标识符</strong>的来源模块。此处是导入语句的基本形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; identifier1, identifier2 &#125; from &quot;./example.js&quot;;</span><br></pre></td></tr></table></figure><p>在 <code>import</code> 之后的花括号指明了从给定模块导入对应的绑定， <code>from</code> 关键字则指明了需要导入的模块。模块由一个表示模块路径的字符串（被称为模块说明符， module specifier ） 来指定。</p><p>当从模块导入了一个绑定时，该绑定表现得就像使用了 <code>const</code> 的定义。这意味着你不能再定义另一个同名变量（包括导入另一个同名绑定） ，也不能在对应的 <code>import</code> 语句之前使用此标识符（也就是要受暂时性死区限制） ，更不能修改它的值。</p><blockquote><p>导入单个绑定</p></blockquote><p>实现导入单个绑定时，仅仅只需要使用一个标识符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 单个导入</span><br><span class="line">import &#123; sum &#125; from &quot;./example.js&quot;;</span><br><span class="line">console.log(sum(1, 2)); // 3</span><br><span class="line">sum = 1; // 出错</span><br></pre></td></tr></table></figure><p>对于已导入的绑定再重新赋值，则会导致错误。</p><blockquote><p>导入多个绑定</p></blockquote><p>如果你想从 <code>example</code> 模块导入多个绑定，你可以像下面这样显式的列出它们：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 多个导入</span><br><span class="line">import &#123; sum, multiply, magicNumber &#125; from &quot;./example.js&quot;;</span><br><span class="line">console.log(sum(1, magicNumber)); // 8</span><br><span class="line">console.log(multiply(1, 2)); // 2</span><br></pre></td></tr></table></figure><p>此处从 <code>example</code> 模块导入了三个绑定： <code>sum</code> 、 <code>multiply</code> 与 <code>magicNumber</code> 。</p><blockquote><p>完全导入一个模块</p></blockquote><p>还有一种特殊情况，即允许你将整个模块当作单一对象进行导入，该<strong>模块的所有导出都会作为对象的属性存在</strong>。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 完全导入</span><br><span class="line">import * as example from &quot;./example.js&quot;;</span><br><span class="line">console.log(example.sum(1,</span><br><span class="line">example.magicNumber)); // 8</span><br><span class="line">console.log(example.multiply(1, 2)); // 2</span><br></pre></td></tr></table></figure><p>在此代码中， <code>example.js</code> 中所有导出的绑定都被加载到一个名为 <code>example</code> 的对象中，具名导出（ <code>sum()</code> 函数、 <code>multiple()</code> 函数与 <code>magicNumber</code> ） 都成为 <code>example</code> 的<strong>可用属性</strong>。这种导入格式被称为命名空间导入（namespace import ） ，这是因为该 <code>example</code> 对象并不存在于 <code>example.js</code> 文件中，而是作为一个命名空间对象被创建使用，其中包含了<code>example.js</code> 的所有导出成员。</p><p><strong>需要注意的是：无论对同一个模块使用了多少次 <code>import</code> 语句，该模块都只会被执行一次。在导出模块的代码执行之后，已被实例化的模块就被保留在内存中，并随时都能被其他 <code>import</code> 所引用</strong></p><blockquote><p>导入绑定无法修改原始值</p></blockquote><p>ES6 的 <code>import</code> 语句为变量、函数与类创建了只读绑定，而不像普通变量那样简单引用了原始绑定。<strong>尽管导入绑定的模块无法修改绑定的值，但是可以在导出模块中对原始值做出修改，导入绑定会自动反映出修改的变化</strong>，例如：</p><p>导出模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export var name = &quot;Nicholas&quot;;</span><br><span class="line">export function setName(newName) &#123;</span><br><span class="line">name = newName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; name, setName &#125; from &quot;./example.js&quot;;</span><br><span class="line">console.log(name); // &quot;Nicholas&quot;</span><br><span class="line">setName(&quot;Greg&quot;);</span><br><span class="line">console.log(name); // &quot;Greg&quot;</span><br><span class="line">name = &quot;Nicholas&quot;; // error</span><br></pre></td></tr></table></figure><p>调用 <code>setName(&quot;Greg&quot;</code>) 会回到导出 <code>setName()</code> 的模块内部，并在那里执行，从而将 <code>name</code> 设置为 “<code>Greg</code>“ 。注意这个变化会自动反映到所导入的 <code>name</code> 绑定上。</p><h3 id="重命名的导出与导入"><a href="#重命名的导出与导入" class="headerlink" title="重命名的导出与导入"></a>重命名的导出与导入</h3><blockquote><p>在导出模块中进行重命名</p></blockquote><p>如果想用不同的名称来导出，可以使用 <code>as</code> 关键字来定义新的名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function sum(num1, num2) &#123;</span><br><span class="line">return num1 + num2;</span><br><span class="line">&#125; </span><br><span class="line">export &#123; sum as add &#125;;</span><br></pre></td></tr></table></figure><p>此处的 <code>sum()</code> 函数被作为 <code>add()</code> 导出，前者是<strong>本地名称（local name ）</strong> ，后者则是<strong>导出名称（exported name ）</strong> 。这意味着当另一个模块要导入此函数时，它必须改用 <code>add</code> 这个名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;add&#125; from &#x27;./example.js&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>在导入时重命名</p></blockquote><p>在导入时同样可以使用 <code>as</code> 关键字进行重命名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; add as sum &#125; from &#x27;./example.js&#x27;</span><br><span class="line">console.log(typeof add); // &quot;undefined&quot;</span><br><span class="line">console.log(sum(1, 2)); // 3</span><br></pre></td></tr></table></figure><p>此代码导入了<code> add(</code>) 函数，并使用了导入名称（import name ） 将其重命名为 <code>sum()</code>（本地名称） 。这意味着在此模块中并不存在名为 <code>add</code> 的标识符。</p><h3 id="模块的默认值"><a href="#模块的默认值" class="headerlink" title="模块的默认值"></a>模块的默认值</h3><p>模块的默认值（ default value ） 是使用 <code>default</code> 关键字所指定的单个变量、函数或类，而你在每个模块中<strong>只能设置一个默认导出</strong>，将 <code>default</code> 关键字用于多个导出会是语法错误。</p><h4 id="导出默认值"><a href="#导出默认值" class="headerlink" title="导出默认值"></a>导出默认值</h4><p>导出默认值一共有三种形式：</p><blockquote><ol><li>不使用标识符</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default function(num1,num2)&#123;</span><br><span class="line">return num1+num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此模块将一个函数作为默认值进行了导出， <code>default</code> 关键字标明了这是一个默认导出，此函数并不需要有名称。</p><blockquote><ol start="2"><li>使用标识符</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function sum(num1, num2) &#123;</span><br><span class="line">return num1 + num2;</span><br><span class="line">&#125; </span><br><span class="line">export default sum;</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>使用重命名语法</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function sum(num1, num2) &#123;</span><br><span class="line">return num1 + num2;</span><br><span class="line">&#125; </span><br><span class="line">export &#123;sum as default&#125;;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>既导出了默认值，又导出非默认值</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export let color = &#x27;red&#x27;;</span><br><span class="line">export default function(num1,num2)&#123;</span><br><span class="line">return num1+num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入默认值"><a href="#导入默认值" class="headerlink" title="导入默认值"></a>导入默认值</h4><blockquote><p>只导入默认值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import sum from &#x27;./example.js&#x27;;</span><br><span class="line">console.log(sum(1,2));</span><br></pre></td></tr></table></figure><p>这个导入语句从 <code>example.js</code> 模块导入了其默认值。与之前在非默认的导入中看到的不同,注意此处并未使用花括号。本地名称 <code>sum</code> 被用于代表目标模块所默认导出的函数。</p><blockquote><p>既导入默认值，又导入非默认值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sum, &#123; color &#125; from &#x27;./example.js&#x27;;</span><br><span class="line">console.log(sum(1,2));</span><br><span class="line">console.log(color);</span><br></pre></td></tr></table></figure><p><strong>逗号将默认的本地名称与非默认的名称分隔开，非默认值仍旧被花括号所包裹。要记住在 <code>import</code> 语句中默认名称必须位于非默认名称之前。</strong></p><blockquote><p>对导入默认值重命名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123;default as sum, color&#125; from &#x27;./example.js&#x27;</span><br><span class="line"></span><br><span class="line">console.log(sum(1,2));</span><br><span class="line">console.log(color);</span><br></pre></td></tr></table></figure><p>在此代码中，默认的导出（ <code>default</code> ） 被重命名为 <code>sum</code> ，并且附加的 <code>color</code> 导出也被一并导入了。</p><h4 id="对已导入的内容再导出"><a href="#对已导入的内容再导出" class="headerlink" title="对已导入的内容再导出"></a>对已导入的内容再导出</h4><p>如果在当前模块中对已导入的内容在导出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export &#123;sum&#125; from &#x27;./example.js&#x27;;</span><br></pre></td></tr></table></figure><p>这种形式的 <code>export</code> 会进入指定模块查看 sum 的定义，随后将其导出。在导出时同样也可以进行重命名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export &#123; sum as add &#125; from &#x27;./example.js&#x27;</span><br></pre></td></tr></table></figure><p>如果想将<code>另一个模块</code>中的所有值完全导出，可以使用 <code>*</code> 号模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export * from &#x27;./example.js&#x27;;</span><br></pre></td></tr></table></figure><p>用完全导出，就可以导出目标模块的默认值及其所有具名导出，但这可能影响你从当前模<br>块所能导出的值。例如，假设 example.js 具有一个默认导出，当你使用这种语法时，你就无法为当前模块另外再定义一个默认导出。</p><h4 id="无绑定的导入"><a href="#无绑定的导入" class="headerlink" title="无绑定的导入"></a>无绑定的导入</h4><p>有些模块也许没有进行任何导出，相反只是<strong>修改全局作用域的对象</strong>。尽管这种模块的<strong>顶级变量、函数或类最终并不会自动被加入全局作用域</strong>，但这并不意味着该模块无法访问全局作用域。诸如 <code>Array</code> 与 <code>Object</code> 之类的内置对象的共享定义在模块内部是可访问的，并且对于这些对象的修改会反映到其他模块中。</p><h4 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h4><ol><li>ES6 为 JS 语言添加了模块，作为打包与封装功能的方式。模块的行为异于脚本，它们<strong>不会用自身顶级作用域的变量、函数或类去修改全局作用域</strong>，而模块的 <code>this</code> 值为 <code>undefined</code> ；</li><li>可以在模块中使用 <code>export</code> 关键字<strong>导出，变量、函数与类都可以</strong>，并且每个模块允许存在一个<strong>默认导出</strong>。在导出之后，另一个模块就能导入该模块所导出的一个或多个导出值。这些导入的名称就像是被 <code>const</code> 所定义的，会被当作块级绑定，并且不允在同一模块内重复声明；</li><li>由于模块必须用与脚本不同的方式运行，浏览器就引入了 <code>&lt;script type=&quot;module&quot;&gt;</code> ，以表示资源文件或内联代码需要作为模块来执行。使用 <script type="module"> 加载的模块文件会默认应用 <code>defer</code> 属性。一旦包含模块的页面文档完全被解析，模块就会按照它们在文档中的出现顺序依次执行。</li></ol><h2 id="ES7-预览"><a href="#ES7-预览" class="headerlink" title="ES7 预览"></a>ES7 预览</h2><ul><li>数组<ul><li><code>arr.includes()</code> 数组是否包含某个东西</li><li>数组的 arr.keys(), arr,entries()</li><li>for … in 遍历数组 下标 key</li><li>for … of 遍历数组 值 value, 不能用于json</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 循环的时下标 key</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 循环的是值 value</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&#x27;</span>+i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> arr.<span class="title function_">entries</span>()) &#123;<span class="comment">//结构赋值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&#x27;</span> + key + value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = &#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="number">7</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> json) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数字<ul><li>求幂  3**8   代表：3的8次方</li></ul></li><li>字符串<ul><li>padStart()/padEnd() 指定宽度，不够就补空格或指定字符</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=&#x27;</span> + <span class="string">&#x27;abcd&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="string">&#x27;=&#x27;</span>)<span class="comment">//补几位  第二个参数补什么东西</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=&#x27;</span> + <span class="string">&#x27;abcd&#x27;</span>.<span class="title function_">padEnd</span>(<span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">=00abcd=</span><br><span class="line">=abcd00=</span><br></pre></td></tr></table></figure><ul><li>容忍度<ul><li>[1, 2, 3,] 老版数组最后不能有逗号，新的可以有</li><li>函数参数最后多的逗号也可以</li></ul></li><li>async await<ul><li>和 generator yield 类似</li><li>generator 不可以写成箭头函数， async 可以</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;JavaScript的ES6怎么来的&quot;&gt;&lt;a href=&quot;#JavaScript的ES6怎么来的&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的ES6怎么来的&quot;&gt;&lt;/a&gt;JavaScript的ES6怎么来的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ECMAScript 和 JavaScript&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ECMA 是标准，JS 是实现&lt;/li&gt;
&lt;li&gt;ECMAScript 简称 ECMA 或 ES&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;历史版本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1996, ES1.0 Netscape 将 JS 提交给 ECMA 组织，ES 正式出现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1999, ES3.0 被广泛支持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2011, ES5.1 成为 ISO 国际标准&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2015, ES6.0 正式发布&lt;/p&gt;</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript新语法" scheme="http://example.com/tags/JavaScript%E6%96%B0%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CSS基础</title>
    <link href="http://example.com/2019/06/27/css%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2019/06/27/css%E5%9F%BA%E7%A1%80/</id>
    <published>2019-06-27T02:03:15.000Z</published>
    <updated>2022-03-28T12:15:39.686Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS概述"><a href="#CSS概述" class="headerlink" title="CSS概述"></a>CSS概述</h2><h4 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h4><table><thead><tr><th align="center">Cascading Style Sheets</th></tr></thead><tbody><tr><td align="center">层叠样式表，级联样式表，简称样式表</td></tr></tbody></table><span id="more"></span><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>设置HTML网页中的元素样式</li></ul><h4 id="CSS和HTML之间的关系"><a href="#CSS和HTML之间的关系" class="headerlink" title="CSS和HTML之间的关系"></a>CSS和HTML之间的关系</h4><ul><li>HTML：负责网页结构的搭建，内容的展示</li><li>CSS：负责网页的修饰</li></ul><h4 id="CSS与HTML的属性使用原则"><a href="#CSS与HTML的属性使用原则" class="headerlink" title="CSS与HTML的属性使用原则"></a>CSS与HTML的属性使用原则</h4><ul><li>W3C建议我们尽量使用css的方式来取代html的属性</li></ul><p>​        css样式：</p><pre><code>      1.样式代码高度的重用</code></pre><p>​          2.提高可维护性    </p><h2 id="CSS的语法规范"><a href="#CSS的语法规范" class="headerlink" title="CSS的语法规范"></a>CSS的语法规范</h2><h4 id="使用CSS的方法"><a href="#使用CSS的方法" class="headerlink" title="使用CSS的方法"></a>使用CSS的方法</h4><h5 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将css的样式定义在<span class="selector-tag">HTML</span>标签的style属性中</span><br><span class="line">&lt;any style=&quot;样式声明; 样式声明&quot;&gt;&lt;/any&gt;</span><br><span class="line">样式声明  样式属性:值  组成</span><br><span class="line">多个样式声明之间用分号分隔</span><br></pre></td></tr></table></figure><ul><li>内联样式使用的非常少</li><li>内联样式不能重用</li><li>内联样式优先级最高</li></ul><h5 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在&lt;head&gt;&lt;/head&gt;标签中，添加&lt;style&gt;&lt;style&gt;标签，在其内部定义样式规则</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  样式规则</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">样式规则：由选择器和样式声明组成</span><br><span class="line">选择器&#123;</span><br><span class="line"> 样式声明；</span><br><span class="line"> 样式声明；</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#afa</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#faf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内部样式在本页面可以 重用，但是其他页面不能重</li><li>项目中使用不多，但是学习和测试中大量使用</li></ul><h5 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">独立创建一个新文件*<span class="selector-class">.css</span>。</span><br><span class="line">可以在任何网页中引用</span><br><span class="line">&lt;head&gt;</span><br><span class="line"> &lt;link rel=&quot;stylesheet&quot; href=&quot;css文件的url&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">外部样式是项目中必须使用的样式写法。</span><br></pre></td></tr></table></figure><h4 id="CSS的样式特性"><a href="#CSS的样式特性" class="headerlink" title="CSS的样式特性"></a>CSS的样式特性</h4><h5 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h5><ul><li>大部分的css效果是可以直接被子元素继承的</li><li>必须是层级结构</li></ul><h5 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h5><ul><li>可以为一个元素定义多个样式规则</li><li>规则中属性不冲突(不重复)，可以同时作用到当前元素上</li></ul><h5 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h5><ul><li>如果样式声明冲突时，按照样式规则优先级去应用</li><li>默认的优先级，从高到低：</li></ul><p>​        1.内联样式(行内样式)优先级最高</p><p>​        2.内部样式、外部样式，遵循就近原则</p><p>​        3.浏览器默认样式最低</p><h5 id="调整优先级"><a href="#调整优先级" class="headerlink" title="调整优先级"></a>调整优先级</h5><ul><li>！important规则<ul><li>放在属性值之后，与值之间用空格隔开</li><li>作用是调整优先级，让没有important属性不能覆盖他</li></ul></li></ul><h2 id="基础选择器详解"><a href="#基础选择器详解" class="headerlink" title="基础选择器详解"></a>基础选择器详解</h2><ul><li><strong>选择器的作用</strong><ul><li>规范了页面中哪些元素能够使用定义好的样式</li><li>为了匹配元素</li></ul></li></ul><h4 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*&#123;样式声明&#125;</span><br><span class="line">*效率极低，尽量少用</span><br><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;外边距，内边距清<span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="元素选择器-标签选择器"><a href="#元素选择器-标签选择器" class="headerlink" title="元素选择器(标签选择器)"></a>元素选择器(标签选择器)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设置页面中一类元素的默认样式</span><br><span class="line">标签名称&#123;样式声明&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red&#125;</span><br></pre></td></tr></table></figure><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">定义页面上某类元素的公共样式，谁想用我，就引用我的class名</span><br><span class="line">元素通过class属性来引用该样式</span><br><span class="line">.类名&#123;样式的声明&#125;</span><br><span class="line">&lt;any class=&quot;类名&quot;&gt;</span><br><span class="line">注意: <span class="string">&quot;.&quot;</span>不能省略</span><br><span class="line">     类名不能以数字开头</span><br><span class="line">     类名不能包含特殊字符(可以包含 - _)</span><br></pre></td></tr></table></figure><p>类选择器的特殊用法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.多类选择器</span><br><span class="line">让一个元素引用多个类选择器</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;font_blue font_size24&quot;</span>&gt;</span>烤生蚝<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">2.分类选择器</span><br><span class="line">将元素选择器和类型选择器联合使用</span><br><span class="line">元素选择器.类选择器&#123;&#125;</span><br><span class="line">可以匹配到，指向了某个类的，具体某个元素</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;font_blue&quot;</span>&gt;</span>水煮牛肉<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">span.font_blue&#123;background:#faf;&#125;</span><br><span class="line">作用</span><br><span class="line">1.指向更精确</span><br><span class="line">2.优先级变高</span><br></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>​    设置指定元素的样式，专属定制</p><p>​     为元素设置id值，使用#id值作为选择器，编写专属样式</p><h4 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a>群组选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将多个选择器放在一起，一块定义某公共样式</span><br><span class="line">选择器1，选择器2，选择器3......&#123;公共样式声明&#125;</span><br><span class="line">#content,p.mycolor,span&#123;color:red&#125;</span><br></pre></td></tr></table></figure><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><ul><li>通过元素的后代关系匹配元素</li><li>后代：一层或者多层的嵌套关系</li><li>语法：选择器1 选择器2 选择器3{样式声明}</li></ul><h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><ul><li>通过元素的子代关系匹配元素(一层嵌套)</li><li>选择器1&gt;选择器2&gt;选择器3{样式声明}</li></ul><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><ul><li>匹配元素的不同状态下的样式</li></ul><h5 id="链接伪类"><a href="#链接伪类" class="headerlink" title="链接伪类"></a>链接伪类</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:link</span> 元素尚未访问时的状态样式</span><br><span class="line"><span class="selector-pseudo">:visited</span> 元素访问过后的状态样式</span><br><span class="line"><span class="selector-id">#a1</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-id">#a1</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:yellow;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="动态伪类"><a href="#动态伪类" class="headerlink" title="动态伪类"></a>动态伪类</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:acitve 匹配元素被激活时的状态</span><br><span class="line">#btn:active&#123;<span class="attribute">color</span>:purple;&#125;</span><br><span class="line"><span class="selector-pseudo">:focus</span> 匹配元素获取焦点时的状态</span><br><span class="line"><span class="selector-id">#txt</span><span class="selector-pseudo">:focus</span>&#123;<span class="attribute">background</span>:<span class="number">#aff</span>;&#125;</span><br><span class="line"><span class="selector-pseudo">:hover</span> 鼠标悬停在元素时的状态</span><br><span class="line"><span class="selector-class">.img</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="选择器的权值"><a href="#选择器的权值" class="headerlink" title="选择器的权值"></a>选择器的权值</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">权值：标识当前选择器的重要程度，权值越大优先级越高</span><br><span class="line">!important   &gt;<span class="number">1000</span></span><br><span class="line">内联样式     <span class="number">1000</span></span><br><span class="line">id选择器     <span class="number">100</span></span><br><span class="line">类和伪类选择器  <span class="number">10</span></span><br><span class="line">元素选择器     <span class="number">1</span></span><br><span class="line">*选择器        <span class="number">0</span></span><br><span class="line">继承的样式无权值  无</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>当一个选择器中含有多个选择器时，需要将所有的选择器的权值进行相加。<br>然后再进行比较，权值高的优先显示<br>注意：选择器的权值计算不会超过其最大的数量级<br>（1W个#id也不会到1000）</li><li>群组选择器的权值，单独计算，不会相加</li><li>样式后面加!important 该样式会获取最高优先级<br>内联样式不能添加!important</li><li>如果权值相同，使用就近原则</li></ol><h2 id="盒子模型和边距"><a href="#盒子模型和边距" class="headerlink" title="盒子模型和边距"></a>盒子模型和边距</h2><h4 id="尺寸属性"><a href="#尺寸属性" class="headerlink" title="尺寸属性"></a>尺寸属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">改变元素的宽高</span><br><span class="line"><span class="attribute">width</span></span><br><span class="line">最大宽度 <span class="attribute">max-width</span></span><br><span class="line">最小宽度 <span class="attribute">min-width</span></span><br><span class="line"><span class="attribute">height</span></span><br><span class="line">最大高度 <span class="attribute">max-height</span></span><br><span class="line">最小高度 <span class="attribute">min-height</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h4><h5 id="尺寸单位"><a href="#尺寸单位" class="headerlink" title="尺寸单位"></a>尺寸单位</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">px 像素</span><br><span class="line">in 英寸   1in=2.54cm</span><br><span class="line">pt 磅值，多数用它表示字体大小  1pt=1/72in</span><br><span class="line">cm  mm 厘米，毫米</span><br><span class="line">em 相对单位，相对父元素的倍数</span><br><span class="line">rem 相对单位，相对根元素的倍数(html)</span><br><span class="line">%   相对单位，相对父元素的百分之多少</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="颜色单位"><a href="#颜色单位" class="headerlink" title="颜色单位"></a>颜色单位</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">颜色的英文单词  red blue yellow black orange pink purple</span><br><span class="line">#rrggbb  RGB光学三元色  6个16进制  #006699</span><br><span class="line">#aabbcc---&gt;#abc  #f00  #0f0  #00f  #fff   #000  #333</span><br><span class="line">rgb(r,g,b); r:0~255  g:0~255  b:0~255</span><br><span class="line">rgb(255,255,255);白色</span><br><span class="line">rgb(r%,g%,b%) 此变现形式使用极少</span><br><span class="line">rgba(r,g,b,alpha)  alpha透明度</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="溢出处理"><a href="#溢出处理" class="headerlink" title="溢出处理"></a>溢出处理</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>  <span class="attribute">overflow-x</span>  <span class="attribute">overflow-y</span></span><br><span class="line">当内容多，元素区域小的时候，就会产生溢出效果</span><br><span class="line">默认是纵向溢出</span><br><span class="line">取值：</span><br><span class="line"><span class="number">1</span><span class="selector-class">.visible</span> 可见的，默认值，溢出可见</span><br><span class="line"><span class="number">2</span><span class="selector-class">.hidden</span> 隐藏的，溢出的内容不可见</span><br><span class="line"><span class="number">3</span><span class="selector-class">.scroll</span> 显示滚动条，不管是否溢出，都添加横向和纵向滚动条，(不溢出不可用)</span><br><span class="line"><span class="number">4</span><span class="selector-class">.auto</span> 溢出的部分，显示滚动条，并可用</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="边框属性"><a href="#边框属性" class="headerlink" title="边框属性"></a>边框属性</h4><h5 id="基本属性设置"><a href="#基本属性设置" class="headerlink" title="基本属性设置"></a>基本属性设置</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>:width style color;</span><br><span class="line"><span class="attribute">width</span>:边框的宽度，以px为单位的数字</span><br><span class="line">style:边框的样式</span><br><span class="line">  取值  solid实线</span><br><span class="line">        dotted虚线(点点)</span><br><span class="line">        dashed虚线(短线)</span><br><span class="line">        double 双实线</span><br><span class="line">color:边框的颜色，合法的颜色值 (transparent 透明色)</span><br><span class="line">这种写法，同时设置<span class="number">4</span>个边框，是一种简写方式</span><br><span class="line">取消边框 border:none/<span class="number">0</span>;</span><br><span class="line">单边设置：</span><br><span class="line">    <span class="attribute">border-top</span>/<span class="attribute">right</span>/<span class="attribute">bottom</span>/<span class="attribute">left</span></span><br><span class="line">    <span class="attribute">border-top</span>:<span class="number">5px</span> solid orange;</span><br><span class="line">    <span class="attribute">border-right</span>:<span class="number">3px</span> dotted <span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">7px</span> dashed <span class="number">#0ff</span>;</span><br><span class="line">    <span class="attribute">border-left</span>:<span class="number">11px</span> double <span class="number">#f0f</span>;</span><br><span class="line">单属性设置：</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">border-style</span>:dotted;</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">10px</span>;</span><br><span class="line">单边单属性：</span><br><span class="line"><span class="attribute">border</span>-方向-属性(共<span class="number">12</span>个)</span><br><span class="line"><span class="attribute">border-top-style</span>:double;</span><br><span class="line"><span class="attribute">border-top-color</span>:<span class="number">#44f</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="倒角"><a href="#倒角" class="headerlink" title="倒角"></a>倒角</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">边框的倒角(圆角)</span><br><span class="line">将直角倒成圆角</span><br><span class="line"><span class="attribute">border-radius</span>：</span><br><span class="line">取值  以px为单位的数字</span><br><span class="line">      %   设置圆形(<span class="number">50%</span>)</span><br><span class="line">单角设置</span><br><span class="line">使用两条边去确认一个角，先写上下后写左右</span><br><span class="line"><span class="attribute">border-top-left-radius</span>:左上</span><br><span class="line">border-top-right-radius:右上</span><br><span class="line">border-bottom-left-radius:左下</span><br><span class="line">border-bottom-right-radius:右下</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="边框阴影"><a href="#边框阴影" class="headerlink" title="边框阴影"></a>边框阴影</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color</span><br><span class="line">h-shadow 水平方向阴影偏移，必须值</span><br><span class="line">v-shadow 垂直方向偏移量，必须值</span><br><span class="line">以下可选参数</span><br><span class="line">blur：阴影的模糊距离，可选值，越大模糊距离越明显</span><br><span class="line">spread：阴影的尺寸，指定要在基础阴影上扩出的大小</span><br><span class="line">color：阴影颜色</span><br><span class="line">inset：把默认的外部阴影设置为内部阴影</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="轮廓"><a href="#轮廓" class="headerlink" title="轮廓"></a>轮廓</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">轮廓指的是边框的边框，绘制与边框外边的线条</span><br><span class="line"><span class="attribute">outline</span>:width style color;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="框模型（盒子模型）"><a href="#框模型（盒子模型）" class="headerlink" title="框模型（盒子模型）"></a>框模型（盒子模型）</h4><ul><li>页面元素皆为框（盒子）</li><li>定义了元素框处理元素内容，内边距，外边距以及边框的一种计算模式</li><li>定义了一个元素占地大小的计算方式</li><li>盒子模型默认的计算方式：</li></ul><p>​    <a href="https://imgchr.com/i/A4v2wV"><img src="https://s2.ax1x.com/2019/04/08/A4v2wV.jpg" alt="A4v2wV.jpg"></a></p><ol><li>元素实际占地宽度=左外边距+左边框的宽度+左内边距+内容区域的宽度+右内边距+右边框的宽度+右外边距</li><li>元素实际占地高度=上外+上边框+上内+内容区域高度+下内+下边框+下外</li><li>内边距：元素边框与内容之间的空白间距</li><li>外边距：围绕在元素边框外的空白区域(元素与元素之间的距离)</li></ol><h5 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h5><ul><li>margin 定义4个方向外边距</li><li>margin-top/right/bottom/left 定义某一个方向的外边距</li></ul><p><strong>取值：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.以px为单位的数字</span><br><span class="line">  为正数  <span class="attribute">top</span>，元素往下移动</span><br><span class="line">          <span class="attribute">left</span>, 元素往右移动</span><br><span class="line">  为负数  <span class="attribute">top</span>,元素往上移动</span><br><span class="line">          <span class="attribute">left</span>,元素往左移动</span><br><span class="line"><span class="number">2</span>.取值为%，相对于父元素尺寸的百分比</span><br><span class="line"><span class="number">3</span><span class="selector-class">.auto</span>，自动计算块级元素的外边距，控制块级元素在水平方向居中对齐</span><br><span class="line"><span class="attribute">margin</span>的效果，改变元素在页面上的位置，多用于微调</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>简写方式：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">简写方式</span><br><span class="line"><span class="attribute">margin</span>:value; 设置<span class="number">4</span>个方向外边距</span><br><span class="line"><span class="attribute">margin</span>：v1 v2;     v1:上下外边距   v2：左右外边距</span><br><span class="line">            margin：<span class="number">0</span> auto; 控制块级元素在水平方向居中对齐</span><br><span class="line"><span class="attribute">margin</span>:v1 v2 v3;   v1:上外边距   v2:左右外边距   v3：下外边距</span><br><span class="line">margin:v1 v2 v3 v4; 上 右 下 左(顺时针) </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>自带外边距的元素有哪些：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>~<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">body</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">dl</span>,pre</span><br><span class="line">通常要清除这些元素的自带外边距*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="外边距的特殊效果"><a href="#外边距的特殊效果" class="headerlink" title="外边距的特殊效果"></a>外边距的特殊效果</h5><h6 id="外边距的合并"><a href="#外边距的合并" class="headerlink" title="外边距的合并"></a>外边距的合并</h6><ul><li>当两个垂直外边距相遇时，他们将合并成一个外边距</li><li>最终的取值，取决于两个外边距中距离大的值</li></ul><h6 id="行内元素以及行内块元素的外边距"><a href="#行内元素以及行内块元素的外边距" class="headerlink" title="行内元素以及行内块元素的外边距"></a>行内元素以及行内块元素的外边距</h6><ul><li>行内元素垂直外边距无效(img除外)，水平外边距相遇两个值会相加</li><li>行内块，设置垂直外边距，整行元素跟着发生变化</li></ul><h6 id="外边距溢出"><a href="#外边距溢出" class="headerlink" title="外边距溢出"></a>外边距溢出</h6><p><strong>在特殊条件下，给子元素设置的上外边距，会作用到父元素上</strong></p><ul><li>特殊条件：<ul><li>父元素没有上边框</li><li>只有第一个子元素设置上边距时</li></ul></li><li>解决方案：<ul><li>为父元素增加上边框；弊端：元素实际占地高度变大</li><li>为父元素添加上内边距；弊端：元素实际占地高度变大</li><li>在父元素的第一个子元素位置添加一个空的&lt;table&gt;</li></ul></li></ul><h5 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h5><ul><li>不会影响其他元素，但是会改变元素自己的占地尺寸，会变大</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:value;设置<span class="number">4</span>个方向的内边距</span><br><span class="line"><span class="attribute">padding-top</span>/<span class="attribute">right</span>/<span class="attribute">bottom</span>/<span class="attribute">left</span> 定义单方向的内边距</span><br><span class="line">取值</span><br><span class="line">以px为单位的数字</span><br><span class="line">或者百分比%</span><br><span class="line">简写方式</span><br><span class="line"><span class="attribute">padding</span>:value; 设置<span class="number">4</span>个方向的内边距</span><br><span class="line"><span class="attribute">padding</span>:v1 v2;  v1:上下   v2:左右   padding没有auto</span><br><span class="line">padding:v1 v2 v3:  v1:上  v2:左右  v3:下</span><br><span class="line">padding:v1 v2 v3 v4;上 右  下  左</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="box-sizing属性"><a href="#box-sizing属性" class="headerlink" title="box-sizing属性"></a>box-sizing属性</h5><ul><li>设置盒子模型的计算方式</li><li>默认计算方式：<ul><li>元素实际占地宽度=左外边距+左边框+左内边距+内容区域宽度+右内边距+右边框+右外边距</li><li>元素实际占地高度=上外边距+上边框+上内边距+内容区域高度+下内边距+下边框+下外边距</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>取值</span><br><span class="line"><span class="attribute">content</span>-box 默认值，会采用默认计算方式</span><br><span class="line"><span class="attribute">border</span>-box 元素的尺寸(定义宽高)，包含<span class="attribute">border</span>,<span class="attribute">padding</span>和内容区域宽高</span><br><span class="line">元素实际占地宽度=左右外边距+设置的宽度<span class="attribute">width</span></span><br><span class="line">元素实际占地高度=上下外边距+设置的高度<span class="attribute">height</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="块级元素，行内元素，行内块"><a href="#块级元素，行内元素，行内块" class="headerlink" title="块级元素，行内元素，行内块"></a>块级元素，行内元素，行内块</h5><table><thead><tr><th>块级元素：独立成行，可以设置宽高，margin上下有效</th></tr></thead><tbody><tr><td>行内元素：与其他行内元素和行内块，共用一行          宽高无效，margin上下无效</td></tr><tr><td>行内块：与其他行内元素和行内块，共用一行        可以设置宽高，margin上下有效        一行行内元素，其中一个设置了上下margin,整行都跟着移动</td></tr></tbody></table><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h4 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>:</span><br><span class="line">取值</span><br><span class="line">合法的颜色值</span><br><span class="line">transparent;透明</span><br><span class="line">注意：背景色的填充，默认从边框位置处开始</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background-image:url(资源路径)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="背景图片平铺"><a href="#背景图片平铺" class="headerlink" title="背景图片平铺"></a>背景图片平铺</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>:</span><br><span class="line">取值</span><br><span class="line"><span class="number">1</span>.repeat 默认值，平铺</span><br><span class="line"><span class="number">2</span>.repeat-x  水平方向平铺</span><br><span class="line"><span class="number">3</span>.repeat-y垂直方向平铺</span><br><span class="line"><span class="number">4</span>.no-repeat 不平铺，只显示一张</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="背景图的定位"><a href="#背景图的定位" class="headerlink" title="背景图的定位"></a>背景图的定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-position</span>：x  y </span><br><span class="line">取值</span><br><span class="line"><span class="number">1</span>.以px为单位的数字</span><br><span class="line">  指的是，图片在水平和垂直方向的偏移量</span><br><span class="line"><span class="number">2</span><span class="selector-class">.x</span>% y%</span><br><span class="line"> <span class="number">50%</span> <span class="number">50%</span>中间</span><br><span class="line"> <span class="number">0%</span> <span class="number">0%</span> 左上</span><br><span class="line"> <span class="number">100%</span> <span class="number">100%</span> 右下</span><br><span class="line"><span class="number">3</span>.关键字</span><br><span class="line">  x：<span class="attribute">left</span>/center/<span class="attribute">right</span></span><br><span class="line">  y: top/center/bottom</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="背景图的尺寸"><a href="#背景图的尺寸" class="headerlink" title="背景图的尺寸"></a>背景图的尺寸</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: width  height</span><br><span class="line">取值：</span><br><span class="line"><span class="number">1</span>.以px为单位的数字</span><br><span class="line"><span class="number">2</span>.%</span><br><span class="line"><span class="number">3</span>.cover，填满容器，图片的宽高比不变，铺满整个容器的宽高，图片溢出的部分会被裁减掉</span><br><span class="line">将背景图同比缩放，直到背景图完全覆盖容器，不留一丝空白，图片溢出的部分会被裁减掉</span><br><span class="line">图片可能会显示不完整，但是容器完全被背景图充满</span><br><span class="line"><span class="number">4</span>.contain 图片自身宽高比不变，但是，要缩放到图片能够完全展示出来，所以会有空白区域</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="背景图的固定"><a href="#背景图的固定" class="headerlink" title="背景图的固定"></a>背景图的固定</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span>:</span><br><span class="line">将背景图固定在网页某个位置，一直在可视的区域中显示，不会随着网页滚动条改变位置</span><br><span class="line">取值：<span class="number">1</span>.scroll 默认值，会随着网页滚动条改变位置</span><br><span class="line">      <span class="number">2</span>.fixed 固定，不会随着网页滚动条改变位置</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="背景的简写方式"><a href="#背景的简写方式" class="headerlink" title="背景的简写方式"></a>背景的简写方式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在一个属性中，指定背景多个值</span><br><span class="line">属性：<span class="attribute">background</span></span><br><span class="line">取值：<span class="attribute">color</span> url repeat attachment <span class="attribute">position</span></span><br><span class="line"><span class="attribute">background</span>:<span class="number">#faa</span> <span class="built_in">url</span>(<span class="string">&#x27;08.png&#x27;</span>) no-repeat center center;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="布局流程构思"><a href="#布局流程构思" class="headerlink" title="布局流程构思"></a>布局流程构思</h4><ol><li>先写结构布局</li><li>定义宽高，大体的位置</li><li>背景颜色图，边框所有</li><li>文字的所有</li><li>微调<ol><li>从外往里写，从左往右，从上往下写</li></ol></li></ol><h4 id="渐变—gradient"><a href="#渐变—gradient" class="headerlink" title="渐变—gradient"></a>渐变—gradient</h4><h5 id="什么是渐变"><a href="#什么是渐变" class="headerlink" title="什么是渐变"></a>什么是渐变</h5><ul><li>多种颜色平缓变化的一种显示效果</li></ul><h5 id="渐变的主要因素—色标"><a href="#渐变的主要因素—色标" class="headerlink" title="渐变的主要因素—色标"></a>渐变的主要因素—色标</h5><p>​    色标，一种颜色以及他出现的位置</p><ul><li>一个渐变至少有两个色标</li></ul><h5 id="渐变的分类"><a href="#渐变的分类" class="headerlink" title="渐变的分类"></a>渐变的分类</h5><ul><li>线性渐变，以直线的方向来填充渐变色</li><li>径向渐变，以圆形的方式实现渐变色</li><li>重复渐变，将线性渐变，或径向渐变 重复几次</li></ul><h5 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span></span><br><span class="line">取值：</span><br><span class="line">新版本：linear-gradient(方向，色标<span class="number">1</span>，色标<span class="number">2</span>........)</span><br><span class="line">色标的写法：颜色的合法值 位置的百分比</span><br><span class="line">方向取值：<span class="selector-tag">to</span> <span class="attribute">top</span>/<span class="attribute">right</span>/<span class="attribute">bottom</span>/<span class="attribute">left</span></span><br><span class="line">          角度  按顺时针计算  </span><br><span class="line">                 <span class="number">0deg</span>   <span class="selector-tag">to</span> <span class="attribute">top</span></span><br><span class="line">                 <span class="number">90deg</span>  <span class="selector-tag">to</span> <span class="attribute">right</span></span><br><span class="line">                 <span class="number">180deg</span> <span class="selector-tag">to</span> <span class="attribute">bottom</span></span><br><span class="line">                 <span class="number">270deg</span>  <span class="selector-tag">to</span> <span class="attribute">left</span></span><br><span class="line">旧版本写法：-浏览器内核-linear-gradient(方向,色标<span class="number">1</span>,色标<span class="number">2</span>....)</span><br><span class="line">           方向  <span class="attribute">top</span>/<span class="attribute">right</span>/<span class="attribute">bottom</span>/<span class="attribute">left</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>:<span class="built_in">radial-gradient</span>(半径 at 圆心,色标<span class="number">1</span>,色标<span class="number">2</span>......);</span><br><span class="line">半径：以px为单位的数字</span><br><span class="line">圆心：x y，以px为单位的具体数值</span><br><span class="line">      x% y% 元素的宽高占比</span><br><span class="line">     关键字  x<span class="selector-pseudo">:left</span>/center/<span class="attribute">right</span></span><br><span class="line">             y:top/center/bottom</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="重复线性渐变"><a href="#重复线性渐变" class="headerlink" title="重复线性渐变"></a>重复线性渐变</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repeating-linear-gradient(<span class="selector-tag">to</span> <span class="attribute">right</span>,<span class="selector-id">#faa</span> <span class="number">0px</span>,<span class="selector-id">#ffa</span> <span class="number">50px</span>);</span><br><span class="line">注意在重复渐变中，色标的位置，要给绝对值数字，不要用%</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="重复的径向渐变"><a href="#重复的径向渐变" class="headerlink" title="重复的径向渐变"></a>重复的径向渐变</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repeating-radial-gradient(<span class="number">50px</span> at center center,<span class="selector-id">#060606</span> <span class="number">0px</span>,<span class="selector-id">#af8bd8</span> <span class="number">20px</span>,<span class="selector-id">#292727</span> <span class="number">35px</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">各个浏览器新版本都渐变</span><br><span class="line">对于不支持的旧版本，可以添加浏览器内核前缀的方式，做兼容，让浏览器支持</span><br><span class="line">chrome&amp;safari: -webkit-</span><br><span class="line">firefox:-moz-</span><br><span class="line">ie:-ms-</span><br><span class="line">opera: -o-  </span><br><span class="line">background: <span class="built_in">-webkit-linear-gradient</span>(left, <span class="number">#006699</span> <span class="number">0%</span>,<span class="number">#f00</span> <span class="number">25%</span>, <span class="number">#990066</span> <span class="number">50%</span>,<span class="number">#ff0</span> <span class="number">75%</span>,<span class="number">#996600</span> <span class="number">100%</span>); </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h2><h4 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h4><h5 id="指定字体的类型"><a href="#指定字体的类型" class="headerlink" title="指定字体的类型"></a>指定字体的类型</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>:<span class="string">&quot;类型1&quot;</span>,<span class="string">&quot;类型2&quot;</span>....</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-size</span>:以px、pt为单位的数字或者以em或rem;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-3字体加粗"><a href="#1-3字体加粗" class="headerlink" title="1.3字体加粗"></a>1.3字体加粗</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-weight</span>:bold/normal/lighter/bolder</span><br><span class="line">无单位的数字  <span class="number">100</span>-<span class="number">1000</span>整百数 常用<span class="number">400</span>-<span class="number">900</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-4字体样式"><a href="#1-4字体样式" class="headerlink" title="1.4字体样式"></a>1.4字体样式</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-style</span>：<span class="attribute">normal</span></span><br><span class="line">italic（斜体）</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-5小型大写字母"><a href="#1-5小型大写字母" class="headerlink" title="1.5小型大写字母"></a>1.5小型大写字母</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-variant</span>:normal</span><br><span class="line"> small-caps</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="文本格式化-1"><a href="#文本格式化-1" class="headerlink" title="文本格式化"></a>文本格式化</h4><h5 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">color:合法的颜色值</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-2-文本的水平对齐方式"><a href="#2-2-文本的水平对齐方式" class="headerlink" title="2.2.文本的水平对齐方式"></a>2.2.文本的水平对齐方式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text-align</span><br><span class="line">left/center/right/justify(两端对齐)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-3行高"><a href="#2-3行高" class="headerlink" title="2.3行高"></a>2.3行高</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">定义一行数据的高度</span><br><span class="line">如果行高大于字体本身的大小，该行文本在行高内成垂直居中的显示效果</span><br><span class="line">line-height:</span><br><span class="line">以px为单位的数字，一般与容器的高相同</span><br><span class="line">无单位数字，line-height:2;  是字体大小的倍数</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-4-线条的修饰"><a href="#2-4-线条的修饰" class="headerlink" title="2.4.线条的修饰"></a>2.4.线条的修饰</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">text-decoration</span><br><span class="line">none 没有线条，去掉a标签的下划线</span><br><span class="line">overline 上划线</span><br><span class="line">underline 下划线</span><br><span class="line">line-through 删除线</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-5-首行缩进"><a href="#2-5-首行缩进" class="headerlink" title="2.5.首行缩进"></a>2.5.首行缩进</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text-indent:</span><br><span class="line">以px为单位的数字</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-6-文本的阴影"><a href="#2-6-文本的阴影" class="headerlink" title="2.6.文本的阴影"></a>2.6.文本的阴影</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text-shadow:</span><br><span class="line">h-shadow  v-shadow blur color;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h4 id="表格的常用属性"><a href="#表格的常用属性" class="headerlink" title="表格的常用属性"></a>表格的常用属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">边框属性 <span class="selector-tag">table</span>和<span class="selector-tag">td</span></span><br><span class="line">边距属性 <span class="selector-tag">table</span>都能使用，<span class="selector-tag">td</span>没有<span class="attribute">margin</span></span><br><span class="line">尺寸属性 </span><br><span class="line">文本格式属性 <span class="attribute">font</span>-* text-* <span class="attribute">line-height</span></span><br><span class="line">背景属性 颜色 图片 渐变</span><br><span class="line"><span class="attribute">vertical-align</span>:top/middle/bottom  要写在td才生效</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="表格特有的属性"><a href="#表格特有的属性" class="headerlink" title="表格特有的属性"></a>表格特有的属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.边框合并</span><br><span class="line">    border-collapse：</span><br><span class="line">    separate 默认，边框分离的模式</span><br><span class="line">    collapse 边框合并</span><br><span class="line">2.边框的边距</span><br><span class="line">设置单元格与单元格之间的距离,必须保证border-collapse:separate;</span><br><span class="line">    border-spacing</span><br><span class="line">    取值一个value,垂直和水平距离相同</span><br><span class="line">    取值两个value1 value2. value1:水平距离，value2:垂直距离</span><br><span class="line">3.标题的位置</span><br><span class="line">    caption-side=&quot;&quot;</span><br><span class="line">   top/bottom</span><br><span class="line">4.表格的显示规则,告诉浏览器，我这张表格如果渲染，td尺寸的计算方式</span><br><span class="line">table-layout:</span><br><span class="line">auto 默认值，自动表格布局，列的尺寸实际是由内容决定的</span><br><span class="line">fixed 固定表格的布局，列的尺寸由设置的值决定需要table有尺寸，td有尺寸</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>自动布局auto</th><th>固定布局fixed</th></tr></thead><tbody><tr><td>单元格的大小会适应内容</td><td>单元格尺寸取决于设定的值</td></tr><tr><td>表格复杂时，加载的速度慢(缺点)</td><td>任何情况下会加速加载表格(优点)</td></tr><tr><td>布局会比较灵活(优点)</td><td>布局会比较死板(缺点)</td></tr><tr><td>适用于不确定每列大小，并且表格不太繁琐的时候</td><td>当确定每列尺寸的时候使用</td></tr></tbody></table><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h4 id="什么是定位"><a href="#什么是定位" class="headerlink" title="什么是定位"></a>什么是定位</h4><p>​    元素在页面中的位置</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>普通流定位   默认文档流</li><li>浮动定位</li><li>相对定位</li><li>绝对定位</li><li>固定定位</li></ul><h4 id="普通流定位"><a href="#普通流定位" class="headerlink" title="普通流定位"></a>普通流定位</h4><p>​    又称文档流定位，页面中所有元素默认显示方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.每个元素在页面中都有自己的空间(盒子模型)</span><br><span class="line">2.每个元素都是从父元素的左上角开始显示的</span><br><span class="line">3.块级元素默认按照从上往下的方式逐个排列，每个元素独占一样</span><br><span class="line">4.行内元素是多个元素在一行中显示，从左往右排列</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="相对-绝对-固定定位-position属性"><a href="#相对-绝对-固定定位-position属性" class="headerlink" title="相对/绝对/固定定位 position属性"></a>相对/绝对/固定定位 position属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span></span><br><span class="line">取值</span><br><span class="line">static 静态，默认值。文档流定位</span><br><span class="line">relative 相对定位</span><br><span class="line">absolute 绝对定位</span><br><span class="line">fixed 固定定位</span><br><span class="line">注意:将元素的position设置为relative/absolute/fixed中的任意一个</span><br><span class="line">此元素被称为已定位元素</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="偏移属性"><a href="#偏移属性" class="headerlink" title="偏移属性"></a>偏移属性</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">top</span>/<span class="attribute">right</span>/<span class="attribute">bottom</span>/<span class="attribute">left</span>   距离哪个方向多远</span><br><span class="line">取值是以px为单位的数字</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">元素相对于它原来的位置偏移</span><br><span class="line">在元素位置做微调的时候使用/配合绝对定位使用</span><br><span class="line"><span class="attribute">position</span>:relative;配合偏移属性使用</span><br><span class="line">相对定位不脱离文档流，不会让后面元素补位</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>:absolute;配合偏移属性使用</span><br><span class="line">特点</span><br><span class="line">脱离文档流，不占页面空间，后面元素要补位</span><br><span class="line">绝对定位的元素，会相对于&quot;最近的&quot;&quot;已定位的&quot;&quot;祖先元素&quot;去做偏移量</span><br><span class="line">绝对定位的元素，没有&quot;已定位的&quot;&quot;祖先元素&quot;，相对<span class="selector-tag">body</span>偏移</span><br><span class="line">绝对定位会让元素变为块级</span><br><span class="line">出现堆叠效果，就使用绝对定位</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">将元素固定在页面的某个位置，位置不会随着滚动条发生变化，一直固定在可视区域</span><br><span class="line">固定定位始终相当于body去实现位置偏移</span><br><span class="line">固定定位脱离文档流，不占页面空间，定位的元素会变成块级</span><br><span class="line">position:fixed;配合偏移属性一起使用</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="堆叠顺序"><a href="#堆叠顺序" class="headerlink" title="堆叠顺序"></a>堆叠顺序</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">默认堆叠顺序，后发生定位的元素，堆叠层级高</span><br><span class="line">默认堆叠顺序，不会大于设置z-index的顺序</span><br><span class="line">z-index:无单位数字，理论最大值 2^31-1</span><br><span class="line">父子元素之间，子元素永远在父元素上面</span><br><span class="line">只有已定位元素，才能使用z-index</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h5 id="浮动特点"><a href="#浮动特点" class="headerlink" title="浮动特点"></a>浮动特点</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.元素一旦浮动起了，脱离文档流</span><br><span class="line">不占页面空间，其它未浮动元素会上前补位</span><br><span class="line">2.浮动元素会停靠在父元素的左边或者右边</span><br><span class="line">或其它已经浮动元素的左/右的边缘</span><br><span class="line">3.浮动解决多个块级元素在同一行内显示的问题</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">属性 float：</span><br><span class="line">取值：</span><br><span class="line">left：左浮动，元素浮动起来后，停靠在父元素的左侧，或者往左挨着已浮动元素</span><br><span class="line">right：右浮动，元素浮动起来后，停靠在父元素的右侧，或者往右挨着已浮动元素</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="浮动元素引发的特殊情况"><a href="#浮动元素引发的特殊情况" class="headerlink" title="浮动元素引发的特殊情况"></a>浮动元素引发的特殊情况</h5><h6 id="1-当父容器横向显示不下所有浮动元素的时候，最后一个元素将换行显示"><a href="#1-当父容器横向显示不下所有浮动元素的时候，最后一个元素将换行显示" class="headerlink" title="1.当父容器横向显示不下所有浮动元素的时候，最后一个元素将换行显示"></a>1.当父容器横向显示不下所有浮动元素的时候，最后一个元素将换行显示</h6><p>  1.1默认情况下，最后一个元素会优先显示在最高的位置，再往左排列<br>  1.2会发生浮动元素占位的情况，浮动元素根据浮动方向，占据方向之上的位置，不允许最后一个元素占用</p><h6 id="2-浮动对默认宽度的影响"><a href="#2-浮动对默认宽度的影响" class="headerlink" title="2.浮动对默认宽度的影响"></a>2.浮动对默认宽度的影响</h6><p>​    块级元素不写宽度，宽度默认是父级元素的100%<br>​    元素一旦浮动起来，宽度以内容为准<br>​    前题，不设置width</p><h6 id="3-元素一旦浮动起来，就变为块级元素，允许修改尺寸，设置垂直外边距"><a href="#3-元素一旦浮动起来，就变为块级元素，允许修改尺寸，设置垂直外边距" class="headerlink" title="3.元素一旦浮动起来，就变为块级元素，允许修改尺寸，设置垂直外边距"></a>3.元素一旦浮动起来，就变为块级元素，允许修改尺寸，设置垂直外边距</h6><h6 id="4-文本，行内元素，行内块，是不会被浮动元素压在下方的，二会巧妙避开，环绕着浮动元素显示"><a href="#4-文本，行内元素，行内块，是不会被浮动元素压在下方的，二会巧妙避开，环绕着浮动元素显示" class="headerlink" title="4.文本，行内元素，行内块，是不会被浮动元素压在下方的，二会巧妙避开，环绕着浮动元素显示"></a>4.文本，行内元素，行内块，是不会被浮动元素压在下方的，二会巧妙避开，环绕着浮动元素显示</h6><h5 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">元素一旦浮动之后，会对后续的元素带来一定的影响，后续元素会上前补位，如果不希望后续上前补位，可以给后续元素添加清除浮动的属性</span><br><span class="line">clear:</span><br><span class="line">取值</span><br><span class="line">        left:清除左浮动元素对我带来的影响</span><br><span class="line">        right:清除右浮动元素对我带来的影响</span><br><span class="line">        both: 清除所有浮动元素对我带来的影响</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="浮动元素对父元素高度带来的影响-高度坍塌"><a href="#浮动元素对父元素高度带来的影响-高度坍塌" class="headerlink" title="浮动元素对父元素高度带来的影响(高度坍塌)"></a>浮动元素对父元素高度带来的影响(高度坍塌)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">块级元素不写高度，他的高度是根据内容判定的</span><br><span class="line">如果内部元素都浮动了，内部元素都脱了默认文档流</span><br><span class="line">父级元素就失去了高度------高度坍塌</span><br><span class="line">解决方案：</span><br><span class="line">1.给父级元素添加高度 弊端：不是每次都知道具体的高度是多少</span><br><span class="line">2.设置父级元素也浮动 弊端：会影响父元素后面的其它元素</span><br><span class="line">3.给父元素设置overflow:hidden/auto 弊端：如果内容想要溢出显示，显示不了。</span><br><span class="line">4.在父元素中追加一个空的块级元素，只设置clear:both</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><h4 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">决定了元素在网页中表现形式(块级，行内，行内块，<span class="selector-tag">table</span>)</span><br><span class="line">语法 <span class="attribute">display</span></span><br><span class="line">取值：</span><br><span class="line"><span class="number">1</span><span class="selector-class">.none</span> 不显示元素，隐藏</span><br><span class="line"><span class="number">2</span><span class="selector-class">.block</span> 让元素表现为块级</span><br><span class="line">        块级元素特征，独占一行，可以设置尺寸以及上下外边距</span><br><span class="line"><span class="number">3</span><span class="selector-class">.inline</span> 让元素表现为行内</span><br><span class="line">        行内元素特征，多个元素一行显示，不能设置宽高以下上下外边距</span><br><span class="line"><span class="number">4</span><span class="selector-class">.inline-block</span> 让元素表现为行内块</span><br><span class="line">       行内块特征，多个元素一行显示，可以设置尺寸以及上下外边距</span><br><span class="line"><span class="number">5</span><span class="selector-class">.table</span> 让元素表现为<span class="selector-tag">table</span></span><br><span class="line">      <span class="selector-tag">table</span>的特征：尺寸以内容为准，独占一行，允许修改尺寸</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="显示的效果"><a href="#显示的效果" class="headerlink" title="显示的效果"></a>显示的效果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">属性：visibility</span><br><span class="line">取值  visible/hidden</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>visibility:hidden和display:none的区别<ul><li>visibility:hidden隐藏，不脱离默认文档流，依然占位</li><li>display:none 隐藏，脱离了默认文档，不占页面位置</li></ul></li></ul><h4 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h4><p>​    opacity:0~1  1是不透明，0是全透明</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">opacity</span>和rgba的区别</span><br><span class="line"><span class="attribute">opacity</span>作用与元素，当一个元素设置了<span class="attribute">opacity</span>之后，</span><br><span class="line">       这个元素本身，以及所有子元素，与颜色相关的属性，都会受到影响</span><br><span class="line">rgba(<span class="number">0</span>~<span class="number">255</span>,<span class="number">0</span>~<span class="number">255</span>,<span class="number">0</span>~<span class="number">255</span>,<span class="number">0.5</span>)只会改变你设定的这个颜色透明度</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="垂直对齐"><a href="#垂直对齐" class="headerlink" title="垂直对齐"></a>垂直对齐</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span></span><br><span class="line">    使用在<span class="selector-tag">table</span>中,取值<span class="attribute">top</span>/middle/<span class="attribute">bottom</span></span><br><span class="line">    使用在<span class="selector-tag">img</span>中，取值 <span class="attribute">top</span>/middle/<span class="attribute">bottom</span>/baseline</span><br><span class="line">    控制图片与两边文字垂直对齐方式</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">改变鼠标悬停在元素时的样式</span><br><span class="line"><span class="attribute">cursor</span>:</span><br><span class="line">取值</span><br><span class="line"><span class="number">1</span>.default 箭头</span><br><span class="line"><span class="number">2</span>.pointer 小手</span><br><span class="line"><span class="number">3</span>.crosshair  +</span><br><span class="line"><span class="number">4</span>.text  I</span><br><span class="line"><span class="number">5</span>.wait  等待</span><br><span class="line"><span class="number">6</span>.help 帮助</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h4 id="列表标识"><a href="#列表标识" class="headerlink" title="列表标识"></a>列表标识</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style-type</span>:</span><br><span class="line">                none;</span><br><span class="line">                disc;</span><br><span class="line">                circle;</span><br><span class="line">                square;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="列表标识的位置"><a href="#列表标识的位置" class="headerlink" title="列表标识的位置"></a>列表标识的位置</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style-position</span>:outside/inside;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="列表项引用图片"><a href="#列表项引用图片" class="headerlink" title="列表项引用图片"></a>列表项引用图片</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style-image</span>:<span class="built_in">url</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="简写方式"><a href="#简写方式" class="headerlink" title="简写方式"></a>简写方式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style</span>:type <span class="built_in">url</span>() position;</span><br><span class="line">常用的方式  <span class="attribute">list-style</span>:none;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CSS3-core"><a href="#CSS3-core" class="headerlink" title="CSS3 core"></a>CSS3 core</h2><h4 id="复杂选择器"><a href="#复杂选择器" class="headerlink" title="复杂选择器"></a>复杂选择器</h4><h5 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a><strong>兄弟选择器</strong></h5><ul><li>作用于兄弟元素，只能往后找，不能往前找</li><li>兄弟元素：具备相同父级元素的平级元素之间，成为兄弟元素</li></ul><h5 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a><strong>相邻兄弟选择器</strong></h5><p>​    选择器1+选择器2{}  </p><p>​    在选择器1的后面，紧跟着一个元素，这个元素还得匹配到选择2</p><h5 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器"></a><strong>通用兄弟选择器</strong></h5><p>​    获取某元素后面所有满足条件的兄弟元素</p><p>​    选择器1~选择器2{}</p><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id class name type value style titile ....</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    允许通过元素所带的属性以及值来匹配元素</p><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h5><p>   [attr]{}  ex:[id]{}匹配有id属性的标签</p><h5 id="elem-attr"><a href="#elem-attr" class="headerlink" title="elem[attr]"></a><strong>elem[attr]</strong></h5><p>   div[title]{}  匹配有title属性的div标签</p><h5 id="attr1-attr2"><a href="#attr1-attr2" class="headerlink" title="[attr1][attr2]"></a><strong>[attr1</strong>][attr2]</h5><p>   [class][title]{color:#f00;} 匹配同时具有class属性和title属性</p><h5 id="attr-value"><a href="#attr-value" class="headerlink" title="[attr=value]{}"></a><strong>[attr=value]{}</strong></h5><p>   [id=p2]{} 匹配id值为p2的元素</p><p>   [attr*=value]属性值中，包含指定值的元素</p><p>   [attr~=value]属性值中，包含指定单词的元素</p><p>   [attr^=value] 属性值中,以value开头的元素</p><p>   [attr$=value] 属性值中,以value结尾的元素</p><h4 id="伪类选择器-1"><a href="#伪类选择器-1" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><h5 id="3目标伪类"><a href="#3目标伪类" class="headerlink" title="3目标伪类"></a>3目标伪类</h5><p>   突出显示获得的HTML锚点元素，匹配被激活的锚点</p><p>   选择器:target{}     div:target{}</p><h5 id="结构伪类"><a href="#结构伪类" class="headerlink" title="结构伪类"></a>结构伪类</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ele:first-child&#123;&#125;  匹配的元素是其父元素的第一个子元素</span><br><span class="line">ele:last-child&#123;&#125;  匹配的元素是其父元素的最后一个子元素</span><br><span class="line">ele:nth-child(n)&#123;&#125;  匹配的元素是其父元素的第n个子元素，n从1开始</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="empty"><a href="#empty" class="headerlink" title=":empty"></a>:empty</h4><p>匹配没有子元素的元素</p><p>div:empty{}  匹配没有子元素的div元素</p><h4 id="only-child"><a href="#only-child" class="headerlink" title=":only-child"></a>:only-child</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:only-child</span>&#123;&#125;  匹配属于其父元素的唯一子元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="否定伪类-not-selector"><a href="#否定伪类-not-selector" class="headerlink" title="否定伪类 :not(selector)"></a>否定伪类 :not(selector)</h4><p>div:not(:empty){} 匹配非空的div</p><h4 id="内容生成"><a href="#内容生成" class="headerlink" title="内容生成"></a>内容生成</h4><p>使用css动态的向元素中插入一段内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="selector-pseudo">:before</span>或者<span class="selector-pseudo">::before</span></span><br><span class="line">匹配元素的内容区域之前，插入的伪元素</span><br><span class="line"><span class="number">2</span>.<span class="selector-pseudo">:after</span>或者<span class="selector-pseudo">::after</span></span><br><span class="line">匹配元素的内容区域之后，插入的伪元素</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;d1&quot;&gt;</span><br><span class="line">  (<span class="selector-pseudo">::before</span>)</span><br><span class="line">  我是要成为海贼王的男人</span><br><span class="line">  (<span class="selector-pseudo">::after</span>)</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="内容生成可以解决的问题"><a href="#内容生成可以解决的问题" class="headerlink" title="内容生成可以解决的问题"></a>内容生成可以解决的问题</h5><p>外边距溢出</p><p> 父元素没有上边框，给第一个子元素设置上外边距，父元素也会发生作用</p><p> 解决方案，在第一个元素之前添加一个&lt; table &gt;&lt; /table&gt;</p><h2 id="弹性布局和转换"><a href="#弹性布局和转换" class="headerlink" title="弹性布局和转换"></a>弹性布局和转换</h2><h4 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h4><h5 id="什么是弹性布局"><a href="#什么是弹性布局" class="headerlink" title="什么是弹性布局"></a>什么是弹性布局</h5><p>弹性布局就是一种布局方式</p><p>主要解决某元素中的子元素的布局方式，为布局提供最大的灵活性</p><h5 id="弹性布局的相关概念和专业术语"><a href="#弹性布局的相关概念和专业术语" class="headerlink" title="弹性布局的相关概念和专业术语"></a>弹性布局的相关概念和专业术语</h5><p><a href="https://imgchr.com/i/EP3ahn"><img src="https://s2.ax1x.com/2019/04/20/EP3ahn.jpg" alt="EP3ahn.jpg"></a></p><h6 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h6><p>要布局的子元素的父元素称之为容器，容器中写display:flex</p><h6 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h6><p>要布局的子元素称之为项目</p><h6 id="主轴"><a href="#主轴" class="headerlink" title="主轴"></a>主轴</h6><p>项目们排列的方向，称之为主轴（水平和垂直）</p><p>如果项目们是按照横向排列，x轴就是主轴</p><p>如果项目们是按照纵向排列，y轴就是主轴</p><h6 id="交叉轴"><a href="#交叉轴" class="headerlink" title="交叉轴"></a>交叉轴</h6><p>与主轴垂直相交的方向轴叫做交叉轴</p><p>语法：</p><p>将元素变为弹性容器，他所有的子元素将变成弹性项目，按照弹性布局的方式去排列显示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span></span><br><span class="line">取值：<span class="attribute">flex</span>,  将块级元素变为容器</span><br><span class="line">inline-<span class="attribute">flex</span>,将行内元素变为容器</span><br><span class="line">元素设置为<span class="attribute">flex</span>容器之后，子元素一些样式属性会失效</span><br><span class="line"><span class="attribute">float</span>/<span class="attribute">clear</span>/<span class="attribute">vertical-align</span>失效</span><br><span class="line">子元素允许修改尺寸(项目是行内元素也可以修改尺寸)</span><br><span class="line">容器的对齐方式<span class="attribute">text-align</span>失效</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="弹性容器的样式属性"><a href="#弹性容器的样式属性" class="headerlink" title="弹性容器的样式属性"></a>弹性容器的样式属性</h4><h5 id="flex-direction-主轴方向"><a href="#flex-direction-主轴方向" class="headerlink" title="flex-direction 主轴方向"></a>flex-direction 主轴方向</h5><p>取值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">row 默认值，主轴是x轴，主轴起点在左端</span><br><span class="line">row-reverse, 主轴是x轴，主轴起点在右端</span><br><span class="line">column     主轴是y轴，主轴起点在顶端</span><br><span class="line">column-reverse主轴是y轴，主轴起点在底部</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h5><p>当一个主轴排列不下所有项目时,项目的显示方式</p><p>取值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nowrap 默认值，空间不够，不换行，项目会自动压缩</span><br><span class="line">wrap 空间不够，就换行，项目不压缩</span><br><span class="line">wrap-reverse 换行，反转</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">是<span class="attribute">flex-direction</span>和<span class="attribute">flex-wrap</span>的缩写</span><br><span class="line">取值  <span class="attribute">direction</span> wrap;</span><br><span class="line">ex:flex-flow:row wrap;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">定义项目在主轴上的对齐方式</span><br><span class="line">取值：</span><br><span class="line">     space-between 两端对齐</span><br><span class="line">     space-around 每个间距相同</span><br><span class="line">     <span class="attribute">flex</span>-start 默认值 在主轴起点对齐</span><br><span class="line">     <span class="attribute">flex</span>-end  在主轴的终点对齐</span><br><span class="line">     center  在主轴上居中对齐</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="align-items-容器高度大于项目高度"><a href="#align-items-容器高度大于项目高度" class="headerlink" title="align-items (容器高度大于项目高度)"></a>align-items (容器高度大于项目高度)</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">项目们在交叉轴上的对齐方式</span><br><span class="line">取值：</span><br><span class="line"><span class="number">1</span><span class="selector-class">.flex-start</span> 交叉轴起点对齐</span><br><span class="line"><span class="number">2</span><span class="selector-class">.flex-end</span> 交叉轴终点对齐</span><br><span class="line"><span class="number">3</span><span class="selector-class">.center</span>   交叉轴居中对齐</span><br><span class="line"><span class="number">4</span><span class="selector-class">.baseline</span> 交叉轴基线对齐</span><br><span class="line"><span class="number">5</span><span class="selector-class">.stretch</span>  如果项目未设置高度，在交叉轴上充满容器</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h4><ul><li>是单独设置给一个项目的，不影响容器和其他项目</li></ul><h5 id="order"><a href="#order" class="headerlink" title="order"></a>order</h5><ul><li>取值为无单位的整数，定义项目的排列顺序，值越小，离起点越近，默认值为0；</li></ul><h5 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h5><ul><li>定义项目的放大比例</li><li>如果容器有足够大的剩余空间，项目将按照比例放大</li><li>取值为无单位整数，</li><li>默认值为0.不放大。取值越大，占据的剩余空间越多</li></ul><h5 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h5><ul><li>定义项目的缩小比例，空间不足时，项目该如何缩小</li><li>取值为无单位整数</li><li>默认值为1，空间不足，等比缩小</li><li>0，不缩小</li><li>取值越大，占据的空间越小</li></ul><h5 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">控制当前项目在交叉轴上对齐方式，与其他项目无关</span><br><span class="line"><span class="attribute">flex</span>-start 交叉轴起点对齐</span><br><span class="line"><span class="attribute">flex</span>-end 交叉轴终点对齐</span><br><span class="line">center   交叉轴居中对齐</span><br><span class="line">baseline 交叉轴基线对齐</span><br><span class="line">stretch  如果项目未设置高度，在交叉轴上充满容器</span><br><span class="line">auto  继承容器的<span class="attribute">align-items</span>的效果</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><ul><li><p>改变元素在页面中的 位置 大小 角度 形状等的一种方式</p></li><li><p>2D转换，在X轴和Y轴上，发生转换效果</p></li><li><p>D转换，添加了Z轴</p></li><li><p>转换属性:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span></span><br><span class="line">取值：<span class="attribute">transform</span>-function:</span><br><span class="line">none</span><br><span class="line">如果有多个转换函数，用空格隔开</span><br><span class="line">转换原点</span><br><span class="line">transform-origin:</span><br><span class="line">取值：px为单位的数字/%/关键字</span><br><span class="line"><span class="number">2</span>个值，表示原点在x轴和y轴的位置</span><br><span class="line"><span class="number">3</span>个值，x，y，z轴</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2D转换函数</strong></p><ol><li>位移：改变元素在页面中的位置</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">translate</span>(x)</span><br><span class="line">指定元素在x轴上的位移距离</span><br><span class="line">+元素往右</span><br><span class="line">-元素往左</span><br><span class="line">transform:<span class="built_in">translate</span>(x,y)指定元素在x和y轴上的位移距离</span><br><span class="line">x取值同上</span><br><span class="line">y取值 +元素往下-元素往上</span><br><span class="line">transform:<span class="built_in">translateX</span>(x)指定元素在x轴上的位移距离</span><br><span class="line">transform:<span class="built_in">translateY</span>(y)指定元素在y轴上的位移距离</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>缩放：改变元素在页面中的尺寸</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">scale</span>(n)</span><br><span class="line">取值，无单位的数字</span><br><span class="line">&gt;<span class="number">1</span>  根据转换原点放大</span><br><span class="line"><span class="number">0</span>&lt;  n &lt;<span class="number">1</span>根据转换原点缩小</span><br><span class="line">-<span class="number">1</span>&lt; n &lt; <span class="number">0</span> 翻转缩小（水平和垂直方向都翻转了<span class="number">180</span>度）</span><br><span class="line">n &lt;-<span class="number">1</span> 翻转放大</span><br><span class="line">transform:scale（x，y） x 和 y轴缩放尺寸</span><br><span class="line">transform:<span class="built_in">scaleX</span>(x)单独设置x的缩放</span><br><span class="line">transform:<span class="built_in">scaleY</span>(y)单独设置y的缩放</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>旋转：改变元素在页面中的角度</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotate</span>(ndeg);</span><br><span class="line">n为正顺时针旋转</span><br><span class="line">n为负逆时针旋转</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>​    <code>注意：</code></p><ul><li><p>转换原点会影响最后的旋转效果</p></li><li><p>旋转是连同坐标轴一起旋转的，会影响旋转后的位移效果</p><ol start="4"><li>倾斜：改变元素在页面中的形状</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">skew</span>(x)等同于skewX（x）</span><br><span class="line">让元素向着x轴发生倾斜，实际上改变的是y轴的角度</span><br><span class="line">+取正值是逆时针</span><br><span class="line">-取负值是顺时针</span><br><span class="line">transform:<span class="built_in">skew</span>(y)等同于skewX（y）</span><br><span class="line">让元素向着y轴发生倾斜，实际上改变的是x轴的角度</span><br><span class="line">+取正值是顺时针</span><br><span class="line">-取负值是逆时针</span><br><span class="line">transform:<span class="built_in">skew</span>(x,y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h2></li><li><p>浏览器不支持3D的位移，Z轴看不到，只能模拟</p><ul><li><p>透视距离</p><ul><li>模拟人的眼睛到3D转换元素之间的距离<pre><code>            `perspective`</code></pre></li><li>该属性要加载转换元素的父元素上</li></ul></li><li><p>3D旋转</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotate3D</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">20deg</span>);</span><br><span class="line">取值</span><br><span class="line"><span class="number">1</span><span class="selector-class">.rotateX</span>(xdeg);</span><br><span class="line">以x轴为中心轴，旋转元素的角度（烤羊腿，老式爆米花机）</span><br><span class="line"><span class="number">2</span><span class="selector-class">.rotateY</span>(ydeg)</span><br><span class="line">以y轴为中心轴，旋转元素的角度（旋转门）</span><br><span class="line"><span class="number">3</span><span class="selector-class">.rotateZ</span>（zdeg）</span><br><span class="line">以z轴为中心轴，旋转元素的角度（风车，摩天轮）</span><br><span class="line"><span class="number">4</span><span class="selector-class">.rotate3D</span>（x，y，z，deg）；</span><br><span class="line">x y z取值大于<span class="number">0</span>的数字，表示该轴参与旋转</span><br><span class="line">取值为<span class="number">0</span>，表示不参与旋转</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><ul><li><p>CSS属性值，在一段时间内平缓的变化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition-property</span>:background;</span><br><span class="line"><span class="attribute">border-radius</span>;</span><br><span class="line"><span class="attribute">all</span>;</span><br><span class="line">能够使用过渡效果的属性</span><br><span class="line"><span class="number">1</span>.颜色可以</span><br><span class="line"><span class="number">2</span>.取值为数字的属性</span><br><span class="line"><span class="number">3</span>.转换</span><br><span class="line"><span class="number">4</span>.阴影</span><br><span class="line"><span class="number">5</span>.渐变</span><br><span class="line"><span class="number">6</span><span class="selector-class">.visibility</span></span><br><span class="line">指定过渡持续时间</span><br><span class="line"><span class="attribute">transition-duration</span>:<span class="number">1s</span>/<span class="number">1000ms</span></span><br><span class="line">简写方式</span><br><span class="line">transition:all <span class="number">1s</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        <code>    transition:1s;----不要写在hover里，写在元素本身的样式里</code></p></li><li><p>某元素的css属性值在一段时间内，平滑改变到另外一个值</p></li><li><p>过渡主要观察的是过程和结果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition-property</span>：上面的css属性指定/<span class="attribute">all</span></span><br><span class="line">指定过渡的时长</span><br><span class="line"><span class="attribute">transition-duration</span>：过渡的时长/s（秒）/ms（毫秒）</span><br><span class="line">指定过渡时间曲线函数</span><br><span class="line"><span class="attribute">transition-timing-function</span>：</span><br><span class="line"><span class="number">1</span><span class="selector-class">.ease</span> 默认值，   慢--&gt;快--&gt;慢慢速开始，快速变快，慢速结束</span><br><span class="line"><span class="number">2</span><span class="selector-class">.linear</span>匀速</span><br><span class="line"><span class="number">3</span><span class="selector-class">.ease-in</span>慢-&gt;快慢速开始，快速结束</span><br><span class="line"><span class="number">4</span><span class="selector-class">.ease-out</span>快--&gt;慢快速结束，慢速结束</span><br><span class="line"><span class="number">5</span><span class="selector-class">.ease-in-out</span>慢速开始，先加速再减速，慢速结束</span><br><span class="line">指定延迟执行过渡的时间</span><br><span class="line"><span class="attribute">transition-delay</span>：s/ms</span><br><span class="line">过渡属性的编写位置</span><br><span class="line"><span class="number">1</span>.将过渡放在元素声明的样式中（元素自己的样式里），过渡效果有去有回</span><br><span class="line"><span class="number">2</span>.将过渡放在元素的触发操作中（hover），过渡效果有去无回</span><br><span class="line">过渡的简写</span><br><span class="line"><span class="attribute">transition</span>：property duration timing-function delay;</span><br><span class="line">最少的方式 <span class="attribute">transition</span>:duration;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul><li><p>使元素从一种样式，该表到另外一种，再改变到其他样式….</p></li><li><p>相当于将很多个过渡效果放到一起使用</p></li><li><p>关键帧</p><ul><li>1.动画的执行时间点</li><li>2.该时间点上的样式</li></ul></li><li><p>动画的实现步骤</p><ul><li>声明动画及动画关键帧<br>@keyframes 动画名称{<br>//定义关键帧<br>0%{动画开始时的样式}<br>……<br>​    100%{动画结束时的样式}<br>}</li><li>调用动画<br>animation-name：动画名称<br>animation-duration：动画播放一个周期的时间</li><li>动画的其它属性<br>animation-delay:</li><li>动画的速度时间曲线函数<br>​animation-timing-function:<br>ease/linear/ease in/ease out/ease-in-out;</li><li>animation-iteration-count:<br>指定动画的播放次数<br>取值，具体的数字/infinite 无限次</li><li>animation-direction<br>动画的播放方向<br>取值    normal 正常播放 0%–100%<br>​reverse 逆向播放 100%–0%<br>alternate 轮流播放 奇数次正向播放 偶数次逆向播放</li><li>简写方式<br>animation:name duration timing-function delay iteration-count direction;</li><li>animation-fill-mode<br>指定动画播放前后的显示状态<br>1.none        默认值<br>2.forward    动画播放完成后，保持在最后一个关键帧上<br>3.backwards    （需要有delay）动画开始之前，保持在第一个关键帧上<br>4.both        同时设置forwards和backwards</li></ul></li><li><p>动画的兼容性<br>如果要兼容低版本浏览器，需要在声明动画时加前缀<br>​        @keyframes 动画名称{}<br>​        @-webkit-keyframes<br>​        @-ms-keyframes<br>​        @-moz-keyframes<br>​        @-o-keyframes </p><h2 id="CSS优化问题"><a href="#CSS优化问题" class="headerlink" title="CSS优化问题"></a>CSS优化问题</h2><p>​    目的：减少服务器压力，提升用户体验<br>​        1.优化原则<br>​            尽量减少HTTP请求的个数<br>​            页面顶部引入css文件<br>​            将css和js放到外部独立的文件夹中<br>​        2.css代码优化<br>​            缩小样式文件<br>​            减少样式重写<br>​            避免出现空的src和href<br>​            选择更优的样式属性值（能使用复合，简写的写法，就不要单独定义）<br>​            代码压缩    </p></li></ul><h2 id="CSS-Hack"><a href="#CSS-Hack" class="headerlink" title="CSS Hack"></a>CSS Hack</h2><p>由于不同的浏览器，比如IE6 IE7 firefox<br>对css的解析认识不同，会导致生成的页面效果不同，无法得到我们预期的效果<br>这个时候我们需要针对不同浏览器去写不同的css<br>让代码同时兼容不同的浏览器。</p><p><a href="https://blog.csdn.net/freshlover/article/details/12132801">史上最全的CSS Hack方式</a></p><h2 id="推荐文章地址"><a href="#推荐文章地址" class="headerlink" title="推荐文章地址"></a>推荐文章地址</h2><p><a href="https://www.cnblogs.com/qmdx00/p/7441317.html">CSS实现聊天气泡效果</a></p><p><a href="https://www.cnblogs.com/jying/p/6289981.html">表格不被撑开，td某些列宽度固定某些列自适应</a></p><p><a href="https://blog.csdn.net/freshlover/article/details/12132801">史上最全的CSS Hack方式</a></p><p><a href="https://segmentfault.com/q/1010000004080910/a-1020000004121373">flex设置成1和auto有什么区别</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CSS概述&quot;&gt;&lt;a href=&quot;#CSS概述&quot; class=&quot;headerlink&quot; title=&quot;CSS概述&quot;&gt;&lt;/a&gt;CSS概述&lt;/h2&gt;&lt;h4 id=&quot;什么是CSS&quot;&gt;&lt;a href=&quot;#什么是CSS&quot; class=&quot;headerlink&quot; title=&quot;什么是CSS&quot;&gt;&lt;/a&gt;什么是CSS&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Cascading Style Sheets&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;层叠样式表，级联样式表，简称样式表&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Javascript（上）</title>
    <link href="http://example.com/2019/06/23/javascript%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://example.com/2019/06/23/javascript%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2019-06-23T10:17:45.000Z</published>
    <updated>2022-03-28T12:14:48.688Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://wangdoc.com/">参考文献</a></p><h2 id="学习一门编程语言的基本步骤"><a href="#学习一门编程语言的基本步骤" class="headerlink" title="学习一门编程语言的基本步骤"></a>学习一门编程语言的基本步骤</h2><ol><li>了解背景知识：历史、现状、特点、应用场景</li><li>搭建开发环境，编写hello World</li><li>变量和常量</li><li>数据类型</li><li>运算符</li><li>逻辑结构</li><li>通用小程序</li><li>函数和对象</li><li>第三方库、框架</li><li>实用的项目<span id="more"></span></li></ol><h2 id="JavaScript历史概述"><a href="#JavaScript历史概述" class="headerlink" title="JavaScript历史概述"></a>JavaScript历史概述</h2><ol><li>历史<br>​                1995年，JS最早出现在Netscape的浏览器中<br>​                2009年，JS遵循CommonJS规范，开始向服务器端发展。</li><li>现状<br>​                既可以运行在客户端浏览器，也可以运行在服务器端。</li><li>特点<br>​                <strong>解释型语言，编译一行执行一行</strong><br>​                <strong>弱类型语言</strong><br>​                基于对象<br>​                跨平台</li></ol><h2 id="JavaScript执行环境"><a href="#JavaScript执行环境" class="headerlink" title="JavaScript执行环境"></a>JavaScript执行环境</h2><ol><li>浏览器自带的JS解释器</li><li>NODEJS下的JS解释器<br>​            在命令行下   node -v 查看系统中nodejs版本号</li><li>执行JS代码<br>​            浏览器：<br>​            创建01.js和01.html<br>​            在01.html中引入01.js</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script scr=<span class="string">&quot;&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>NODEJS下：<br>​            node C:/xampp/…../01.js</li></ol><h2 id="JavaScript代码规范"><a href="#JavaScript代码规范" class="headerlink" title="JavaScript代码规范"></a>JavaScript代码规范</h2><ol><li>区分大小写</li><li>每行代码结束的分号可加可不加，提唱都加。</li><li>分为单行注释(//…)和多行注释(/<em>….</em>/)</li></ol><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>变量就是用于存放数据的容器。</strong></p><p><strong>声明变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>变量的命名规则</strong></p><ol><li>变量名称是以字母、数字、美元符号($)、下划线组成的：不能以数字开头。</li><li>多个连词之间的命名方法：<br>​   user_name（下划线命名法）    userName（驼峰命名法）<br>​  不能使用<strong>关键字</strong>和<strong>保留字</strong>（class，int，float）作为变量名！</li></ol><p><img src="https://s2.ax1x.com/2019/04/26/EmNMwQ.png" alt="EmNMwQ.png"></p><p><strong>变量的注意</strong></p><p>​            变量声明后未赋值，此时的值是undifined<br>​            使用未声明的变量会报错</p><p><strong>一次性声明多个变量</strong></p><p>​            var a=1,b=2,c;<br>​            多个变量之间用逗号隔开。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>​        一旦声明<strong>不能重新赋值</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如：春节的日期、中秋节的日期、圆周率...</span><br><span class="line">关键字： <span class="keyword">const</span> <span class="variable constant_">PI</span>=<span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>​    <strong>分为<font color="#f05">原始类型</font>和<font color="#f05">引用类型</font></strong><br>​    <strong>原始类型分为<font color="#FFB6C1">数值型</font>、<font color="#00FA9A">字符串型</font>、<font color="#AFEEEE">布尔型</font>、<font color="#B0C4DE">未定义型（undefined）</font>、<font color="#A9A9A9">NULL（空）</font></strong></p><h4 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h4><ol><li>分为<strong>整型</strong>和<strong>浮点型</strong></li><li>整型在内存中占4个字节，浮点型占8个字节</li><li>8进制，以0开头，例如012-&gt;10</li><li>16进制，以0x开头，例如0xf-&gt;15 </li><li>a<del>f代表 10</del>15 不区分大小写</li></ol><h4 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h4><p>​            <strong>数据被引号包含就是字符串类型;不区分单双引号。</strong><br>​            查看一个字符的Unicode编码<br>​            console.log( ‘a’.charCodeAt )  //97</p><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><p>​            <strong>在程序中表示真或者假的结果</strong><br>​            true/false<br>​            常用于一些是否的结果，是否登录，是否注册，是否是会员，是否在售</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isLogin=<span class="literal">true</span>; isOnsale=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h4 id="未定义型"><a href="#未定义型" class="headerlink" title="未定义型"></a>未定义型</h4><p>​            <strong>声明了变量未赋值，结果就是undefined</strong></p><h4 id="空"><a href="#空" class="headerlink" title="空"></a>空</h4><p>​            <strong>用于释放（销毁）一个引用类型的地址，只有一个值null</strong></p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h4 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">①数字+字符串：数字被转成字符串</span><br><span class="line"><span class="number">1</span>+<span class="string">&#x27;a&#x27;</span>   <span class="comment">//&#x27;1a&#x27;</span></span><br><span class="line">②数字+布尔型：布尔型被转成了数字 <span class="literal">true</span>-&gt;<span class="number">1</span> <span class="literal">false</span>-&gt;<span class="number">0</span></span><br><span class="line"><span class="number">1</span>+<span class="literal">true</span> <span class="comment">//2</span></span><br><span class="line"><span class="number">1</span>+<span class="literal">false</span> <span class="comment">//1</span></span><br><span class="line">③布尔型+字符串：布尔型转换成字符串</span><br><span class="line"><span class="literal">true</span>+<span class="string">&#x27;hello&#x27;</span> <span class="comment">//&#x27;truehello&#x27;</span></span><br><span class="line"><span class="variable constant_">JS</span>中加号（+）的作用</span><br><span class="line">执行加法运算</span><br><span class="line">执行字符串的拼接</span><br><span class="line">使用- * / 执行运算</span><br><span class="line">尝试将运算符两端转成数值型，如果含有非数字则返回一个<span class="title class_">NaN</span>（<span class="title class_">Not</span> a <span class="title class_">Number</span>）,不是一个数字。</span><br><span class="line"><span class="title class_">NaN</span>类型<span class="title class_">Number</span></span><br></pre></td></tr></table></figure><h4 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">①将任意类型转为整型</span><br><span class="line"><span class="built_in">parseInt</span>()</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;1.5a&#x27;</span>)<span class="comment">//1</span></span><br><span class="line">从开头查找数字，遇到非数字或者小数点；返回前面的数字；如果开头非数字，返回<span class="title class_">NaN</span>。</span><br><span class="line">②将任意类型转为浮点型</span><br><span class="line"><span class="built_in">parseFloat</span>()</span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;1.5a&#x27;</span>)<span class="comment">//1.5</span></span><br><span class="line">转换规则和<span class="built_in">parseInt</span>类似，区别在于遇到小数点继续往后查找数字。</span><br><span class="line">③将任意类型转为数值型</span><br><span class="line"><span class="title class_">Number</span>()</span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;1.5a&#x27;</span>) <span class="comment">//NaN</span></span><br><span class="line">如果要转换的数据中含有非数字，则返回<span class="title class_">NaN</span></span><br><span class="line"><span class="literal">true</span>-&gt;<span class="number">1</span>   <span class="literal">false</span>-&gt;<span class="number">0</span></span><br><span class="line">④将数值型和布尔型转为字符串类型</span><br><span class="line"><span class="title function_">toString</span>()</span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line">num.<span class="title function_">toString</span>(); <span class="comment">//&#x27;10&#x27;</span></span><br><span class="line">num.<span class="title function_">toString</span>(<span class="number">16</span>); <span class="comment">//a</span></span><br><span class="line">如果要转换的数据是数值，可以设置进制(<span class="number">8</span>,<span class="number">16</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>​        由<strong>运算符连接操作</strong>的数据，所组成的形式就是<strong>表达式</strong></p><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ -  * / %(取余) ++(自增) --(自减)</span><br><span class="line">%取余</span><br><span class="line">++自增，在原来的基础之上加<span class="number">1</span></span><br><span class="line">--自减，在原来的基础之上减<span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num++) <span class="comment">//先打印num的值，在进行自增</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++num) <span class="comment">//先执行自增，再打印num的值</span></span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &lt;  &gt;=  &lt;=  ==  !=   ===（全等于）  ！==（不全等于）</span><br><span class="line">返回一个布尔型的结果</span><br><span class="line">    == 只是比较两个值是否相同</span><br><span class="line">    ===不仅比较值，还会比较类型是否相等</span><br><span class="line"><span class="number">3</span>&gt;<span class="string">&#x27;10&#x27;</span> <span class="comment">//false</span></span><br><span class="line">数字和字符串比较，字符串要转成数字。</span><br><span class="line"><span class="string">&#x27;3&#x27;</span>&gt;<span class="string">&#x27;10&#x27;</span> <span class="comment">//true</span></span><br><span class="line">比较首个<span class="title class_">Unicode</span>的码，如果首个字符相同，则比较第二个字符。</span><br><span class="line"><span class="string">&#x27;3&#x27;</span>-&gt;<span class="number">51</span><span class="string">&#x27;1&#x27;</span>-&gt;<span class="number">49</span></span><br><span class="line"><span class="number">3</span>&gt;<span class="string">&#x27;10a&#x27;</span> <span class="comment">//false</span></span><br><span class="line"><span class="number">3</span>&lt;<span class="string">&#x27;10a&#x27;</span> <span class="comment">//false</span></span><br><span class="line"><span class="number">3</span>==<span class="string">&#x27;10a&#x27;</span> <span class="comment">//false</span></span><br><span class="line"><span class="string">&#x27;10a&#x27;</span>-&gt;<span class="variable constant_">NAN</span></span><br><span class="line"><span class="title class_">NaN</span>和任何数比较（&gt; &lt; = &gt;= &lt;= ==）都返回<span class="literal">false</span></span><br><span class="line"><span class="title class_">NaN</span>==<span class="title class_">NaN</span> 返回<span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;  关联的两个条件都满足，结果是<span class="literal">true</span>，否则<span class="literal">false</span></span><br><span class="line">||     关联的两个条件都只需满足其一，结果是<span class="literal">true</span>，否则<span class="literal">false</span></span><br><span class="line">!      取反 ！<span class="literal">false</span>取反-&gt;<span class="literal">true</span>  ！<span class="literal">true</span>-&gt;<span class="literal">false</span></span><br><span class="line">逻辑短路</span><br><span class="line">&amp;&amp; 当第一个条件为<span class="literal">false</span>的时候，就不需要再执行第二个条件</span><br><span class="line">||    当第一个条件为<span class="literal">true</span>的时候，就不需要再执行第二个条件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="位运算符（了解）"><a href="#位运算符（了解）" class="headerlink" title="位运算符（了解）"></a>位运算符（了解）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在执行运算时候，会把数字转成二进制进行运算</span><br><span class="line">按位与(&amp;)  <span class="number">3</span>&amp;<span class="number">5</span>   上下两位都是<span class="number">1</span>，结果是<span class="number">1</span>，否则是<span class="number">0</span></span><br><span class="line">按位或(|)      上下两位含有<span class="number">1</span>，结果就是<span class="number">1</span>，否则<span class="number">0</span></span><br><span class="line"><span class="number">3</span>|<span class="number">5</span></span><br><span class="line"><span class="number">011</span></span><br><span class="line"><span class="number">101</span></span><br><span class="line"><span class="number">111</span></span><br><span class="line">按位异或(^)上下两位不同为<span class="number">1</span>，相同为<span class="number">0</span></span><br><span class="line"><span class="number">5</span>^<span class="number">7</span></span><br><span class="line"><span class="number">101</span></span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">010</span></span><br><span class="line">按位右移(&gt;&gt;)删除二进制的最后一位，大概变小到原来的一半</span><br><span class="line"><span class="number">7</span>&gt;&gt;<span class="number">1</span></span><br><span class="line">按位左移(&gt;&gt;)删除二进制的最后添加一位<span class="number">0</span>，增加一倍</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">=  += -= *= /= %= </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">单目运算符：只需要一个数据或者表达式</span><br><span class="line">a++a--!<span class="literal">false</span></span><br><span class="line">双目运算符：只需要两个数据或者表达式</span><br><span class="line">    + - * <span class="regexp">/ % &gt; &lt; &gt;= &lt;= == != === !== &amp;&amp; || &amp; | ^ &gt;&gt; &lt;&lt; = += -= *= /</span>= %=</span><br><span class="line">    三目运算符：需要三个数据或者表达式</span><br><span class="line">条件表达式？表达式<span class="number">1</span>：表达式<span class="number">2</span></span><br><span class="line">如果条件表达式为<span class="literal">true</span>，执行表达式<span class="number">1</span>；</span><br><span class="line">如果条件表达式为<span class="literal">false</span>，执行表达式<span class="number">2</span>；</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="浏览器端函数"><a href="#浏览器端函数" class="headerlink" title="浏览器端函数"></a>浏览器端函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert()弹出警示框（消息框）</span><br><span class="line">prompt()弹出提示框（输入框），需要一个变量来接受输入的值；值的类型是字符串类型。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>​    <strong>程序 = 算法 + 数据</strong><br>​    <strong>程序分为顺序执行、选择执行、循环执行</strong>        </p><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">语句<span class="number">3</span>;</span><br><span class="line">执行流程：</span><br><span class="line">    ①执行语句<span class="number">1</span></span><br><span class="line">    ②条件表达式，如果为<span class="literal">true</span>，执行语句<span class="number">2</span>；<span class="literal">false</span>直接跳过</span><br><span class="line">    ③执行语句<span class="number">3</span></span><br><span class="line">注意：如果<span class="keyword">if</span>后的大括号语句中只有一行，是可以省略大括号。</span><br><span class="line"><span class="keyword">if</span>（age&gt;=<span class="number">18</span>）</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成年人&#x27;</span>);</span><br><span class="line">在<span class="keyword">if</span>语句的条件表达式中，有一些值默认就是<span class="literal">false</span></span><br><span class="line"><span class="number">0</span>，<span class="title class_">NaN</span>，<span class="string">&#x27;&#x27;</span>，<span class="literal">undefined</span>,<span class="literal">null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语句<span class="number">1</span>；</span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    语句<span class="number">2</span>；</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    语句<span class="number">3</span>；</span><br><span class="line">&#125;</span><br><span class="line">执行过程：</span><br><span class="line">    ①先执行语句<span class="number">1</span></span><br><span class="line">    ②要执行条件表达式，如果是<span class="literal">true</span>，执行语句<span class="number">2</span>；如果是<span class="literal">false</span>，执行语句<span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="if-else的嵌套"><a href="#if-else的嵌套" class="headerlink" title="if-else的嵌套"></a>if-else的嵌套</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">用于判断多种情况：</span><br><span class="line">    语句<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> ...<span class="title function_">if</span>(<span class="params">条件表达式n</span>)&#123;</span><br><span class="line">        语句n;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        语句n+<span class="number">1</span>;<span class="comment">//以上所有的条件表达式都是false</span></span><br><span class="line">    &#125;</span><br><span class="line">执行流程：</span><br><span class="line">    ①执行语句<span class="number">0</span></span><br><span class="line">    ②执行表达式<span class="number">1</span></span><br><span class="line">    如果条件表达式<span class="number">1</span>是<span class="literal">true</span>，执行<span class="number">1</span>,</span><br><span class="line">        如果条件表达式<span class="number">1</span>是<span class="literal">false</span>，执行条件表达式<span class="number">2</span></span><br><span class="line">    如果条件表达式<span class="number">2</span>是<span class="literal">true</span>，执行语句<span class="number">2</span></span><br><span class="line">    如果条件表达式<span class="number">2</span>是<span class="literal">false</span>，执行语句n</span><br><span class="line">    ③以上所有的条件表达式为<span class="literal">false</span>，执行语句n+<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="switch-case语句"><a href="#switch-case语句" class="headerlink" title="switch-case语句"></a>switch-case语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">是一种特殊的分支语句，可以根据一个表达式的不同值，来选择执行不同的程序。</span><br><span class="line">语句<span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//如果表达式的值是1</span></span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//终止，不会再往后执行其他的语句</span></span><br><span class="line">        .......</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">n</span>:</span><br><span class="line">        语句n;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        语句n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">注意：在<span class="keyword">case</span>中的和值的比较使用的是全等于比较，值和类型都满足结果才是<span class="literal">true</span>。</span><br><span class="line">对比<span class="keyword">if</span>-<span class="keyword">else</span>嵌套和<span class="keyword">switch</span>-<span class="keyword">case</span>语句</span><br><span class="line">相同点：两者都可以用于多项分支语句。</span><br><span class="line">不同点：<span class="keyword">if</span>-<span class="keyword">else</span>可以判断相等或者不相等的情况，适用范围更广一些;<span class="keyword">switch</span>-<span class="keyword">case</span>只适用于全等（===）的情况，但是结构上更为清晰，执行效率相对高。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="break和continue关键字"><a href="#break和continue关键字" class="headerlink" title="break和continue关键字"></a>break和continue关键字</h2><p>​    break：结束循环，后续不会再执行其他的循环了<br>​    continue：跳过本次循环，继续下一次循环</p><h2 id="循环执行"><a href="#循环执行" class="headerlink" title="循环执行"></a>循环执行</h2><p>​    循环：就是<strong>一遍又一遍执行</strong>相同或者相似的<strong>代码</strong>。<br>​            循环的两个要素<br>​            循环的条件：重复的次数<br>​            循环体：重复执行的相同或者相似代码</p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;<span class="comment">//是一个布尔型的值</span></span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;<span class="keyword">while</span>（判断条件）;</span><br><span class="line">不管循环条件是否为<span class="literal">true</span>都会执行一次循环体。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始值;循环条件;i的变化)&#123;</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br><span class="line">①执行初始值</span><br><span class="line">②判断循环条件</span><br><span class="line">③如果循环条件是<span class="literal">true</span>执行循环体，是<span class="literal">false</span>结束循环</span><br><span class="line">④如果执行了循环体，执行i的变化</span><br><span class="line">⑤重新执行第<span class="number">2</span>步</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h4><p>​        <font color="#f50" size="5px">while,do-while,for循环三者之间可以相互嵌套。</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">九九乘法表：</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">9</span>; j&gt;=<span class="number">1</span> ; j-- )&#123;</span><br><span class="line"><span class="comment">//产生列数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=j,str=<span class="string">&#x27;&#x27;</span>; i&gt;=<span class="number">1</span> ; i-- )&#123;</span><br><span class="line">str+=i+<span class="string">&#x27;*&#x27;</span>+j+<span class="string">&#x27;=&#x27;</span>+(i*j)+<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印一行的拼接结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>​            parseInt()取整<br>​            parseFloat()取小数<br>​            typeof()识别类型<br>​            分为<font color="#f00">系统函数</font>和<font color="#f00">自定义函数</font></p><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>​    function：功能体，函数，可以接受若干个数据，返回处理的结果。用于封装反复执行的代码。</p><h5 id="创建普通函数"><a href="#创建普通函数" class="headerlink" title="创建普通函数"></a>创建普通函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名称()&#123;</span><br><span class="line">    函数体—要封装的反复执行的代码</span><br><span class="line">&#125;</span><br><span class="line">调用：</span><br><span class="line">函数名称();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="创建带有参数的函数"><a href="#创建带有参数的函数" class="headerlink" title="创建带有参数的函数"></a>创建带有参数的函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名称(参数列表)&#123;<span class="comment">//形参-&gt;形式上的参数</span></span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line">调用</span><br><span class="line">函数名称(参数列表);<span class="comment">//实参-&gt;实际的参数</span></span><br><span class="line">参数列表：可以是<span class="number">0</span>个或者是多个数据，之间用逗号隔开；创建函数时的参数称为形参，调用函数时的参数称为实参，</span><br><span class="line">调用的时候，实参的值会赋给形参。</span><br><span class="line">形参本质上就是一个声明了的变量，但未赋值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="带有返回值的函数"><a href="#带有返回值的函数" class="headerlink" title="带有返回值的函数"></a>带有返回值的函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名称(参数列表)&#123;</span><br><span class="line">函数体</span><br><span class="line"><span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line">调用：</span><br><span class="line">函数名称(参数列表)</span><br><span class="line"><span class="keyword">return</span>表示函数执行后，所返回的结果。</span><br><span class="line">注意：</span><br><span class="line">     ①如果没有<span class="keyword">return</span>或者<span class="keyword">return</span>后没有返回值，结果都是<span class="literal">undefined</span>。</span><br><span class="line">     ②<span class="keyword">return</span>后可以返回任意类型的数据</span><br><span class="line">     ③<span class="keyword">return</span>后的所有代码都不会被执行</span><br><span class="line">对比<span class="keyword">return</span>、<span class="keyword">break</span>和<span class="keyword">continue</span></span><br><span class="line"><span class="keyword">return</span> 返回结果，用于终止函数的执行，常用于函数中。</span><br><span class="line"><span class="keyword">break</span>用于结束循环，结束<span class="keyword">switch</span>语句；</span><br><span class="line"><span class="keyword">continue</span> 跳过当前循环，继续下一次循环。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><h5 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">变量或者函数的可访问范围</span><br><span class="line">分为两种：</span><br><span class="line">    全局作用域：在全局作用域下声明的变量可以在任意位置访问到。</span><br><span class="line">    函数（局部）作用域：函数作用域下声明的变量只能在函数内部访问。</span><br><span class="line">    块级作用域：<span class="title class_">ES6</span>新增了<span class="keyword">let</span>命令，用于声明变量。其用法类似于<span class="keyword">var</span>，但所声明的变量只在<span class="keyword">let</span>命令所在的代码块有效。</span><br><span class="line">注意：在函数内部使用<span class="keyword">var</span>关键字声明的变量是局部变量，而不使用<span class="keyword">var</span>关键字声明的变量是全局变量。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="量声明提升"><a href="#量声明提升" class="headerlink" title="量声明提升"></a>量声明提升</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JS程序在执行前，使用var关键字声明的变量会提升到所在作用域的最前边；但赋值还是在原来的位置。</span><br><span class="line">console.log(a);</span><br><span class="line">var a=1; //var a;这句话会提升到最前面；而a=1还是在当前位置。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数的作用域"><a href="#函数的作用域" class="headerlink" title="函数的作用域"></a>函数的作用域</h4><p>​    <strong>函数会提前声明！</strong><br>​            <strong>函数表达式不会提前声明！</strong><br>​            函数和变量类似，也分为全局作用域和函数作用域<br>​            全局作用域：在全局作用域下创建的函数可以在任意位置调用<br>​            函数（局部）作用域：在函数（局部）作用域下创建的函数只能在函数内部调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">函数声明提升：</span><br><span class="line">和变量一样，<span class="variable constant_">JS</span>在程序执行前，把使用<span class="keyword">function</span>声明的函数提升到最前边。</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">函数调用 <span class="title function_">fun</span>() 获取函数的返回值（<span class="keyword">return</span>后的值）</span><br><span class="line">函数名称 fun保存的是函数在堆内存中的地址</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h4><p>​    递归就是函数自己调用自己本身，依靠条件判断return结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">例题：求n个数的累加：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">n</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n+<span class="title function_">sum</span>(n-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">100</span>)</span><br><span class="line">例题：斐波那契数列：</span><br><span class="line"><span class="comment">//创建函数， 传递1个参数，使用递归计算斐波那契数列的第n项是多少。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num+num+<span class="title function_">add</span>(num-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res=<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>变量名称和函数名称重复后 如果变量赋值 函数报错，如果变量未赋值函数不会报错</p><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>​    没有名字的函数 function(){<br>​                }<br>​    创建函数—函数声明</p><p>​    function 函数名称(){<br>​        }</p><h5 id="创建函数—函数表达式"><a href="#创建函数—函数表达式" class="headerlink" title="创建函数—函数表达式"></a>创建函数—函数表达式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名称=<span class="keyword">function</span>(<span class="params">形参列表</span>)&#123;</span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line">调用：函数名称(实参列表)</span><br><span class="line">对比函数声明和函数表达式的区别</span><br><span class="line">函数声明存在函数提升，在任何的位置都可以调用</span><br><span class="line">函数表达式不存在函数的提升，必须先创建再调用</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="匿名函数自调用"><a href="#匿名函数自调用" class="headerlink" title="匿名函数自调用"></a>匿名函数自调用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建函数（局部）作用域，防止造成全局污染。</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    函数体<span class="comment">//就是局部作用域，创建的变量和函数都是不能被外部访问</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="作为回调函数"><a href="#作为回调函数" class="headerlink" title="作为回调函数"></a>作为回调函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">把匿名函数作为实参传递给形参，此时的形参就是函数名称</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="comment">//num就是函数的名称</span></span><br><span class="line">    <span class="title function_">num</span>();<span class="comment">//调用传递的匿名函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="系统函数（全局函数）"><a href="#系统函数（全局函数）" class="headerlink" title="系统函数（全局函数）"></a>系统函数（全局函数）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">encodeURI 对一个URL进行编码—主要对中文进行编码</span><br><span class="line">decodeURI 对一个已经编码URL进行解码</span><br><span class="line">parseInt将数据转为整型</span><br><span class="line">parseFloat将数据转为浮点型</span><br><span class="line">isNaN检测一个数据是否为NaN是-&gt;true,否-&gt;false</span><br><span class="line">isFinite检测一个数据是否为有限值，是-&gt;true 否-&gt;false  1/0-&gt;Infinity 无限值</span><br><span class="line">eval执行字符串中的表达式eval(&#x27;1+2&#x27;)  -&gt;3</span><br><span class="line">练习：使用提示框弹出输入一组运算，使用eval来执行这组运算。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>​    <strong>是一种引用类型的数据，存储在堆内存中。</strong><br>​    对象：是一组属性（property）和方法/功能（method）的集合<br>​    哪些是对象？<br>​        一个手机：属性有颜色，品牌，尺寸，厚度…….功能有打电话、发短信、照相、聊天、游戏……<br>​        一辆汽车：属性有品牌、外观、车型…….功能有代步、撞人、拉货、取暖、乘凉…..</p><p>JS中的对象：</p><p>​        <strong>内置对象</strong>：JS提供的<br>​        <strong>宿主对象</strong>：根据不同的执行环境来划分<br>​        <strong>自定义对象</strong>：自己创建的对象</p><p>创建自定义对象：</p><p>​        ①对象字面量（直接量）<br>​        ②内置构造函数<br>​        ③自定义构造函数</p><h4 id="使用对象字面量创建对象"><a href="#使用对象字面量创建对象" class="headerlink" title="使用对象字面量创建对象"></a>使用对象字面量创建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用大括号&#123;&#125;创建空对象</span><br><span class="line">属性名和属性值之间用冒号隔开:</span><br><span class="line">多组属性之间用，号隔开</span><br><span class="line">属性名中引号可加可不加，如果出现特殊字符，必须添加引号</span><br><span class="line"><span class="keyword">var</span> phone=&#123;</span><br><span class="line">    <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;made-in&#x27;</span>:<span class="string">&#x27;china&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用内置构造函数来创造对象"><a href="#使用内置构造函数来创造对象" class="headerlink" title="使用内置构造函数来创造对象"></a>使用内置构造函数来创造对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book=<span class="keyword">new</span> <span class="title class_">Object</span>();创建一个空对象</span><br><span class="line">book.<span class="property">id</span>=<span class="number">103</span>;<span class="comment">//给book添加属性，属性名不能添加引号</span></span><br><span class="line">book[<span class="string">&#x27;title&#x27;</span>]=<span class="string">&#x27;三国演义&#x27;</span>;<span class="comment">//添加属性，属性名必须加引号；如果不加引号会被认为是变量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="访问对象中的属性"><a href="#访问对象中的属性" class="headerlink" title="访问对象中的属性"></a>访问对象中的属性</h4><h5 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">emp.<span class="property">eid</span></span><br><span class="line">emp[<span class="string">&#x27;ename&#x27;</span>]</span><br><span class="line">如果要获取的属性名不存在，返回的是<span class="literal">undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="遍历对象中的属性-for-in"><a href="#遍历对象中的属性-for-in" class="headerlink" title="遍历对象中的属性(for-in)"></a>遍历对象中的属性(for-in)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">获取到对象中每一个属性名，进而获取属性值</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span>)&#123;</span><br><span class="line">    <span class="comment">//emp要遍历的对象</span></span><br><span class="line">    <span class="comment">//key 要遍历的每一个属性名</span></span><br><span class="line">    <span class="comment">//emp[key]通过属性名获取对应的属性值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(emp[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="检测对象中是否含有某个属性"><a href="#检测对象中是否含有某个属性" class="headerlink" title="检测对象中是否含有某个属性"></a>检测对象中是否含有某个属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;属性名&#x27;</span> <span class="keyword">in</span> 对象<span class="comment">//true-&gt;存在 false-&gt;不存在</span></span><br><span class="line">对象.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;属性名&#x27;</span>)   <span class="comment">//true-&gt;存在 false-&gt;不存在</span></span><br><span class="line">对象.属性名===<span class="literal">undefined</span><span class="comment">//true-&gt;不存在  false-&gt;存在</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对象中的方法"><a href="#对象中的方法" class="headerlink" title="对象中的方法"></a>对象中的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">say</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> <span class="comment">//指代当前的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">say</span>();<span class="comment">//调用对象中的方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><h5 id="数组字面量"><a href="#数组字面量" class="headerlink" title="数组字面量"></a>数组字面量</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[元素<span class="number">1</span>，元素<span class="number">2.</span>....]</span><br><span class="line">数组中可以存放任意类型的数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="内置构造函数"><a href="#内置构造函数" class="headerlink" title="内置构造函数"></a>内置构造函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>)   <span class="comment">//初始化一个数组长度为5，可以继续添加第6个元素</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(元素<span class="number">1</span>，元素<span class="number">2.</span>.............)</span><br><span class="line">访问数组中的元素 </span><br><span class="line">数组名称[下标]，下标是从<span class="number">0</span>开始</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取数组元素的个数"><a href="#获取数组元素的个数" class="headerlink" title="获取数组元素的个数"></a>获取数组元素的个数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组名称.<span class="property">length</span>  <span class="comment">//获取个数</span></span><br><span class="line">使用数组长度添加一个新的元素</span><br><span class="line">数组[数组.<span class="property">length</span>]=值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数组的分类"><a href="#数组的分类" class="headerlink" title="数组的分类"></a>数组的分类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数组分为索引数组和关联数组</span><br><span class="line">索引数组：以整数作为下标</span><br><span class="line">关联数组：以字符串作为下标              </span><br><span class="line"><span class="keyword">var</span> arr=[]</span><br><span class="line">arr[<span class="string">&#x27;eid&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">arr[<span class="string">&#x27;ename&#x27;</span>]=<span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="遍历数组中的元素"><a href="#遍历数组中的元素" class="headerlink" title="遍历数组中的元素"></a>遍历数组中的元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>循环，循环遍历数组元素的下标</span><br><span class="line"><span class="keyword">var</span> score=[<span class="number">85</span>,<span class="number">79</span>,<span class="number">93</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;score.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    i代表数组元素的下标</span><br><span class="line">    scorep[i]下标对应的元素</span><br><span class="line">&#125;</span><br><span class="line">注意：只能遍历索引数组</span><br><span class="line"><span class="keyword">for</span>-<span class="keyword">in</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> arr)&#123;</span><br><span class="line">        key 数组的下标</span><br><span class="line">        arr[key] 下标对应的元素</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(key+<span class="string">&#x27;---&#x27;</span>arr[key]);</span><br><span class="line">    &#125;</span><br><span class="line">注意：既可以遍历索引数组，也可以遍历关联数组。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数组中的方法"><a href="#数组中的方法" class="headerlink" title="数组中的方法"></a>数组中的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">API</span>-应用程序编程接口，预先定义好的函数/方法</span><br><span class="line"><span class="attr">say</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;  &#125;</span><br><span class="line"><span class="title function_">toString</span>() 将数组中的元素按逗号分隔成字符串</span><br><span class="line"><span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>) 将数组中的元素按照指定的字符分割成字符串</span><br><span class="line"><span class="title function_">concat</span>(arr1,arr2,arr3....)  要拼接两个或者更多的数组</span><br><span class="line"><span class="title function_">slice</span>(start,end) 截取数组中的元素，start开始的下标，end结尾的下标，不包含end本身;负数表示倒数第几个。</span><br><span class="line"><span class="title function_">splice</span>(start，count，value1，value2.....) 删除数组中的元素;</span><br><span class="line">start开始的下标，count删除的个数，value1，value2....删除后补充的元素。</span><br><span class="line"><span class="title function_">reverse</span>() 翻转数组中的元素</span><br><span class="line"><span class="title function_">sort</span>() 对数组中的元素进行排序，默认是按照<span class="title class_">Unicode</span>码有效达到</span><br><span class="line">对数字排序：</span><br><span class="line"><span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a-b;  <span class="comment">//由小到大</span></span><br><span class="line"><span class="keyword">return</span> b-a;  <span class="comment">//由大到小</span></span><br><span class="line">&#125;);</span><br><span class="line">常用的数组操作：</span><br><span class="line"><span class="title function_">push</span>() 往数组的末尾添加元素。返回数组的长度</span><br><span class="line"><span class="title function_">pop</span>()  删除数组末尾的元素 返回删除的元素</span><br><span class="line"><span class="title function_">unshift</span>() 往数组的开头添加元素，返回数组的长度</span><br><span class="line"><span class="title function_">shift</span>()    删除数字开头的元素，返回删除的元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组中的每一个元素也是数组</span><br><span class="line"><span class="keyword">var</span> arr=[ [ ],[ ],[ ]..... ]</span><br><span class="line">访问二维数组中的元素 arr[下标][下标]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>包装对象：目的是让原始类型的数据也可以像引用类型一样，具有属性和方法</p><ol><li>JS提供了3种包装类型：String、Number、Boolean</li><li>将任意的数据包装成字符串对象<br>new String(true)  返回object类型<pre><code>        String(true) 返回字符串  &#39;true&#39;</code></pre></li></ol><h4 id="转义字符—-反斜杠"><a href="#转义字符—-反斜杠" class="headerlink" title="转义字符— \ 反斜杠"></a>转义字符— \ 反斜杠</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">转换字符的意义：</span><br><span class="line">    \n将字符n转义成换行</span><br><span class="line">    \t将字符t转义成制表符（table键）</span><br><span class="line">    \<span class="string">&#x27;将引号转成普通的字符</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h4 id="字符串中常用方法"><a href="#字符串中常用方法" class="headerlink" title="字符串中常用方法"></a>字符串中常用方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">toUpperCase</span>() 将英文字母转为大写</span><br><span class="line"><span class="title function_">toLowerCase</span>() 将英文字母转为小写</span><br><span class="line">length获取字符串的长度</span><br><span class="line"><span class="title function_">charAt</span>()获取下标对应的字符</span><br><span class="line">charCodeAt获取某个字符对应的<span class="title class_">Unicode</span>码</span><br><span class="line"><span class="title function_">indexOf</span>(value,start) 查找某个字符串的下标,value是要查找的字符串，start开始查找的下标，默认是<span class="number">0</span>，如果找不到返回-<span class="number">1</span></span><br><span class="line">lastIndexOf（value）查找某个字符串，最后一次出现的下标，找不到返回-<span class="number">1</span></span><br><span class="line"><span class="title function_">slice</span>(start,end) 截取字符串，start开始的下标，end结束的下标，不包含end本身；如果end为空，截取到最后</span><br><span class="line"><span class="title function_">substring</span>(start,end)  截取字符串，start开始的下标，end结尾的下标不包含end本身；如果两个参数是负数，自动转成了<span class="number">0</span></span><br><span class="line"><span class="title function_">substr</span>(start,count)截取字符串，start开始的下标，count截取的长度；如果count为空截取到最后。</span><br><span class="line"><span class="title function_">split</span>(sep分隔符)按照指定的字符分隔为数组。sep—是分隔符</span><br><span class="line"><span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(index)  获取任意<span class="title class_">Unicode</span>码对应的字符</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作用：用于查找、替换字符串。</span><br><span class="line"><span class="title function_">replace</span>(value1,value2) 查找并替换。value1要查找的字符串，value2要替换的字符串，value可以使用字符串形式，也可以使用正则表达式形式/china/ig</span><br><span class="line">i -&gt; ignore 忽略大小写</span><br><span class="line">g-&gt; <span class="variable language_">global</span>  全局查找</span><br><span class="line">match（value）用于查找匹配的字符串，返回一个数组   可以使用ig</span><br><span class="line">search （value）用于查找满足条件的第一个字符的下标，如果找不到返回-<span class="number">1</span>  只能使用i</span><br><span class="line">内置对象，宿主对象，自定义对象</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>对象不需要使用<span class="keyword">new</span>创建，可以直接使用。</span><br><span class="line"><span class="variable constant_">PI</span> 获取圆周率</span><br><span class="line"><span class="title function_">abs</span>() 取绝对值</span><br><span class="line"><span class="title function_">floor</span>()向下取整</span><br><span class="line"><span class="title function_">ceil</span>() 向上取整</span><br><span class="line"><span class="title function_">round</span>()四舍五入取整</span><br><span class="line"><span class="title function_">max</span>() 取一组数字最大值</span><br><span class="line"><span class="title function_">min</span>() 取一组数字的最小值</span><br><span class="line"><span class="title function_">pow</span>(x,y) 取x的y次幂</span><br><span class="line"><span class="title function_">random</span>() 取随机  范围&gt;=<span class="number">0</span>  &lt;<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><p>​    用于对日期和时间进行存储和计算</p><h4 id="创建Date对象"><a href="#创建Date对象" class="headerlink" title="创建Date对象"></a>创建Date对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>（<span class="string">&#x27;2018/11/11 10:20:30&#x27;</span>）</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>（<span class="number">2018</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>） <span class="comment">//第二个参数月份的范围是0~11</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>（）存储当前的系统时间</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>（<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>） 存储的是距离计算机元年的毫秒数对应的日期时间</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取Date对象的信息"><a href="#获取Date对象的信息" class="headerlink" title="获取Date对象的信息"></a>获取Date对象的信息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getFullYear/   获取年</span><br><span class="line">getMonth/     获取月</span><br><span class="line">getDate/       获取日</span><br><span class="line">getHours/      获取小时</span><br><span class="line">getMinutes/    获取分钟</span><br><span class="line">getSeconds/    获取秒</span><br><span class="line">getMilliseconds/  获取毫秒</span><br><span class="line"><span class="title function_">getDay</span>(星期<span class="number">0</span>~<span class="number">6</span>)/  获取星期几 从<span class="number">0</span>到<span class="number">6</span></span><br><span class="line"><span class="title function_">getTime</span>(距离计算机元年的毫秒数)   例：<span class="number">1542339376789</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="转为本地字符串"><a href="#转为本地字符串" class="headerlink" title="转为本地字符串"></a>转为本地字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">toLocaleString</span>()<span class="comment">// 年-月-日   时：分：秒</span></span><br><span class="line"><span class="title function_">tolocaleDateString</span>()<span class="comment">//年-月-日</span></span><br><span class="line"><span class="title function_">tolocaleTimeString</span>()<span class="comment">//时：分：秒</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="设置Date对象的信息"><a href="#设置Date对象的信息" class="headerlink" title="设置Date对象的信息"></a>设置Date对象的信息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setFullYear/setMonth/setDate/setHours/setMinutes/setSeconds/setMilliseconds/</span><br><span class="line">    setTime 距离计算机元年毫秒数，一旦使用后，年月日时分秒都会受到影响</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>例题：计算当前距离2018年圣诞节还有多少天多少小时多少分多少秒 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原理：计算两个Date对象的时间差—相差的毫秒</span></span><br><span class="line"><span class="keyword">var</span> d1=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> d2=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018/12/25&#x27;</span>)</span><br><span class="line"><span class="comment">//两个对象相减，返回的是两个对象相差的毫秒数。</span></span><br><span class="line"><span class="keyword">var</span> d3=d2-d1;</span><br><span class="line"><span class="comment">//把相差的时间转成秒</span></span><br><span class="line">d3=<span class="title class_">Math</span>.<span class="title function_">floor</span>(d3/<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//获取相差的天数</span></span><br><span class="line"><span class="keyword">var</span> day=<span class="title class_">Math</span>.<span class="title function_">floor</span>(d3/(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>));</span><br><span class="line"><span class="comment">//获取天数后相差的小时</span></span><br><span class="line"><span class="comment">//相差的描述和一天的描述取余，得到的结果是不满一天的秒数，把秒数转成小时</span></span><br><span class="line"><span class="keyword">var</span> hours=d3%(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">hours=<span class="title class_">Math</span>.<span class="title function_">floor</span>(hours/(<span class="number">60</span>*<span class="number">60</span>));</span><br><span class="line"><span class="comment">//获取相差的分钟</span></span><br><span class="line"><span class="comment">//相差的秒数和1小时的秒数取余，得到的结果是不满一小时，把秒数转成分钟</span></span><br><span class="line"><span class="keyword">var</span> minutes=d3%(<span class="number">1</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">minutes=<span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes/(<span class="number">60</span>));</span><br><span class="line"><span class="comment">//相差的秒钟 和60取余</span></span><br><span class="line"><span class="keyword">var</span> seconds=d3%<span class="number">60</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;距离2018年圣诞节还有&#x27;</span>+</span><br><span class="line">day+<span class="string">&#x27;天&#x27;</span>+</span><br><span class="line">hours+<span class="string">&#x27;小时&#x27;</span>+</span><br><span class="line">minutes+<span class="string">&#x27;分钟&#x27;</span>+</span><br><span class="line">seconds+<span class="string">&#x27;秒&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>例题：创建对象保存一个员工的入职时间’2018-11-16’，3年后到期要求到期时间，合同到期前一个月续签合同，假如续签时间是周末，提前到周五。提前一周来通知人事准备续签（提醒时间）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> workTime=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018/11/16&#x27;</span>);</span><br><span class="line"><span class="comment">//复制入职时间的对象作为到期时间</span></span><br><span class="line"><span class="comment">//到期时间，年份在当前的基础之上加3</span></span><br><span class="line"><span class="keyword">var</span> target=<span class="keyword">new</span> <span class="title class_">Date</span>(workTime);</span><br><span class="line">target.<span class="title function_">setFullYear</span>(target.<span class="title function_">getFullYear</span>()+<span class="number">3</span>);</span><br><span class="line"><span class="comment">//复制一个到期时间</span></span><br><span class="line"><span class="keyword">var</span> reworkTime=<span class="keyword">new</span> <span class="title class_">Date</span>(target);</span><br><span class="line"><span class="comment">//提前一个月：在当前月份基础上减1</span></span><br><span class="line">reworkTime.<span class="title function_">setMonth</span>(reworkTime.<span class="title function_">getMonth</span>()-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//判断是否为周末 6  0，周六提前一天-1，周日提前-2</span></span><br><span class="line"><span class="keyword">var</span> day=reworkTime.<span class="title function_">getDay</span>();</span><br><span class="line">    <span class="keyword">if</span> (day==<span class="number">6</span>)&#123;</span><br><span class="line">        <span class="comment">//设置日期为当前的日期-1</span></span><br><span class="line">        reworkTime.<span class="title function_">setDate</span>(reworkTime.<span class="title function_">getDate</span>()-<span class="number">1</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(day==<span class="number">0</span>)&#123;</span><br><span class="line">        reworkTime.<span class="title function_">setDate</span>(reworkTime.<span class="title function_">getDate</span>()-<span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//提醒时间：复制续签时间</span></span><br><span class="line"><span class="keyword">var</span> remind=<span class="keyword">new</span> <span class="title class_">Date</span>(reworkTime);</span><br><span class="line"><span class="comment">//设置当前日期在原来基础减7</span></span><br><span class="line">remind.<span class="title function_">setDate</span>(remind.<span class="title function_">getDate</span>()-<span class="number">7</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;入职时间：&#x27;</span>+</span><br><span class="line">                    workTime.<span class="title function_">toLocaleDateString</span>()</span><br><span class="line">                );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;到期时间：&#x27;</span>+</span><br><span class="line">                    target.<span class="title function_">toLocaleDateString</span>()</span><br><span class="line">                );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;续签时间：&#x27;</span>+</span><br><span class="line">                    reworkTime.<span class="title function_">toLocaleDateString</span>()</span><br><span class="line">                );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;提醒时间：&#x27;</span>+</span><br><span class="line">                    remind.<span class="title function_">toLocaleDateString</span>()</span><br><span class="line">                );</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Number对象"><a href="#Number对象" class="headerlink" title="Number对象"></a>Number对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Number</span>(值)  创建对象</span><br><span class="line">将一个数据转为<span class="title class_">Number</span>对象，本质还是数字。</span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>  获取计算机能存储的最大值</span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>  获取计算机能存储的最小值</span><br><span class="line"><span class="title function_">toFixed</span>(n) 保留小数点后 n位</span><br><span class="line"><span class="title function_">toString</span>() 将数字转为字符串类型</span><br><span class="line">数字+<span class="string">&#x27;&#x27;</span>  <span class="comment">//隐式转为字符串类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Boolean对象"><a href="#Boolean对象" class="headerlink" title="Boolean对象"></a>Boolean对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Boolean</span>(值)  创建布尔对象，本质上将数据转为布尔型</span><br><span class="line"><span class="title class_">Boolean</span>(值) 转为布尔型</span><br><span class="line">!!值 隐式将数据转为布尔型</span><br><span class="line"><span class="title function_">toString</span>() 将布尔型数据转为字符串</span><br><span class="line"><span class="literal">null</span>的作用：用于释放（销毁）一个引用类型的数据。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">SyntaxError</span> 语法错误，错误的使用了中文，缺少括号....程序不会执行</span><br><span class="line"><span class="title class_">ReferenceError</span>  引用错误，使用未声明的变量</span><br><span class="line"><span class="title class_">TypeError</span> 类型错误，错误的使用了数据类型，错误的使用了括号</span><br><span class="line"><span class="title class_">RangeError</span> 范围错误，参数的使用超出了范围</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(-<span class="number">1</span>)</span><br><span class="line">引用错误、类型错误、范围错误出现后，会影响后续代码的执行。</span><br><span class="line">异常处理：</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    尝试执行的代码，可能出现错误</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    err：捕获的错误信息</span><br><span class="line">    处理错误的方案</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><a href="http://tool.oschina.net/uploads/apidocs/jquery/regexp.html">查阅手册</a></p><p><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference">Microsoft手册</a></p><p><a href="https://www.jb51.net/tools/zhengze.html">快速入门正则</a></p><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><p>例如：</p><ul><li><strong>runoo+b</strong>，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。</li><li><strong>runoo*b</strong>，可以匹配 runob、runoob、runoooooob 等，* 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</li><li><strong>colou?r</strong> 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。</li></ul><p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p><p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p><p><strong>普通字符</strong></p><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p><h3 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h3><p>非打印字符也可以是正则表达式的组成部分。</p><p><strong>非打印字符的转义序列：</strong></p><table><thead><tr><th align="center">字符</th><th><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">\cx</td><td>匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="center">\f</td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="center">\n</td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="center">\r</td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="center">\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td></tr><tr><td align="center">\S</td><td>匹配任何非空白字符。等价于 [ ^  \f\n\r\t\v]。</td></tr><tr><td align="center">\t</td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="center">\v</td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 <strong>runoo*b</strong> 中的 *****，简单的说就是表示任何字符串的意思。如果要查找字符串中的 ***** 符号，则需要对 ***** 进行转义，即在其前加一个 *<em>*</em>: <strong>runo*ob</strong> 匹配 runo*ob。</p><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符*<em>*</em> 放在它们前面。</p><p><strong>正则表达式中的特殊字符：</strong></p><table><thead><tr><th align="center">特别字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">$</td><td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td></tr><tr><td align="center">()</td><td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td align="center">*</td><td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td></tr><tr><td align="center">+</td><td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td></tr><tr><td align="center">.</td><td align="left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td></tr><tr><td align="center">[</td><td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 [。</td></tr><tr><td align="center">?</td><td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td align="center">\</td><td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td align="center">^</td><td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td align="center">{</td><td align="left">标记限定符表达式的开始。要匹配 {，请使用 {。</td></tr><tr><td align="center">|</td><td align="left">指明两项之间的一个选择。要匹配</td></tr></tbody></table><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 ***** 或 <strong>+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p><p><strong>正则表达式的限定符有：</strong></p><table><thead><tr><th align="center">字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="center">+</td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="center">?</td><td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td align="center">{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="center">{n,}</td><td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="center">{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><p>位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p><p>正则表达式的定位符有：</p><table><thead><tr><th align="center">字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">^</td><td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td align="center">$</td><td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td align="center">\b</td><td>匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td align="center">\B</td><td>非单词边界匹配。</td></tr></tbody></table><p><code>**注意**：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 **^\***之类的表达式。</code></p><h3 id="最常用正则表达式"><a href="#最常用正则表达式" class="headerlink" title="最常用正则表达式"></a>最常用正则表达式</h3><p><strong>校验数字的表达式</strong></p><ol><li>数字：^[0-9]*$ </li><li>n位的数字：^\d{n}$</li><li>至少n位的数字：^\d{n,}$ </li><li>m-n位的数字：^\d{m,n}$ </li><li>零和非零开头的数字：^(0|[ 1 - 9 ] [0-9]*)$ *</li><li><em>非零开头的最多带两位小数的数字：^([1 - 9] [0-9]</em>)+(.[0-9]{1,2})?$ </li><li>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$ </li><li>正数、负数、和小数：^(-|+)?\d+(.\d+)?$ </li><li>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</li><li>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</li><li>非零的正整数：^[1-9]\d*$ 或 ^([1-9] [0-9]<em>){1,3}$ 或 ^+?[1-9] [0-9]</em>$*</li><li><em>非零的负整数：^ \ - [ 1 - 9 ] [ ]0-9”</em>$ 或 ^-[1-9]\d*$*</li><li>非负整数：^\d+$ 或 ^[1-9]\d*|0$*</li><li><em>非正整数：^-[1-9]\d</em>|0$ 或 ^((-\d+)|(0+))$</li><li>非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0$</li><li>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*))|0?.0+|0$</li><li>正浮点数：^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]<em>[1-9] [0-9]</em>)|([0-9]<em>[1-9] [0-9]<em>.[0-9]+)|([0-9]</em>[1-9] [0-9]</em>))$</li><li>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9] [0-9]</em>)|([0-9]<em>[1-9] [0-9]<em>.[0-9]+)|([0-9]</em>[1-9] [0-9]</em>)))$</li><li>浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0)$</li></ol><p><strong>校验字符的表达式</strong></p><ol><li>汉字：^[\u4e00-\u9fa5]{0,}$ </li><li>英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$ </li><li>长度为3-20的所有字符：^.{3,20}$ </li><li>由26个英文字母组成的字符串：^[A-Za-z]+$ </li><li>由26个大写英文字母组成的字符串：^[A-Z]+$ </li><li>由26个小写英文字母组成的字符串：^[a-z]+$ </li><li>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$ </li><li>由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$ </li><li>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</li><li>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</li><li>可以输入含有^%&amp;’,;=?$&quot;等字符：[  ^ %&amp;’,;=?$\x22]+</li><li>禁止输入含有~的字符：[ ^ ~ \x22]+</li></ol><p><strong>特殊需求表达式</strong></p><ol><li><p>Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$ </p></li><li><p>域名：[a-zA-Z0-9] [-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9] [-a-zA-Z0-9]{0,62})+/.? </p></li><li><p>InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$ </p></li><li><p>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$ </p></li><li><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$  </p></li><li><p>国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7} </p></li><li><p>身份证号(15位、18位数字)：^\d{15}|\d{18}$ </p></li><li><p>短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$ </p></li><li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p></li><li><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</p></li><li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</p></li><li><p>日期格式：^\d{4}-\d{1,2}-\d{1,2}</p></li><li><p>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</p></li><li><p>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</p><p><strong>钱的输入格式：</strong></p></li><li><p>1.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9] [0-9]<em>$</em></p></li><li><p>2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9] [0-9]<em>)$</em></p></li><li><p>3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9] [0-9]*)$</p></li><li><p>4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</p></li><li><p>5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$</p></li><li><p>6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$</p></li><li><p>7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})<em>(.[0-9]{1,2})?$</em></p></li><li><p>8 .  1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})<em>)(.[0-9]{1,2})?$</em></p></li><li><p>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p></li><li><p>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</p></li><li><p>中文字符的正则表达式：[\u4e00-\u9fa5]</p></li><li><p>双字节字符：[ ^ \x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p></li><li><p>空白行的正则表达式：\n\s<em>\r (可以用来删除空白行)</em></p></li><li><p>HTML标记的正则表达式：&lt;(\S*?)[^&gt;]<em>&gt;.</em>?&lt;/\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p></li><li><p>首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p></li><li><p>腾讯QQ号：[1-9] [0-9]{4,} (腾讯QQ号从10000开始)</p></li><li><p>中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字) 33 IP地址：\d+.\d+.\d+.\d+ (提取IP地址时有用) 34 IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d)) </p></li></ol><h3 id="20个正则表达式知识点"><a href="#20个正则表达式知识点" class="headerlink" title="20个正则表达式知识点"></a>20个正则表达式知识点</h3><p>正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。</p><p>列目录时，　dir <em>.txt或ls <em>.txt中的</em>.txt就不是一个正则表达式,因为这里</em>与正则式的*的含义是不同的。</p><p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p><p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p><p>正则表达式，一个十分古老而又强大的文本处理工具，仅仅用一段非常简短的表达式语句，便能够快速实现一个非常复杂的业务逻辑。熟练地掌握正则表达式的话，能够使你的开发效率得到极大的提升。</p><p>正则表达式经常被用于字段或任意字符串的校验，如下面这段校验基本日期格式的JavaScript代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(\\d&#123;1,4&#125;)(-|\\/</span>)(\\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)\\<span class="number">2</span>(\\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)$/;</span><br><span class="line"><span class="keyword">var</span> r = fieldValue.<span class="title function_">match</span>(reg);   </span><br><span class="line"><span class="keyword">if</span>(r==<span class="literal">null</span>)<span class="title function_">alert</span>(<span class="string">&#x27;Date format error!&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>下面是在前端开发中经常使用到的20个正则表达式:</strong></p><p><strong>检验密码强度</strong></p><p>密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  <strong>检验中文</strong></p><p>字符串仅能是中文。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^[\\u4e00-\\u9fa5]&#123;<span class="number">0</span>,&#125;$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>由数字、26个英文字母或下划线组成的字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^\\w+$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>校验E-Mail 地址</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[\\w!#$%&amp;<span class="string">&#x27;*+/=?^_`&#123;|&#125;~-]+(?:\\.[\\w!#$%&amp;&#x27;</span>*+/=?^_<span class="string">`&#123;|&#125;~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><strong>检验身份证号码</strong></p><p><strong>15位：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>18位：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">5</span>&#125;[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">3</span>&#125;((<span class="number">0</span>\\d)|(<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>]))(([<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>]\\d)|<span class="number">3</span>[<span class="number">0</span>-<span class="number">1</span>])\\d&#123;<span class="number">3</span>&#125;([<span class="number">0</span>-<span class="number">9</span>]|X)$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>效验日期</strong></p><p>“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^(?:(?!<span class="number">0000</span>)[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">4</span>&#125;-(?:(?:<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>])-(?:<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">9</span>]|<span class="number">2</span>[<span class="number">0</span>-<span class="number">8</span>])|(?:<span class="number">0</span>[<span class="number">13</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>])-(?:<span class="number">29</span>|<span class="number">30</span>)|(?:<span class="number">0</span>[<span class="number">13578</span>]|<span class="number">1</span>[<span class="number">02</span>])-<span class="number">31</span>)|(?:[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;(?:<span class="number">0</span>[<span class="number">48</span>]|[<span class="number">2468</span>][<span class="number">048</span>]|[<span class="number">13579</span>][<span class="number">26</span>])|(?:<span class="number">0</span>[<span class="number">48</span>]|[<span class="number">2468</span>][<span class="number">048</span>]|[<span class="number">13579</span>][<span class="number">26</span>])<span class="number">00</span>)-<span class="number">02</span>-<span class="number">29</span>)$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>效验金额</strong></p><p>金额校验，精确到2位小数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;)?$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  <strong>效验手机号</strong></p><p>下面是国内 13、15、18开头的手机号正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^(<span class="number">13</span>[<span class="number">0</span>-<span class="number">9</span>]|<span class="number">14</span>[<span class="number">5</span>|<span class="number">7</span>]|<span class="number">15</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>]|<span class="number">18</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>])\\d&#123;<span class="number">8</span>&#125;$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>判断IE版本</strong></p><p>IE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^.*<span class="variable constant_">MSIE</span> [<span class="number">5</span>-<span class="number">8</span>](?:\\.[<span class="number">0</span>-<span class="number">9</span>]+)?(?!.*<span class="title class_">Trident</span>\\/[<span class="number">5</span>-<span class="number">9</span>]\\<span class="number">.0</span>).*$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>效验IP-V4地址</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\<span class="title function_">b</span>(<span class="params">?:(?:<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>][<span class="number">0</span>-<span class="number">9</span>]|[<span class="number">01</span>]?[<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]?)\\.</span>)&#123;<span class="number">3</span>&#125;(?:<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>][<span class="number">0</span>-<span class="number">9</span>]|[<span class="number">01</span>]?[<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]?)\\b</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>效验IP-V6地址</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">7</span>,<span class="number">7</span>&#125;[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">7</span>&#125;:|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">6</span>&#125;:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">5</span>&#125;(:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">2</span>&#125;|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">4</span>&#125;(:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;(:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">4</span>&#125;|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">2</span>&#125;(:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">5</span>&#125;|[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:((:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">6</span>&#125;)|:((:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">7</span>&#125;|:)|<span class="attr">fe80</span>:(:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">0</span>,<span class="number">4</span>&#125;)&#123;<span class="number">0</span>,<span class="number">4</span>&#125;%[<span class="number">0</span>-9a-zA-Z]&#123;<span class="number">1</span>,&#125;|::(<span class="title function_">ffff</span>(<span class="params">:<span class="number">0</span>&#123;<span class="number">1</span>,<span class="number">4</span>&#125;</span>)&#123;<span class="number">0</span>,<span class="number">1</span>&#125;:)&#123;<span class="number">0</span>,<span class="number">1</span>&#125;((<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|(<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>]|<span class="number">1</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])\\.)&#123;<span class="number">3</span>,<span class="number">3</span>&#125;(<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|(<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>]|<span class="number">1</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:((<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|(<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>]|<span class="number">1</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])\\.)&#123;<span class="number">3</span>,<span class="number">3</span>&#125;(<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|(<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>]|<span class="number">1</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>效验URL前缀</strong></p><p>应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!s.<span class="title function_">match</span>(<span class="regexp">/^[a-zA-Z]+:\\/</span>\\<span class="comment">//))</span></span><br><span class="line">&#123;</span><br><span class="line"> s = <span class="string">&#x27;http://&#x27;</span> + s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>提取URL链接</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^(f|ht)&#123;<span class="number">1</span>&#125;(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&amp;=]*)?</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>文件路径及扩展名效验</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^([a-zA-Z]\\:|\\\\)\\\\([^\\\\]+\\\\)*[^\\/:*?<span class="string">&quot;&lt;&gt;|]+\\.txt(l)?$</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><strong>提取Color Hex  Codes</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\#([a-fA-F]|[<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">3</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>提取网页图片</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\#([a-fA-F]|[<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">3</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>精炼CSS</strong></p><p>通过下面的表达式，可以搜索相同属性值的CSS，从而达到精炼代码的目的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^\\s*[a-zA-Z\\-]+\\s*[:]&#123;<span class="number">1</span>&#125;\\s[a-zA-<span class="variable constant_">Z0</span>-<span class="number">9</span>\\s.#]+[;]&#123;<span class="number">1</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>抽取注释</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--(.*?)--&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>匹配HTML标签</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/?\\w+((\\s+\\w+(\\s*=\\s*(?:&quot;.*?&quot;|&#x27;.*?&#x27;|[\\^&#x27;&quot;&gt;\\s]+))?)+\\s*|\\s*)/</span>?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="String-的正则API"><a href="#String-的正则API" class="headerlink" title="String 的正则API"></a>String 的正则API</h3><p> <strong>查找关键词: 4种:</strong> </p><ol><li>查找一个固定的关键词出现的位置: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=str.<span class="title function_">indexOf</span>(<span class="string">&quot;关键词&quot;</span>,starti)</span><br><span class="line">从str中starti位置开始，找下一个<span class="string">&quot;关键词&quot;</span>的位置i</span><br><span class="line">如果找到，返回关键词第一个字所在的位置i</span><br><span class="line">如果找不到，返回-<span class="number">1</span></span><br><span class="line"><span class="string">`问题: 不支持正则，只能查找一个固定的关键词`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>模糊查找一个关键词的位置: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=str.<span class="title function_">search</span>(<span class="regexp">/正则/</span>)</span><br><span class="line">在str中从<span class="number">0</span>位置开始找下一个符合<span class="string">&quot;正则&quot;</span>要求的敏感词的位置i</span><br><span class="line">如果找到，返回关键词第一个字的位置</span><br><span class="line">如果没找到，返回-<span class="number">1</span></span><br><span class="line"><span class="string">`问题: 正则表达式默认区分大小写`</span></span><br><span class="line">解决: 在第二个/后加后缀i,表示ignore忽略大小写</span><br><span class="line">更高要求: 既返回关键词内容，又返回关键词位置</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>模糊查找关键词，并返回关键词内容: 2种: </li></ol><ul><li>只返回一个关键词的内容: </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var arr=str.match(/正则/i)</span><br><span class="line">在str中查找符合/正则/要求的关键词，并同时返回关键词的内容和位置</span><br><span class="line">返回值: arr[ &quot;0&quot;: 关键词, &quot;index&quot;: i ]</span><br><span class="line">数组本质: 所有数组底层其实都是关联数组</span><br><span class="line">获取关键词内容: arr[0]   arr.0</span><br><span class="line">获取关键词位置: arr[&quot;index&quot;] &lt;==&gt; arr.index</span><br><span class="line">如果找不到，返回null</span><br><span class="line">正则表达式第2个问题: 只找一个就结束了！</span><br><span class="line">解决: 在第2个/后加g，global 全部</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>查找所有关键词的内容(不关心位置):</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=str.<span class="title function_">match</span>(<span class="regexp">/正则/g</span>)</span><br><span class="line">查找str中所有符合/正则/要求的关键词保存到arr中</span><br><span class="line">返回值: 所有关键词组成的数组</span><br><span class="line"><span class="string">`找不到: 返回null`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>既查找每个关键词的内容，又查找每个关键词的位置：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">match</span>()不能实现: </span><br><span class="line"><span class="title function_">match</span>()不加g时，只能找<span class="number">1</span>个关键词</span><br><span class="line"><span class="title function_">match</span>()加g后，不能获得位置</span><br><span class="line">解决: <span class="title class_">RegExp</span>对象的<span class="title function_">exec</span>()方法</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>替换关键词: 2种:</strong> </p><ol><li>简单替换: 所有关键词都替换为统一的新值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str=str.<span class="title function_">replace</span>(<span class="regexp">/正则/ig</span>,<span class="string">&quot;新值&quot;</span>)</span><br><span class="line">回顾: 所有字符串<span class="variable constant_">API</span>都无权修改原字符串，只能返回新字符串！所以必须用变量才能借助修改后的新值。</span><br><span class="line">将str中所有符合/正则/要求的关键词都替换为统一的<span class="string">&quot;新值&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>高级替换: 根据找到的每个关键词的不同，动态返回对应的新值替换。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str=str.<span class="title function_">replace</span>(</span><br><span class="line"><span class="regexp">/正则/ig</span>,  <span class="keyword">function</span>(<span class="params">kword</span>)&#123; <span class="keyword">return</span> 新值; &#125;</span><br><span class="line">)</span><br><span class="line">原理: </span><br><span class="line"><span class="number">1.</span> replace查找str中符合条件的每个关键词</span><br><span class="line"><span class="number">2.</span> 每找到一个关键词，就自动调用回调函数</span><br><span class="line"><span class="number">3.</span> 每次调用函数都自动传入本次找到的关键词</span><br><span class="line"><span class="number">4.</span> 回调函数根据本次传入的关键词，加工后生成新替换值返回</span><br><span class="line"><span class="number">5.</span> replace将本地回调函数返回的值，替换到正在遍历的位置。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 切割字符串:</p><ol><li>简单切割: 切割符是固定的</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">比如: zhangdong@tedu.<span class="property">cn</span></span><br><span class="line">      no zuo no die</span><br><span class="line"><span class="keyword">var</span> arr=str.<span class="title function_">split</span>(“固定的切割符”)</span><br><span class="line"> 返回多段子字符串组成的数组</span><br><span class="line">固定套路: 打散一个字符串为字符数组</span><br><span class="line"><span class="keyword">var</span> chars=str.<span class="title function_">split</span>(“”)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>复杂切割: 切割符不是固定的</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=str.<span class="title function_">split</span>(<span class="regexp">/正则/</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://wangdoc.com/&quot;&gt;参考文献&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;学习一门编程语言的基本步骤&quot;&gt;&lt;a href=&quot;#学习一门编程语言的基本步骤&quot; class=&quot;headerlink&quot; title=&quot;学习一门编程语言的基本步骤&quot;&gt;&lt;/a&gt;学习一门编程语言的基本步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;了解背景知识：历史、现状、特点、应用场景&lt;/li&gt;
&lt;li&gt;搭建开发环境，编写hello World&lt;/li&gt;
&lt;li&gt;变量和常量&lt;/li&gt;
&lt;li&gt;数据类型&lt;/li&gt;
&lt;li&gt;运算符&lt;/li&gt;
&lt;li&gt;逻辑结构&lt;/li&gt;
&lt;li&gt;通用小程序&lt;/li&gt;
&lt;li&gt;函数和对象&lt;/li&gt;
&lt;li&gt;第三方库、框架&lt;/li&gt;
&lt;li&gt;实用的项目</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Gulp快速使用</title>
    <link href="http://example.com/2019/06/23/Gulp%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2019/06/23/Gulp%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</id>
    <published>2019-06-23T10:12:54.000Z</published>
    <updated>2022-03-28T12:16:24.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gulp介绍"><a href="#Gulp介绍" class="headerlink" title="Gulp介绍"></a>Gulp介绍</h2><ul><li>中文主页: <a href="http://www.gulpjs.com.cn/">http://www.gulpjs.com.cn/</a></li><li><code>此文档对应3.9版本</code></li><li>查看实例 <a href="https://pan.baidu.com/s/1DI7sMSdCb0BzKzuuQ6DpXw">点击下载</a> 提取码：otxk</li><li>gulp是与grunt功能类似的<strong>前端项目构建</strong>工具, 也是基于Nodejs的自动<strong>任务运行器</strong></li><li>能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的<br>合并、压缩、检查、监听文件变化、浏览器自动刷新、测试等任务</li><li>gulp更高效(异步多任务), 更易于使用, 插件高质量</li><li>简单目录结构<span id="more"></span></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|- dist</span><br><span class="line">|- src</span><br><span class="line">  |- js</span><br><span class="line">  |- css</span><br><span class="line">  |- less</span><br><span class="line">  |- index.html</span><br><span class="line">|- gulpfile.js-----gulp配置文件</span><br><span class="line">|- package.json</span><br></pre></td></tr></table></figure><h2 id="安装Gulp"><a href="#安装Gulp" class="headerlink" title="安装Gulp"></a>安装Gulp</h2><ul><li>全局安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><ul><li>局部安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp --save-dev</span><br></pre></td></tr></table></figure><ul><li>配置编码：gulpfile.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入gulp模块</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="comment">//定义默认任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 将你的默认的任务代码放在这</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>注册默认任务</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>,[<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;less&#x27;</span>,<span class="string">&#x27;css&#x27;</span>,<span class="string">&#x27;htmlMinfy&#x27;</span>])</span><br><span class="line"><span class="comment">//注意此任务应为个人定义好的而不是默认的。</span></span><br></pre></td></tr></table></figure><ul><li>构建命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp</span><br></pre></td></tr></table></figure><h2 id="使用gulp插件"><a href="#使用gulp插件" class="headerlink" title="使用gulp插件"></a>使用gulp插件</h2><ul><li><p>相关插件:</p><ul><li><strong>gulp-concat</strong> : 合并文件(js/css)</li><li><strong>gulp-uglify</strong> : 压缩js文件</li><li><strong>gulp-rename</strong> : 文件重命名</li><li><strong>gulp-less</strong> : 编译less</li><li><strong>gulp-clean-css</strong> : 压缩css</li><li><strong>gulp-livereload</strong> : 实时自动编译刷新</li></ul></li><li><p>重要API</p><ul><li><strong>gulp.src(filePath/pathArr)</strong> <ul><li>指向指定路径的所有文件, 返回文件流对象</li><li>用于读取文件</li></ul></li><li><strong>gulp.dest(dirPath/pathArr)</strong><ul><li>指向指定的所有文件夹</li><li>用于向文件夹中输出文件</li></ul></li><li><strong>gulp.task(name[, deps], fn)</strong> <ul><li>定义一个任务</li></ul></li><li>gulp.watch() <ul><li><strong>监视文件的变化</strong></li></ul></li></ul></li><li><p><code>注意如果加return 则为异步进行打包不加则为同步</code></p><ul><li><p>```js<br>gulp.task(‘css’,[‘less’],function(){    //当启动css时候去依赖less任务<br>})<br>//此写法也可解决异步同步问题 让css打包时先去执行less打包行为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 处理js</span><br><span class="line"></span><br><span class="line">  - 创建js文件</span><br><span class="line"></span><br><span class="line">    - src/js/test1.js</span><br><span class="line"></span><br><span class="line">      ```js</span><br><span class="line">      (function () &#123;</span><br><span class="line">        function add(num1, num2) &#123;</span><br><span class="line">          var num3 = 0;</span><br><span class="line">          num1 = num2 + num3;</span><br><span class="line">          return num1 + num2;</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(add(10, 30));</span><br><span class="line">      &#125;)();</span><br></pre></td></tr></table></figure><ul><li><p>src/js/test2.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item, index</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> item+<span class="number">1</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>下载插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-concat gulp-uglify gulp-rename --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">&#x27;gulp-concat&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">&#x27;gulp-rename&#x27;</span>);</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;js&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/js/*.js&#x27;</span>)  <span class="comment">//找到目标原文件，将数据读取到gulp的内存中</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;build.js&#x27;</span>))       <span class="comment">//临时合并文件</span></span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./dist/js/&#x27;</span>))    <span class="comment">//输出文件到本地</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())                 <span class="comment">//压缩文件</span></span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">rename</span>(&#123;<span class="attr">suffix</span>:<span class="string">&#x27;.min&#x27;</span>&#125;))  <span class="comment">//重命名也可以直接写字符串</span></span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./dist/js/&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">liverload</span>())              <span class="comment">//实时刷新</span></span><br><span class="line">    .<span class="title function_">pipe</span>(connect.<span class="title function_">reload</span>())         <span class="comment">//实时刷新</span></span><br><span class="line">    <span class="comment">// return gulp.src(&#x27;src/js/**/*.js&#x27;) 深度遍历 </span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;minifyjs&#x27;</span>]);</span><br></pre></td></tr></table></figure></li><li><p>页面引入js浏览测试 : index.html</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;dist/js/built.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>打包测试: gulp</p></li></ul></li><li><p>处理css</p><ul><li><p>创建less/css文件</p><ul><li><p>src/css/test1.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>src/css/test2.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>src/less/test3.less</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@base:</span> yellow;</span><br><span class="line"><span class="selector-class">.index1</span> &#123; <span class="attribute">color</span>: <span class="variable">@base</span>; &#125;</span><br><span class="line"><span class="selector-class">.index2</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>下载插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-less gulp-clean-css --save-dev </span><br><span class="line">处理less     压缩css </span><br></pre></td></tr></table></figure></li><li><p>配置编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">&#x27;gulp-less&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cleanCSS = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册转换less的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;less&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/less/*.less&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">less</span>())                   <span class="comment">//编译less文件为css文件</span></span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;src/css/&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">liverload</span>())              <span class="comment">//实时刷新</span></span><br><span class="line">    .<span class="title function_">pipe</span>(connect.<span class="title function_">reload</span>())         <span class="comment">//实时刷新</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册合并压缩css的任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;css&#x27;</span>,[<span class="string">&#x27;less&#x27;</span>],<span class="keyword">function</span>(<span class="params"></span>)&#123;    <span class="comment">//当启动css时候去依赖less任务 </span></span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;src/css/*.css&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;build.css&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">rename</span>(&#123;<span class="attr">suffix</span>:<span class="string">&#x27;.min&#x27;</span>&#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">cssClean</span>(&#123;<span class="attr">compatibility</span>:<span class="string">&#x27;ie8&#x27;</span>&#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./dist/css/&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">liverload</span>())              <span class="comment">//实时刷新</span></span><br><span class="line">    .<span class="title function_">pipe</span>(connect.<span class="title function_">reload</span>())         <span class="comment">//实时刷新</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;minifyjs&#x27;</span>, <span class="string">&#x27;cssTask&#x27;</span>]);</span><br></pre></td></tr></table></figure></li><li><p>页面引入css浏览测试 : index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;dist/css/built.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;index1&quot;</span>&gt;</span>div1111111<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;index2&quot;</span>&gt;</span>div2222222<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>打包测试: gulp</p></li></ul></li><li><p>处理html</p><ul><li><p>下载插件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlmin --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="comment">//注册压缩HTML任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;htmlMinfy&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlMin</span>(&#123;<span class="attr">collapseWhitespace</span>:<span class="literal">true</span>&#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist&#x27;</span>))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">liverload</span>())              <span class="comment">//实时刷新</span></span><br><span class="line">    .<span class="title function_">pipe</span>(connect.<span class="title function_">reload</span>())         <span class="comment">//实时刷新</span></span><br><span class="line">&#125;)</span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;minifyjs&#x27;</span>, <span class="string">&#x27;cssTask&#x27;</span>, <span class="string">&#x27;htmlMinify&#x27;</span>]);</span><br></pre></td></tr></table></figure></li><li><p>修改页面引入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/built.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/built.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>打包测试: gulp    </p></li></ul></li><li><p>自动编译/刷新</p><ul><li><p>下载插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-livereload --save-dev</span><br></pre></td></tr></table></figure></li><li><p>配置编码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> livereload = <span class="built_in">require</span>(<span class="string">&#x27;gulp-livereload&#x27;</span>);    </span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;watch&#x27;</span>, [<span class="string">&#x27;default&#x27;</span>], <span class="keyword">function</span> (<span class="params"></span>) &#123;    </span><br><span class="line">  <span class="comment">//开启监听</span></span><br><span class="line">    <span class="title function_">liverload</span>().<span class="title function_">listeners</span>()</span><br><span class="line">    <span class="comment">//确认监听的目标以及绑定相应的任务</span></span><br><span class="line">    gulp.<span class="title function_">watch</span>(<span class="string">&#x27;src/js*.js&#x27;</span>,[<span class="string">&#x27;js&#x27;</span>]) </span><br><span class="line">    gulp.<span class="title function_">watch</span>([<span class="string">&#x27;src/css/*.css&#x27;</span>,<span class="string">&#x27;src/less/*.less&#x27;</span>],[<span class="string">&#x27;css&#x27;</span>]) </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>自动刷新页面</p><ul><li>下载安装chrome插件: LiveReload_v2.1.0.crx</li><li>命令: <strong>gulp watch</strong></li><li>测试访问: <ul><li>通过虚拟地址访问页面, 并点插件图标启动监视</li><li>修改js/css/less页面会自动编译并刷新浏览器</li></ul></li></ul></li></ul></li><li><p>热更新插件：npm install gulp-connect –save-dev</p><ul><li>```js<br>const connect = require(‘gulp-connect’)<br>//热更新配置<br>gulp.task(‘server’,[‘default’],function(){<pre><code>//配置服务器的选项connect.server(&#123;    root:&#39;dist/&#39;,    livereload:true,    //实时刷新    port:3000&#125;)//open插件可以自动打开指定的链接open(&#39;http://localhost:3000&#39;)//确认监听的目标以及绑定相应的任务gulp.watch(&#39;src/js*.js&#39;,[&#39;js&#39;]) gulp.watch([&#39;src/css/*.css&#39;,&#39;src/less/*.less&#39;],[&#39;css&#39;])</code></pre>})<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 自动热更新后自动打开对应地址页面：npm install open --save-dev</span><br><span class="line"></span><br><span class="line">  - ```js</span><br><span class="line">    const open = require(&#x27;open&#x27;)</span><br><span class="line">    //open插件可以自动打开指定的链接</span><br><span class="line">    open(&#x27;http://localhost:3000&#x27;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>以上除了gulp对象，其他效果都包括：npm install gulp-load-plugins –save-dev</p><ul><li><pre><code class="js">const $ = require(&#39;gulp-load-plugins&#39;)()    //包括以下所有插件 直接可以$.方法即可const concat = require(&#39;gulp-concat&#39;)const uglify = require(&#39;gulp-uglify&#39;)const rename = require(&#39;gulp-rename&#39;)const less = require(&#39;gulp-less&#39;)const cssClean = require(&#39;gulp-clean-css&#39;)const htmlMin = require(&#39;gulp-htmlmin&#39;)const liverload = require(&#39;gulp-livereload&#39;)const connect = require(&#39;gulp-connect&#39;)const open = require(&#39;open&#39;)//例如$.concat()</code></pre></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Gulp介绍&quot;&gt;&lt;a href=&quot;#Gulp介绍&quot; class=&quot;headerlink&quot; title=&quot;Gulp介绍&quot;&gt;&lt;/a&gt;Gulp介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;中文主页: &lt;a href=&quot;http://www.gulpjs.com.cn/&quot;&gt;http://www.gulpjs.com.cn/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;此文档对应3.9版本&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看实例 &lt;a href=&quot;https://pan.baidu.com/s/1DI7sMSdCb0BzKzuuQ6DpXw&quot;&gt;点击下载&lt;/a&gt; 提取码：otxk&lt;/li&gt;
&lt;li&gt;gulp是与grunt功能类似的&lt;strong&gt;前端项目构建&lt;/strong&gt;工具, 也是基于Nodejs的自动&lt;strong&gt;任务运行器&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的&lt;br&gt;合并、压缩、检查、监听文件变化、浏览器自动刷新、测试等任务&lt;/li&gt;
&lt;li&gt;gulp更高效(异步多任务), 更易于使用, 插件高质量&lt;/li&gt;
&lt;li&gt;简单目录结构</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="打包工具" scheme="http://example.com/tags/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Gulp" scheme="http://example.com/tags/Gulp/"/>
    
  </entry>
  
  <entry>
    <title>html基础</title>
    <link href="http://example.com/2019/06/18/html%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2019/06/18/html%E5%9F%BA%E7%A1%80/</id>
    <published>2019-06-18T14:23:33.000Z</published>
    <updated>2022-03-28T12:16:34.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">HTML注释，注释忠的内容会被浏览器忽略，不会再网页中显示</span></span><br><span class="line"><span class="comment">但是可以在源码中查看注释，注释用来对代码进行解释说明</span></span><br><span class="line"><span class="comment"> 开发中养成良好的编写注释习惯，注释要求简单明了</span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">注释不能嵌套</span></span><br><span class="line"><span class="comment">--&gt;</span> 这就已经结束了</span><br><span class="line">--&gt;最后一个会被孤立显示</span><br></pre></td></tr></table></figure><h2 id="文档声明"><a href="#文档声明" class="headerlink" title="文档声明"></a>文档声明</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">网页迭代版本：</span><br><span class="line">- html4</span><br><span class="line">- xhtml2.0</span><br><span class="line">- html5</span><br><span class="line">...</span><br><span class="line">文档声明（doctype）：</span><br><span class="line">- html5文档声明 </span><br><span class="line">- <span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span> -&gt; 不区分大小写，本身无任何意义单标记，告知浏览器当前网页版本。</span><br></pre></td></tr></table></figure><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">二进制（计算机底层进制）：</span><br><span class="line">- 特点：满2进1</span><br><span class="line">- 计数：0 1 10 11 100 101 110 111</span><br><span class="line">- 单位数字： 2个（0~1）</span><br><span class="line">八进制（很少使用）：</span><br><span class="line">- 特点：满8进1</span><br><span class="line">- 计数：0 1 2 3 4 5 6 7 10 11 12 ... 17 20 </span><br><span class="line">- 单位数字：8个（0~7）</span><br><span class="line">十进制（日常使用）：</span><br><span class="line">- 特点：满10进1</span><br><span class="line">- 计数：0 1 2 3 4 5 6 7 8 9 10 11 12 13 ... 19 20</span><br><span class="line">- 单位数字：10个 （0~9）</span><br><span class="line">十六进制(一般显示一个二进制数字时，转换为十六进制)：</span><br><span class="line">- 特点：满16进1</span><br><span class="line">- 计数：0 1 2 3 4 5 6 7 8 9 a b c d e f 10 11 12 ... 1a 1b 1c 1d 1e 1f 20...</span><br><span class="line">- 单位数字：16个（0-f）</span><br><span class="line">扩展：</span><br><span class="line">-所有数据在计算机底层都会以二进制形式保存内存想象为由多个小格子组成的容器，一个小格子，在内存中被称为1位（bit）。</span><br><span class="line"> -  8bit = 1byte（字节）</span><br><span class="line"> -  1024byte = 1kb（千字节）</span><br><span class="line">  -  1024kb = 1mb（兆）</span><br><span class="line"> -  1024mb = 1gb（吉字节）</span><br><span class="line"> -  1024gb = 1tb（特字节）</span><br><span class="line"> -  1024tp = 1pb</span><br></pre></td></tr></table></figure><h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">所有数据在计算机存储时都是以二进制形式存储的，文字也不例外。</span><br><span class="line">一段文字在存储到内存中时，都需要转换为二进制编码。</span><br><span class="line">当读取这段文字时，计算机会将编码转换为字符，供我们阅读。</span><br><span class="line">编码:</span><br><span class="line">- 将字符转换为二进制过程称为编码</span><br><span class="line">解码:</span><br><span class="line">- 将二进制码转换为字符的过程称为解码</span><br><span class="line">字符集:</span><br><span class="line">- 编码和解码采用的规则称为字符集</span><br><span class="line">乱码问题:</span><br><span class="line">- 如果编码和解码采用的字符集不同就会出现乱码问题</span><br><span class="line">常见的字符集:</span><br><span class="line">- ASCII</span><br><span class="line">- ISO88591</span><br><span class="line">- GB2312</span><br><span class="line">- GBK</span><br><span class="line">- UTF-8</span><br></pre></td></tr></table></figure><h2 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h2><p>meta标签设置网页的元数据 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span> = <span class="string">&quot;UTF-8&quot;</span>&gt;</span> //解决编码乱码问题。</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">&quot;keywords&quot;</span> <span class="attr">content</span> = <span class="string">&quot;HTML5，前端，CSS3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span> = <span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网页描述&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">title</span> = <span class="string">&quot;搜索引擎所搜索到的标题例如京东（jd）&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span> = <span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;3;url = https://www.xxxx.com&quot;</span>&quot;&gt;</span></span><br><span class="line">主要用于设置网页中的元数据，不是给用户看的：</span><br><span class="line">- name -&gt; 指定数据名称</span><br><span class="line">- content-&gt; 指定数据内容</span><br><span class="line">- charset -&gt; 指定网页字符集</span><br><span class="line">- keywords -&gt;指定网站的关键字，同时指定多个关键字，关键字间逗号&quot;,&quot;隔开。</span><br><span class="line">- description -&gt; 用于指定网站的描述，网站的描述会显0示在搜索引擎搜索的结果中</span><br><span class="line">- title -&gt; 标签内容会作为搜索结果的超链接上的文字显示</span><br><span class="line">- http-equiv = &quot;refresh&quot; content = &quot;3;url = 网址&quot; -&gt; 重定向 数字3代表跳转时间</span><br></pre></td></tr></table></figure><h2 id="title"><a href="#title" class="headerlink" title="title"></a>title</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title中的内容会显示在浏览器的标题栏，搜索引擎会主要根据title中标题来判断网页的主要内容。</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span> 网页标题 <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在HTML中有些时候，不能直接书写特殊符号，比如：</span><br><span class="line">- &amp;nbsp：空格</span><br><span class="line">- <span class="symbol">&amp;gt;</span>大于号</span><br><span class="line">- <span class="symbol">&amp;lt;</span>小于号</span><br><span class="line">- <span class="symbol">&amp;copy;</span>版权符号</span><br></pre></td></tr></table></figure><p><a href="https://www.w3school.com.cn/html/html_entities.asp">W3Cschool更多转义符</a></p><h2 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- 从 h1 到 h6 共有六级标题</span><br><span class="line">- h1 到 h6重要性递减，h1最重要，h6最不重要</span><br><span class="line">- h1在网页中的重要性仅次于title标签，一般情况下一个页面中只会有一个h1</span><br><span class="line">- h1到h3经常使用，h4到h6很少用</span><br><span class="line">- 在页面中独占一行的元素称为块元素(block element)</span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">- 标题标签都是块元素</span><br><span class="line">· 可以将一组相关的标题同时放入到hgroup</span><br><span class="line"><span class="tag">&lt;<span class="name">hgroup</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- p标签表示页面中的一个段落</span><br><span class="line">- p也是一个块元素</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">p标签中的内容表示一个段落</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- em 标签表示语音语调的一个加重</span><br><span class="line">- 在页面中不会独占一行的元素称为行内元素（inline element）</span><br><span class="line">今天天气<span class="tag">&lt;<span class="name">em</span>&gt;</span>真<span class="tag">&lt;/<span class="name">em</span>&gt;</span>不错！</span><br><span class="line">- strong 表示强调，重要内容！</span><br><span class="line">今天必须完成<span class="tag">&lt;<span class="name">strong</span>&gt;</span>XXX<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="引用标签"><a href="#引用标签" class="headerlink" title="引用标签"></a>引用标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- blockquote 表示一个长引用 -&gt; 块元素</span><br><span class="line">XXX说：</span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">    XXXXXXX！</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line">- q表示一个短引用 -&gt; 行元素</span><br><span class="line">子曰：<span class="tag">&lt;<span class="name">q</span>&gt;</span>学而时习之不亦乐乎<span class="tag">&lt;/<span class="name">q</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- br 标签 表示页面中的换行</span><br><span class="line">今天天气<span class="tag">&lt;<span class="name">br</span>&gt;</span>真不错</span><br></pre></td></tr></table></figure><h2 id="行内元素和块元素定义"><a href="#行内元素和块元素定义" class="headerlink" title="行内元素和块元素定义"></a>行内元素和块元素定义</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">块元素（block element）：</span><br><span class="line">- 网页中一般通过块元素来对网页布局</span><br><span class="line">行内元素（inline element）：</span><br><span class="line">- 行内元素主要用来包裹文字</span><br><span class="line">注：</span><br><span class="line">- 一般情况下会在块元素中放行内元素，不会再行内元素中放块元素</span><br><span class="line">- 块元素中基本都能放</span><br><span class="line">- p元素中不能放任何块元素</span><br></pre></td></tr></table></figure><h2 id="书写注意"><a href="#书写注意" class="headerlink" title="书写注意"></a>书写注意</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">浏览器在解析网页时，会自动对网页中不符合规范的内容进行修正：</span><br><span class="line">比如：</span><br><span class="line">- 标签写在根元素外部</span><br><span class="line">- p元素中嵌套了元素</span><br><span class="line">- 根元素中除head和body以外的子元素</span><br><span class="line">- ....</span><br></pre></td></tr></table></figure><h2 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">结构语义化标签：</span><br><span class="line">- header -&gt; 网页的头部</span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">- main -&gt; 网页的主体部分（一个网页中只会有一个main）</span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">- footer -&gt; 网页的底部</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">- nav -&gt; 网页中的导航</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">- aside -&gt; 主体相关的其他内容（侧边栏）</span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">- article -&gt; 表示独立的文章</span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">- section -&gt; 表示一个独立的区块，上面的标签不能表示时使用section</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">- div -&gt; 没有语义，就用来表示一个区块，目前div是主要的布局元素</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">- span -&gt; 行内元素，没有任何语义，一般用于在网页中选中文字</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">有序列表、无序列表、定义列表：</span><br><span class="line">- 使用li表示列表项</span><br><span class="line">无序列表:使用ul标签创建无序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>结构<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>表现<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>行为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">有序列表：使用ol创建有序列表</span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>结构<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>表现<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>行为<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">定义列表：使用dl标签创建一个定义列表，</span><br><span class="line">使用dt来表示定义内容，</span><br><span class="line">使用dd对内容进行解释说明</span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>结构<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>结构表示网页的结构，结构用来规定网页中那里是标题，那里是段落<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">注：</span><br><span class="line">- 列表之间可以相互嵌套</span><br></pre></td></tr></table></figure><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">超链接可以让我们从一个页面跳转到到其他页面，后者是当前页面的其他位置。</span><br><span class="line">- 使用 a 标签来定义超链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span> = <span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  </span><br><span class="line">· https://www.baiud.com -&gt; 代表绝对路径</span><br><span class="line">- 超链接是行内元素 在 a 标签中可以嵌套任何的元素 除了它自身外的任何元素</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;01.目标.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">href属性：</span><br><span class="line">- 指定跳转目标路径</span><br><span class="line">- 值可以是一个外部网站地址</span><br><span class="line">- 也可以写内部页面地址</span><br><span class="line">target属性：</span><br><span class="line">- 用来指定超链接打开的位置</span><br><span class="line">- 可选值：</span><br><span class="line">· _self 默认值在当前页面打开超链接</span><br><span class="line">· _blank 在一个新的页面中打开超链接</span><br><span class="line">相对路径： </span><br><span class="line">- 都会使用./或../开头 ./可以省略不写 ./ ../相当于写了./</span><br><span class="line">- ./ 表示当前所在文件所在的目录</span><br><span class="line">- ./ 就等于01.相对路径.html 所在目录 path</span><br><span class="line">- ../ 当前文件所在目录的上一级目录</span><br><span class="line">- ./inner/target.html</span><br><span class="line">- ../outer/target.html</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>超链接href属性设置为#，这样点击超链接后页面不会发生跳转，而是转到当前页面顶部的位置。</span><br><span class="line">锚点：</span><br><span class="line">id属性：</span><br><span class="line">- 唯一不重复</span><br><span class="line">- 每一个标签都可以添加一个id属性</span><br><span class="line">- id属性就是元素的唯一标识，同一个页面中不能出现重复的id属性</span><br><span class="line">- id的值区分大小写 字母开头</span><br><span class="line">- 可以跳转到页面指定位置 将href属性设置 #目标元素id属性值标</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#bottom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">没有任何功能的超链接：</span><br><span class="line">- javascript:是表示在触发<span class="tag">&lt;<span class="name">a</span>&gt;</span>默认动作时，执行一段JavaScript代码，而 javascript:; 表示什么都不执行，这样点击<span class="tag">&lt;<span class="name">a</span>&gt;</span>时就没有任何反应。</span><br><span class="line">- href=&quot;javascript:;&quot;就是去掉a标签的默认行为，跟href=&quot;javascript:void(0)&quot;一样。</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>啥也不做<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">图片标签用于向当前页面中引入一张图片：</span><br><span class="line">- img标签是一个自结束标签</span><br><span class="line">- img元素属于替换元素（基于块和行内元素之间,具有两种元素的特点）</span><br><span class="line">属性：</span><br><span class="line">- src 指定外部图片路径 路径规则和超链接相同</span><br><span class="line">相对路径</span><br><span class="line">绝对路径</span><br><span class="line">- alt 图片描述，默认情况下不会显示，浏览器会在图片无法加载时显示</span><br><span class="line">搜索引擎会根据alt中的内容来识别图片,如果不写则图片不会被搜索引擎所识别</span><br><span class="line">- with   图片宽度 (单位是像素)</span><br><span class="line">- height 图片高度 (单位是像素)</span><br><span class="line">· 如果只修改一个，另一个会进行等比例缩放。</span><br><span class="line">· 注意：一般情况下pc端，不建议修改图片的大小，要多大裁多大。</span><br><span class="line">移动端，经常需要对图片进行缩放。（经常会大图缩小）</span><br><span class="line">- title 鼠标进入图片区出现黄框进行文字提示</span><br><span class="line">图片格式（常）：</span><br><span class="line">- jpeg(jpg) </span><br><span class="line">· 颜色丰富，不支持透明效果，不支持动图</span><br><span class="line">· 一般用来显示照片</span><br><span class="line">- gif</span><br><span class="line">· 颜色较少，支持简单透明，支持动图</span><br><span class="line">· 适合颜色单一图片，动图</span><br><span class="line">- png</span><br><span class="line">· 颜色丰富，支持复杂透明，不支持动图</span><br><span class="line">· 颜色丰富，复杂透明图片（专为网页而生）</span><br><span class="line">- webp</span><br><span class="line">· 谷歌新推出用来显示网页中图片的一种格式</span><br><span class="line">· 具备其他图片格式的所有优点，而且文件还特别小</span><br><span class="line">· 缺点：兼容性不好</span><br><span class="line">- base64</span><br><span class="line">· 将图片使用base64进行编码，这样可以将图片转换为字符，通过字符形式来引入图片</span><br><span class="line">· 一般都是一些需要和网页一起加载的图片才会使用base64</span><br><span class="line">效果一样，用小的</span><br><span class="line">效果不一样，用效果好的</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/1.jpg&quot;</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;data:image/jpeg:base64xxxxxxxxx&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="HTML网站历史"><a href="#HTML网站历史" class="headerlink" title="HTML网站历史"></a>HTML网站历史</h2><table><thead><tr><th>HTML5：HTML4.01升级版，大前端技术，泛指前端的所有技术</th></tr></thead><tbody><tr><td>HTML4.01在99年12发布XHTML1.0在2000年1月发布，语法更严谨</td></tr></tbody></table><span id="more"></span><h2 id="Lang属性"><a href="#Lang属性" class="headerlink" title="Lang属性"></a>Lang属性</h2><p><strong>lang = cn（英文） 或者 是zh-CN代表中文</strong></p><p>那么究竟html标签中的<strong>lang属性是干嘛的呢</strong>？为什么要指定它的值是”en”或者”zh-CN”呢？个人见解如下：</p><p>1.属性lang是英语language的缩写，意思是语言，”en”代表英语，”zh-CN”代表中文</p><p>2.在我自己的尝试下，发现，其实不写lang属性，整个HTML文档的显示是没有任何问题的</p><p>3.我们都知道，如果你在中国，本地浏览器的默认语言是中文，当我们打开一个外国网站时，浏览器会提示”是否将网页内容翻译成中文”</p><hr><h4 id="web与Internet"><a href="#web与Internet" class="headerlink" title="web与Internet"></a>web与Internet</h4><table><thead><tr><th>web与Internet</th><th></th></tr></thead><tbody><tr><td>Internet：</td><td>全球性计算机互联网络</td></tr><tr><td></td><td>俗称：互联网，因特网，交换网，交际网</td></tr><tr><td></td><td>www服务：world wide web（万维网），访问网站的服务</td></tr><tr><td>BBS：</td><td>电子公告版，俗称论坛</td></tr><tr><td>Email:</td><td>电子邮件</td></tr><tr><td>telnet:</td><td>远程登录</td></tr><tr><td>FTP:</td><td>文件的上传下载</td></tr></tbody></table><h4 id="internet上的应用程序"><a href="#internet上的应用程序" class="headerlink" title="internet上的应用程序"></a>internet上的应用程序</h4><table><thead><tr><th>C/S client 客户端/ server 服务器<br />B/S Browser 浏览器 / server 服务器</th></tr></thead><tbody><tr><td>C/S和B/S的区别C/S需要升级  <br />B/S不需要升级我们工作主要是B/S</td></tr></tbody></table><h4 id="web运行原理"><a href="#web运行原理" class="headerlink" title="web运行原理"></a>web运行原理</h4><p><a href="https://imgchr.com/i/Afjw8A"><img src="https://s2.ax1x.com/2019/04/07/Afjw8A.jpg" alt="Afjw8A.jpg"></a></p><table><thead><tr><th>web:运行在internet上一种B/S结构的应用程序，俗称网站Internet：为web提供网络环境web的工作原理：基于浏览器和服务器继续通信协议来实现数据的传输和展示</th></tr></thead><tbody><tr><td>通信协议：规范了数据和打包和传送的</td></tr><tr><td>服务器：1.功能  存储数据，接收用户的请求并给出响应、  提供了程序的运行环境  具备一定的安全功能2.服务器产品  tomcat(java)  Apache(php)  IIS(.net)3.服务器端的技术 PHP/JAVA/.NET/python/nodejs</td></tr><tr><td>浏览器1.功能  代表用户发送请求  作为HTML、css和js解析器  以图形化的解码展示给用户2.浏览器产品  Chrome  FireFox  IE–edge  Oprea  Safari     3.浏览器支持的技术  H5,CSS,JS</td></tr></tbody></table><h2 id="HTML基础入门"><a href="#HTML基础入门" class="headerlink" title="HTML基础入门"></a>HTML基础入门</h2><h4 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">HTML:HyperText Markup Language 超文本标记语言</span><br><span class="line">a 普通文本</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>超文本标记</span><br><span class="line">标记：超文本的组成形式 &lt;关键字&gt;</span><br><span class="line">具有自己的功能</span><br><span class="line">语言：有语法结构</span><br></pre></td></tr></table></figure><h4 id="HTML的特点"><a href="#HTML的特点" class="headerlink" title="HTML的特点"></a>HTML的特点</h4><ol><li>以.html或.htm为后缀</li><li>由浏览解析执行</li><li>用带有尖括号的”标记”来标识</li><li>可以在网页中执行js脚本</li></ol><h2 id="HTML的基础语法"><a href="#HTML的基础语法" class="headerlink" title="HTML的基础语法"></a>HTML的基础语法</h2><ol><li>标记，标签，元素，节点，对象</li><li>主要是表示特殊的功能</li><li>标记在使用的时候，必须使用&lt;&gt;包裹起来</li></ol><h4 id="标签的分类"><a href="#标签的分类" class="headerlink" title="标签的分类"></a>标签的分类</h4><ol><li>双标记(封闭类型)</li></ol><p>​         &lt;关键字&gt;&lt;/关键字&gt;</p><pre><code> 双标记必须成对出现，有开始就有结束  &lt;p&gt;&lt;/p&gt;</code></pre><ol start="2"><li><p>单标记(非封闭类型)</p><pre><code>   &lt;关键字&gt;或者&lt;关键字/&gt;</code></pre></li></ol><h4 id="标签的嵌套"><a href="#标签的嵌套" class="headerlink" title="标签的嵌套"></a>标签的嵌套</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.什么是嵌套</span><br><span class="line">一对标记中出现另一个(对)标记，形成了层级。</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">2.语法</span><br><span class="line">&lt;关键字1&gt;</span><br><span class="line">  &lt;关键字2&gt;</span><br><span class="line">    &lt;关键字3&gt;&lt;/关键字3&gt;</span><br><span class="line">  &lt;/关键字2&gt;</span><br><span class="line">&lt;/关键字1&gt;</span><br></pre></td></tr></table></figure><h4 id="属性和值"><a href="#属性和值" class="headerlink" title="属性和值"></a>属性和值</h4><p>允许通过<strong>属性</strong>和<strong>值</strong>对标记进行<strong>修饰</strong></p><p>语法：</p><ul><li>属性和值必须声明在开始标记中<ul><li>&lt;关键字 属性=”值”&gt;&lt;/关键字&gt;</li></ul></li><li>多个属性之间用空格分开<ul><li>&lt;关键字 属性1=”值1”  属性2=”值2”  …&gt;&lt;/关键字&gt;</li></ul></li><li>标准属性(通用属性)<ul><li>所有的元素都支持的属性</li><li>id 定义此元素在页面中的唯一标识</li><li>title 鼠标悬停在元素上时，显示的文本</li><li>style css中，定义行内样式</li><li>class css 中，引用类选择器</li></ul></li></ul><h4 id="注释-1"><a href="#注释-1" class="headerlink" title="注释"></a>注释</h4><p>​    语法：<code>&lt;!--注释内容--&gt;</code></p><p>​    注意：注释不能嵌套注释，注释也不能出现在标记中</p><h2 id="HTML的文档结构"><a href="#HTML的文档结构" class="headerlink" title="HTML的文档结构"></a>HTML的文档结构</h2><h4 id="文档类型的声明"><a href="#文档类型的声明" class="headerlink" title="文档类型的声明"></a>文档类型的声明</h4><p>&lt; !DOCTYPE html&gt;告诉浏览器，我这篇html使用h5的规则解析</p><h4 id="网页的结构"><a href="#网页的结构" class="headerlink" title="网页的结构"></a>网页的结构</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span><span class="tag">&lt;/<span class="name">html</span>&gt;</span>表示网页的开头和结束</span><br><span class="line">在html中包含两个标签</span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span> 网页的头部，定义全局的信息</span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span> 网页的主题，展示的内容</span><br></pre></td></tr></table></figure><h4 id="head元素是其他头元素的容器"><a href="#head元素是其他头元素的容器" class="headerlink" title="head元素是其他头元素的容器"></a>head元素是其他头元素的容器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span>  网页的标题</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span>/&gt;</span> 元数据，定义网页的全局信息</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">chrome 62以上的版本，自动识别中文</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;关键词的内容&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;描述的内容&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml">定义网页的内部样式</span></span></span><br><span class="line"><span class="language-xml"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>定义或者引用js文件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-xml"><span class="tag">&lt;<span class="name">link</span>/&gt;</span> 引用外部样式文件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=deivce-width,user-scalable=no,initial-scale=1.0,maximum-scale-1.0,minimum-scale=1.0&quot;</span>&gt;</span>移动端视口</span></span></span><br></pre></td></tr></table></figure><h4 id="body元素"><a href="#body元素" class="headerlink" title="body元素"></a>body元素</h4><ol><li>定义网页的主体</li><li>body的属性</li><li>bgcolor 背景颜色</li><li>text   字体颜色</li><li>取值：颜色的应为单词</li></ol><h4 id="head元素"><a href="#head元素" class="headerlink" title="head元素"></a>head元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>标签，包含HTML文档元信息，定义文档头部，描述文档的属性和信息，是所有文档头部元素的容器。</span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">包括：<span class="tag">&lt;<span class="name">title</span>&gt;</span>、<span class="tag">&lt;<span class="name">base</span>&gt;</span>、<span class="tag">&lt;<span class="name">link</span>&gt;</span>、<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">、<span class="tag">&lt;<span class="name">style</span>&gt;</span>等。</span></span></span><br></pre></td></tr></table></figure><h5 id="lt-title-gt-标签，定义文档的标题，这个标题会显示在浏览器的标题栏或状态栏中。"><a href="#lt-title-gt-标签，定义文档的标题，这个标题会显示在浏览器的标题栏或状态栏中。" class="headerlink" title="&lt; title&gt;标签，定义文档的标题，这个标题会显示在浏览器的标题栏或状态栏中。"></a>&lt; title&gt;标签，定义文档的标题，这个标题会显示在浏览器的标题栏或状态栏中。</h5><h5 id="lt-base-gt-标签单标签，规定网页上所有链接的默认地址或目标。它有两个属性："><a href="#lt-base-gt-标签单标签，规定网页上所有链接的默认地址或目标。它有两个属性：" class="headerlink" title="&lt; base&gt;标签单标签，规定网页上所有链接的默认地址或目标。它有两个属性："></a>&lt; base&gt;标签单标签，规定网页上所有链接的默认地址或目标。它有两个属性：</h5><ul><li>href：必选属性，规定页面所有相对链接的基准URL。</li><li>target：可选属性，规定在何处打开页面中所有的链接。</li></ul><p>以下语句设置网页上所有链接的默认地址为搜狐网站，且在新窗口中打开：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;http://www.sohu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="lt-meta-gt-标签，单标签，规定有关页面的元信息。常用属性包括："><a href="#lt-meta-gt-标签，单标签，规定有关页面的元信息。常用属性包括：" class="headerlink" title="&lt; meta&gt;标签，单标签，规定有关页面的元信息。常用属性包括："></a>&lt; meta&gt;标签，单标签，规定有关页面的元信息。常用属性包括：</h5><ul><li>content：必选属性，定义与http-equiv 或 name 属性相关的元信息。</li><li>http-equiv：可选属性，用于将content 属性关联到 HTTP 头部。</li><li>name：可选属性，用于将content属性关联到一个名称。</li></ul><p>以下语句定义文档的字符编码为utf-8：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以下语句定义文档的作者为miao：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">“author”</span> <span class="attr">content</span>=<span class="string">&quot;miao&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以下语句定义文档的关键字为HTML、CSS、JavaScript：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML,CSS,JavaScript&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下语句定义每隔5秒刷新一次页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5&quot;</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="lt-link-gt-标签，它是一个链接标签，提供对外部CSS文件以及favicon、icon图标引用等。"><a href="#lt-link-gt-标签，它是一个链接标签，提供对外部CSS文件以及favicon、icon图标引用等。" class="headerlink" title="&lt; link&gt;标签，它是一个链接标签，提供对外部CSS文件以及favicon、icon图标引用等。"></a>&lt; link&gt;标签，它是一个链接标签，提供对外部CSS文件以及favicon、icon图标引用等。</h5><h5 id="lt-script-gt-标签，用于引入外部js文件包含JavaScript脚本。"><a href="#lt-script-gt-标签，用于引入外部js文件包含JavaScript脚本。" class="headerlink" title="&lt; script&gt;标签，用于引入外部js文件包含JavaScript脚本。"></a>&lt; script&gt;标签，用于引入外部js文件包含JavaScript脚本。</h5><h5 id="lt-style-gt-标签，用于网页CSS样式"><a href="#lt-style-gt-标签，用于网页CSS样式" class="headerlink" title="&lt; style&gt;标签，用于网页CSS样式"></a>&lt; style&gt;标签，用于网页CSS样式</h5><p><strong>网页标题前面的小图标一般是网页的logo</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;shortcut icon&quot; href=&quot;img地址&quot;&gt;</span><br></pre></td></tr></table></figure><p>那么究竟html标签中的<strong>lang属性是干嘛的呢</strong>？为什么要指定它的值是”en”或者”zh-CN”呢？个人见解如下：</p><p>1.属性lang是英语language的缩写，意思是语言，”en”代表英语，”zh-CN”代表中文</p><p>2.在我自己的尝试下，发现，其实不写lang属性，整个HTML文档的显示是没有任何问题的</p><p>3.我们都知道，如果你在中国，本地浏览器的默认语言是中文，当我们打开一个外国网站时，浏览器会提示”是否将网页内容翻译成中文”</p><h2 id="文本标记"><a href="#文本标记" class="headerlink" title="文本标记"></a>文本标记</h2><h4 id="标题元素"><a href="#标题元素" class="headerlink" title="标题元素"></a>标题元素</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">作用：在页面中以醒目的方式显示文本</span><br><span class="line">语法 <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>一级标题  <span class="tag">&lt;<span class="name">hn</span>&gt;</span><span class="tag">&lt;/<span class="name">hn</span>&gt;</span> n:1~6</span><br><span class="line">      ...</span><br><span class="line">     <span class="tag">&lt;<span class="name">h6</span>&gt;</span><span class="tag">&lt;/<span class="name">h6</span>&gt;</span>六级标题</span><br><span class="line">特点：</span><br><span class="line">1.文本加粗</span><br><span class="line">2.字号发生变化</span><br><span class="line">3.独占一行，上下有垂直间距</span><br><span class="line">属性align 设置标签内容水平方向对齐方式</span><br><span class="line">取值：left/center/right </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="段落标记paragraph"><a href="#段落标记paragraph" class="headerlink" title="段落标记paragraph"></a>段落标记paragraph</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">作用：突出的表示一段文字</span><br><span class="line">特点：独立成行，上下有垂直的间距</span><br><span class="line">属性：align</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="换行标记"><a href="#换行标记" class="headerlink" title="换行标记"></a>换行标记</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span>或者<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="水平线"><a href="#水平线" class="headerlink" title="水平线"></a>水平线</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span>或者<span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">width=&quot;50%&quot; 表示水平线的宽度，取值为%或者px为单位的数字</span><br><span class="line">size=&quot;5px&quot; 表示水平线的尺寸(粗细)，取值为%或者px为单位的数字</span><br><span class="line">align=&quot;left&quot; 对齐方式</span><br><span class="line">color=&quot;red&quot; 设置水平线的颜色</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="预格式化标签"><a href="#预格式化标签" class="headerlink" title="预格式化标签"></a>预格式化标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">标签内部的文本，保留其格式，在页面上显示</span><br><span class="line">空格折叠现象，一个或多个空格，会被浏览器渲染成一个空格显示</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="特殊字符-实体"><a href="#特殊字符-实体" class="headerlink" title="特殊字符(实体)"></a>特殊字符(实体)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">空格   &amp;nbsp；</span><br><span class="line">&lt;     &amp;lt;   </span><br><span class="line">&gt;     &amp;gt; </span><br><span class="line">©    &amp;copy；   </span><br><span class="line">®    &amp;reg;</span><br><span class="line">￥    &amp;yen;</span><br><span class="line">x     &amp;times;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">粗体   <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>   <span class="tag">&lt;<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">斜体   <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>     <span class="tag">&lt;<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">下划线 <span class="tag">&lt;<span class="name">u</span>&gt;</span><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span><br><span class="line">删除线 <span class="tag">&lt;<span class="name">s</span>&gt;</span><span class="tag">&lt;/<span class="name">s</span>&gt;</span>    <span class="tag">&lt;<span class="name">del</span>&gt;</span> <span class="tag">&lt;/<span class="name">del</span>&gt;</span> 语意</span><br><span class="line">上标  <span class="tag">&lt;<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br><span class="line">下标  <span class="tag">&lt;<span class="name">sub</span>&gt;</span><span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.块分区，用于页面中布局</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">独立成行</span><br><span class="line">2.行分区，处理同一行文本的不同样式</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">可以与其它的span和文字共用一行</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="行级元素和块级元素（元素的显示形式）"><a href="#行级元素和块级元素（元素的显示形式）" class="headerlink" title="行级元素和块级元素（元素的显示形式）"></a>行级元素和块级元素（元素的显示形式）</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.块级元素</span><br><span class="line">在网页中，单独成行，就是块级元素</span><br><span class="line">从上往下排列</span><br><span class="line">常见块级元素：</span><br><span class="line">    h1~h6</span><br><span class="line">    p</span><br><span class="line">    div</span><br><span class="line">2.行内元素(行级元素)</span><br><span class="line">在页面中，与其他行内元素/行内块共用一行</span><br><span class="line">从左往右排列</span><br><span class="line">页面中常见行内元素：</span><br><span class="line">i em b strong u sup sub span</span><br><span class="line">3.行内块元素</span><br><span class="line">显示的方式与行内元素相同，但是具备块级元素的特征</span><br><span class="line">4.table</span><br><span class="line">表格的宽高是由表格的内容决定的</span><br><span class="line">内容多，就宽一些，高一些，</span><br><span class="line">表格中所的数据都预读到内存，一次性画到页面上</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="图像和超链接"><a href="#图像和超链接" class="headerlink" title="图像和超链接"></a>图像和超链接</h2><h4 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">1、使用</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span>&gt;</span>或者<span class="tag">&lt;<span class="name">img</span>/&gt;</span></span><br><span class="line">属性</span><br><span class="line">src=&quot;url&quot;  url--图片资源路径</span><br><span class="line">2、URL</span><br><span class="line">Uniform Resource Locator 统一资源定位符  简称：路径</span><br><span class="line">3、URL路径的表现形式：</span><br><span class="line">1.绝对路径，一个写完整的路径</span><br><span class="line">通信协议+主机地址+文件目录结构+文件的具体名称</span><br><span class="line">合适使用：</span><br><span class="line">             1.1使用网络资源的时候，使用绝对路径</span><br><span class="line">               优点：不占据自己服务器的存储空间</span><br><span class="line">               缺点：不稳定</span><br><span class="line">             1.2使用本地资源，使用绝对路径(项目中100%用不到)</span><br><span class="line">               从最高盘符开始查找 C/D/E/F/G</span><br><span class="line">               项目中不用</span><br><span class="line"> 2.相对路径（参照物是html本身）</span><br><span class="line"> 2.1在同一个目录下（兄弟关系）,直接引用</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/01.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">2.2子集目录，文件在兄弟文件夹的内部，先找兄弟，再找兄弟的孩子</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/02.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">2.3父级目录，文件是父级的兄弟，先找父亲（../），再找父亲的兄弟</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../03.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    图片与html文件在同一个目录下，src直接引用图片名称</span><br><span class="line">      src=&quot;3.jpg&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h5 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.tmooc.cn/&quot;</span>&gt;</span>Tmooc<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">属性：</span><br><span class="line">    href:链接的路径</span><br><span class="line">    target:指定打开链接的方式</span><br><span class="line">    取值：_self默认值，在当前页面标签页中打开新链接</span><br><span class="line">    _blank 在新的标签页打开链接</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-其他的表现形式"><a href="#2-其他的表现形式" class="headerlink" title="2.其他的表现形式"></a>2.其他的表现形式</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--a标记的其他表现形式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;1.zip&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 新建邮件，前提：本机必须有邮件软件的客户端 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;mailto:1148567490@qq.com&quot;</span>&gt;</span>新建邮件<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 执行js脚本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(1111111)&quot;</span>&gt;</span>执行js<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--返回当前页面的顶部--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-锚点"><a href="#3-锚点" class="headerlink" title="3.锚点"></a>3.锚点</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">锚点就是网页中的一个记号</span><br><span class="line">3.1定义锚点</span><br><span class="line">（1）使用a标签name属性定义锚点</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;锚点名称&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">any</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span>  <span class="tag">&lt;/<span class="name">any</span>&gt;</span></span><br><span class="line">3.2链接到锚点</span><br><span class="line">（1）使用a标签链接锚点，#锚点名称</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#锚点名称&quot;</span>&gt;</span>回到锚点<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#id&quot;</span>&gt;</span>回到锚点<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h4 id="表格语法"><a href="#表格语法" class="headerlink" title="表格语法"></a>表格语法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">table标签的属性：</span><br><span class="line">border：设置边框</span><br><span class="line">width:设置表格的宽</span><br><span class="line">height:设置表格的高</span><br><span class="line">内容小于宽高的，按宽高尺寸</span><br><span class="line">内容大于宽高，按内容改变尺寸</span><br><span class="line">align：设置表格的对齐方式 （table自己的水平）</span><br><span class="line">取值：left/center/right</span><br><span class="line">bgcolor:背景颜色</span><br><span class="line">cellpadding:设置单元格内边距（边框到内容的距离）</span><br><span class="line">cellspacing：设置单元格外边距(边框与边框之间的距离)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="tr属性"><a href="#tr属性" class="headerlink" title="tr属性"></a>tr属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">align设置当前行的内容水平对齐方式（设置表格内容的对齐方式）</span><br><span class="line">valign设置当前行内容的垂直对齐方式</span><br><span class="line">取值：top/middle/bottom</span><br><span class="line">bgcolor当前行的背景颜色</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="td属性"><a href="#td属性" class="headerlink" title="td属性"></a>td属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">width宽度</span><br><span class="line">height高度</span><br><span class="line">align水平对齐方式</span><br><span class="line">valign垂直对齐方式</span><br><span class="line">bgcolor背景颜色</span><br><span class="line">colspan列合并</span><br><span class="line">rowspan行合并</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="不规则的表格运用"><a href="#不规则的表格运用" class="headerlink" title="不规则的表格运用"></a>不规则的表格运用</h4><h5 id="跨列"><a href="#跨列" class="headerlink" title="跨列"></a>跨列</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">colspan=?</span><br><span class="line">从指定的单元格位置开始，横向向右合并两个单元格（包含自己）</span><br><span class="line">被合并掉的单元格，要删除</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="跨行"><a href="#跨行" class="headerlink" title="跨行"></a>跨行</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rowspan=?</span><br><span class="line">从指定的单元格位置处开始，纵向向下合并？个单元格（包括自己）</span><br><span class="line">被合并掉的单元格，要删除</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="table中的可选标记"><a href="#table中的可选标记" class="headerlink" title="table中的可选标记"></a>table中的可选标记</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.表格的标题</span><br><span class="line"><span class="tag">&lt;<span class="name">caption</span>&gt;</span><span class="tag">&lt;/<span class="name">caption</span>&gt;</span></span><br><span class="line">如果设置标题，必须将<span class="tag">&lt;<span class="name">caption</span>&gt;</span>放在<span class="tag">&lt;<span class="name">table</span>&gt;</span>之后</span><br><span class="line">2.行/列的标题</span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span> 代替<span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">加粗，居中</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="表格的复杂应用"><a href="#表格的复杂应用" class="headerlink" title="表格的复杂应用"></a>表格的复杂应用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.行分组</span><br><span class="line">    可以将连续几个行，划分到一个组中，进行统一管理</span><br><span class="line">    表头行<span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="tag">&lt;/<span class="name">thead</span>&gt;</span> 表格最上面一行的标题放在thead中</span><br><span class="line">    表主体<span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span>允许将若干行放在tbody中进行统一管理</span><br><span class="line">    表尾<span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span>表格中最后一行放在tfoot中</span><br><span class="line">2.表格的嵌套</span><br><span class="line">一张表格中，所有的嵌套的表格，只能放在td中</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h2><ul><li>默认按照从上到下的顺序来显示数据，并且可以在数据前添加标识</li><li>使用列表布局（去掉标识，从上到下，从左到右排列）</li></ul><h4 id="列表的组成"><a href="#列表的组成" class="headerlink" title="列表的组成"></a>列表的组成</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.有序列表<span class="tag">&lt;<span class="name">ol</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span>  order list</span><br><span class="line">2.无序列表<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  unorder list</span><br><span class="line">列表项   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>  list item</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="列表属性"><a href="#列表属性" class="headerlink" title="列表属性"></a>列表属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1.有序列表的属性 ol</span><br><span class="line">    type 设置标识符的类型</span><br><span class="line">    取值：1默认值，数字</span><br><span class="line">    a  A  字母为标识</span><br><span class="line">    i   I 罗马数字</span><br><span class="line">    start 指定起始编号</span><br><span class="line">    取值：无单位数字</span><br><span class="line">2.无序列表的属性 ul</span><br><span class="line">    type：设置标识</span><br><span class="line">    取值：disc 默认值实心圆</span><br><span class="line">    square方块</span><br><span class="line">    circle空心圆</span><br><span class="line">    none无</span><br><span class="line">3.列表的嵌套</span><br><span class="line">所有的嵌套必须只能写在li中</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="列表作用"><a href="#列表作用" class="headerlink" title="列表作用"></a>列表作用</h4><p>​    做名词解释用常用于图文混排</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>需要被解释说明的名词<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dd</span>&gt;</span>对名词的解释内容<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="结构标记"><a href="#结构标记" class="headerlink" title="结构标记"></a>结构标记</h2><h4 id="结构标签的作用【注：h5新增】"><a href="#结构标签的作用【注：h5新增】" class="headerlink" title="结构标签的作用【注：h5新增】"></a>结构标签的作用【注：h5新增】</h4><p>​    用于代替了div，用于描述整个网页的结构，提升标记的语义</p><h4 id="常用的结构标记"><a href="#常用的结构标记" class="headerlink" title="常用的结构标记"></a>常用的结构标记</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">定义网页或者某个区域的头部内容</span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">定义网页的导航链接部分</span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">定义网页的主体</span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">定义网页的侧边栏</span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">定义网页底部内容，多用于版权，解释说明，备案号</span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">定义与文字相关的内容</span><br><span class="line">论坛，帖子，微博条目，用户评论</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><ul><li>提供可视化的输入控件</li></ul><p>收集用户填写的信息并提交给服务器</p><h4 id="表单的组成部分"><a href="#表单的组成部分" class="headerlink" title="表单的组成部分"></a>表单的组成部分</h4><ul><li>前端部分<ul><li>提供表单的控件，与用户做交互的可视化控件</li></ul></li><li>后端部分<br>​        对提交的数据进行处理（接口）</li></ul><h4 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">属性：</span><br><span class="line">1.action</span><br><span class="line">        定义表单被提交时发送的动作</span><br><span class="line">        通常是定义服务器处理数据的地址，接口（url）</span><br><span class="line">        默认，提交给本页地址</span><br><span class="line">2.method</span><br><span class="line">        指定表单数据提交的方式（方法）</span><br><span class="line">        1.get（默认值）</span><br><span class="line">        明文提交，提交时内容会显示在浏览器地址栏上。</span><br><span class="line">        提交的数据有大小限制，2kb</span><br><span class="line">        向服务器要数据的时候使用get</span><br><span class="line">        2.post</span><br><span class="line">        提交数据无大小限制</span><br><span class="line">        隐式提交，提交的数据不会显示在地址栏中</span><br><span class="line">        把数据传递给服务器的时候，使用post</span><br><span class="line">        3.delete</span><br><span class="line"></span><br><span class="line">        4.put——往服务器放一些东西</span><br><span class="line"></span><br><span class="line">        5.point</span><br><span class="line">3.enctype 编码方式</span><br><span class="line">        设置表单允许将什么样得数据提交给服务器</span><br><span class="line">        1.提交普通字符，不能有特殊符号</span><br><span class="line">        enctype=&quot;text/plain&quot;</span><br><span class="line">        2.允许将任意字符提交给服务器</span><br><span class="line">        enctype=&quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">        3.允许将文件提交给服务器</span><br><span class="line">        multipart/form-data</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h4><p>​    <code>能够与用户进行交互的可视化元素</code></p><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input 元素</span><br><span class="line">textarea 多行文本域</span><br><span class="line">下拉选择框</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="input元素"><a href="#input元素" class="headerlink" title="input元素"></a>input元素</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">在页面中提供各种各样的输入控件，通过type属性来设置输入控件的类型</span><br><span class="line">type 设置输入控件的类型</span><br><span class="line">name 为控件定义名称，提供给服务端使用（必须值）</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span>&gt;</span>或<span class="tag">&lt;<span class="name">input</span> /&gt;</span></span><br><span class="line">value  控件的值，提交给服务端使用</span><br><span class="line">disabled  禁用控件，不能操作也不能提交，所有input的公有属性</span><br><span class="line">无值属性</span><br><span class="line">type取值：</span><br><span class="line">    1.文本框和密码框</span><br><span class="line">        type=&quot;text&quot;默认值</span><br><span class="line">        type=&quot;password&quot;密码</span><br><span class="line">        属性</span><br><span class="line">        1.1maxlength 限制输入的最大字符数</span><br><span class="line">        1.2readonly 只读，只能看不能写，但允许被提交（无值属性）</span><br><span class="line">        1.3placeholder 占位符，默认显示在控件上的文本，只要得到焦点，文本就消失了，此文本不能提交</span><br><span class="line">    2.按钮</span><br><span class="line">        type=&quot;submit&quot;   提交按钮</span><br><span class="line">        将表单中的数据，提交给服务器</span><br><span class="line">        type=&quot;reset&quot;   重置按钮</span><br><span class="line">        让表单内容恢复到初始化状态</span><br><span class="line">        type=&quot;button&quot;   无功能按钮，可以调用js脚本</span><br><span class="line">        button 自带submit和button</span><br><span class="line">    3.单元按钮和复选按钮</span><br><span class="line">        单元按钮</span><br><span class="line">        type=&quot;radio&quot;</span><br><span class="line">        name属性：除了定义控件名称，还起到分组的效果。</span><br><span class="line">        必须有value，不然提交的值是on</span><br><span class="line">        checked:设置默认选中项，无值属性</span><br><span class="line">        多选按钮</span><br><span class="line">        type=&quot;CheckBox&quot;</span><br><span class="line">        name属性：除了定义控件名称，还起到分组的效果</span><br><span class="line">        必须有value，不然提交的值是on</span><br><span class="line">        checked：设置默认选中项，无值属性</span><br><span class="line">        CheckBox的name要写成数组hobby[]</span><br><span class="line">4.隐藏域</span><br><span class="line">    type=&quot;hidden&quot;</span><br><span class="line">        想提交给服务器，但是不想展示给用户看的数据，使用隐藏域</span><br><span class="line">    5.文件选择框</span><br><span class="line">        type=&quot;file&quot;</span><br><span class="line">        注意：</span><br><span class="line">            上传多个在 name里添加数组[]</span><br><span class="line">            method=&quot;post&quot;</span><br><span class="line">            enctype=&quot;multipart/form-data&quot;</span><br><span class="line">            multiple   无值属性，可以同时上传多个文件</span><br><span class="line">            需要name属性值为数组</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="textarea文本域"><a href="#textarea文本域" class="headerlink" title="textarea文本域"></a>textarea文本域</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">允许录入多行数据的文本框</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">name 控件的名称</span><br><span class="line">readonly 只读</span><br><span class="line">cols   指定文本域的列数，以英文单词为准,中文减半</span><br><span class="line">rows  指定文本域的行数</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="下拉选择框"><a href="#下拉选择框" class="headerlink" title="下拉选择框"></a>下拉选择框</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span>  表示一个下拉选</span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span>  表示下拉选中的一个选项</span><br><span class="line">    .....</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">注意：当option没有value属性时，提交的时候select的value为option的内容。当option有value，提交时，select的value为选选中option的value。</span><br><span class="line">select属性</span><br><span class="line">name，选项框的名称</span><br><span class="line">size  默认为1，定义显示选项的数量。</span><br><span class="line">如果值大于1的数字。下拉选表现为滚动列表</span><br><span class="line">multiple 无值属性，可以多选，但是name要用数组</span><br><span class="line">设置了multiple之后，就算size=&quot;1&quot; 也是滚动列表</span><br><span class="line">option属性</span><br><span class="line">value</span><br><span class="line">selected 设置默认选中项</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="其他元素"><a href="#其他元素" class="headerlink" title="其他元素"></a>其他元素</h5><h6 id="label"><a href="#label" class="headerlink" title="label"></a>label</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文本与表单控件的关联</span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">属性</span><br><span class="line">for:要与label中文字发生关联的form控件的id</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="为控件分组"><a href="#为控件分组" class="headerlink" title="为控件分组"></a>为控件分组</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span>  为控件分组</span><br><span class="line"><span class="tag">&lt;<span class="name">legend</span>&gt;</span><span class="tag">&lt;/<span class="name">legend</span>&gt;</span> 分组标题</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="浮动框架"><a href="#浮动框架" class="headerlink" title="浮动框架"></a>浮动框架</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">允许在一个网页中，引入另外一个网页</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">属性</span><br><span class="line">src=&quot;url&quot;</span><br><span class="line">width=&quot;100%&quot;</span><br><span class="line">height=&quot;&quot;高度存在问题，需要使用js.dom来解决</span><br><span class="line">scrolling=&quot;no&quot;不显示滚动条</span><br><span class="line">framesborder=&quot;0&quot;不显示边框</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="H5新表单元素"><a href="#H5新表单元素" class="headerlink" title="H5新表单元素"></a>H5新表单元素</h6><p>​    <code>什么是新表单元素</code><br>​    <code>在HTML5版本中新提出来表单控件</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">1.电子邮件</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span>&gt;</span></span><br><span class="line">    表单提交时，会验证数据是否符合email的规范(@以及@后面有内容)</span><br><span class="line">2.搜索类型</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">提供了快速清除文本框的功能</span><br><span class="line">3.url类型</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span><br><span class="line">提交时，验证数据是否符合url的规范，绝对路径的规范</span><br><span class="line">验证http://....以及后面必须有内容</span><br><span class="line">4.电话号码</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span>&gt;</span></span><br><span class="line">在移动设备中，显示拨号键的效果</span><br><span class="line">5.数字类型</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line">    只能接受数字，并且提供了箭头灵活的调整数字</span><br><span class="line">    value 指定数字</span><br><span class="line">    min 能接收提交的最小值</span><br><span class="line">    max 能接收提交的最大值</span><br><span class="line">    step 步数，每次点击箭头，变化的数量</span><br><span class="line">6.范围类型</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span>&gt;</span></span><br><span class="line">    提供一个滑块组件，允许用户指定选取的范围</span><br><span class="line">    属性</span><br><span class="line">    value 指定初始数字</span><br><span class="line">    min 范围最小值</span><br><span class="line">    max 范围最大值</span><br><span class="line">    step 步数</span><br><span class="line">7.颜色拾取器</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br><span class="line">提供一个颜色的拾取器</span><br><span class="line">8.日期类型</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line">提供了一个选择日期的控件，可以选择年/月/日</span><br><span class="line">9.月份类型</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;month&quot;</span>&gt;</span></span><br><span class="line">提供了一个选择月份的控件，可以选择年/月</span><br><span class="line">10.周类型</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;week&quot;</span>&gt;</span></span><br><span class="line">提供了一个选择周的控件，可以选择年/周</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="favicon网页标题图片设置"><a href="#favicon网页标题图片设置" class="headerlink" title="favicon网页标题图片设置"></a>favicon网页标题图片设置</h2><p><strong>实现效果：网页头部   百度一下，你就知道  前面的图标</strong></p><p><img src="C:\Users\Mc\AppData\Roaming\Typora\typora-user-images\1559705375367.png" alt="1559705375367"></p><p><strong>实现方法：</strong></p><p>首先图标必须是xxx.ico格式的图片，假定你的图标命名为为 <strong>favicon.ico</strong>  且和<strong>html</strong>页面在同一个根目录下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">实现代码为：</span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网页title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">type</span>=<span class="string">&quot;image/x-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;favicon.ico&quot;</span>/&gt;</span></span><br><span class="line">就像用link引入外部css样式一样，用lilnk引入图标：</span><br><span class="line">rel = &quot;icon&quot;      type = &quot;image/x-icon&quot;    href为图标的路径。</span><br><span class="line">实现的效果和百度的一样。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>常规尺寸：</strong></p><blockquote><p>常用的favicon.ico图标有3种16<em>16、32</em>32、48*48。</p></blockquote><h2 id="HTML文字标签简单补充"><a href="#HTML文字标签简单补充" class="headerlink" title="HTML文字标签简单补充"></a>HTML文字标签简单补充</h2><h3 id="文本格式化标签说明"><a href="#文本格式化标签说明" class="headerlink" title="文本格式化标签说明"></a>文本格式化标签说明</h3><ul><li>文本格式化标签用于设置文字的显示效果</li></ul><table><thead><tr><th align="center">序号</th><th align="center">标签</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">&lt;b&gt;</td><td align="center">定义粗体文本</td></tr><tr><td align="center">2</td><td align="center">&lt;em&gt;</td><td align="center">定义着重文字，文字呈现斜体显示</td></tr><tr><td align="center">3</td><td align="center">&lt;i&gt;</td><td align="center">定义斜体字</td></tr><tr><td align="center">4</td><td align="center">&lt;small&gt;</td><td align="center">定义小号字</td></tr><tr><td align="center">5</td><td align="center">&lt;strong&gt;</td><td align="center">定义加重语气，文字呈现粗体显示</td></tr><tr><td align="center">6</td><td align="center">&lt;sub&gt;</td><td align="center">定义下标字</td></tr><tr><td align="center">7</td><td align="center">&lt;sup&gt;</td><td align="center">定义上标字</td></tr><tr><td align="center">8</td><td align="center">&lt;ins&gt;</td><td align="center">定义插入字，文字下方加横线</td></tr><tr><td align="center">9</td><td align="center">&lt;del&gt;</td><td align="center">定义删除字，文字中间加横线</td></tr></tbody></table><h3 id="HTML”计算机输出”标签"><a href="#HTML”计算机输出”标签" class="headerlink" title="HTML”计算机输出”标签"></a>HTML”计算机输出”标签</h3><ul><li>“计算机输出”标签用于显示计算机/编程代码。”计算机输出”</li></ul><table><thead><tr><th align="center">序号</th><th align="center">标签</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">&lt;code&gt;</td><td align="center">定义计算机代码，文本呈等宽显示</td></tr><tr><td align="center">2</td><td align="center">&lt;&lt;amp&gt;</td><td align="center">定义计算机代码样本</td></tr><tr><td align="center">4</td><td align="center">&lt;var&gt;</td><td align="center">定义变量，文本呈斜体显示</td></tr><tr><td align="center">5</td><td align="center">&lt;pre&gt;</td><td align="center">定义预格式文本，文本字体等宽且保留换行和空格</td></tr></tbody></table><h3 id="HTML引文、引用及标签定义"><a href="#HTML引文、引用及标签定义" class="headerlink" title="HTML引文、引用及标签定义"></a>HTML引文、引用及标签定义</h3><ul><li>网页上经常出现一些引文、引用等文字信息，HTML提供了相关标签。</li></ul><table><thead><tr><th align="center">序号</th><th align="center">标签</th><th align="center">功能描述</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">&lt;abbr&gt;</td><td align="center">定义缩写，使用title属性设置缩写文字的全称。</td></tr><tr><td align="center">2</td><td align="center">&lt;address&gt;</td><td align="center">定义地址，文本呈斜体显示</td></tr><tr><td align="center">3</td><td align="center">&lt;bdo&gt;</td><td align="center">定义文字方向，ltr（文本从左到右）或trl（文本从右到左）</td></tr><tr><td align="center">4</td><td align="center">&lt;blockquote&gt;</td><td align="center">定义长的引用，浏览器会在blockquote元素的前后添加换行，并增加外边距，使用cite规定引用的来源</td></tr><tr><td align="center">5</td><td align="center">&lt;q&gt;</td><td align="center">定义短的引用语，浏览器会在引用内容周围添加引号</td></tr><tr><td align="center">6</td><td align="center">&lt;cite&gt;</td><td align="center">定义引用、引证</td></tr><tr><td align="center">7</td><td align="center">&lt;dfn&gt;</td><td align="center">定义一个定义项目，文本呈现斜体显示</td></tr></tbody></table><h2 id="无聊可以背背常用单词"><a href="#无聊可以背背常用单词" class="headerlink" title="无聊可以背背常用单词"></a>无聊可以背背常用单词</h2><div class="row">    <embed src="https://6d63-mc-dc4b7e-1258736979.tcb.qcloud.la/HTML%26CSS%E5%8D%95%E8%AF%8D%E6%B1%87%E6%80%BB%20v4.0.pdf?sign=7b472c02aa83f81d3598c8c7ffe83749&amp;t=1560867665" width="100%" height="1200" type="application/pdf"></div>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;h2 id=&quot;注释&quot;&gt;&lt;a href=&quot;#注释&quot; class=&quot;headerlink&quot; title=&quot;注释&quot;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	HTML注释，注释忠的内容会被浏览器忽略，不会再网页中显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	但是可以在源码中查看注释，注释用来对代码进行解释说明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	 开发中养成良好的编写注释习惯，注释要求简单明了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	&amp;lt;!--&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	注释不能嵌套&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;	--&amp;gt;&lt;/span&gt; 这就已经结束了&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--&amp;gt;最后一个会被孤立显示&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;文档声明&quot;&gt;&lt;a href=&quot;#文档声明&quot; class=&quot;headerlink&quot; title=&quot;文档声明&quot;&gt;&lt;/a&gt;文档声明&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;网页迭代版本：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			- html4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			- xhtml2.0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			- html5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;文档声明（doctype）：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					- html5文档声明 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					- &lt;span class=&quot;meta&quot;&gt;&amp;lt;!doctype &lt;span class=&quot;keyword&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt; -&amp;gt; 不区分大小写，本身无任何意义单标记，告知浏览器当前网页版本。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;进制&quot;&gt;&lt;a href=&quot;#进制&quot; class=&quot;headerlink&quot; title=&quot;进制&quot;&gt;&lt;/a&gt;进制&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;二进制（计算机底层进制）：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						- 特点：满2进1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						- 计数：0 1 10 11 100 101 110 111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						- 单位数字： 2个（0~1）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;八进制（很少使用）：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				- 特点：满8进1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				- 计数：0 1 2 3 4 5 6 7 10 11 12 ... 17 20 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				- 单位数字：8个（0~7）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;十进制（日常使用）：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				- 特点：满10进1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				- 计数：0 1 2 3 4 5 6 7 8 9 10 11 12 13 ... 19 20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				- 单位数字：10个 （0~9）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;十六进制(一般显示一个二进制数字时，转换为十六进制)：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;											- 特点：满16进1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;											- 计数：0 1 2 3 4 5 6 7 8 9 a b c d e f 10 11 12 ... 1a 1b 1c 1d 1e 1f 20...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;											- 单位数字：16个（0-f）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;扩展：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	-所有数据在计算机底层都会以二进制形式保存内存想象为由多个小格子组成的容器，一个小格子，在内存中被称为1位（bit）。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	-  8bit = 1byte（字节）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	-  1024byte = 1kb（千字节）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	-  1024kb = 1mb（兆）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	-  1024mb = 1gb（吉字节）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	-  1024gb = 1tb（特字节）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 	-  1024tp = 1pb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;字符编码&quot;&gt;&lt;a href=&quot;#字符编码&quot; class=&quot;headerlink&quot; title=&quot;字符编码&quot;&gt;&lt;/a&gt;字符编码&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;所有数据在计算机存储时都是以二进制形式存储的，文字也不例外。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;一段文字在存储到内存中时，都需要转换为二进制编码。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;当读取这段文字时，计算机会将编码转换为字符，供我们阅读。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;编码:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- 将字符转换为二进制过程称为编码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;解码:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- 将二进制码转换为字符的过程称为解码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;字符集:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- 编码和解码采用的规则称为字符集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;乱码问题:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- 如果编码和解码采用的字符集不同就会出现乱码问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;常见的字符集:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			- ASCII&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			- ISO88591&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			- GB2312&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			- GBK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			- UTF-8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;meta&quot;&gt;&lt;a href=&quot;#meta&quot; class=&quot;headerlink&quot; title=&quot;meta&quot;&gt;&lt;/a&gt;meta&lt;/h2&gt;&lt;p&gt;meta标签设置网页的元数据 &lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;charset&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; //解决编码乱码问题。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;quot;keywords&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;quot;HTML5，前端，CSS3&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;网页描述&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;quot;搜索引擎所搜索到的标题例如京东（jd）&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;http-equiv&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;quot;refresh&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;3;url = https://www.xxxx.com&amp;quot;&lt;/span&gt;&amp;quot;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;主要用于设置网页中的元数据，不是给用户看的：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									- name -&amp;gt; 指定数据名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									- content	-&amp;gt; 指定数据内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									- charset -&amp;gt; 指定网页字符集&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									- keywords -&amp;gt;指定网站的关键字，同时指定多个关键字，关键字间逗号&amp;quot;,&amp;quot;隔开。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									- description -&amp;gt; 用于指定网站的描述，网站的描述会显0示在搜索引擎搜索的结果中&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									- title -&amp;gt; 标签内容会作为搜索结果的超链接上的文字显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									- http-equiv = &amp;quot;refresh&amp;quot; content = &amp;quot;3;url = 网址&amp;quot; -&amp;gt; 重定向 数字3代表跳转时间&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;title&quot;&gt;&lt;a href=&quot;#title&quot; class=&quot;headerlink&quot; title=&quot;title&quot;&gt;&lt;/a&gt;title&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;title中的内容会显示在浏览器的标题栏，搜索引擎会主要根据title中标题来判断网页的主要内容。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt; 网页标题 &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;转义字符&quot;&gt;&lt;a href=&quot;#转义字符&quot; class=&quot;headerlink&quot; title=&quot;转义字符&quot;&gt;&lt;/a&gt;转义字符&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;在HTML中有些时候，不能直接书写特殊符号，比如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;										- &amp;amp;nbsp：空格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;										- &lt;span class=&quot;symbol&quot;&gt;&amp;amp;gt;&lt;/span&gt;大于号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;										- &lt;span class=&quot;symbol&quot;&gt;&amp;amp;lt;&lt;/span&gt;小于号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;										- &lt;span class=&quot;symbol&quot;&gt;&amp;amp;copy;&lt;/span&gt;版权符号&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://www.w3school.com.cn/html/html_entities.asp&quot;&gt;W3Cschool更多转义符&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;标题标签&quot;&gt;&lt;a href=&quot;#标题标签&quot; class=&quot;headerlink&quot; title=&quot;标题标签&quot;&gt;&lt;/a&gt;标题标签&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- 从 h1 到 h6 共有六级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- h1 到 h6重要性递减，h1最重要，h6最不重要&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- h1在网页中的重要性仅次于title标签，一般情况下一个页面中只会有一个h1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- h1到h3经常使用，h4到h6很少用&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 在页面中独占一行的元素称为块元素(block element)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h4&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h5&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h5&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h6&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h6&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 标题标签都是块元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	· 可以将一组相关的标题同时放入到hgroup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;hgroup&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;hgroup&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;段落标签&quot;&gt;&lt;a href=&quot;#段落标签&quot; class=&quot;headerlink&quot; title=&quot;段落标签&quot;&gt;&lt;/a&gt;段落标签&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- p标签表示页面中的一个段落&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- p也是一个块元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	p标签中的内容表示一个段落&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;行内标签&quot;&gt;&lt;a href=&quot;#行内标签&quot; class=&quot;headerlink&quot; title=&quot;行内标签&quot;&gt;&lt;/a&gt;行内标签&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- em 标签表示语音语调的一个加重&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 在页面中不会独占一行的元素称为行内元素（inline element）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;今天天气&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;真&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;不错！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- strong 表示强调，重要内容！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;今天必须完成&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;strong&lt;/span&gt;&amp;gt;&lt;/span&gt;XXX&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;strong&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;引用标签&quot;&gt;&lt;a href=&quot;#引用标签&quot; class=&quot;headerlink&quot; title=&quot;引用标签&quot;&gt;&lt;/a&gt;引用标签&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- blockquote 表示一个长引用 -&amp;gt; 块元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;XXX说：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;blockquote&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XXXXXXX！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;blockquote&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- q表示一个短引用 -&amp;gt; 行元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;子曰：&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;q&lt;/span&gt;&amp;gt;&lt;/span&gt;学而时习之不亦乐乎&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;q&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;换行标签&quot;&gt;&lt;a href=&quot;#换行标签&quot; class=&quot;headerlink&quot; title=&quot;换行标签&quot;&gt;&lt;/a&gt;换行标签&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- br 标签 表示页面中的换行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;今天天气&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;br&lt;/span&gt;&amp;gt;&lt;/span&gt;真不错&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;行内元素和块元素定义&quot;&gt;&lt;a href=&quot;#行内元素和块元素定义&quot; class=&quot;headerlink&quot; title=&quot;行内元素和块元素定义&quot;&gt;&lt;/a&gt;行内元素和块元素定义&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;块元素（block element）：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						- 网页中一般通过块元素来对网页布局&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;行内元素（inline element）：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						- 行内元素主要用来包裹文字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- 一般情况下会在块元素中放行内元素，不会再行内元素中放块元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- 块元素中基本都能放&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- p元素中不能放任何块元素&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;书写注意&quot;&gt;&lt;a href=&quot;#书写注意&quot; class=&quot;headerlink&quot; title=&quot;书写注意&quot;&gt;&lt;/a&gt;书写注意&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;浏览器在解析网页时，会自动对网页中不符合规范的内容进行修正：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;比如：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- 标签写在根元素外部&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- p元素中嵌套了元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- 根元素中除head和body以外的子元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- ....&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;布局标签&quot;&gt;&lt;a href=&quot;#布局标签&quot; class=&quot;headerlink&quot; title=&quot;布局标签&quot;&gt;&lt;/a&gt;布局标签&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;结构语义化标签：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- header -&amp;gt; 网页的头部&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- main -&amp;gt; 网页的主体部分（一个网页中只会有一个main）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;main&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- footer -&amp;gt; 网页的底部&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- nav -&amp;gt; 网页中的导航&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- aside -&amp;gt; 主体相关的其他内容（侧边栏）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;aside&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;aside&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- article -&amp;gt; 表示独立的文章&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;article&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;article&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- section -&amp;gt; 表示一个独立的区块，上面的标签不能表示时使用section&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- div -&amp;gt; 没有语义，就用来表示一个区块，目前div是主要的布局元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- span -&amp;gt; 行内元素，没有任何语义，一般用于在网页中选中文字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;列表&quot;&gt;&lt;a href=&quot;#列表&quot; class=&quot;headerlink&quot; title=&quot;列表&quot;&gt;&lt;/a&gt;列表&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;有序列表、无序列表、定义列表：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;							- 使用li表示列表项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;无序列表:使用ul标签创建无序列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;结构&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;表现&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;行为&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;有序列表：使用ol创建有序列表&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;结构&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;表现&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;行为&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;定义列表：使用dl标签创建一个定义列表，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		使用dt来表示定义内容，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		使用dd对内容进行解释说明&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dl&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dt&lt;/span&gt;&amp;gt;&lt;/span&gt;结构&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dt&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dd&lt;/span&gt;&amp;gt;&lt;/span&gt;结构表示网页的结构，结构用来规定网页中那里是标题，那里是段落&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dd&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dl&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;注：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- 列表之间可以相互嵌套&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;超链接&quot;&gt;&lt;a href=&quot;#超链接&quot; class=&quot;headerlink&quot; title=&quot;超链接&quot;&gt;&lt;/a&gt;超链接&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;超链接可以让我们从一个页面跳转到到其他页面，后者是当前页面的其他位置。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 使用 a 标签来定义超链接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&amp;quot;https://www.baidu.com&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;超链接&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· https://www.baiud.com -&amp;gt; 代表绝对路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- 超链接是行内元素 在 a 标签中可以嵌套任何的元素 除了它自身外的任何元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;01.目标.html&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;target&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;_self&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;href属性：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- 指定跳转目标路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- 值可以是一个外部网站地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- 也可以写内部页面地址&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target属性：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			- 用来指定超链接打开的位置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			- 可选值：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				· _self 默认值在当前页面打开超链接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				· _blank 在一个新的页面中打开超链接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;相对路径： &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- 都会使用./或../开头 ./可以省略不写 ./ ../相当于写了./&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- ./ 表示当前所在文件所在的目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- ./ 就等于01.相对路径.html 所在目录 path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- ../ 当前文件所在目录的上一级目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- ./inner/target.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- ../outer/target.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;超链接href属性设置为#，这样点击超链接后页面不会发生跳转，而是转到当前页面顶部的位置。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;锚点：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;id属性：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- 唯一不重复&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- 每一个标签都可以添加一个id属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- id属性就是元素的唯一标识，同一个页面中不能出现重复的id属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- id的值区分大小写 字母开头&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		- 可以跳转到页面指定位置 将href属性设置 #目标元素id属性值标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;bottom&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;#bottom&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;没有任何功能的超链接：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					- javascript:是表示在触发&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;默认动作时，执行一段JavaScript代码，而 javascript:; 表示什么都不执行，这样点击&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;时就没有任何反应。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					- href=&amp;quot;javascript:;&amp;quot;就是去掉a标签的默认行为，跟href=&amp;quot;javascript:void(0)&amp;quot;一样。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;javascript:;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;啥也不做&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;图片标签&quot;&gt;&lt;a href=&quot;#图片标签&quot; class=&quot;headerlink&quot; title=&quot;图片标签&quot;&gt;&lt;/a&gt;图片标签&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;图片标签用于向当前页面中引入一张图片：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									- img标签是一个自结束标签&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;									- img元素属于替换元素（基于块和行内元素之间,具有两种元素的特点）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;属性：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- src 指定外部图片路径 路径规则和超链接相同&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		相对路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		绝对路径&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- alt 图片描述，默认情况下不会显示，浏览器会在图片无法加载时显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		搜索引擎会根据alt中的内容来识别图片,如果不写则图片不会被搜索引擎所识别&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- with   图片宽度 (单位是像素)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- height 图片高度 (单位是像素)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· 如果只修改一个，另一个会进行等比例缩放。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· 注意：一般情况下pc端，不建议修改图片的大小，要多大裁多大。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				移动端，经常需要对图片进行缩放。（经常会大图缩小）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- title 鼠标进入图片区出现黄框进行文字提示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;图片格式（常）：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- jpeg(jpg) &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· 颜色丰富，不支持透明效果，不支持动图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· 一般用来显示照片&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- gif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· 颜色较少，支持简单透明，支持动图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· 适合颜色单一图片，动图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· 颜色丰富，支持复杂透明，不支持动图&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· 颜色丰富，复杂透明图片（专为网页而生）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- webp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· 谷歌新推出用来显示网页中图片的一种格式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· 具备其他图片格式的所有优点，而且文件还特别小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· 缺点：兼容性不好&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	- base64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· 将图片使用base64进行编码，这样可以将图片转换为字符，通过字符形式来引入图片	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		· 一般都是一些需要和网页一起加载的图片才会使用base64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	效果一样，用小的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	效果不一样，用效果好的&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;./img/1.jpg&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;title&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;alt&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;data:image/jpeg:base64xxxxxxxxx&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



























































































&lt;hr&gt;

&lt;h2 id=&quot;HTML网站历史&quot;&gt;&lt;a href=&quot;#HTML网站历史&quot; class=&quot;headerlink&quot; title=&quot;HTML网站历史&quot;&gt;&lt;/a&gt;HTML网站历史&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HTML5：HTML4.01升级版，大前端技术，泛指前端的所有技术&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;HTML4.01在99年12发布XHTML1.0在2000年1月发布，语法更严谨&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="html" scheme="http://example.com/tags/html/"/>
    
    <category term="web历史" scheme="http://example.com/tags/web%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>各种实例效果</title>
    <link href="http://example.com/2019/06/17/%E5%90%84%E7%A7%8D%E5%AE%9E%E4%BE%8B%E6%95%88%E6%9E%9C/"/>
    <id>http://example.com/2019/06/17/%E5%90%84%E7%A7%8D%E5%AE%9E%E4%BE%8B%E6%95%88%E6%9E%9C/</id>
    <published>2019-06-17T15:54:21.000Z</published>
    <updated>2022-03-28T12:37:58.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简易聊天室—基于原生websocket-nodejs"><a href="#简易聊天室—基于原生websocket-nodejs" class="headerlink" title="简易聊天室—基于原生websocket+nodejs"></a>简易聊天室—基于原生websocket+nodejs</h2><p><code>前端代码</code></p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;setname&quot;</span>&gt;</span>加入聊天室<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>发送<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ws</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;setname&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> name = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;name&#x27;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(name===<span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;名字为空&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">             ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:3000&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            ws.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                ws.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;name,<span class="attr">type</span>:<span class="string">&#x27;setname&#x27;</span>&#125;))</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = sendText</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;text&#x27;</span>).<span class="property">onkeyup</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(e.<span class="property">keyCode</span> !== <span class="number">13</span>) <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">sendText</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            ws.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="keyword">var</span> con = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;container&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">               con.<span class="title function_">insertBefore</span>(<span class="title function_">createChatPanel</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(e.<span class="property">data</span>)),con.<span class="property">children</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;setname&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;disabled&#x27;</span>,<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">createChatPanel</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> name = data.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> text = data.<span class="property">text</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> span1 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> span2 = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span2&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            span1.<span class="property">innerText</span> = name + <span class="string">&#x27;&#x27;</span> +(<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">toString</span>()</span></span><br><span class="line"><span class="language-javascript">            span2.<span class="property">innerText</span> = text;</span></span><br><span class="line"><span class="language-javascript">            span1.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;#00f&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            span1.<span class="property">style</span>.<span class="property">fontWeight</span> = <span class="string">&#x27;900&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            div.<span class="title function_">appendChild</span>(span1);</span></span><br><span class="line"><span class="language-javascript">            div.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;br&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">            div.<span class="title function_">appendChild</span>(span2);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> div</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">sendText</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;text&#x27;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(text === <span class="string">&#x27;&#x27;</span>) <span class="keyword">return</span> </span></span><br><span class="line"><span class="language-javascript">                ws.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;text,<span class="attr">type</span>:<span class="string">&quot;chat&quot;</span>&#125;))</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;text&#x27;</span>).<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>后端代码</code></p><p>需要插件：npm i nodejs-websocket –save</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ws = <span class="built_in">require</span>(<span class="string">&#x27;nodejs-websocket&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> server = ws.<span class="title function_">createServer</span>(<span class="function"><span class="params">conn</span>=&gt;</span>&#123;</span><br><span class="line">    conn.<span class="title function_">on</span>(<span class="string">&#x27;text&#x27;</span>,<span class="function"><span class="params">str</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">        <span class="comment">// boardcast(str)</span></span><br><span class="line">        <span class="keyword">var</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(data.<span class="property">type</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;setname&#x27;</span>:</span><br><span class="line">            conn.<span class="property">nickname</span> = data.<span class="property">name</span>;</span><br><span class="line">            <span class="title function_">boardcast</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>:<span class="string">&#x27;Server&#x27;</span>,</span><br><span class="line">                <span class="attr">text</span>: data.<span class="property">name</span> + <span class="string">&#x27;加入了房间&#x27;</span></span><br><span class="line">            &#125;));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;chat&#x27;</span>:</span><br><span class="line">            <span class="title function_">boardcast</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>:conn.<span class="property">nickname</span>,</span><br><span class="line">                <span class="attr">text</span>: data.<span class="property">text</span></span><br><span class="line">            &#125;))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    conn.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">boardcast</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;Server&#x27;</span>,</span><br><span class="line">            <span class="attr">text</span>: conn.<span class="property">nickname</span> + <span class="string">&#x27;离开了房间&#x27;</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;)</span><br><span class="line">    conn.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;(o゜▽゜)o☆[BINGO!]&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">boardcast</span>(<span class="params">str</span>)&#123;</span><br><span class="line">    server.<span class="property">connections</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">conn</span>=&gt;</span>&#123;</span><br><span class="line">        conn.<span class="title function_">sendText</span>(str)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="socket-io做个聊天室"><a href="#socket-io做个聊天室" class="headerlink" title="socket.io做个聊天室"></a>socket.io做个聊天室</h2><p><code>前端代码</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.mine</span> <span class="selector-tag">h4</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:<span class="number">#0aa1ed</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.someone</span> <span class="selector-tag">h4</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>:<span class="number">#0ef5a4</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:8080/socket.io/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> sock = io.<span class="title function_">connect</span>(<span class="string">&#x27;ws://localhost:8080/&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> cur_username = <span class="string">&#x27;&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn2&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> btn_send = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn_send&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ul1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> user = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;user&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> pass = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;pass&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> text = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;txt1&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 注册</span></span></span><br><span class="line"><span class="language-javascript">            sock.<span class="title function_">on</span>(<span class="string">&#x27;reg_ret&#x27;</span>,<span class="function">(<span class="params">code,msg</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(code)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&#x27;注册失败&#x27;</span> + msg)</span></span><br><span class="line"><span class="language-javascript">                    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">alert</span>(<span class="string">&#x27;注册成功&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            btn1.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                sock.<span class="title function_">emit</span>(<span class="string">&#x27;reg&#x27;</span>,user.<span class="property">value</span>,pass.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 登录</span></span></span><br><span class="line"><span class="language-javascript">            sock.<span class="title function_">on</span>(<span class="string">&#x27;login_ret&#x27;</span>,<span class="function">(<span class="params">code,msg</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(code)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;登录出错&#x27;</span>+msg)</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    cur_username = user.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            btn2.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                sock.<span class="title function_">emit</span>(<span class="string">&#x27;login&#x27;</span>,user.<span class="property">value</span>,pass.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 消息</span></span></span><br><span class="line"><span class="language-javascript">            sock.<span class="title function_">on</span>(<span class="string">&#x27;msg_ret&#x27;</span>,<span class="function">(<span class="params">code,msg</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(code)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&#x27;消息发送失败&#x27;</span> + msg)</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    li.<span class="property">className</span> = <span class="string">&#x27;mine&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    li.<span class="property">innerHTML</span> = <span class="string">`&lt;h4&gt;<span class="subst">$&#123;cur_username&#125;</span>&lt;/h4&gt; &lt;p&gt;<span class="subst">$&#123;text.value&#125;</span>&lt;/p&gt;`</span></span></span><br><span class="line"><span class="language-javascript">                    ul.<span class="title function_">appendChild</span>(li)</span></span><br><span class="line"><span class="language-javascript">                    text.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            sock.<span class="title function_">on</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="function">(<span class="params">name,txt</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(name,txt)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">                    li.<span class="property">className</span> = <span class="string">&#x27;someone&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                    li.<span class="property">innerHTML</span> = <span class="string">`&lt;h4&gt;<span class="subst">$&#123;name&#125;</span>&lt;/h4&gt; &lt;p&gt;<span class="subst">$&#123;txt&#125;</span>&lt;/p&gt;`</span></span></span><br><span class="line"><span class="language-javascript">                    ul.<span class="title function_">appendChild</span>(li)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            btn_send.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">                sock.<span class="title function_">emit</span>(<span class="string">&#x27;msg&#x27;</span>,text.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    用户：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;text&quot;</span> <span class="attr">id</span> = <span class="string">&quot;user&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;password&quot;</span> <span class="attr">id</span> = <span class="string">&quot;pass&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;button&quot;</span> <span class="attr">id</span> = <span class="string">&quot;btn1&quot;</span> <span class="attr">value</span> = <span class="string">&quot;注册&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&quot;button&quot;</span> <span class="attr">id</span> = <span class="string">&quot;btn2&quot;</span> <span class="attr">value</span> = <span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span>  <span class="attr">id</span>=<span class="string">&quot;txt1&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;80&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;发送&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn_send&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul1&quot;</span> <span class="attr">type</span>=<span class="string">&quot;none&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>后端代码</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> reg = <span class="built_in">require</span>(<span class="string">&#x27;./libs/reg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据库</span></span><br><span class="line"><span class="keyword">let</span> db = mysql.<span class="title function_">createPool</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>:<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="attr">user</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3306</span>,</span><br><span class="line">    <span class="attr">database</span>:<span class="number">20190704</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.http服务器</span></span><br><span class="line"><span class="keyword">const</span> httpServer = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">`www<span class="subst">$&#123;req.url&#125;</span>`</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">            res.<span class="title function_">writeHead</span>(<span class="number">404</span>)</span><br><span class="line">            res.<span class="title function_">write</span>(<span class="string">&#x27;not found&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            res.<span class="title function_">write</span>(data)</span><br><span class="line">        &#125;</span><br><span class="line">        res.<span class="title function_">end</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">httpServer.<span class="title function_">listen</span>(<span class="number">8080</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.ws服务</span></span><br><span class="line"><span class="keyword">let</span> aSock = []</span><br><span class="line"><span class="keyword">const</span> wsServer = io.<span class="title function_">listen</span>(httpServer)</span><br><span class="line">wsServer.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>,<span class="function"><span class="params">sock</span>=&gt;</span>&#123;</span><br><span class="line">    aSock.<span class="title function_">push</span>(sock);</span><br><span class="line">    <span class="keyword">let</span> cur_username = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> cur_userID = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 注册</span></span><br><span class="line">    sock.<span class="title function_">on</span>(<span class="string">&#x27;reg&#x27;</span>,<span class="function">(<span class="params">user,pass</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 1.校验数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(user,pass)</span><br><span class="line">            <span class="keyword">if</span>(!reg.<span class="property">username</span>.<span class="title function_">test</span>(user))&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(!reg.<span class="property">username</span>.<span class="title function_">test</span>(user))</span><br><span class="line">                sock.<span class="title function_">emit</span>(<span class="string">&#x27;reg_ret&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;用户名不符合规范&#x27;</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!reg.<span class="property">password</span>.<span class="title function_">test</span>(pass))&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(!reg.<span class="property">password</span>.<span class="title function_">test</span>(pass))</span><br><span class="line">                sock.<span class="title function_">emit</span>(<span class="string">&#x27;reg_ret&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;密码不符合规范&#x27;</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 2.用户名是否存在</span></span><br><span class="line">                db.<span class="title function_">query</span>(<span class="string">`SELECT ID FROM user_table WHERE username=&#x27;<span class="subst">$&#123;user&#125;</span>&#x27;`</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                        sock.<span class="title function_">emit</span>(<span class="string">&#x27;reg_ret&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;数据库有错误&#x27;</span>)</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data.<span class="property">length</span>&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                        sock.<span class="title function_">emit</span>(<span class="string">&#x27;reg_ret&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;用户名已存在&#x27;</span>)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">// 3.插入</span></span><br><span class="line">                        db.<span class="title function_">query</span>(<span class="string">`INSERT INTO user_table(username,password,online) VALUES(&#x27;<span class="subst">$&#123;user&#125;</span>&#x27;,&#x27;<span class="subst">$&#123;pass&#125;</span>&#x27;,0)`</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                                sock.<span class="title function_">emit</span>(<span class="string">&#x27;reg_ret&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;数据库有错误&#x27;</span>)</span><br><span class="line">                            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                                sock.<span class="title function_">emit</span>(<span class="string">&#x27;reg_ret&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;注册成功&#x27;</span>)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    sock.<span class="title function_">on</span>(<span class="string">&#x27;login&#x27;</span>,<span class="function">(<span class="params">user,pass</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 1.校验数据</span></span><br><span class="line">        <span class="keyword">if</span>(!reg.<span class="property">username</span>.<span class="title function_">test</span>(user))&#123;</span><br><span class="line">            sock.<span class="title function_">emit</span>(<span class="string">&#x27;login_ret&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;用户名不符合规范&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!reg.<span class="property">password</span>.<span class="title function_">test</span>(pass))&#123;</span><br><span class="line">            sock.<span class="title function_">emit</span>(<span class="string">&#x27;login_ret&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;密码不符合规范&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 2.用户信息</span></span><br><span class="line">            db.<span class="title function_">query</span>(<span class="string">`SELECT ID,password From user_table WHERE username=&#x27;<span class="subst">$&#123;user&#125;</span>&#x27;`</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                    sock.<span class="title function_">emit</span>(<span class="string">&#x27;login_ret&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;数据库有误&#x27;</span>)</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data.<span class="property">length</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    sock.<span class="title function_">emit</span>(<span class="string">&#x27;login_ret&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;此用户不存在&#x27;</span>)</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data[<span class="number">0</span>].<span class="property">password</span>!=pass)&#123;</span><br><span class="line">                    sock.<span class="title function_">emit</span>(<span class="string">&#x27;login_ret&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;用户名或者密码有误&#x27;</span>)                    </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// 3.改在线状态</span></span><br><span class="line">                    db.<span class="title function_">query</span>(<span class="string">`UPDATE user_table SET online=1 WHERE ID=<span class="subst">$&#123;data[<span class="number">0</span>].ID&#125;</span>`</span>,<span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                            sock.<span class="title function_">emit</span>(<span class="string">&#x27;login_ret&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;数据库有错&#x27;</span>)</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            sock.<span class="title function_">emit</span>(<span class="string">&#x27;login_ret&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line">                            cur_username = user</span><br><span class="line">                            cur_userID = data[<span class="number">0</span>].<span class="property">ID</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 发言</span></span><br><span class="line">    sock.<span class="title function_">on</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="function"><span class="params">txt</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!txt)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(txt)</span><br><span class="line">            sock.<span class="title function_">emit</span>(<span class="string">&#x27;msg_ret&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;消息文本不能为空&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 广播给所有人</span></span><br><span class="line">            aSock.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(item==sock) <span class="keyword">return</span></span><br><span class="line">                item.<span class="title function_">emit</span>(<span class="string">&#x27;msg&#x27;</span>,cur_username,txt)</span><br><span class="line">            &#125;);</span><br><span class="line">            sock.<span class="title function_">emit</span>(<span class="string">&#x27;msg_ret&#x27;</span>,<span class="number">0</span>,<span class="string">&#x27;发送成功&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 离线</span></span><br><span class="line">    sock.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        db.<span class="title function_">query</span>(<span class="string">`UPDATE user_table SET online=0 WHERE ID=&#x27;<span class="subst">$&#123;cur_userID&#125;</span>&#x27;`</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;数据库有错&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">             cur_username = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">             cur_userID = <span class="number">0</span>;</span><br><span class="line">             aSock = aSock.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>item!=sock)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="大转盘效果"><a href="#大转盘效果" class="headerlink" title="大转盘效果"></a>大转盘效果</h2><p class="codepen" data-height="500" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="rExrVj" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="rExrVj">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/rExrVj/">  rExrVj</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="基于swiper插件效果轮播图①"><a href="#基于swiper插件效果轮播图①" class="headerlink" title="基于swiper插件效果轮播图①"></a>基于swiper插件效果轮播图①</h2><p class="codepen" data-height="550" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="QXyBVK" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="QXyBVK">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/QXyBVK/">  QXyBVK</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><!--more--><h2 id="基于swiper插件效果轮播图②"><a href="#基于swiper插件效果轮播图②" class="headerlink" title="基于swiper插件效果轮播图②"></a>基于swiper插件效果轮播图②</h2><p class="codepen" data-height="600" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="rEerNx" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="rEerNx">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/rEerNx/">  rEerNx</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="图形验证码"><a href="#图形验证码" class="headerlink" title="图形验证码"></a>图形验证码</h2><p class="codepen" data-height="1000" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="gNbEwP" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="gNbEwP">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/gNbEwP/">  gNbEwP</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><!--more--><h2 id="滑块验证码"><a href="#滑块验证码" class="headerlink" title="滑块验证码"></a>滑块验证码</h2><p class="codepen" data-height="500" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="ydOEqW" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="ydOEqW">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/ydOEqW/">  ydOEqW</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="五子棋"><a href="#五子棋" class="headerlink" title="五子棋"></a>五子棋</h2><p class="codepen"  data-height="800" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="PrBLNM" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="PrBLNM">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/PrBLNM/">  PrBLNM</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="简易画板"><a href="#简易画板" class="headerlink" title="简易画板"></a>简易画板</h2><p class="codepen" data-height="400" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="rXOVVp" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="rXOVVp">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/rXOVVp/">  rXOVVp</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="数据劫持简易版本"><a href="#数据劫持简易版本" class="headerlink" title="数据劫持简易版本"></a>数据劫持简易版本</h2><p class="codepen" data-height="500" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="jjLVoE" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="jjLVoE">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/jjLVoE/">  jjLVoE</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><!--more--><h2 id="脏检查"><a href="#脏检查" class="headerlink" title="脏检查"></a>脏检查</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  脏值检查    先保留原有的值   有一个新的值</span></span><br><span class="line"><span class="comment">//  上一个例子中是不停的监控新放的值，$watch,$apply,angularjs的更新方式是手动更新,angulaer有一个scope的概念</span></span><br><span class="line"><span class="comment">//ViewModel</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Scope</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$watchers</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Scope</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$digest</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;   <span class="comment">//负责检查的</span></span><br><span class="line">    <span class="comment">// 至少执行一次</span></span><br><span class="line">    <span class="keyword">var</span> dirty = <span class="literal">true</span>;   <span class="comment">//默认认为只要调用digest方法就应该查一次</span></span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        dirty = <span class="variable language_">this</span>.$digestOne()</span><br><span class="line">        <span class="keyword">if</span>(count ===<span class="number">0</span> )&#123; <span class="comment">//已经查了10次</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27; $digest reached，Aborting！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span> (dirty &amp;&amp; count--);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Scope</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$digestOne</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;    <span class="comment">//检查一次</span></span><br><span class="line">   <span class="keyword">let</span> dirty = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$watchers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">watcher</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> oldVal = watcher.<span class="property">last</span>   <span class="comment">//老值</span></span><br><span class="line">        <span class="keyword">let</span> newVal = <span class="variable language_">this</span>[watcher.<span class="property">exp</span>]</span><br><span class="line">        <span class="keyword">if</span>(newVal !== oldVal)&#123;  <span class="comment">//更新了</span></span><br><span class="line">            watcher.<span class="title function_">fn</span>(newVal,oldVal)<span class="comment">//调用了fn可能就会更改数据，更改数据就应该在查一遍</span></span><br><span class="line">            dirty = <span class="literal">true</span></span><br><span class="line">            watcher.<span class="property">last</span> = newVal   <span class="comment">//更新老值，让老值变成新值，方便下次更新</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> dirty</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Scope</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$watch</span> = <span class="keyword">function</span>(<span class="params">exp,fn</span>)&#123;</span><br><span class="line">    <span class="comment">//$watch中应该保留的内容有函数 还有 当前的老值，保留一个表达式</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$watchers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        fn,</span><br><span class="line">        <span class="attr">last</span>:<span class="variable language_">this</span>[exp],</span><br><span class="line">        exp</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Scope</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$apply</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.$digest()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> scope = <span class="keyword">new</span> <span class="title class_">Scope</span>();</span><br><span class="line">scope.<span class="property">name</span> = <span class="string">&#x27;miaochen&#x27;</span>;</span><br><span class="line">scope.<span class="property">age</span> = <span class="number">9</span>;</span><br><span class="line">scope.$watch(<span class="string">&#x27;name&#x27;</span>,<span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal,oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">scope.$watch(<span class="string">&#x27;age&#x27;</span>,<span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal,oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">scope.<span class="property">age</span> = <span class="number">10</span>;</span><br><span class="line">scope.$apply();</span><br></pre></td></tr></table></figure><h2 id="VUE双向绑定简易版"><a href="#VUE双向绑定简易版" class="headerlink" title="VUE双向绑定简易版"></a>VUE双向绑定简易版</h2><p><img src="https://s2.ax1x.com/2019/06/25/ZZBKhD.png" alt="ZZBKhD.png"></p><p><code>HTML文件</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;watcher.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;observer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;compile.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;MVVM.JS&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 双向数据绑定 靠的是表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message.a&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message.a&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;message.a&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;message.a&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message.a&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 我们的数据一般都挂载在vm上</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Object.defineProperty  get 和 set</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// vue中实现双向绑定</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.模板编译</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.数据劫持 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.观察数据变化 Watcher</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title function_">MVVM</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">a</span>:<span class="string">&#x27;miao chen&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>MVVM.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MVVM</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">options</span>)&#123;</span><br><span class="line">        <span class="comment">// 一上来 先把可用的东西挂载在实例上</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$el</span> = options.<span class="property">el</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="property">data</span></span><br><span class="line">        <span class="comment">// 判断如果有要编译的模板就开始编译</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">$el</span>)&#123;</span><br><span class="line">            <span class="comment">// 数据劫持 就是把对象的所有属性 改成get和set方法</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">proxyData</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line">            <span class="comment">// 用数据和元素进行编译</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Compile</span>(<span class="variable language_">this</span>.<span class="property">$el</span>,<span class="variable language_">this</span>); <span class="comment">//this直接给 随便调用数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">proxyData</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>,key,&#123;</span><br><span class="line">                <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> data[key]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">set</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line">                    data[key] = newVal</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Compile.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compile</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">el,vm</span>)&#123; <span class="comment">//vm代表整个实例</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">el</span> = <span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(el) ? <span class="attr">el</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el)    <span class="comment">//#app 或 document.id</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vm</span> = vm</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">el</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果这个元素能获取到 我们才开始编译</span></span><br><span class="line">            <span class="comment">// 1.先把这些真实的DOM移入到内存中 fragment</span></span><br><span class="line">                <span class="keyword">let</span> fragment = <span class="variable language_">this</span>.<span class="title function_">node2fragment</span>(<span class="variable language_">this</span>.<span class="property">el</span>)</span><br><span class="line">            <span class="comment">// 2.编译 =&gt; 提取想要到的元素节点 和 v-model 文本节点 &#123;&#123;&#125;&#125;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">compile</span>(fragment)</span><br><span class="line">            <span class="comment">// 3.把编译好的fragment 赛回到页面里面去</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">el</span>.<span class="title function_">appendChild</span>(fragment)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 专门写辅助方法</span></span><br><span class="line">    <span class="title function_">isElementNode</span>(<span class="params">node</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">1</span>;  <span class="comment">//元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是不是指令</span></span><br><span class="line">    <span class="title function_">isDiretive</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> name.<span class="title function_">includes</span>(<span class="string">&#x27;v-&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 核心的方法</span></span><br><span class="line">    <span class="title function_">compileElement</span>(<span class="params">node</span>)&#123;</span><br><span class="line">        <span class="comment">// 带v-model</span></span><br><span class="line">        <span class="keyword">let</span> attrs = node.<span class="property">attributes</span>  <span class="comment">// 取出当前节点的属性</span></span><br><span class="line">        <span class="title class_">Array</span>.<span class="title function_">from</span>(attrs).<span class="title function_">forEach</span>(<span class="function"><span class="params">attr</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 判断属性名包含v-model  //[v,mode]</span></span><br><span class="line">            <span class="keyword">let</span> attrName = attr.<span class="property">name</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isDiretive</span>(attrName))&#123;</span><br><span class="line">                <span class="comment">// 取到对应的值 放到节点中</span></span><br><span class="line">                <span class="keyword">let</span> expr = attr.<span class="property">value</span>;</span><br><span class="line">                <span class="keyword">let</span> [,type] = attrName.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                <span class="comment">// node this.vm.$data </span></span><br><span class="line">                <span class="title class_">CompileUtil</span>[type](node,<span class="variable language_">this</span>.<span class="property">vm</span>,expr)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">compileText</span>(<span class="params">node</span>)&#123;</span><br><span class="line">        <span class="comment">// 带&#123;&#123;&#125;&#125;</span></span><br><span class="line">        <span class="keyword">let</span> expr = node.<span class="property">textContent</span></span><br><span class="line">        <span class="keyword">let</span> text = node.<span class="property">textContent</span> <span class="comment">//取文本中的内容</span></span><br><span class="line">        <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span> <span class="comment">//&#123;&#123;a&#125;&#125; &#123;&#123;b&#125;&#125; &#123;&#123;c&#125;&#125;</span></span><br><span class="line">        <span class="keyword">if</span>(reg.<span class="title function_">test</span>(text))&#123;</span><br><span class="line">            <span class="comment">//node this.$data text</span></span><br><span class="line">            <span class="title class_">CompileUtil</span>[<span class="string">&#x27;text&#x27;</span>](node,<span class="variable language_">this</span>.<span class="property">vm</span>,expr)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">compile</span>(<span class="params">fragment</span>)&#123;</span><br><span class="line">        <span class="comment">// 需要递归</span></span><br><span class="line">        <span class="keyword">let</span> childNodes = fragment.<span class="property">childNodes</span>;</span><br><span class="line">        <span class="title class_">Array</span>.<span class="title function_">from</span>(childNodes).<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(node))&#123;</span><br><span class="line">                <span class="comment">// 是元素节点 还需要继续深入的检查</span></span><br><span class="line">                <span class="comment">// 这里需要编译元素   </span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">compileElement</span>(node)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">compile</span>(node)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 文本节点</span></span><br><span class="line">                <span class="comment">// 这里需要编译文本</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">compileText</span>(node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">node2fragment</span>(<span class="params">el</span>)&#123;  <span class="comment">//需要将el中的内容全部放到内存中</span></span><br><span class="line">        <span class="comment">// 文档碎片 内存中的DOM节点</span></span><br><span class="line">        <span class="keyword">let</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">        <span class="keyword">let</span> firstChild = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span>(firstChild = el.<span class="property">firstChild</span>)&#123;</span><br><span class="line">            fragment.<span class="title function_">appendChild</span>(firstChild)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment <span class="comment">//内存中的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">CompileUtil</span> = &#123;</span><br><span class="line">    <span class="title function_">getVal</span>(<span class="params">vm,expr</span>)&#123;<span class="comment">//获取实例上对应的数据</span></span><br><span class="line">        expr = expr.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)  <span class="comment">//[a,v,c,d]</span></span><br><span class="line">        <span class="keyword">return</span> expr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,next</span>)=&gt;</span>&#123;   <span class="comment">// vm.$data.a</span></span><br><span class="line">            <span class="keyword">return</span> prev[next];</span><br><span class="line">        &#125;,vm.<span class="property">$data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getTextVal</span>(<span class="params">vm,expr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> expr.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>,<span class="function">(<span class="params">...<span class="variable language_">arguments</span></span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getVal</span>(vm,<span class="variable language_">arguments</span>[<span class="number">1</span>])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">text</span>(<span class="params">node,vm,expr</span>)&#123; <span class="comment">// 文本处理</span></span><br><span class="line">        <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>.<span class="property">updater</span>[<span class="string">&#x27;textUpdater&#x27;</span>]</span><br><span class="line">        <span class="comment">//&#123;&#123;message.a&#125;&#125; =&gt; &#x27;miaochen&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="title function_">getTextVal</span>(vm,expr)</span><br><span class="line">        <span class="comment">// &#123;&#123;a&#125;&#125; &#123;&#123;b&#125;&#125;</span></span><br><span class="line">        expr.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>,<span class="function">(<span class="params">...<span class="variable language_">arguments</span></span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm,<span class="variable language_">arguments</span>[<span class="number">1</span>],<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">// 如果数据变化了，文本节点需要重新获取依赖的属性更新文本中的内容</span></span><br><span class="line">                updateFn &amp;&amp; <span class="title function_">updateFn</span>(node,<span class="variable language_">this</span>.<span class="title function_">getTextVal</span>(vm,expr))</span><br><span class="line">            &#125;) </span><br><span class="line">        &#125;)</span><br><span class="line">        updateFn &amp;&amp; <span class="title function_">updateFn</span>(node,value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setVal</span>(<span class="params">vm,expr,value</span>)&#123; <span class="comment">//[message,a]</span></span><br><span class="line">        expr = expr.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">       <span class="comment">//收敛</span></span><br><span class="line">        <span class="keyword">return</span> expr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,next,currentIndex</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(currentIndex === expr.<span class="property">length</span>-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> prev[next] = value</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> prev[next]</span><br><span class="line">        &#125;,vm.<span class="property">$data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">model</span>(<span class="params">node,vm,expr</span>)&#123; <span class="comment">// 输入框处理</span></span><br><span class="line">        <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>.<span class="property">updater</span>[<span class="string">&#x27;modelUpdater&#x27;</span>]</span><br><span class="line">        <span class="comment">// 这里应该加一个监控 数据变化了 应该调用watch的callback</span></span><br><span class="line">        <span class="comment">//    </span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm,expr,<span class="function">(<span class="params">newValue</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 当值变化后 会调用cb 将新的值传递过来 （）</span></span><br><span class="line">            updateFn &amp;&amp; <span class="title function_">updateFn</span>(node,<span class="variable language_">this</span>.<span class="title function_">getVal</span>(vm,expr))</span><br><span class="line">        &#125;)</span><br><span class="line">        node.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> newValue = e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setVal</span>(vm,expr,newValue)</span><br><span class="line">        &#125;)</span><br><span class="line">        updateFn &amp;&amp; <span class="title function_">updateFn</span>(node,<span class="variable language_">this</span>.<span class="title function_">getVal</span>(vm,expr))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">updater</span>:&#123;</span><br><span class="line">        <span class="comment">// 文本更新</span></span><br><span class="line">        <span class="title function_">textUpdater</span>(<span class="params">node,value</span>) &#123;</span><br><span class="line">            node.<span class="property">textContent</span> = value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 输入框更新</span></span><br><span class="line">        <span class="title function_">modelUpdater</span>(<span class="params">node,value</span>)&#123;</span><br><span class="line">            node.<span class="property">value</span> = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Observer.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title class_">Observe</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Observe</span>(data)&#123;  </span><br><span class="line">        <span class="comment">// 要对这个data数据将原有的属性改成set和get的形式</span></span><br><span class="line">        <span class="keyword">if</span>(!data || <span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要将数据 一一劫持 先获取到data的key和value</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 劫持</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">defineReactive</span>(data,key,data[key])</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title class_">Observe</span>(data[key]) <span class="comment">//深度递归劫持</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义响应式</span></span><br><span class="line">    <span class="title function_">defineReactive</span>(<span class="params">obj,key,value</span>)&#123;</span><br><span class="line">        <span class="comment">// 在获取某个值的时候 </span></span><br><span class="line">        <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();    <span class="comment">//每个变化的数据 都会对应一个数组，这个数组可以是存放所有更新的操作</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,key,&#123;</span><br><span class="line">            <span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>)&#123;  <span class="comment">//当取值的时候调用的方法</span></span><br><span class="line">                <span class="title class_">Dep</span>.<span class="property">target</span> &amp;&amp; dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>)</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">newVal</span>)&#123;    <span class="comment">//当给data属性中设置值的时候 更改获取的属性的值</span></span><br><span class="line">                <span class="keyword">if</span>(newVal !== value)&#123;</span><br><span class="line">                    <span class="comment">// 这里的this不是实例</span></span><br><span class="line">                    that.<span class="title class_">Observe</span>(newVal)  <span class="comment">// 如果是对象继续劫持</span></span><br><span class="line">                    value = newVal</span><br><span class="line">                    dep.<span class="title function_">notify</span>();   <span class="comment">//通知 数据更新</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 订阅的数组</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subs</span> = [] </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addSub</span>(<span class="params">watcher</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(watcher)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">notify</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">watcher</span>=&gt;</span>watcher.<span class="title function_">update</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Watcher.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 观察者的目的就是给需要变化的哪个元素增加一个观察者，当数据变化后执行对应的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">vm,expr,cb</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vm</span> = vm</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">expr</span> = expr</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cb</span> = cb</span><br><span class="line">        <span class="comment">// 先获取一下老的值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getVal</span>(<span class="params">vm,expr</span>)&#123;<span class="comment">//获取实例上对应的数据</span></span><br><span class="line">        expr = expr.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)  <span class="comment">//[a,v,c,d]</span></span><br><span class="line">        <span class="keyword">return</span> expr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,next</span>)=&gt;</span>&#123;   <span class="comment">// vm.$data.a</span></span><br><span class="line">            <span class="keyword">return</span> prev[next];</span><br><span class="line">        &#125;,vm.<span class="property">$data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="title function_">getVal</span>(<span class="variable language_">this</span>.<span class="property">vm</span>,<span class="variable language_">this</span>.<span class="property">expr</span>)</span><br><span class="line">        <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对外暴露的方法</span></span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> newValue = <span class="variable language_">this</span>.<span class="title function_">getVal</span>(<span class="variable language_">this</span>.<span class="property">vm</span>,<span class="variable language_">this</span>.<span class="property">expr</span>)</span><br><span class="line">        <span class="keyword">let</span> oldVal = <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">        <span class="keyword">if</span>(newValue !== oldVal)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">cb</span>(newValue) <span class="comment">//对应watch callback</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用新值和老值进行比较 如果发生变化就调用更新方法</span></span><br><span class="line"><span class="comment">// vm.$data expr</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简易聊天室—基于原生websocket-nodejs&quot;&gt;&lt;a href=&quot;#简易聊天室—基于原生websocket-nodejs&quot; class=&quot;headerlink&quot; title=&quot;简易聊天室—基于原生websocket+nodejs&quot;&gt;&lt;/a&gt;简易聊天室—基于原生websocket+nodejs&lt;/h2&gt;&lt;p&gt;&lt;code&gt;前端代码&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="聊天室效果" scheme="http://example.com/tags/%E8%81%8A%E5%A4%A9%E5%AE%A4%E6%95%88%E6%9E%9C/"/>
    
    <category term="websocket" scheme="http://example.com/tags/websocket/"/>
    
    <category term="nodejs" scheme="http://example.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>开发相关书籍</title>
    <link href="http://example.com/2019/06/15/book/"/>
    <id>http://example.com/2019/06/15/book/</id>
    <published>2019-06-15T13:47:44.000Z</published>
    <updated>2022-03-28T13:50:11.299Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mox.moe/">漫画</a><br><a href="https://zh.fr1lib.org/">各类书籍</a></p><h2 id="《小说》"><a href="#《小说》" class="headerlink" title="《小说》"></a>《小说》</h2>    <div class="row">        <embed src="https://miaochen.mcweblog.com/%E4%BC%BD%E5%88%A9%E7%95%A5%E7%9A%84%E8%8B%A6%E6%81%BC%20by%20%5B%E6%97%A5%5D%20%E4%B8%9C%E9%87%8E%E5%9C%AD%E5%90%BE%20%E8%91%97%20%E8%A2%81%E6%96%8C%20%E8%AF%91%20%28z-lib.org%29.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《JavaScript-DOM-编程艺术》"><a href="#《JavaScript-DOM-编程艺术》" class="headerlink" title="《JavaScript DOM 编程艺术》"></a>《JavaScript DOM 编程艺术》</h2>    <div class="row">        <embed src="https://miaochen.mcweblog.com/1.JavaScript%20DOM%20%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《JavaScript高级程序设计（第三版）》"><a href="#《JavaScript高级程序设计（第三版）》" class="headerlink" title="《JavaScript高级程序设计（第三版）》"></a>《JavaScript高级程序设计（第三版）》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89%E9%9D%9E%E6%89%AB%E6%8F%8F%E7%89%88.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《锋利的jQuery（第二版）》"><a href="#《锋利的jQuery（第二版）》" class="headerlink" title="《锋利的jQuery（第二版）》"></a>《锋利的jQuery（第二版）》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/%5Bwww.java1234.com%5D%E9%94%8B%E5%88%A9%E7%9A%84jQuery%20%20%E7%AC%AC2%E7%89%88%20%E6%B8%85%E6%99%B0%E7%89%88.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《学习JavaScript-数据结构与算法（第二版）》"><a href="#《学习JavaScript-数据结构与算法（第二版）》" class="headerlink" title="《学习JavaScript 数据结构与算法（第二版）》"></a>《学习JavaScript 数据结构与算法（第二版）》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/%E5%AD%A6%E4%B9%A0JavaScript%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%EF%BC%88%E7%AC%AC2%E7%89%88%EF%BC%89@www.java1234.com.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《JavaScript-设计模式与开发实践》"><a href="#《JavaScript-设计模式与开发实践》" class="headerlink" title="《JavaScript 设计模式与开发实践》"></a>《JavaScript 设计模式与开发实践》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/%5Bwww.java1234.com%5DJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《高性能-JavaScript》"><a href="#《高性能-JavaScript》" class="headerlink" title="《高性能 JavaScript》"></a>《高性能 JavaScript》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/%E9%AB%98%E6%80%A7%E8%83%BDJavaScript.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《你不知道的-JavaScript-书籍》"><a href="#《你不知道的-JavaScript-书籍》" class="headerlink" title="《你不知道的 JavaScript 书籍》"></a>《你不知道的 JavaScript 书籍》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JavaScript.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《Node-js-实战》"><a href="#《Node-js-实战》" class="headerlink" title="《Node.js 实战》"></a>《Node.js 实战》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/Node.js%E5%AE%9E%E6%88%98%5BCN%5D.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《设计模式：可复用面向对象软件的基础》"><a href="#《设计模式：可复用面向对象软件的基础》" class="headerlink" title="《设计模式：可复用面向对象软件的基础》"></a>《设计模式：可复用面向对象软件的基础》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8F%AF%E5%A4%8D%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BD%AF%E4%BB%B6%E7%9A%84%E5%9F%BA%E7%A1%80.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《jQuery实战（第三版）》"><a href="#《jQuery实战（第三版）》" class="headerlink" title="《jQuery实战（第三版）》"></a>《jQuery实战（第三版）》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/jQuery%E5%AE%9E%E6%88%98%28%E7%AC%AC%E4%B8%89%E7%89%88%29%20%28Bear%20Bibeault%29.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《深入理解ES6》"><a href="#《深入理解ES6》" class="headerlink" title="《深入理解ES6》"></a>《深入理解ES6》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/es6.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《深入浅出node-js》"><a href="#《深入浅出node-js》" class="headerlink" title="《深入浅出node.js》"></a>《深入浅出node.js》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAnode.js.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《深入React技术栈》"><a href="#《深入React技术栈》" class="headerlink" title="《深入React技术栈》"></a>《深入React技术栈》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/%E6%B7%B1%E5%85%A5React%E6%8A%80%E6%9C%AF%E6%A0%88.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《JavaScript正则表达式迷你书（1-1版）》"><a href="#《JavaScript正则表达式迷你书（1-1版）》" class="headerlink" title="《JavaScript正则表达式迷你书（1.1版）》"></a>《JavaScript正则表达式迷你书（1.1版）》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/JavaScript%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%B7%E4%BD%A0%E4%B9%A6%EF%BC%881.1%E7%89%88%EF%BC%89.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《JavaScript语言精粹（修订版）》"><a href="#《JavaScript语言精粹（修订版）》" class="headerlink" title="《JavaScript语言精粹（修订版）》"></a>《JavaScript语言精粹（修订版）》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9%EF%BC%88%E4%BF%AE%E8%AE%A2%E7%89%88%EF%BC%89.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="《CSS世界》"><a href="#《CSS世界》" class="headerlink" title="《CSS世界》"></a>《CSS世界》</h2>    <div class="row">        <embed src="http://miaochen.mcweblog.com/CSS%E4%B8%96%E7%95%8C.pdf" width="100%" height="1200" type="application/pdf">    </div>    <h2 id="经典编程书籍大全"><a href="#经典编程书籍大全" class="headerlink" title="经典编程书籍大全"></a>经典编程书籍大全</h2><p>100+ 经典技术书籍，涵盖：计算机系统与网络、系统架构、算法与数据结构、前端开发、后端开发、移动开发、数据库、测试、项目与团队、程序员职业修炼、求职面试 和 编程相关的经典书籍。</p><h2 id="计算机系统与网络"><a href="#计算机系统与网络" class="headerlink" title="计算机系统与网络"></a>计算机系统与网络</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B00AAQXKXS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00AAQXKXS&amp;linkCode=as2&amp;tag=vastwork-23">图灵的秘密:他的生平、思想及论文解读</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0011F9OQE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F9OQE&amp;linkCode=as2&amp;tag=vastwork-23">计算机系统概论</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0011F5RYM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F5RYM&amp;linkCode=as2&amp;tag=vastwork-23">深入理解Linux内核</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B003QN7J7U/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003QN7J7U&amp;linkCode=as2&amp;tag=vastwork-23">深入Linux内核架构</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00116OTVS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00116OTVS&amp;linkCode=as2&amp;tag=vastwork-23">TCP/IP详解 卷1：协议</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00JUM2ML4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00JUM2ML4&amp;linkCode=as2&amp;tag=vastwork-23">Linux系统编程（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B004X3Z3D4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004X3Z3D4&amp;linkCode=as2&amp;tag=vastwork-23">Linux内核设计与实现（第3版）</a>》</li><li>  《<a href="https://amazon.cn/gp/product/B01N03IQK4/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=vastwork-23&creative=3200&linkCode=as2&creativeASIN=B01N03IQK4&linkId=b87deba0291c05df8d8ea0d64fefb0f0">深入理解计算机系统（原书第3版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0011AP7RY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011AP7RY&amp;linkCode=as2&amp;tag=vastwork-23">计算机程序的构造和解释（原书第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B009RSXIB4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B009RSXIB4&amp;linkCode=as2&amp;tag=vastwork-23">编码：隐匿在计算机软硬件背后的语言</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0140I5WPK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0140I5WPK&amp;linkCode=as2&amp;tag=vastwork-23">性能之颠：洞悉系统、企业与云计算</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B011S72JB6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B011S72JB6&amp;linkCode=as2&amp;tag=vastwork-23">UNIX网络编程 卷1：套接字联网API（第3版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B012R5A29O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B012R5A29O&amp;linkCode=as2&amp;tag=vastwork-23">UNIX网络编程 卷2：进程间通信</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B001GS7918/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001GS7918&amp;linkCode=as2&amp;tag=vastwork-23">Windows核心编程(第5版)</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00PB5QQ84/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00PB5QQ84&amp;linkCode=as2&amp;tag=vastwork-23">WireShark网络分析就这么简单</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01AS1OS8A/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01AS1OS8A&amp;linkCode=as2&amp;tag=vastwork-23">WireShark网络分析的艺术</a>》</li></ul><h2 id="编程通用"><a href="#编程通用" class="headerlink" title="编程通用"></a>编程通用</h2><ul><li>  《<a href="https://www.amazon.cn/dp/B00CD1EWMG/ref=sr_1_1?ie=UTF8&qid=1514903810&sr=8-1">设计原本</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B006P7V73G/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B006P7V73G&amp;linkCode=as2&amp;tag=vastwork-23">编程原本</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0061XKRXA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0061XKRXA&amp;linkCode=as2&amp;tag=vastwork-23">代码大全</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B008Z1IEQ8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008Z1IEQ8&amp;linkCode=as2&amp;tag=vastwork-23">UNIX编程艺术</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0031M9GHC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0031M9GHC&amp;linkCode=as2&amp;tag=vastwork-23">代码整洁之道</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00SFZH0DC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00SFZH0DC&amp;linkCode=as2&amp;tag=vastwork-23">编程珠玑（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0150BMQDM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0150BMQDM&amp;linkCode=as2&amp;tag=vastwork-23">编程珠玑（续）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00IOAM6VE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IOAM6VE&amp;linkCode=as2&amp;tag=vastwork-23">软件调试的艺术</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00KMJ2Q1U/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00KMJ2Q1U&amp;linkCode=as2&amp;tag=vastwork-23">修改代码的艺术</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B007HYMPBY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007HYMPBY&amp;linkCode=as2&amp;tag=vastwork-23">编程语言实现模式</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B008B4DTG4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008B4DTG4&amp;linkCode=as2&amp;tag=vastwork-23">编写可读代码的艺术</a>》</li><li>  《解析极限编程：拥抱变化》</li><li>  《<a href="https://www.amazon.cn/gp/product/B008UCHA58/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008UCHA58&amp;linkCode=as2&amp;tag=vastwork-23">精通正则表达式（第3版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B001NGO85I/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001NGO85I&amp;linkCode=as2&amp;tag=vastwork-23">编译原理（第2版）</a>》龙书</li><li>  《<a href="https://www.amazon.cn/gp/product/B011LPUB42/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B011LPUB42&amp;linkCode=as2&amp;tag=vastwork-23">重构：改善既有代码的设计</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00ALPRM3M/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ALPRM3M&amp;linkCode=as2&amp;tag=vastwork-23">七周七语言：理解多种编程范型</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00CBBLUFK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00CBBLUFK&amp;linkCode=as2&amp;tag=vastwork-23">调试九法：软硬件错误的排查之道</a>》</li><li>  《程序设计语言：实践之路（第3版）》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00PG0MM3C/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00PG0MM3C&amp;linkCode=as2&amp;tag=vastwork-23">计算的本质：深入剖析程序和计算机</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B001130JN8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001130JN8&amp;linkCode=as2&amp;tag=vastwork-23">设计模式 : 可复用面向对象软件的基础</a>》</li><li>《<a href="https://amazon.cn/gp/product/B0011FBU34/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=vastwork-23&creative=3200&linkCode=as2&creativeASIN=B0011FBU34&linkId=cd5d20e99ff289529d6dbe2cd223f2b6">Head First 设计模式（中文版）</a> 》（感谢<a href="https://github.com/Great-Li-Xin">@Great-Li-Xin</a> <a href="https://github.com/jobbole/awesome-programming-books/issues/27">推荐</a> ）</li></ul><h2 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B009OCFQ0O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B009OCFQ0O&amp;linkCode=as2&amp;tag=vastwork-23">算法（第4版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00AK7BYJY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00AK7BYJY&amp;linkCode=as2&amp;tag=vastwork-23">算法导论（原书第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B019NB0VCI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B019NB0VCI&amp;linkCode=as2&amp;tag=vastwork-23">Python算法教程</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00S4HCQUI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00S4HCQUI&amp;linkCode=as2&amp;tag=vastwork-23">算法设计与分析基础（第3版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B016DWSF8M/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B016DWSF8M&amp;linkCode=as2&amp;tag=vastwork-23">学习 JavaScript 数据结构与算法</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01LDG2DSG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01LDG2DSG&amp;linkCode=as2&amp;tag=vastwork-23">数据结构与算法分析 : C++描述（第4版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B002WC7NGS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B002WC7NGS&amp;linkCode=as2&amp;tag=vastwork-23">数据结构与算法分析 : C语言描述（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01CNP0CG6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01CNP0CG6&amp;linkCode=as2&amp;tag=vastwork-23">数据结构与算法分析 : Java语言描述（第2版）</a>》</li></ul><h2 id="职业修炼与规划"><a href="#职业修炼与规划" class="headerlink" title="职业修炼与规划"></a>职业修炼与规划</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B00KQDTZ4S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00KQDTZ4S&amp;linkCode=as2&amp;tag=vastwork-23">大教堂与集市</a>》</li><li>  《卓有成效的程序员》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01LZJ8L9J/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01LZJ8L9J&amp;linkCode=as2&amp;tag=vastwork-23">程序员的职业素养</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B004GV08CY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004GV08CY&amp;linkCode=as2&amp;tag=vastwork-23">程序员修炼之道：从小工到专家</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00H6X6LD4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00H6X6LD4&amp;linkCode=as2&amp;tag=vastwork-23">软件开发者路线图：从学徒到高手</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00CBBKDGM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00CBBKDGM&amp;linkCode=as2&amp;tag=vastwork-23">我编程，我快乐: 程序员职业规划之道</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B007VARUIM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007VARUIM&amp;linkCode=as2&amp;tag=vastwork-23">程序员的思维修炼：开发认知潜能的九堂课</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00OA9L3NU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00OA9L3NU&amp;linkCode=as2&amp;tag=vastwork-23">高效程序员的45个习惯：敏捷开发修炼之道(修订版)</a>》</li></ul><h2 id="大师访谈"><a href="#大师访谈" class="headerlink" title="大师访谈"></a>大师访谈</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B00451BP72/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00451BP72&amp;linkCode=as2&amp;tag=vastwork-23">编程大师智慧</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00ALPRKMA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ALPRKMA&amp;linkCode=as2&amp;tag=vastwork-23">编程大师访谈录</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00QA7GA2Y/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00QA7GA2Y&amp;linkCode=as2&amp;tag=vastwork-23">编程人生 : 15位软件先驱访谈录</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B007ED88CI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007ED88CI&amp;linkCode=as2&amp;tag=vastwork-23">奇思妙想 : 15位计算机天才及其重大发现</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B008G80O9K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008G80O9K&amp;linkCode=as2&amp;tag=vastwork-23">图灵和ACM图灵奖</a>》</li></ul><h2 id="架构-性能"><a href="#架构-性能" class="headerlink" title="架构/性能"></a>架构/性能</h2><ul><li>  《<a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B01DXW29IM/ref=sr_1_1?s=books&ie=UTF8&qid=1496288348&sr=1-1">架构即未来</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01ER75V6O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01ER75V6O&amp;linkCode=as2&amp;tag=vastwork-23">微服务设计</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00NGW4EAG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00NGW4EAG&amp;linkCode=as2&amp;tag=vastwork-23">大数据日知录</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B003LBSRDM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003LBSRDM&amp;linkCode=as2&amp;tag=vastwork-23">企业应用架构模式</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00JMKWHFU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00JMKWHFU&amp;linkCode=as2&amp;tag=vastwork-23">Web性能权威指南</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01M0EHQ43/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01M0EHQ43&amp;linkCode=as2&amp;tag=vastwork-23">SRE：Google运维解密</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0153178XM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0153178XM&amp;linkCode=as2&amp;tag=vastwork-23">发布！软件的设计与部署</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01HZFHQQI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01HZFHQQI&amp;linkCode=as2&amp;tag=vastwork-23">高扩展性网站的 50 条原则</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00F3Z26G8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00F3Z26G8&amp;linkCode=as2&amp;tag=vastwork-23">大型网站技术架构:核心原理与案例分析</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00EP6TGAU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00EP6TGAU&amp;linkCode=as2&amp;tag=vastwork-23">恰如其分的软件架构：风险驱动的设计方法</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00CMMUXC4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00CMMUXC4&amp;linkCode=as2&amp;tag=vastwork-23">软件系统架构：使用视点和视角与利益相关者合作（第2版）</a>》</li></ul><h2 id="Linux-Unix"><a href="#Linux-Unix" class="headerlink" title="Linux / Unix"></a>Linux / Unix</h2><ul><li>  《<a href="https://amazon.cn/gp/product/B00HLA8TYG/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=vastwork-23&amp;creative=3200&amp;linkCode=as2&amp;creativeASIN=B00HLA8TYG&amp;linkId=2d246600ae289155a09ec47545d584f6">Linux/Unix 系统编程手册</a>》（感谢<a href="https://github.com/geekgao">@geekgao</a> 的推荐）</li><li>  《<a href="https://amazon.cn/gp/product/B00KMR129E/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=vastwork-23&amp;creative=3200&amp;linkCode=as2&amp;creativeASIN=B00KMR129E&amp;linkId=9655c290f9d97c4d7e80093839cc5944">Unix 环境高级编程(第3版)</a>》</li><li>  《Unix/Linux 编程实践教程》</li><li>  《<a href="https://amazon.cn/gp/product/B003TJNO98/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=vastwork-23&amp;creative=3200&amp;linkCode=as2&amp;creativeASIN=B003TJNO98&amp;linkId=dda37757175b431dedc5e20212021f21">鸟哥的 Linux 私房菜（基础学习篇）</a>》和《<a href="https://amazon.cn/gp/product/B008AEI8A2/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=vastwork-23&amp;creative=3200&amp;linkCode=as2&amp;creativeASIN=B008AEI8A2&amp;linkId=35f878fbebb2f66ae8c4fc3e76914ff6">鸟哥的 Linux 私房菜（服务器架设篇）</a>》</li><li>  《<a href="https://amazon.cn/gp/product/B0719GT5W1/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=vastwork-23&amp;creative=3200&amp;linkCode=as2&amp;creativeASIN=B0719GT5W1&amp;linkId=aeef8bc8651bd9e5f363527b86d1229a">Linux 命令行与 shell 脚本编程大全（第3版）</a>》</li><li>  《<a href="https://amazon.cn/gp/product/B00MB51SAI/ref=as_li_qf_asin_il_tl?ie=UTF8&amp;tag=vastwork-23&amp;creative=3200&amp;linkCode=as2&amp;creativeASIN=B00MB51SAI&amp;linkId=b22fe2eaac93168eae25d9bab11fe30c">只是为了好玩 : Linux 之父林纳斯自传</a>》</li></ul><h2 id="Web前端"><a href="#Web前端" class="headerlink" title="Web前端"></a>Web前端</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B013SGB2AO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B013SGB2AO&amp;linkCode=as2&amp;tag=vastwork-23">高性能 JavaScript</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0089TDFNS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0089TDFNS&amp;linkCode=as2&amp;tag=vastwork-23">锋利的 jQuery（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B016DWSEWO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B016DWSEWO&amp;linkCode=as2&amp;tag=vastwork-23">JavaScript 忍者秘籍</a>》（感谢<a href="https://github.com/jobbole/awesome-programming-books/issues?q=is:issue+is:open+author:joker-danta">@joker-danta</a> 补充推荐）</li><li>  《<a href="https://www.amazon.cn/gp/product/B00BQ7RMW0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00BQ7RMW0&amp;linkCode=as2&amp;tag=vastwork-23">编写可维护的 JavaScript</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00W34DZ8K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00W34DZ8K&amp;linkCode=as2&amp;tag=vastwork-23">你不知道的 JavaScript（上）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01LMYXGAI/ref=pd_sim_14_1?ie=UTF8&psc=1&refRID=4JRMK10EFJQHDAG8MCZF">你不知道的 JavaScript（中）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B007VISQ1Y/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007VISQ1Y&amp;linkCode=as2&amp;tag=vastwork-23">JavaScript 权威指南（第6版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0097CON2S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0097CON2S&amp;linkCode=as2&amp;tag=vastwork-23">JavaScript 语言精粹（修订版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B004VJM5KE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004VJM5KE&amp;linkCode=as2&amp;tag=vastwork-23">JavaScript DOM编程艺术 （第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B007OQQVMY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007OQQVMY&amp;linkCode=as2&amp;tag=vastwork-23">JavaScript 高级程序设计（第3版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00JVLEYY2/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00JVLEYY2&amp;linkCode=as2&amp;tag=vastwork-23">JavaScript 异步编程：设计快速响应的网络应用</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00XJ2AU3S/ref=pd_bxgy_14_img_3?ie=UTF8&psc=1&refRID=4JRMK10EFJQHDAG8MCZF">JavaScript设计模式与开发实践</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B07574N7Y2/ref=pd_sim_14_7?ie=UTF8&psc=1&refRID=W48SJ7HFN2TXAQ1VAA8K">JavaScript框架设计（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00GMXI1QY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00GMXI1QY&amp;linkCode=as2&amp;tag=vastwork-23">Effective JavaScript：编写高质量JavaScript代码的68个有效方法</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00H706BIG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00H706BIG&amp;linkCode=as2&amp;tag=vastwork-23">HTML5 权威指南</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B015316VJY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B015316VJY&amp;linkCode=as2&amp;tag=vastwork-23">HTML5 秘籍（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00K58535O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00K58535O&amp;linkCode=as2&amp;tag=vastwork-23">HTML5 与 CSS3 基础教程（第八版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01ET3FO86/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01ET3FO86&amp;linkCode=as2&amp;tag=vastwork-23">CSS 揭秘</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00M2DKZ1W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00M2DKZ1W&amp;linkCode=as2&amp;tag=vastwork-23">CSS 设计指南（第3版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0011F5SIC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F5SIC&amp;linkCode=as2&amp;tag=vastwork-23">CSS 权威指南（第3版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01LXL42O5/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01LXL42O5&amp;linkCode=as2&amp;tag=vastwork-23">深入浅出 HTML 与 CSS</a>》</li><li>  《<a href="https://www.amazon.cn/ES6%E6%A0%87%E5%87%86%E5%85%A5%E9%97%A8-%E9%98%AE%E4%B8%80%E5%B3%B0/dp/B0755547ZZ/ref=sr_1_3?s=books&ie=UTF8&qid=1510299626&sr=1-3&keywords=Ecmascript">ES6 标准入门（第三版）</a>》</li><li>  《<a href="https://www.amazon.cn/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6-Nicholas-C-Zakas/dp/B071GW3JDP/ref=sr_1_1?s=books&ie=UTF8&qid=1510299626&sr=1-1&keywords=Ecmascript">深入理解 ES6</a>》</li></ul><h2 id="Java开发"><a href="#Java开发" class="headerlink" title="Java开发"></a>Java开发</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B01ER75QC8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01ER75QC8&amp;linkCode=as2&amp;tag=vastwork-23">Java8 实战</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0077K9XHW/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0077K9XHW&amp;linkCode=as2&amp;tag=vastwork-23">Java并发编程实战</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01DLB7Z66/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01DLB7Z66&amp;linkCode=as2&amp;tag=vastwork-23">Java性能权威指南</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00E0D2OX4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00E0D2OX4&amp;linkCode=as2&amp;tag=vastwork-23">Java程序员修炼之道</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B017MEN094/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B017MEN094&amp;linkCode=as2&amp;tag=vastwork-23">实战Java高并发程序设计</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0011F7WU4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011F7WU4&amp;linkCode=as2&amp;tag=vastwork-23">Java编程思想 （第4版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01HI0BUF8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01HI0BUF8&amp;linkCode=as2&amp;tag=vastwork-23">深入理解Java虚拟机（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B001PTGR52/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001PTGR52&amp;linkCode=as2&amp;tag=vastwork-23">Effective java 中文版（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01M22BGUQ/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01M22BGUQ&amp;linkCode=as2&amp;tag=vastwork-23">Java核心技术·卷1：基础知识（原书第9版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00IK7SM6O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IK7SM6O&amp;linkCode=as2&amp;tag=vastwork-23">Java核心技术·卷2：高级特性（原书第9版）</a>》</li></ul><h2 id="NET-NET-Core"><a href="#NET-NET-Core" class="headerlink" title=".NET/.NET Core"></a>.NET/.NET Core</h2><ul><li>  《<a href="https://www.amazon.cn/C-6-0%E6%9C%AC%E8%B4%A8%E8%AE%BA-%E9%A9%AC%E5%85%8B%C2%B7%E7%B1%B3%E5%87%AF%E5%88%A9%E6%96%AF/dp/B01N7U95UK/ref=sr_1_1?s=books&ie=UTF8&qid=1510299751&sr=1-1&keywords=C%23+%E6%9C%AC%E8%B4%A8%E8%AE%BA">C# 6.0 本质论</a>》</li><li>  《<a href="https://www.amazon.cn/%E6%9E%9C%E5%A3%B3%E4%B8%AD%E7%9A%84C-C-5-0%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97-%E9%98%BF%E5%9D%9D%E5%93%88%E7%91%9E/dp/B00G51PUDA/ref=sr_1_1?s=books&ie=UTF8&qid=1510299796&sr=1-1&keywords=%E6%9E%9C%E5%A3%B3%E4%B8%AD%E7%9A%84C%23">果壳中的C#：C#5.0权威指南</a>》</li><li>  《你必须知道的.NET（第2版）》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00J94AG2A/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00J94AG2A&amp;linkCode=as2&amp;tag=vastwork-23">深入理解C#（第3版）</a>》</li><li>  《Effective C#: 50 Specific Ways to Improve Your C#, Third Edition》</li><li>  《More Effective C# (Includes Content Update Program): 50 Specific Ways to Improve Your C#, 2nd edition》</li><li>  《<a href="https://www.amazon.cn/Async-in-C-5-0-Unleash-the-Power-of-Async-Davies-Alex/dp/1449337163/ref=sr_1_1?s=books&ie=UTF8&qid=1510299899&sr=1-1&keywords=Async+in+C%23+5.0">Async in C# 5.0: Unleash the Power of Async</a>》</li><li>  《<a href="https://www.amazon.cn/C-%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%BB%8F%E5%85%B8%E5%AE%9E%E4%BE%8B-%E5%85%8B%E5%88%A9%E9%87%8C/dp/B00QVLZEQ2/ref=sr_1_1?s=books&ie=UTF8&qid=1510299937&sr=1-1&keywords=C%23%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%BB%8F%E5%85%B8%E5%AE%9E%E4%BE%8B">C#并发编程经典实例</a>》</li><li>  《<a href="https://www.amazon.cn/C-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98-%E6%98%93%E6%A0%BC%E6%81%A9%C2%B7%E9%98%BF%E6%A0%BC%E4%BD%9B%E6%B8%A9/dp/B06XHXV5FQ/ref=sr_1_1?s=books&ie=UTF8&qid=1510299974&sr=1-1&keywords=C%23%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98">C#多线程编程实战(原书第2版)</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00P8VZ8T4/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00P8VZ8T4&amp;linkCode=as2&amp;tag=vastwork-23">CLR via C#（第4版）</a>》</li><li>  《.NET本质论 第1卷:公共语言运行库》</li><li>  《.NET探秘 : MSIL权威指南》</li><li>  《Pro .NET Performance》</li><li>  《Shared Source CLI Essentials》</li><li>  《.NET 高级调试》</li><li>  《Microsoft.NET 和 Windows 应用程序调试》</li><li>  《微软.NET 程序的加密与解密》</li><li>  《<a href="https://www.amazon.cn/NET-Development-Using-the-Compiler-API-Bock-Jason/dp/1484221109/ref=sr_1_1?s=books&ie=UTF8&qid=1510300116&sr=1-1&keywords=.NET+Development+Using+the+Compiler+API">.NET Development Using the Compiler API</a>》</li><li>  《.NET设计规范 : 约定、惯用法与模式》</li><li>  《<a href="https://www.amazon.cn/gp/product/B074JS9HWX/ref=pd_sim_14_9?ie=UTF8&psc=1&refRID=67XZ7GZVFZ3J57NQTJ8X">编写高性能的.NET代码</a>》</li><li>  《<a href="https://www.amazon.cn/Building-Microservices-with-NET-Core-Develop-skills-in-Reactive-Microservices-database-scaling-Azure-Microservices-and-more-Aroraa-Gaurav-Kumar/dp/B01MQ52RM3/ref=sr_1_10?s=books&ie=UTF8&qid=1510300439&sr=1-10&keywords=.net+core">Building Microservices with .NET Core</a>》</li><li>  《<a href="https://www.amazon.cn/Microservices-in-NET-Core-with-Examples-in-NancyFX-Horsdal-Christian/dp/1617293377/ref=sr_1_15?s=books&ie=UTF8&qid=1510300439&sr=1-15&keywords=.net+core">Microservices in .NET Core, with Examples in NancyFX</a>》</li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B00UI93JD8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00UI93JD8&amp;linkCode=as2&amp;tag=vastwork-23">集体智慧编程</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00P6OJ0TC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00P6OJ0TC&amp;linkCode=as2&amp;tag=vastwork-23">笨办法学Python</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00KAFX65Q/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00KAFX65Q&amp;linkCode=as2&amp;tag=vastwork-23">Python基础教程</a>》</li><li>  《Python源码剖析》</li><li>  《<a href="https://www.amazon.cn/gp/product/B007NB2B4M/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007NB2B4M&amp;linkCode=as2&amp;tag=vastwork-23">Head First Python</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00HECW20S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00HECW20S&amp;linkCode=as2&amp;tag=vastwork-23">与孩子一起学编程</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B004TUJ7A6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004TUJ7A6&amp;linkCode=as2&amp;tag=vastwork-23">Python学习手册（第4版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00WKR1OKG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00WKR1OKG&amp;linkCode=as2&amp;tag=vastwork-23">Python Cookbook（第3版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01MCUN37Y/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01MCUN37Y&amp;linkCode=as2&amp;tag=vastwork-23">Python参考手册（第4版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01FQAS0KK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01FQAS0KK&amp;linkCode=as2&amp;tag=vastwork-23">Python核心编程（第3版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01HCVUJFA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01HCVUJFA&amp;linkCode=as2&amp;tag=vastwork-23">Python科学计算（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00GHGZLWS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00GHGZLWS&amp;linkCode=as2&amp;tag=vastwork-23">利用 Python 进行数据分析</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01ION3W54/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01ION3W54&amp;linkCode=as2&amp;tag=vastwork-23">Think Python：像计算机科学家一样思考Python（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00MHDPIJ6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00MHDPIJ6&amp;linkCode=as2&amp;tag=vastwork-23">Python编程实战:运用设计模式、并发和程序库创建高质量程序</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B019ZRGBVU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B019ZRGBVU&amp;linkCode=as2&amp;tag=vastwork-23">Python绝技：运用Python成为顶级黑客</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0153177A6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0153177A6&amp;linkCode=as2&amp;tag=vastwork-23">Flask Web开发:基于Python的Web应用开发实战</a>》</li></ul><h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B01FSXCBOQ/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01FSXCBOQ&amp;linkCode=as2&amp;tag=vastwork-23">Android编程权威指南（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00SFZGX08/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00SFZGX08&amp;linkCode=as2&amp;tag=vastwork-23">移动应用UI设计模式（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/Android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2-%E4%BB%BB%E7%8E%89%E5%88%9A/dp/B014HV1X3K/ref=sr_1_1?s=books&ie=UTF8&qid=1478155289&sr=1-1&keywords=android%E5%BC%80%E5%8F%91%E8%89%BA%E6%9C%AF%E6%8E%A2%E7%B4%A2">Android开发艺术探索</a>》</li></ul><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B00NKZCM3U/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00NKZCM3U&amp;linkCode=as2&amp;tag=vastwork-23">iOS编程实战</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B013UG2ULW/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B013UG2ULW&amp;linkCode=as2&amp;tag=vastwork-23">iOS编程（第4版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00DE60G3S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00DE60G3S&amp;linkCode=as2&amp;tag=vastwork-23">Objective-C高级编程</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00IDSGY06/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IDSGY06&amp;linkCode=as2&amp;tag=vastwork-23">Effective Objective-C 2.0：编写高质量iOS与OS X代码的52个有效方法</a>》</li></ul><h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B004R1QIJU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004R1QIJU&amp;linkCode=as2&amp;tag=vastwork-23">Head First PHP &amp; MySQL（中文版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B005D6IRRY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B005D6IRRY&amp;linkCode=as2&amp;tag=vastwork-23">深入PHP：面向对象、模式与实践（第3版）</a>》</li></ul><h2 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B00IZW4DK8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00IZW4DK8&amp;linkCode=as2&amp;tag=vastwork-23">C标准库</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00163LU68/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00163LU68&amp;linkCode=as2&amp;tag=vastwork-23">C和指针</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0012NIW9K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0012NIW9K&amp;linkCode=as2&amp;tag=vastwork-23">C专家编程</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0012UMPBY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0012UMPBY&amp;linkCode=as2&amp;tag=vastwork-23">C陷阱与缺陷</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01D10NSCM/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01D10NSCM&amp;linkCode=as2&amp;tag=vastwork-23">C语言接口与实现</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0011425T8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0011425T8&amp;linkCode=as2&amp;tag=vastwork-23">C程序设计语言（第2版）</a>》</li><li>  《C语言参考手册（第5版）》</li></ul><h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B00YLZIRHI/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00YLZIRHI&amp;linkCode=as2&amp;tag=vastwork-23">C++标准库</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B005CFUQR0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B005CFUQR0&amp;linkCode=as2&amp;tag=vastwork-23">C++编程思想</a>》</li><li>  <span style="font-weight: normal;">《</span>C++语言的设计与演化<span style="font-weight: normal;">》</span></li><li>  《<a href="https://www.amazon.cn/gp/product/B003VPX6YS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003VPX6YS&amp;linkCode=as2&amp;tag=vastwork-23">C++程序设计原理与实践</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00ESUIL0O/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ESUIL0O&amp;linkCode=as2&amp;tag=vastwork-23">C++ Primer （中文第5版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00S6U4C6E/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00S6U4C6E&amp;linkCode=as2&amp;tag=vastwork-23">C++ Primer习题集(第5版)</a> 》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01I9BNASA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01I9BNASA&amp;linkCode=as2&amp;tag=vastwork-23">C++程序设计语言(第1-3部分)(原书第4版)</a> 》</li><li>  《<a href="https://www.amazon.cn/gp/product/B004G72P24/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004G72P24&amp;linkCode=as2&amp;tag=vastwork-23">Effective C++:改善程序与设计的55个具体做法(第3版)(中文版) </a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B004IP8BD6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B004IP8BD6&amp;linkCode=as2&amp;tag=vastwork-23">More Effective C++:35个改善编程与设计的有效方法(中文版) </a>》<br>&nbsp;</li></ul><h2 id="机器学习和数据挖掘"><a href="#机器学习和数据挖掘" class="headerlink" title="机器学习和数据挖掘"></a>机器学习和数据挖掘</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B00JUE9DXW/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00JUE9DXW&amp;linkCode=as2&amp;tag=vastwork-23">数据之巅</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00NTM5GK0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00NTM5GK0&amp;linkCode=as2&amp;tag=vastwork-23">矩阵分析</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B002WC7NH2/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B002WC7NH2&amp;linkCode=as2&amp;tag=vastwork-23">机器学习</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B007TSFMTA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007TSFMTA&amp;linkCode=as2&amp;tag=vastwork-23">统计学习方法</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B01AG3ZV9K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B01AG3ZV9K&amp;linkCode=as2&amp;tag=vastwork-23">机器学习导论</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B008AK5YJO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008AK5YJO&amp;linkCode=as2&amp;tag=vastwork-23">推荐系统实践</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00D747PTK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00D747PTK&amp;linkCode=as2&amp;tag=vastwork-23">机器学习实战</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00AY830HS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00AY830HS&amp;linkCode=as2&amp;tag=vastwork-23">Web数据挖掘</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B006PHIVNA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B006PHIVNA&amp;linkCode=as2&amp;tag=vastwork-23">深入浅出统计学</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00116C3DY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00116C3DY&amp;linkCode=as2&amp;tag=vastwork-23">模式分类（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00264GG56/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00264GG56&amp;linkCode=as2&amp;tag=vastwork-23">概率论与数理统计</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00PRH2BXA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00PRH2BXA&amp;linkCode=as2&amp;tag=vastwork-23">统计学习基础(第2版)(英文)</a> 》</li><li>  《<a href="https://www.amazon.cn/gp/product/B007NR0T4A/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B007NR0T4A&amp;linkCode=as2&amp;tag=vastwork-23">数据挖掘：概念与技术（第3版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00K5I91WK/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00K5I91WK&amp;linkCode=as2&amp;tag=vastwork-23">数据挖掘：实用机器学习工具与技术（原书第3版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B011I34CGA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B011I34CGA&amp;linkCode=as2&amp;tag=vastwork-23">大数据：互联网大规模数据挖掘与分布式处理（第2版）</a>》</li></ul><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><ul><li>《<a href="https://amazon.cn/gp/product/B007KYSEZC/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=vastwork-23&creative=3200&linkCode=as2&creativeASIN=B007KYSEZC&linkId=32d1830aaeeda5b1ccaf242af94e73ad">数据库系统概念</a>》 感谢<a href="https://github.com/noisnemid">@noisnemid</a> <a href="https://github.com/jobbole/awesome-programming-books/issues/16">推荐</a></li><li>《<a href="https://amazon.cn/gp/product/B003NX8D0A/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=vastwork-23&creative=3200&linkCode=as2&creativeASIN=B003NX8D0A&linkId=3d1723a92384a5febb43c2400b31f1fe">数据库系统实现</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00H6X6M1A/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00H6X6M1A&amp;linkCode=as2&amp;tag=vastwork-23">SQL应用重构</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/0596009763/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=0596009763&amp;linkCode=as2&amp;tag=vastwork-23">SQL Cookbook</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00C1W58DE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00C1W58DE&amp;linkCode=as2&amp;tag=vastwork-23">高性能MySQL （第3版）</a>》</li><li>  《深入浅出SQL（中文版）》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00ETOV48K/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ETOV48K&amp;linkCode=as2&amp;tag=vastwork-23">MySQL技术内幕 : InnoDB存储引擎（第2版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00KR87J8G/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00KR87J8G&amp;linkCode=as2&amp;tag=vastwork-23">深入浅出MySQL : 数据库开发、优化与管理维护</a>》</li><li>  《<a href="https://www.amazon.cn/%E6%94%B6%E8%8E%B7-%E4%B8%8D%E6%AD%A2SQL%E4%BC%98%E5%8C%96-%E6%8A%93%E4%BD%8FSQL%E7%9A%84%E6%9C%AC%E8%B4%A8-%E6%A2%81%E6%95%AC%E5%BD%AC/dp/B071S6ZYH8/ref=sr_1_1?s=books&ie=UTF8&qid=1510300270&sr=1-1&keywords=%E4%B8%8D%E6%AD%A2+sql">收获,不止SQL优化:抓住SQL的本质</a>》</li><li>  《<a href="https://www.amazon.cn/SQL-Server%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E7%AE%A1%E7%90%86%E7%9A%84%E8%89%BA%E6%9C%AF-%E9%BB%84%E9%92%8A%E5%90%89/dp/B00NW2FVAM/ref=tmm_pap_swatch_0?_encoding=UTF8&qid=1510300294&sr=1-8">SQL Server 性能优化与管理的艺术</a>》</li><li>  《<a href="https://www.amazon.cn/SQL-Server%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%AE%9E%E6%88%98-%E9%99%88%E7%95%85%E4%BA%AE/dp/B0171JJEN6/ref=sr_1_11?s=books&ie=UTF8&qid=1510300294&sr=1-11&keywords=sql+server">SQL Server性能调优实战</a>》</li><li>  《<a href="https://www.amazon.cn/T-SQL%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E7%A7%98%E7%AC%88-%E5%9F%BA%E4%BA%8ESQL-Server-2012%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0-%E6%9C%AC-%E7%94%98/dp/B00M1CH5A8/ref=sr_1_14?s=books&ie=UTF8&qid=1510300294&sr=1-14&keywords=sql+server">T-SQL性能调优秘笈:基于SQL Server 2012窗口函数</a>》</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B003JBIV0S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B003JBIV0S&amp;linkCode=as2&amp;tag=vastwork-23">探索式软件测试</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00PVOND2W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00PVOND2W&amp;linkCode=as2&amp;tag=vastwork-23">有效的单元测试</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00FH36R6G/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00FH36R6G&amp;linkCode=as2&amp;tag=vastwork-23">Google软件测试之道</a>》</li></ul><h2 id="项目与团队"><a href="#项目与团队" class="headerlink" title="项目与团队"></a>项目与团队</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B00VR8ZO28/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00VR8ZO28&amp;linkCode=as2&amp;tag=vastwork-23">人月神话</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B001DBRWL0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B001DBRWL0&amp;linkCode=as2&amp;tag=vastwork-23">快速软件开发</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00MO7R1SG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00MO7R1SG&amp;linkCode=as2&amp;tag=vastwork-23">人件（原书第3版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00CBBKRQ8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00CBBKRQ8&amp;linkCode=as2&amp;tag=vastwork-23">门后的秘密：卓越管理的故事</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00BLZMG8W/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00BLZMG8W&amp;linkCode=as2&amp;tag=vastwork-23">极客与团队：软件工程师的团队生存秘笈</a>》</li><li>《<a href="https://amazon.cn/gp/product/B00EE5HBAO/ref=as_li_qf_asin_il_tl?ie=UTF8&tag=vastwork-23&creative=3200&linkCode=as2&creativeASIN=B00EE5HBAO&linkId=d904f054b7a79a701065f544a449512b">硝烟中的 Scrum 和 XP</a>》 (感谢<a href="https://github.com/geekgao">@geekgao</a> 的推荐。</li></ul><h2 id="求职面试"><a href="#求职面试" class="headerlink" title="求职面试"></a>求职面试</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B00G8VOQOG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00G8VOQOG&amp;linkCode=as2&amp;tag=vastwork-23">程序员面试金典（第5版）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00W5269HO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00W5269HO&amp;linkCode=as2&amp;tag=vastwork-23">编程之美 : 微软技术面试心得</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00ALPRM7S/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ALPRM7S&amp;linkCode=as2&amp;tag=vastwork-23">金领简历：敲开苹果、微软、谷歌的大门</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00L5LKMVU/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00L5LKMVU&amp;linkCode=as2&amp;tag=vastwork-23">剑指Offer：名企面试官精讲典型编程题（纪念版）</a>》</li></ul><h2 id="编程之外"><a href="#编程之外" class="headerlink" title="编程之外"></a>编程之外</h2><ul><li>  《<a href="https://www.amazon.cn/gp/product/B005DSK4W8/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B005DSK4W8&amp;linkCode=as2&amp;tag=vastwork-23">暗时间</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00P6OJ09C/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00P6OJ09C&amp;linkCode=as2&amp;tag=vastwork-23">数学之美</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00ANY9KZE/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ANY9KZE&amp;linkCode=as2&amp;tag=vastwork-23">赢得朋友</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B008MIFWJG/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B008MIFWJG&amp;linkCode=as2&amp;tag=vastwork-23">精益创业</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00QPZARMA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00QPZARMA&amp;linkCode=as2&amp;tag=vastwork-23">批判性思维</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00M2DKZNA/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00M2DKZNA&amp;linkCode=as2&amp;tag=vastwork-23">世界是数字的</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00A4H3JJS/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00A4H3JJS&amp;linkCode=as2&amp;tag=vastwork-23">程序员的数学</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00N4LZ6RO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00N4LZ6RO&amp;linkCode=as2&amp;tag=vastwork-23">程序员健康指南</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B005O4PUFC/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B005O4PUFC&amp;linkCode=as2&amp;tag=vastwork-23">禅与摩托车维修艺术</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B0081M8TZ2/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B0081M8TZ2&amp;linkCode=as2&amp;tag=vastwork-23">关键对话：如何高效能沟通</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00EY8JUBO/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00EY8JUBO&amp;linkCode=as2&amp;tag=vastwork-23">写作法宝：非虚构写作指南</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00G1ZT2C0/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00G1ZT2C0&amp;linkCode=as2&amp;tag=vastwork-23">黑客与画家 : 来自计算机时代的高见</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00WDTQU8M/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00WDTQU8M&amp;linkCode=as2&amp;tag=vastwork-23">软件随想录（卷1）</a>》《<a href="https://www.amazon.cn/gp/product/B00WFT32FY/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00WFT32FY&amp;linkCode=as2&amp;tag=vastwork-23">软件随想录（卷2）</a>》</li><li>  《<a href="https://www.amazon.cn/gp/product/B00ICWNKT6/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=536&amp;creative=3200&amp;creativeASIN=B00ICWNKT6&amp;linkCode=as2&amp;tag=vastwork-23">如何把事情做到最好：改变全球9800万人的人生指导书</a>》</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mox.moe/&quot;&gt;漫画&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://zh.fr1lib.org/&quot;&gt;各类书籍&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;《小说》&quot;&gt;&lt;a href=&quot;#《小说》&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="前端书籍" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>webpack初学使用</title>
    <link href="http://example.com/2019/06/14/webpack%E5%88%9D%E5%AD%A6%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2019/06/14/webpack%E5%88%9D%E5%AD%A6%E4%BD%BF%E7%94%A8/</id>
    <published>2019-06-14T14:00:22.000Z</published>
    <updated>2022-03-28T12:17:33.968Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.webpackjs.com/concepts/">官网文档</a></p><h2 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h2><ul><li><strong>yarn init -y</strong></li><li><strong>yarn add webpack webpack-cli -D</strong>     [D代表开发时依赖]</li><li>默认可以使用npx webpack命令进行打包</li><li>linux命令： rm -rf [build] 删除某个文件<span id="more"></span></li></ul><h2 id="手动配置webpack"><a href="#手动配置webpack" class="headerlink" title="手动配置webpack"></a>手动配置webpack</h2><ul><li>默认配置文件的名字 webpack.config.js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack 是node写出来的 node的写法来运行</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)  <span class="comment">//内置模块无需安装这个模块可以将相对路径转化为绝对路径</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;development&quot;</span>,<span class="comment">//模式 默认两种 production development  生产和开发</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&quot;./src/index.js&quot;</span>,    <span class="comment">//入口</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;bundle.js&quot;</span>,   <span class="comment">//打包后的js的文件名</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;build&quot;</span>),<span class="comment">//路径必须是一个绝对路径 加上dirname代表当前目录下生成一个dist文件夹</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置package.json文件启动项</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>:<span class="string">&quot;webpack --config webpack.config.js&quot;</span>  <span class="comment">//启动命令 npm run build </span></span><br><span class="line">       <span class="comment">//第一个webpack代表是nodemodules包里面，第二个代表的是自己配置webpack打包参数的文件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^4.31.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^3.3.2&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="本地服务"><a href="#本地服务" class="headerlink" title="本地服务"></a>本地服务</h2><ul><li>临时服务器（内置express模块来完成）</li><li>简单执行    npx webpack-dev-server（这样做好处就是不会真实打包而是在内存中进行打包）</li><li>插件安装：<strong>yarn add webpack-dev-server -D</strong>     [无须引入]</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">webpack文件：</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>:&#123; <span class="comment">//开发服务器的配置</span></span><br><span class="line">        <span class="attr">port</span>:<span class="number">3000</span>,              <span class="comment">//端口号</span></span><br><span class="line">        <span class="attr">progress</span>:<span class="literal">true</span>,          <span class="comment">//进度条</span></span><br><span class="line">        <span class="attr">contentBase</span>:<span class="string">&quot;./build&quot;</span>, <span class="comment">//指向打包后那个目录</span></span><br><span class="line">        <span class="attr">open</span>:<span class="literal">true</span>,      <span class="comment">//自动打开网页</span></span><br><span class="line">        <span class="attr">compress</span>:<span class="literal">true</span>  <span class="comment">//启用gzp压缩</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">package.<span class="property">json</span>文件：</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack --config webpack.config.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>:<span class="string">&quot;webpack-dev-server&quot;</span><span class="comment">//启动命令变为npm run dev会自动生成网页形式预览</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将打包后的js文件引入到生成的html文件中将html文件也打包"><a href="#将打包后的js文件引入到生成的html文件中将html文件也打包" class="headerlink" title="将打包后的js文件引入到生成的html文件中将html文件也打包"></a><strong>将打包后的js文件引入到生成的html文件中将html文件也打包</strong></h2><ul><li>插件安装：<strong>yarn add html-webpack-plugin -D</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用模板生成HTML自动引入js</span></span><br><span class="line">webpack文件：</span><br><span class="line">注意：需要先引入 <span class="keyword">let</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;bundle.[hash:8].js&quot;</span>,   </span><br><span class="line">        <span class="comment">//打包后的js的文件名     </span></span><br><span class="line">        <span class="comment">//如果希望每次生成的打包文件不一样也可以加哈希戳 </span></span><br><span class="line">        <span class="comment">//每次修改产生新的文件 可以添加冒号代表只显示几位例如8</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;build&quot;</span>),</span><br><span class="line">        <span class="comment">//路径必须是一个绝对路径 加上dirname代表当前目录下生成一个dist文件夹</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[   <span class="comment">//数组 放着所有的webpack插件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span>,    <span class="comment">//找到最后压缩引入的模板</span></span><br><span class="line">            <span class="attr">filename</span>:<span class="string">&quot;index.html&quot;</span>,          <span class="comment">//生成的文件名称</span></span><br><span class="line">            <span class="attr">minify</span>:&#123;</span><br><span class="line">                <span class="attr">removeAttributeQuotes</span>:<span class="literal">true</span>,  <span class="comment">//删除属性的双引号</span></span><br><span class="line">                <span class="attr">collapseWhitespace</span>:<span class="literal">true</span>     <span class="comment">//折叠成为一行</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">hash</span>:<span class="literal">true</span>       <span class="comment">//生成哈希戳</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>插件地址：<a href="https://github.com/jantimon/html-webpack-plugin#options">html-webpack-plugin#options</a></p></blockquote><h2 id="样式处理"><a href="#样式处理" class="headerlink" title="样式处理"></a><strong>样式处理</strong></h2><ul><li>如果link引入会直接原封不动的将html打包 并不会链接到css</li><li>可以用js require方式引入css文件 但打包默认不支持需要合适的loader做解析支持</li><li>解析器安装:<ul><li><strong>yarn add css-loader style-loader -D</strong></li><li><strong>yarn add less less-loader -D</strong></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">webpack文件：</span><br><span class="line">放在<span class="variable language_">module</span>.<span class="property">exports</span>里面</span><br><span class="line"><span class="attr">module</span>:&#123; <span class="comment">//模块</span></span><br><span class="line">        <span class="attr">rules</span>:[<span class="comment">//规则   </span></span><br><span class="line">            <span class="comment">//css-loader   解析@import这种语法</span></span><br><span class="line">            <span class="comment">//style-loader 它是把css插入到head的标签中</span></span><br><span class="line">            <span class="comment">//loader的特点：希望单一</span></span><br><span class="line">            <span class="comment">//loader的用法 字符串 只使用一个loader</span></span><br><span class="line">            <span class="comment">//多个loader需要[]</span></span><br><span class="line">            <span class="comment">//loader的顺序 默认是从右向左执行  从下到上执行</span></span><br><span class="line">            <span class="comment">//loader还可以写成对象方式</span></span><br><span class="line">            &#123;</span><br><span class="line">         <span class="comment">//处理css文件</span></span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>:<span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                        <span class="attr">options</span>:&#123;</span><br><span class="line">                            <span class="attr">insertAt</span>:<span class="string">&#x27;top&#x27;</span>  <span class="comment">//解析完后的css样式插入到顶部不会与自己写的样式冲突</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>:<span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//可以处理less文件  也可以处理sass stylus </span></span><br><span class="line">                <span class="comment">//sass sass-loader </span></span><br><span class="line">                <span class="comment">//stylus stylus-loader</span></span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>:<span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">                        <span class="attr">options</span>:&#123;</span><br><span class="line">                            <span class="attr">insertAt</span>:<span class="string">&#x27;top&#x27;</span>  <span class="comment">//解析完后的css样式插入到顶部不会与自己写的样式冲突</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    </span><br><span class="line">                        <span class="string">&#x27;css-loader&#x27;</span>,   <span class="comment">// @import 解析路径</span></span><br><span class="line">                        <span class="string">&#x27;less-loader&#x27;</span>   <span class="comment">// 把less -&gt; css </span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="单独抽离css样式插件用link引入"><a href="#单独抽离css样式插件用link引入" class="headerlink" title="单独抽离css样式插件用link引入"></a><strong>单独抽离css样式插件用link引入</strong></h2><ul><li>插件安装：<strong>yarn add mini-css-extract-plugin -D</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">webpack文件：</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">MiniCssExtractPlguin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);  </span><br><span class="line"><span class="comment">//如果需要抽离多个css文件 多引入几次就可以</span></span><br><span class="line"><span class="attr">plugins</span>:[   <span class="comment">//数组 放着所有的webpack插件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlguin</span>(&#123;</span><br><span class="line">            <span class="attr">filename</span>:<span class="string">&#x27;main.css&#x27;</span>,    <span class="comment">//抽离出的文件名</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line"><span class="attr">module</span>:&#123; <span class="comment">//模块</span></span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[</span><br><span class="line">                    <span class="title class_">MiniCssExtractPlguin</span>.<span class="property">loader</span>,<span class="comment">//不需要放在HTML里面 而是单独抽离到main.css文件内</span></span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[</span><br><span class="line">                    <span class="title class_">MiniCssExtractPlguin</span>.<span class="property">loader</span>, <span class="comment">//不需要放在HTML里面 而是单独抽离到main.css文件内</span></span><br><span class="line">                        <span class="string">&#x27;css-loader&#x27;</span>,   <span class="comment">// @import 解析路径</span></span><br><span class="line">                        <span class="string">&#x27;less-loader&#x27;</span>   <span class="comment">// 把less -&gt; css </span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>抽离css插件文件时可使用<code>optimize-css-assets-webpack-plugin</code>优化压缩css以及js文件</p></blockquote><h2 id="特殊样式自动添加对应浏览器前缀"><a href="#特殊样式自动添加对应浏览器前缀" class="headerlink" title="特殊样式自动添加对应浏览器前缀"></a><strong>特殊样式自动添加对应浏览器前缀</strong></h2><ul><li>注意需要单独创建一个<strong>postcss.config.js</strong>文件</li><li>注意放置顺序！</li><li>插件安装: <strong>yarn add postcss-loader autoprefixer -D</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">webpack文件：</span><br><span class="line"><span class="attr">module</span>:&#123; <span class="comment">//模块</span></span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="attr">use</span>:[</span><br><span class="line">                    <span class="title class_">MiniCssExtractPlguin</span>.<span class="property">loader</span>,<span class="comment">//不需要放在HTML里面 而是单独抽离到main.css文件内</span></span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;postcss-loader&#x27;</span><span class="comment">//自动添加特殊样式前缀注意要先处理它</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,<span class="attr">use</span>:[</span><br><span class="line">                    <span class="title class_">MiniCssExtractPlguin</span>.<span class="property">loader</span>, <span class="comment">//不需要放在HTML里面 而是单独抽离到main.css文件内</span></span><br><span class="line">                        <span class="string">&#x27;css-loader&#x27;</span>,   <span class="comment">// @import 解析路径</span></span><br><span class="line">                        <span class="string">&#x27;less-loader&#x27;</span>,   <span class="comment">// 把less -&gt; css </span></span><br><span class="line">                    <span class="string">&#x27;postcss-loader&#x27;</span> <span class="comment">//自动添加特殊样式前缀注意要先处理它</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line">postcss.<span class="property">config</span>.<span class="property">js</span>文件：</span><br><span class="line">只需写如下内容即可：</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>:[<span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/postcss/postcss-loader">postcss-loader</a></p></blockquote><h2 id="打包抽离出之后的css样式"><a href="#打包抽离出之后的css样式" class="headerlink" title="打包抽离出之后的css样式**"></a>打包抽离出之后的css样式**</h2><ul><li>插件安装：<ul><li><strong>yarn add optimize-css-assets-webpack-plugin -D</strong></li><li><strong>yarn add uglifyjs-webpack-plugin -D</strong></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">webpack文件：</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">OptimizeCss</span> = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">UglifyJsPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">optimization</span>:&#123;<span class="comment">//优化项</span></span><br><span class="line">        <span class="attr">minimizer</span>:[</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">UglifyJsPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">cache</span>:<span class="literal">true</span>, <span class="comment">//是否用缓存</span></span><br><span class="line">                <span class="attr">parallel</span>:<span class="literal">true</span>,<span class="comment">//是否并发打包就是压缩多个</span></span><br><span class="line">                <span class="attr">sourceMap</span>:<span class="literal">true</span> <span class="comment">//es6转为es5需要源码映射</span></span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">OptimizeCss</span>()   <span class="comment">//注意如果使用了这个插件 js不会进行压缩 需另需插件</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用babel来将es6语法转为es5好进行调试"><a href="#使用babel来将es6语法转为es5好进行调试" class="headerlink" title="使用babel来将es6语法转为es5好进行调试"></a><strong>使用babel来将es6语法转为es5好进行调试</strong></h2><ul><li>插件安装： <ul><li><strong>yarn add babel-loader @babel/core @babel/preset-env -D</strong> //es6</li><li><strong>yarn add @babel/plugin-proposal-class-properties -D</strong>     //es7更高级语法转化</li><li><strong>yarn add @babel/plugin-proposal-decorators -D</strong>            //类的装饰器</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">webpack文件：</span><br><span class="line"><span class="attr">module</span>:&#123; <span class="comment">//模块</span></span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/.\js$/</span>,</span><br><span class="line">                <span class="attr">use</span>:&#123;</span><br><span class="line">                    <span class="attr">loader</span>:<span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>:&#123;<span class="comment">//用babel-loader 需要把es6 -&gt; es5</span></span><br><span class="line">                        <span class="attr">presets</span>:[   <span class="comment">//预设</span></span><br><span class="line">                            <span class="string">&#x27;@babel/preset-env&#x27;</span></span><br><span class="line">                        ],</span><br><span class="line">                        <span class="attr">plugins</span>:[</span><br><span class="line">                            [<span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>, &#123; <span class="string">&quot;legacy&quot;</span>: <span class="literal">true</span> &#125;],<span class="comment">//解析并转化es7中的修饰器 </span></span><br><span class="line">                            [<span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>, &#123; <span class="string">&quot;loose&quot;</span> : <span class="literal">true</span> &#125;]<span class="comment">//解析es6中的类class</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="处理js语法"><a href="#处理js语法" class="headerlink" title="处理js语法"></a><strong>处理js语法</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">插件安装：yarn add @babel/plugin-transform-runtime -D</span><br><span class="line">yarn add @babel/runtime <span class="comment">//注意此插件在生产中也需要不要加-D</span></span><br><span class="line">yarn add @babel/polyfill<span class="comment">//同样也是补丁模块不能加-D</span></span><br><span class="line">webpack文件：</span><br><span class="line"><span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/.\js$/</span>,</span><br><span class="line">                <span class="attr">use</span>:&#123;</span><br><span class="line">                    <span class="attr">loader</span>:<span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>:&#123;<span class="comment">//用babel-loader 需要把es6 -&gt; es5</span></span><br><span class="line">                        <span class="attr">presets</span>:[   <span class="comment">//预设</span></span><br><span class="line">                            <span class="string">&#x27;@babel/preset-env&#x27;</span></span><br><span class="line">                        ],</span><br><span class="line">                        <span class="attr">plugins</span>:[</span><br><span class="line">                            [<span class="string">&quot;@babel/plugin-proposal-decorators&quot;</span>, &#123; <span class="string">&quot;legacy&quot;</span>: <span class="literal">true</span> &#125;],      <span class="comment">//解析es7中的装饰器</span></span><br><span class="line">                            [<span class="string">&quot;@babel/plugin-proposal-class-properties&quot;</span>, &#123; <span class="string">&quot;loose&quot;</span> : <span class="literal">true</span> &#125;], <span class="comment">//解析es6中的类class</span></span><br><span class="line">                            <span class="string">&quot;@babel/plugin-transform-runtime&quot;</span><span class="comment">//多次使用只需打包一次</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">include</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;src&#x27;</span>),  <span class="comment">//只匹配这个目录下的js </span></span><br><span class="line">                <span class="attr">exclude</span>:<span class="regexp">/node_modules/</span>                  <span class="comment">//忽略node包</span></span><br><span class="line">            &#125;,</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"> a.<span class="property">js</span>文件：<span class="comment">//在任何你需要includes这种高阶语法时引入</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">&#x27;@babel/polyfill&#x27;</span>) <span class="comment">//需要先进行引入</span></span><br><span class="line">  <span class="string">&#x27;aaa&#x27;</span>.<span class="title function_">includes</span>(<span class="string">&#x27;a&#x27;</span>)<span class="comment">//然后便可打包使用并且最后转化成es5语法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="语法检查校验"><a href="#语法检查校验" class="headerlink" title="语法检查校验"></a><strong>语法检查校验</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">插件安装：yarn add eslint eslint-loader -D</span><br><span class="line"><span class="comment">//首先去eslint官网找到demo 找到实例 并勾选你需要校验的类型 然后下载一个json文件</span></span><br><span class="line"><span class="comment">//下载完成后放到项目根目录中 并且文件前加.</span></span><br><span class="line">webpack文件：</span><br><span class="line"><span class="attr">rules</span>:[ <span class="comment">//loader 默认 是从右向左执行 从下到上执行</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.js$/</span>,</span><br><span class="line">                <span class="attr">use</span>:&#123;</span><br><span class="line">                    <span class="attr">loader</span>:<span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>:&#123;</span><br><span class="line">                        <span class="attr">enforce</span>:<span class="string">&#x27;pre&#x27;</span>   <span class="comment">//previous之前执行  post之后执行 注意要</span></span><br><span class="line">                        <span class="comment">//先执行eslint校验</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="解决全局变量引入问题"><a href="#解决全局变量引入问题" class="headerlink" title="解决全局变量引入问题"></a><strong>解决全局变量引入问题</strong></h2><ul><li>引入方式有3种<ul><li>expose-loader 暴露到window上</li><li>providePlugin 给每个人提供一个$</li><li>引入不打包</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">插件安装： yarn add expose-loader <span class="comment">//注意：生产也需要所以不加D</span></span><br><span class="line">index.<span class="property">js</span>文件</span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;expose-loader?$!jquery&#x27;</span>; <span class="comment">//把jQuery暴露给全局上</span></span><br><span class="line"><span class="comment">//expose-loader 暴露全局的loader 内联的loader </span></span><br><span class="line"><span class="comment">//pre 前面执行的loader normal 普通loader postloader 内联loader 后置loader</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">$</span>)</span><br><span class="line"><span class="comment">//以上属性内联loader写法</span></span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">webpack文件：</span><br><span class="line"><span class="attr">rules</span>:[ </span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="built_in">require</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;jquery&#x27;</span>),</span><br><span class="line">                <span class="attr">use</span>:<span class="string">&#x27;expose-loader?$&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">//以上属于普通loader也是将jQuery暴露给全局并以$符表示</span></span><br><span class="line">----------------------------------------------------------------------------</span><br><span class="line">index.<span class="property">js</span>文件：</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>($)<span class="comment">//在每个模块中注入$对象</span></span><br><span class="line">webpack文件：</span><br><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="comment">//这样做好处就是不需要每个js文件都引入 只需在webpack配置文件里引入一次</span></span><br><span class="line"><span class="attr">plugins</span>:[   <span class="comment">//数组 放着所有的webpack插件</span></span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">ProvidePlugin</span>(&#123; <span class="comment">//在每个模块中都注入$</span></span><br><span class="line">            <span class="attr">$</span>:<span class="string">&#x27;jquery&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">------------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//需要注意如果用cdn引入了外部插件 并且 import也 引入了 会有冲突需要配置如下 </span></span><br><span class="line">webpack文件：</span><br><span class="line"><span class="attr">externals</span>:&#123;</span><br><span class="line">        <span class="attr">jquery</span>:<span class="string">&#x27;$&#x27;</span><span class="comment">//忽略并且不打包</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><ul><li>JS中创建</li><li>CSS中引入</li><li><code>&lt;img src=&quot;&quot;&gt;</code></li><li><strong>插件安装：yarn add file-loader -D</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack 打包图片</span></span><br><span class="line"><span class="comment">//1）在js中创建图片引入</span></span><br><span class="line"><span class="comment">//file-loader默认会在内部生成一张图片 到build目录下</span></span><br><span class="line"><span class="comment">//把生成图片的名字返回回来</span></span><br><span class="line">index.<span class="property">js</span>文件：</span><br><span class="line"><span class="keyword">import</span> dog <span class="keyword">from</span> <span class="string">&#x27;./dog.jpg&#x27;</span>; <span class="comment">//把图片引入，返回的结果是一个新的图片地址</span></span><br><span class="line"><span class="keyword">let</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">image.<span class="property">src</span> = dog <span class="comment">//就是一个普通的字符串</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(image)</span><br><span class="line">webpack文件：</span><br><span class="line"> <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">                <span class="attr">use</span>:<span class="string">&#x27;file-loader&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">//2）在css引入 background（&#x27;url&#x27;）</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>路径</span><br><span class="line">css文件里<span class="attr">background</span>:<span class="title function_">url</span>(<span class="string">&#x27;路径&#x27;</span>)正常写</span><br><span class="line"><span class="comment">//以上两种使用相同配置即可</span></span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"><span class="comment">//3）&lt;img src=&quot;&quot;&gt;</span></span><br><span class="line">插件安装： yarn add html-withimg-loader -D<span class="comment">//解析html并且编译图片</span></span><br><span class="line"><span class="attr">rules</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>:<span class="regexp">/\.html$/</span>,</span><br><span class="line">        <span class="attr">use</span>:<span class="string">&#x27;html-withimg-loader&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">图片转化成base64插件</span><br><span class="line">插件安装： yarn add url-loader -D</span><br><span class="line"><span class="attr">rules</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>:<span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        <span class="comment">//做一个限制当图片 小于多少k的时候用base64来转化</span></span><br><span class="line">        <span class="comment">//否则便会使用file-loader产生真实的图片</span></span><br><span class="line">        <span class="attr">use</span>:&#123;</span><br><span class="line">            <span class="attr">loader</span>:<span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>:&#123;</span><br><span class="line">                <span class="attr">limit</span>:<span class="number">1</span>     <span class="comment">//判断图片文件大小 超过指定范围默认产出</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="打包产出文件分类"><a href="#打包产出文件分类" class="headerlink" title="打包产出文件分类"></a>打包产出文件分类</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">webpack文件：</span><br><span class="line"><span class="attr">plugins</span>:[   <span class="comment">//数组 放着所有的webpack插件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlguin</span>(&#123;</span><br><span class="line">            <span class="attr">filename</span>:<span class="string">&#x27;css/main.css&#x27;</span>,    <span class="comment">//抽离出的文件名  添加css/代表目录下的这个文件</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line"><span class="attr">rules</span>:[</span><br><span class="line">    <span class="attr">use</span>:&#123;</span><br><span class="line">    <span class="attr">test</span>:<span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">                    <span class="attr">loader</span>:<span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>:&#123;</span><br><span class="line">                        <span class="attr">limit</span>:<span class="number">1</span>,     <span class="comment">//判断图片文件大小 超过指定范围默认产出</span></span><br><span class="line">                        <span class="attr">outputPath</span>:<span class="string">&#x27;/img/&#x27;</span>,<span class="comment">//最后产出的目录</span></span><br><span class="line">                        <span class="attr">publicPath</span>:<span class="string">&#x27;http://www.miaochen.com&#x27;</span><span class="comment">//可以给图片添加地址前缀</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">]</span><br><span class="line">也可以给所有引入文件添加引入前缀：</span><br><span class="line"><span class="attr">output</span>:&#123;</span><br><span class="line">         <span class="attr">filename</span>:<span class="string">&quot;bundle.[hash:8].js&quot;</span>,</span><br><span class="line">         <span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;build&quot;</span>),</span><br><span class="line">         <span class="attr">publicPath</span>:<span class="string">&#x27;http://www.miaochen.cn/&#x27;</span><span class="comment">//给引用文件添加统一前缀</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多页面应用"><a href="#多页面应用" class="headerlink" title="多页面应用"></a>多页面应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">插件安装：yarn add html-webpack-plugin -D</span><br><span class="line"><span class="comment">//用模板生成HTML自动引入js</span></span><br><span class="line">webpack文件：</span><br><span class="line"><span class="comment">//多页面打包</span></span><br><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="comment">//多入口</span></span><br><span class="line">    <span class="attr">entry</span>:&#123;</span><br><span class="line">        <span class="attr">home</span>:<span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">        <span class="attr">other</span>:<span class="string">&#x27;./src/other.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;[name].[hash].js&#x27;</span>,   <span class="comment">//多出口</span></span><br><span class="line">        <span class="attr">path</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>:<span class="string">&#x27;./index.html&#x27;</span>,<span class="comment">//注意当前模板html文件所在位置</span></span><br><span class="line">            <span class="attr">filename</span>:<span class="string">&#x27;home.html&#x27;</span>,</span><br><span class="line">            <span class="attr">chunks</span>:[<span class="string">&#x27;home&#x27;</span>]     <span class="comment">//选择你需要最后生成HTML文件引入的文件</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>:<span class="string">&#x27;./index.html&#x27;</span>,<span class="comment">//注意当前模板html文件所在位置</span></span><br><span class="line">            <span class="attr">filename</span>:<span class="string">&#x27;other.html&#x27;</span>,</span><br><span class="line">            <span class="attr">chunks</span>:[<span class="string">&#x27;other&#x27;</span>,<span class="string">&#x27;home&#x27;</span>]     <span class="comment">//选择你需要最后生成HTML文件引入的文件</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="source-map相关调试设置"><a href="#source-map相关调试设置" class="headerlink" title="source-map相关调试设置"></a>source-map相关调试设置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//以下任选一种所需</span></span><br><span class="line">    <span class="comment">//1）源码映射 会单独生成一个sourcemap文件 出错了会标示当前报错的列和行实际会生成源码如果出错会跳转到相对应源码位置 大 和 全</span></span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;source-map&#x27;</span>,<span class="comment">//增加映射文件 可以帮我们调试源代码</span></span><br><span class="line">    <span class="comment">//2）不会产生单独的文件 但是可以显示列和行</span></span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;eval-source-map&#x27;</span>,</span><br><span class="line">    <span class="comment">//3） 不会产生列 但是是一个单独的映射文件</span></span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;cheap-module-source-map&#x27;</span>,  <span class="comment">//产生后你可以保留起来调试</span></span><br><span class="line">    <span class="comment">//4）不会产生产生文件 集成在打包后的文件中 不会产生列</span></span><br><span class="line">    <span class="attr">devtool</span>:<span class="string">&#x27;cheap-module-eval-source-map&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="watch的用法"><a href="#watch的用法" class="headerlink" title="watch的用法"></a>watch的用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">webpack文件：</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">watch</span>:<span class="literal">true</span>,         <span class="comment">//监控代码变化时时打包</span></span><br><span class="line">        <span class="attr">watchOptions</span>:&#123;      <span class="comment">//监控的选项</span></span><br><span class="line">            <span class="attr">poll</span>:<span class="number">1000</span>,      <span class="comment">//每秒 问我 1000次  多少秒监控一次</span></span><br><span class="line">            <span class="attr">aggregateTimeout</span>:<span class="number">500</span>,   <span class="comment">//防抖 我一直输入代码 停止操作后500毫秒进行打包</span></span><br><span class="line">            <span class="attr">ignored</span>:<span class="regexp">/node_modules/</span> <span class="comment">//不需要进行监控哪个文件</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="webpack3个小插件"><a href="#webpack3个小插件" class="headerlink" title="webpack3个小插件"></a>webpack3个小插件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">插件①安装：yarn add clean-webpack-plugin -D<span class="comment">//每次打包清除旧目录内容</span></span><br><span class="line">webpack文件：</span><br><span class="line"><span class="keyword">let</span> cleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> <span class="title function_">cleanWebpackPlugin</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;./dist&#x27;</span>&#125;)    <span class="comment">//清空目录里原有内容 参数可以是字符串 也可以是数组代表情况多个目录</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line">插件②安装：yarn add copy-webpack-plugin -D</span><br><span class="line"><span class="keyword">let</span> copyWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> <span class="title function_">copyWebpackPlugin</span>([ <span class="comment">//拷贝插件  将别的文件 也 拷贝到打包后的文件中</span></span><br><span class="line">            &#123;<span class="attr">from</span>:<span class="string">&#x27;./doc&#x27;</span>,<span class="attr">to</span>:<span class="string">&#x27;./dist&#x27;</span>&#125;  <span class="comment">//拷贝多个就写多个对象</span></span><br><span class="line">        ])</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">插件③：内置插件无须安装</span><br><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">       <span class="keyword">new</span> webpack.<span class="title class_">BannerPlugin</span>(<span class="string">&#x27;miao ni ma&#x27;</span>)<span class="comment">//用处 会在每一个打包后的js文件 前面加一段 注释</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="webpack-跨域"><a href="#webpack-跨域" class="headerlink" title="webpack 跨域"></a><code>webpack</code> 跨域</h2><p>设置一个服务,由于<code>webpack-dev-server</code>内含<code>express</code></p><p><a href="https://expressjs.com/zh-cn/starter/hello-world.html">express</a></p><p><code>server.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/api/user&#x27;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;miaochen&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)   <span class="comment">// 服务端口在3000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>写完后记得<code>node server.js</code></p><p>访问 <code>http://localhost:3000/api/user</code> 可见内容</p><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送一个请求</span></span><br><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认访问 http://localhost:8080  webpack-dev-server 的服务 -&gt; 再转发给3000</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;/api/user&#x27;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span> <span class="comment">// 配置了一个代理</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如果后端给的请求没有API-「跨域」"><a href="#如果后端给的请求没有API-「跨域」" class="headerlink" title="如果后端给的请求没有API 「跨域」"></a>如果后端给的请求没有API 「跨域」</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;mayufo&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)   <span class="comment">// 服务端口在3000</span></span><br></pre></td></tr></table></figure><p>请求已api开头, 转发的时候再删掉api</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/api&#x27;</span>: &#123;   <span class="comment">//注意一下 发请求的时候 &#x27;/api/user&#x27;这样的格式 每次要带上</span></span><br><span class="line">            <span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">            <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端mock数据-「跨域」"><a href="#前端mock数据-「跨域」" class="headerlink" title="前端mock数据 「跨域」"></a>前端mock数据 「跨域」</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">before</span>: <span class="keyword">function</span> (<span class="params">app</span>) &#123;  <span class="comment">// 勾子</span></span><br><span class="line">        app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">            res.<span class="title function_">json</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;miaochen - before&#x27;</span>&#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="有服务端，不用代理-服务端启动webpack-「跨域」"><a href="#有服务端，不用代理-服务端启动webpack-「跨域」" class="headerlink" title="有服务端，不用代理, 服务端启动webpack 「跨域」"></a>有服务端，不用代理, 服务端启动webpack 「跨域」</h2><p><code>server.js</code>中启动<code>webpack</code></p><p><code>yarn add webpack-dev-middleware -D</code></p><p><code>server.js</code></p><p>就相当于后端启动webpack</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// express</span></span><br><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line"><span class="keyword">let</span> middle = <span class="built_in">require</span>(<span class="string">&#x27;webpack-dev-middleware&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> config = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.config&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> compiler = <span class="title function_">webpack</span>(config)</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">middle</span>(compiler))</span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/user&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">json</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;mayufo&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>)</span><br></pre></td></tr></table></figure><h2 id="webpack解析resolve"><a href="#webpack解析resolve" class="headerlink" title="webpack解析resolve"></a>webpack解析resolve</h2><p>以<code>bootstrap</code>为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install bootstrap  -D</span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span></span><br></pre></td></tr></table></figure><p>报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ERROR in ./node_modules/bootstrap/dist/css/bootstrap.css 7:0</span><br><span class="line">Module parse failed: Unexpected token (7:0)</span><br><span class="line">You may need an appropriate loader to handle this file type.</span><br><span class="line">|  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)</span><br><span class="line">|  */</span><br><span class="line">&gt; :root &#123;</span><br><span class="line">|   --blue: #007bff;</span><br><span class="line">|   --indigo: #6610f2;</span><br><span class="line"> @ ./src/index.js 22:0-42</span><br><span class="line"> @ multi (webpack)-dev-server/client?http://localhost:8081 ./src/index.js</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这是因为<code>bootstrap</code> 4.0的css引入了新的特性，CSS Variables</p><p>安装<br><code>npm install postcss-custom-properties --save-dev</code></p><p>配置<code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">plugins</span>: <span class="function">(<span class="params">loader</span>) =&gt;</span> [</span><br><span class="line">                <span class="built_in">require</span>(<span class="string">&quot;postcss-custom-properties&quot;</span>)</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="但是每次引入都很长，如何优雅引入"><a href="#但是每次引入都很长，如何优雅引入" class="headerlink" title="但是每次引入都很长，如何优雅引入"></a>但是每次引入都很长，如何优雅引入</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>: &#123;<span class="comment">//解析第三方包 common</span></span><br><span class="line">    <span class="comment">// 在当前目录查找</span></span><br><span class="line">    <span class="attr">modules</span>: [path.<span class="title function_">resolve</span>(<span class="string">&#x27;node_modules&#x27;</span>)],</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;bootstrapCss&#x27;</span>: <span class="string">&#x27;bootstrap/dist/css/bootstrap.css&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;bootstrapCss&#x27;</span>  <span class="comment">// 在node_modules查找</span></span><br></pre></td></tr></table></figure><h2 id="省略扩展名"><a href="#省略扩展名" class="headerlink" title="省略扩展名"></a>省略扩展名</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">// 在当前目录查找</span></span><br><span class="line">    <span class="attr">modules</span>: [path.<span class="title function_">resolve</span>(<span class="string">&#x27;node_modules&#x27;</span>)],</span><br><span class="line">    <span class="comment">// alias: &#123;</span></span><br><span class="line">    <span class="comment">//     &#x27;bootstrapCss&#x27;: &#x27;bootstrap/dist/css/bootstrap.css&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;,</span></span><br><span class="line">    <span class="attr">mainFields</span>: [<span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;main&#x27;</span>],   <span class="comment">// 先用bootstrap中在package中的style,没有在用main</span></span><br><span class="line">    <span class="comment">// mainFiles: []  // 入口文件的名字 默认index</span></span><br><span class="line">    <span class="attr">extensions</span>: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.css&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>]  <span class="comment">// 当没有拓展命的时候，先默认js、次之css、再次之json</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="定义环境变量"><a href="#定义环境变量" class="headerlink" title="定义环境变量"></a>定义环境变量</h2><p><code>DefinePlugin</code> 允许创建一个在编译时可以配置的全局常量。这可能会对开发模式和生产模式的构建允许不同的行为非常有用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable constant_">DEV</span> === <span class="string">&#x27;dev&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 开发环境</span></span><br><span class="line">    url = <span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 生成环境</span></span><br><span class="line">    url = <span class="string">&#x27;http://www.miaochen.cn&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.<span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// DEV: &#x27;&quot;production&quot;&#x27;,</span></span><br><span class="line">    <span class="attr">DEV</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="string">&#x27;production&#x27;</span>),</span><br><span class="line">    <span class="attr">FLAG</span>: <span class="string">&#x27;true&#x27;</span>,   <span class="comment">// 布尔</span></span><br><span class="line">    <span class="attr">EXPRESSION</span>: <span class="string">&#x27;1 + 1&#x27;</span>   <span class="comment">// 字符串 如果希望是字符串 JSON.stringify(&#x27;1 + 1&#x27;)</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>magnet:?xt=urn:btih:8bdbb86adc883dd0bb740a577de3fb1a95ed29c3</p><h2 id="区分两个不同的环境"><a href="#区分两个不同的环境" class="headerlink" title="区分两个不同的环境"></a>区分两个不同的环境</h2><p>分别配置不同的环境</p><ul><li><code>webpack.base4.js</code>   基础配置</li><li><code>webpack.dev4.js</code>    开发环境</li><li><code>webpack.prod4.js</code>   生产环境</li></ul><p><code>yarn add webpack-merge -D</code></p><p><code>npx run build -- config webpack.dev4.js</code><br><code>npx run build -- config webpack.build.js</code></p><p><a href="https://webpack.docschina.org/guides/production/">官方文档</a></p><p><code>webpack.base4.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">CleanWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">home</span>: <span class="string">&#x27;./src/index.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;[name].js&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(process.<span class="title function_">cwd</span>(), <span class="string">&#x27;dist3&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                <span class="attr">use</span>: &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">presets</span>: [</span><br><span class="line">                            <span class="string">&#x27;@babel/preset-env&#x27;</span></span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">plugins</span>: <span class="function">(<span class="params">loader</span>) =&gt;</span> [</span><br><span class="line">                            <span class="built_in">require</span>(<span class="string">&quot;postcss-custom-properties&quot;</span>)</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>webpack.dev4.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> base = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.base4.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(base, &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;source-map&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>webpack.prod4.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> merge = <span class="built_in">require</span>(<span class="string">&#x27;webpack-merge&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> base = <span class="built_in">require</span>(<span class="string">&#x27;./webpack.base4.js&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">merge</span>(base, &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>package.json</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack-dev-server  --config webpack.prod4.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --config webpack.dev4.js&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-优化"><a href="#webpack-优化" class="headerlink" title="webpack 优化"></a>webpack 优化</h2><p><code>yarn add webpack webpack-cli html-webpack-plugin @babel/core babel-loader @babel/preset-env @babel/preset-react -D</code></p><p><code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;main.js&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">      <span class="attr">rules</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">              <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">              <span class="attr">use</span>: &#123;</span><br><span class="line">                  <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">                  <span class="attr">options</span>: &#123;</span><br><span class="line">                      <span class="attr">presets</span>: [</span><br><span class="line">                          <span class="string">&#x27;@babel/preset-env&#x27;</span>,<span class="comment">//解析es6</span></span><br><span class="line">                          <span class="string">&#x27;@babel/preset-react&#x27;</span><span class="comment">//解析react</span></span><br><span class="line">                      ]</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="优化：当某些包是独立的个体没有依赖"><a href="#优化：当某些包是独立的个体没有依赖" class="headerlink" title="优化：当某些包是独立的个体没有依赖"></a>优化：当某些包是独立的个体没有依赖</h2><p>以jquery为例，<code>yarn add jquery -D</code>,它是一个独立的包没有依赖，可以在webpack配置中，配置它不再查找依赖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">noParse</span>: <span class="regexp">/jquery/</span>, <span class="comment">// 不用解析某些包的依赖</span></span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">          <span class="attr">use</span>: &#123;</span><br><span class="line">              <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">              <span class="attr">options</span>: &#123;</span><br><span class="line">                  <span class="attr">presets</span>: [</span><br><span class="line">                      <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">                      <span class="string">&#x27;@babel/preset-react&#x27;</span></span><br><span class="line">                  ]</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行<code>npx webpack</code></p><p>从2057ms  -&gt; 1946 ms</p><h2 id="优化：规则匹配设置范围"><a href="#优化：规则匹配设置范围" class="headerlink" title="优化：规则匹配设置范围"></a>优化：规则匹配设置范围</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="string">&#x27;/node_modules/&#x27;</span>,   <span class="comment">// 排除</span></span><br><span class="line">      <span class="attr">include</span>: path.<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),  <span class="comment">// 在这个范围内</span></span><br><span class="line">      <span class="attr">use</span>: &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">presets</span>: [</span><br><span class="line">                  <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">                  <span class="string">&#x27;@babel/preset-react&#x27;</span></span><br><span class="line">              ]</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>尽量实用<code>include</code>,不使用<code>exclude</code>,使用绝对路径</p><h2 id="优化：忽略依赖中不必要的语言包"><a href="#优化：忽略依赖中不必要的语言包" class="headerlink" title="优化：忽略依赖中不必要的语言包"></a>优化：忽略依赖中不必要的语言包</h2><p><code>yarn add moment webpack-dev-server -D</code></p><p>忽略掉<code>moment</code>的其他语言包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">IgnorePlugin</span>(<span class="regexp">/\.\/locale/</span>, <span class="regexp">/moment/</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br><span class="line"><span class="comment">//设置语言</span></span><br><span class="line"><span class="comment">//手动引入所需要的语言</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;moment/locale/zh-cn&#x27;</span></span><br><span class="line">moment.<span class="title function_">locale</span>(<span class="string">&#x27;zh-cn&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> r = <span class="title function_">moment</span>().<span class="title function_">endOf</span>(<span class="string">&#x27;day&#x27;</span>).<span class="title function_">fromNow</span>()  <span class="comment">// 距离现在多少天</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从 1.2MB 到  800kb</p><h2 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h2><p><code>yarn add react react-dom</code></p><p>正常使用</p><p><code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  <span class="attr">exclude</span>: <span class="string">&#x27;/node_modules/&#x27;</span>,</span><br><span class="line">  <span class="attr">include</span>: path.<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">  <span class="attr">use</span>: &#123;</span><br><span class="line">      <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">      <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [</span><br><span class="line">              <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">              <span class="string">&#x27;@babel/preset-react&#x27;</span></span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>, <span class="variable language_">window</span>.<span class="property">root</span>)</span><br></pre></td></tr></table></figure><p><code>index.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>独立的将<code>react react-dom</code> 打包好, 打包好再引用，从而减少<code>webpack</code>每次都要打包<code>react</code></p><p>创建<code>webpack.config.react.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="comment">// test: &#x27;./src/test.js&#x27;</span></span><br><span class="line">        <span class="attr">react</span>: [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;react-dom&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;_dll_[name].js&#x27;</span>,  <span class="comment">// 产生的文件名</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">        <span class="attr">library</span>: <span class="string">&#x27;_dll_[name]&#x27;</span>,     <span class="comment">// 给输出的结果加个名字</span></span><br><span class="line">        <span class="comment">// libraryTarget: &#x27;var&#x27;   // 配置如何暴露 library</span></span><br><span class="line">        <span class="comment">// commonjs 结果放在export属性上， umd统一资源模块, 默认是var</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">       <span class="keyword">new</span> webpack.<span class="title class_">DllPlugin</span>(&#123;</span><br><span class="line">           <span class="attr">name</span>: <span class="string">&#x27;_dll_[name]&#x27;</span>,   <span class="comment">// name === library</span></span><br><span class="line">           <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;manifest.json&#x27;</span>)  <span class="comment">// manifest.json 定义了各个模块的路径</span></span><br><span class="line">       &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://webpack.docschina.org/configuration/output/#%E6%9A%B4%E9%9C%B2%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F">libraryTarget</a></p><p><code>manifest.json</code>就是一个任务清单or动态链接库，在这个清单里面查找react</p><p><code>npx webpack --config webpack.config.react.js</code></p><p>在<code>index.html</code>增加引用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/_dll_react.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在webpack.config.js 中配置，现在动态链接库<code>manifest.json</code>中查找,如果没有再打包react</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DllReferencePlugin</span>(&#123;</span><br><span class="line">        <span class="attr">manifest</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>, <span class="string">&#x27;manifest.json&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><a href="https://webpack.docschina.org/plugins/dll-plugin/#src/components/Sidebar/Sidebar.jsx">DLLPlugin 和 DLLReferencePlugin</a></p><p><code>npm run build</code></p><p>打包后的<code>bunle.js</code>文件变小</p><p><code>npm run dev</code></p><p>可以理解为先把react打包，后面每次都直接使用react打包后的结果</p><h2 id="多线程打包happypack"><a href="#多线程打包happypack" class="headerlink" title="多线程打包happypack"></a>多线程打包<code>happypack</code></h2><p><code>yarn add happypack</code></p><p><code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Happypack</span> = <span class="built_in">require</span>(<span class="string">&#x27;happypack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="string">&#x27;/node_modules/&#x27;</span>,</span><br><span class="line">        <span class="attr">include</span>: path.<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&#x27;happypack/loader?id=js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Happypack</span>(&#123;</span><br><span class="line">        <span class="attr">id</span>: <span class="string">&#x27;js&#x27;</span>,</span><br><span class="line">        <span class="attr">use</span>: [&#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">                <span class="attr">presets</span>: [</span><br><span class="line">                    <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;@babel/preset-react&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>js启用多线程，由于启用多线程也会浪费时间，因此当项目比较大的时候启用效果更好</p><p>css启用多线程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">    <span class="attr">use</span>: <span class="string">&#x27;happypack/loader?id=css&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">Happypack</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;css&#x27;</span>,</span><br><span class="line">    <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="webpack-自带的优化"><a href="#webpack-自带的优化" class="headerlink" title="webpack 自带的优化"></a>webpack 自带的优化</h2><p><code>test.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">sum</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + <span class="string">&#x27;sum&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">minus</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> a - b + <span class="string">&#x27;minus&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"> sum, minus</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用import </li></ol><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calc <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span></span><br><span class="line"><span class="comment">//import在生产环境下会自动去除没有用的代码`minus`，这叫`tree-shaking`，将没有用的代码自动删除掉</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(calc.<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> calc = <span class="built_in">require</span>(<span class="string">&#x27;./test&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(calc);   <span class="comment">// es 6导出，是一个default的对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(calc.<span class="property">default</span>.<span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>require引入es6 模块会把结果放在default上,打包build后并不会把多余<code>minus</code>代码删除掉，不支持<code>tree-shaking</code></p><ol start="2"><li>作用域的提升（scope hosting）</li></ol><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> d = a + b + c</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d, <span class="string">&#x27;---------&#x27;</span>);</span><br></pre></td></tr></table></figure><p>打包出来的文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r.<span class="property">default</span>.<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>));<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">6</span>,<span class="string">&quot;---------&quot;</span>)</span><br></pre></td></tr></table></figure><p>在webpack中可以省略一些可以简化的代码</p><h2 id="抽取公共代码"><a href="#抽取公共代码" class="headerlink" title="抽取公共代码"></a>抽取公共代码</h2><ol><li>抽离自有模块</li></ol><p><code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;  <span class="comment">// 分割代码块，针对多入口</span></span><br><span class="line">        <span class="attr">cacheGroups</span>: &#123;   <span class="comment">// 缓存组</span></span><br><span class="line">            <span class="attr">common</span>: &#123;   <span class="comment">// 公共模块</span></span><br><span class="line">                <span class="attr">minSize</span>: <span class="number">0</span>,  <span class="comment">// 大于多少抽离</span></span><br><span class="line">                <span class="attr">minChunks</span>: <span class="number">2</span>,  <span class="comment">// 使用多少次以上抽离抽离</span></span><br><span class="line">                <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span>  <span class="comment">// 从什么地方开始,刚开始</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://webpack.docschina.org/plugins/split-chunks-plugin/">SplitChunksPlugin</a></p><p>分别有a.js和b.js, index.js和other.js分别引入a和b两个js</p><p><code>index.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;./a&#x27;</span><br><span class="line">import &#x27;./b&#x27;</span><br><span class="line">console.log(&#x27;index.js&#x27;);</span><br></pre></td></tr></table></figure><p><code>other.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;./a&#x27;</span><br><span class="line">import &#x27;./b&#x27;</span><br><span class="line">console.log(&#x27;other.js&#x27;);</span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;  <span class="comment">// 分割代码块，针对多入口</span></span><br><span class="line">        <span class="attr">cacheGroups</span>: &#123;   <span class="comment">// 缓存组</span></span><br><span class="line">            <span class="attr">common</span>: &#123;   <span class="comment">// 公共模块</span></span><br><span class="line">                <span class="attr">minSize</span>: <span class="number">0</span>,  <span class="comment">// 大于多少抽离</span></span><br><span class="line">                <span class="attr">minChunks</span>: <span class="number">2</span>,  <span class="comment">// 使用多少次以上抽离抽离</span></span><br><span class="line">                <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span>  <span class="comment">// 从什么地方开始,刚开始</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>抽离第三方模块</li></ol><p>比如jquery</p><p><code>index.js</code> 和 <code>other.js</code>分别引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import $ from &#x27;jquery&#x27;</span><br><span class="line"></span><br><span class="line">console.log($);</span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;  <span class="comment">// 分割代码块，针对多入口</span></span><br><span class="line">        <span class="attr">cacheGroups</span>: &#123;   <span class="comment">// 缓存组</span></span><br><span class="line">            <span class="attr">common</span>: &#123;   <span class="comment">// 公共模块</span></span><br><span class="line">                <span class="attr">minSize</span>: <span class="number">0</span>,  <span class="comment">// 大于多少抽离</span></span><br><span class="line">                <span class="attr">minChunks</span>: <span class="number">2</span>,  <span class="comment">// 使用多少次以上抽离抽离</span></span><br><span class="line">                <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span>  <span class="comment">// 从什么地方开始,刚开始</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">vendor</span>: &#123;</span><br><span class="line">                <span class="attr">priority</span>: <span class="number">1</span>, <span class="comment">// 增加权重,先抽离第三方</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/node_modules/</span>, <span class="comment">//只抽离当前目录下</span></span><br><span class="line">                <span class="attr">minSize</span>: <span class="number">0</span>,  <span class="comment">// 大于多少抽离</span></span><br><span class="line">                <span class="attr">minChunks</span>: <span class="number">2</span>,  <span class="comment">// 使用多少次以上抽离抽离</span></span><br><span class="line">                <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span>  <span class="comment">// 从什么地方开始,刚开始</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒加载-延迟加载"><a href="#懒加载-延迟加载" class="headerlink" title="懒加载(延迟加载)"></a>懒加载(延迟加载)</h2><p><code>yarn add @babel/plugin-syntax-dynamic-import  -D</code>    语法动态导入插件</p><p><code>source.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">&#x27;miaochen&#x27;</span></span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;button&#x27;</span>)</span><br><span class="line">button.<span class="property">innerHTML</span> = <span class="string">&#x27;may&#x27;</span></span><br><span class="line"><span class="comment">//vue的懒加载 react懒加载</span></span><br><span class="line">button.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">    <span class="comment">// es6草案中的语法，jsonp实现动态加载文件</span></span><br><span class="line">    <span class="title function_">import</span>(<span class="string">&#x27;./source.js&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">default</span>);  <span class="comment">//miaochen</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(button)</span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">exclude</span>: <span class="string">&#x27;/node_modules/&#x27;</span>,</span><br><span class="line">    <span class="attr">include</span>: path.<span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    <span class="attr">use</span>: [&#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">presets</span>: [  <span class="comment">//预设</span></span><br><span class="line">                <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;@babel/preset-react&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">plugins</span>: [</span><br><span class="line">                <span class="string">&#x27;@babel/plugin-syntax-dynamic-import&#x27;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="热更新-当页面改变只更新改变的部分，不重新打包"><a href="#热更新-当页面改变只更新改变的部分，不重新打包" class="headerlink" title="热更新(当页面改变只更新改变的部分，不重新打包)"></a>热更新(当页面改变只更新改变的部分，不重新打包)</h2><p><code>webpack.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="attr">hot</span>:<span class="literal">true</span>   <span class="comment">//启用热更新</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">NameModulesPlugin</span>(), <span class="comment">// 打印更新的模块路径</span></span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>()  <span class="comment">//热更新插件</span></span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">&#x27;./source&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&#x27;./source&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件更新了&#x27;</span>);</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&#x27;./source&#x27;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="tapable介绍-SyncHook"><a href="#tapable介绍-SyncHook" class="headerlink" title="tapable介绍 - SyncHook"></a>tapable介绍 - SyncHook</h2><p><a href="https://juejin.im/post/5abf33f16fb9a028e46ec352">tapable</a></p><p><code>webpack</code>本质上是一种事件流的机制，它的工作流程就是将各个插件串联起来，而实现这一切的核心就是<code>Tapable</code>，<code>webpack</code>中最核心的负责编译的<code>Compiler</code>和负责创建<code>bundles</code>的<code>Compilation</code>都是<code>Tapable</code>的实例。</p><p><code>SyncHook</code> 不关心监听函数的返回值</p><p><code>yarn add tabable</code></p><p><code>1.use.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="title class_">SyncHook</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>)   <span class="comment">// 结构同步勾子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lesson</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span> = &#123;</span><br><span class="line">            <span class="comment">// 订阅勾子</span></span><br><span class="line">            <span class="attr">arch</span>: <span class="keyword">new</span> <span class="title class_">SyncHook</span>([<span class="string">&#x27;name&#x27;</span>]),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    start () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">arch</span>.<span class="title function_">call</span>(<span class="string">&#x27;miao&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    tap () &#123;   <span class="comment">//  注册监听函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">arch</span>.<span class="title function_">tap</span>(<span class="string">&#x27;node&#x27;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;node&#x27;</span>, name)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">arch</span>.<span class="title function_">tap</span>(<span class="string">&#x27;react&#x27;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;react&#x27;</span>, name)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> l = <span class="keyword">new</span> <span class="title class_">Lesson</span>()</span><br><span class="line"></span><br><span class="line">l.<span class="title function_">tap</span>();  <span class="comment">//注册这两个事件</span></span><br><span class="line">l.<span class="title function_">start</span>() <span class="comment">// 启动勾子</span></span><br></pre></td></tr></table></figure><p><code>1.theory.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SyncHook</span> &#123;  <span class="comment">// 钩子是同步的</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">args</span>) &#123;  <span class="comment">// args =&gt; [&#x27;name&#x27;]</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tasks</span> = []</span><br><span class="line">    &#125;</span><br><span class="line">    tap (name, task) &#123;  <span class="comment">//同步注册</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(task)</span><br><span class="line">    &#125;</span><br><span class="line">    call (...args) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">task</span>) =&gt;</span> <span class="title function_">task</span>(...args))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hook = <span class="keyword">new</span> <span class="title class_">SyncHook</span>([<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"></span><br><span class="line">hook.<span class="title function_">tap</span>(<span class="string">&#x27;react&#x27;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;react&#x27;</span>, name);</span><br><span class="line">&#125;)</span><br><span class="line">hook.<span class="title function_">tap</span>(<span class="string">&#x27;node&#x27;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;node&#x27;</span>, name);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hook.<span class="title function_">call</span>(<span class="string">&#x27;jw&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="tapable介绍-SyncBailHook"><a href="#tapable介绍-SyncBailHook" class="headerlink" title="tapable介绍 - SyncBailHook"></a>tapable介绍 - SyncBailHook</h2><p><code>SyncBailHook</code>为勾子加了个保险，当<code>return</code>返回不是<code>undefine</code>就会停止</p><p><code>2.use.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="title class_">SyncBailHook</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>)   <span class="comment">// 解构同步勾子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lesson</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span> = &#123;</span><br><span class="line">            <span class="comment">// 订阅勾子</span></span><br><span class="line">            <span class="attr">arch</span>: <span class="keyword">new</span> <span class="title class_">SyncBailHook</span>([<span class="string">&#x27;name&#x27;</span>]),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    start () &#123;</span><br><span class="line">        <span class="comment">// 发布</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">arch</span>.<span class="title function_">call</span>(<span class="string">&#x27;may&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    tap () &#123;   <span class="comment">//  注册监听函数,订阅</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">arch</span>.<span class="title function_">tap</span>(<span class="string">&#x27;node&#x27;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;node&#x27;</span>, name)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;停止学习&#x27;</span>  <span class="comment">// 会停止</span></span><br><span class="line">            <span class="comment">// return undefined</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">arch</span>.<span class="title function_">tap</span>(<span class="string">&#x27;react&#x27;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;react&#x27;</span>, name)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> l = <span class="keyword">new</span> <span class="title class_">Lesson</span>()</span><br><span class="line"></span><br><span class="line">l.<span class="title function_">tap</span>();  <span class="comment">//注册两个函数</span></span><br><span class="line">l.<span class="title function_">start</span>() <span class="comment">// 启动勾子</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>2.theory.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SyncBailHook</span> &#123;  <span class="comment">// 钩子是同步的</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">args</span>) &#123;  <span class="comment">// args =&gt; [&#x27;name&#x27;]</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tasks</span> = []</span><br><span class="line">    &#125;</span><br><span class="line">    tap (name, task) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(task)</span><br><span class="line">    &#125;</span><br><span class="line">    call (...args) &#123;</span><br><span class="line">        <span class="keyword">let</span> ret;   <span class="comment">// 当前函数的返回值</span></span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>; <span class="comment">// 当前要执行的第一个</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            ret = <span class="variable language_">this</span>.<span class="property">tasks</span>[index++](...args)</span><br><span class="line">        &#125; <span class="keyword">while</span> (ret === <span class="literal">undefined</span>  &amp;&amp; index &lt; <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="property">length</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hook = <span class="keyword">new</span> <span class="title class_">SyncBailHook</span>([<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"></span><br><span class="line">hook.<span class="title function_">tap</span>(<span class="string">&#x27;react&#x27;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;react&#x27;</span>, name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;停止向下执行&#x27;</span></span><br><span class="line">    <span class="comment">// return undefined</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">hook.<span class="title function_">tap</span>(<span class="string">&#x27;node&#x27;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;node&#x27;</span>, name);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">hook.<span class="title function_">call</span>(<span class="string">&#x27;jw&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="tapable介绍-SyncWaterfallHook"><a href="#tapable介绍-SyncWaterfallHook" class="headerlink" title="tapable介绍 - SyncWaterfallHook"></a>tapable介绍 - SyncWaterfallHook</h2><p><code>SyncWaterfallHook</code>上一个监听函数的返回值可以传给下一个监听函数</p><p><code>3.use.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="title class_">SyncWaterfallHook</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>)   <span class="comment">// 解构同步勾子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// waterfall 瀑布</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lesson</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span> = &#123;</span><br><span class="line">            <span class="comment">// 订阅勾子</span></span><br><span class="line">            <span class="attr">arch</span>: <span class="keyword">new</span> <span class="title class_">SyncWaterfallHook</span>([<span class="string">&#x27;name&#x27;</span>]),</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    start () &#123;</span><br><span class="line">        <span class="comment">// 发布</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">arch</span>.<span class="title function_">call</span>(<span class="string">&#x27;may&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    tap () &#123;   <span class="comment">//  注册监听函数,订阅</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">arch</span>.<span class="title function_">tap</span>(<span class="string">&#x27;node&#x27;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;node&#x27;</span>, name)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;学的不错&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">arch</span>.<span class="title function_">tap</span>(<span class="string">&#x27;react&#x27;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;react&#x27;</span>, name)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> l = <span class="keyword">new</span> <span class="title class_">Lesson</span>()</span><br><span class="line"></span><br><span class="line">l.<span class="title function_">tap</span>();  <span class="comment">//注册两个函数</span></span><br><span class="line">l.<span class="title function_">start</span>() <span class="comment">// 启动勾子</span></span><br></pre></td></tr></table></figure><p><code>3.theory.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SyncWaterfallHook</span> &#123;  <span class="comment">// 勾子是同步的 - 瀑布</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">args</span>) &#123;  <span class="comment">// args =&gt; [&#x27;name&#x27;]</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tasks</span> = []</span><br><span class="line">    &#125;</span><br><span class="line">    tap (name, task) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(task)</span><br><span class="line">    &#125;</span><br><span class="line">    call (...args) &#123;</span><br><span class="line">        <span class="keyword">let</span> [first, ...others] = <span class="variable language_">this</span>.<span class="property">tasks</span>;</span><br><span class="line">        <span class="keyword">let</span> ret = <span class="title function_">first</span>(...args)</span><br><span class="line">        others.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">b</span>(a);</span><br><span class="line">        &#125;, ret);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hook = <span class="keyword">new</span> <span class="title class_">SyncWaterfallHook</span>([<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"></span><br><span class="line">hook.<span class="title function_">tap</span>(<span class="string">&#x27;react&#x27;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;react&#x27;</span>, name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;react Ok&#x27;</span></span><br><span class="line">    <span class="comment">// return undefined</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">hook.<span class="title function_">tap</span>(<span class="string">&#x27;node&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;node&#x27;</span>, name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;node Ok&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">hook.<span class="title function_">tap</span>(<span class="string">&#x27;webpack&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;webpack&#x27;</span>, data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">hook.<span class="title function_">call</span>(<span class="string">&#x27;jw&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="tapable介绍-SyncLoopHook"><a href="#tapable介绍-SyncLoopHook" class="headerlink" title="tapable介绍 - SyncLoopHook"></a>tapable介绍 - SyncLoopHook</h2><p><code>SyncLoopHook</code>当监听函数被触发的时候，如果该监听函数返回<code>true</code>时则这个监听函数会反复执行，如果返回 <code>undefined</code> 则表示退出循环</p><p><code>4.use.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="title class_">SyncLoopHook</span>&#125; = <span class="built_in">require</span>(<span class="string">&#x27;tapable&#x27;</span>)   <span class="comment">// 解构同步勾子</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步遇到某个不返回undefined的监听函数会多次执行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lesson</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">index</span> = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span> = &#123;</span><br><span class="line">            <span class="comment">// 订阅勾子</span></span><br><span class="line">            <span class="attr">arch</span>: <span class="keyword">new</span> <span class="title class_">SyncLoopHook</span>([<span class="string">&#x27;name&#x27;</span>]),</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    start () &#123;</span><br><span class="line">        <span class="comment">// 发布</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">arch</span>.<span class="title function_">call</span>(<span class="string">&#x27;may&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    tap () &#123;   <span class="comment">//  注册监听函数,订阅</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">arch</span>.<span class="title function_">tap</span>(<span class="string">&#x27;node&#x27;</span>,  <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;node&#x27;</span>, name)</span><br><span class="line">            <span class="keyword">return</span> ++<span class="variable language_">this</span>.<span class="property">index</span> === <span class="number">3</span> ? <span class="literal">undefined</span> : <span class="string">&#x27;继续学&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">hooks</span>.<span class="property">arch</span>.<span class="title function_">tap</span>(<span class="string">&#x27;react&#x27;</span>,  <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;react&#x27;</span>, name)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> l = <span class="keyword">new</span> <span class="title class_">Lesson</span>()</span><br><span class="line"></span><br><span class="line">l.<span class="title function_">tap</span>();  <span class="comment">//注册两个函数</span></span><br><span class="line">l.<span class="title function_">start</span>() <span class="comment">// 启动勾子</span></span><br></pre></td></tr></table></figure><p><code>4.theory.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SyncLoopHook</span> &#123;  <span class="comment">// 勾子是同步的 - 瀑布</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">args</span>) &#123;  <span class="comment">// args =&gt; [&#x27;name&#x27;]</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tasks</span> = []</span><br><span class="line">    &#125;</span><br><span class="line">    tap (name, task) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">push</span>(task)</span><br><span class="line">    &#125;</span><br><span class="line">    call (...args) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tasks</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">task</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> ret</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                ret = <span class="title function_">task</span>(...args);</span><br><span class="line">            &#125; <span class="keyword">while</span>(ret !== <span class="literal">undefined</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hook = <span class="keyword">new</span> <span class="title class_">SyncLoopHook</span>([<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line">hook.<span class="title function_">tap</span>(<span class="string">&#x27;react&#x27;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;react&#x27;</span>, name);</span><br><span class="line">    <span class="keyword">return</span> ++total === <span class="number">3</span> ? <span class="attr">undefined</span>: <span class="string">&#x27;继续学&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hook.<span class="title function_">tap</span>(<span class="string">&#x27;node&#x27;</span>, <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;node&#x27;</span>, name);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">hook.<span class="title function_">tap</span>(<span class="string">&#x27;webpack&#x27;</span>, <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;webpack&#x27;</span>, data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hook.<span class="title function_">call</span>(<span class="string">&#x27;jw&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="AsyncParallelHook-与-AsyncParallelBailHook"><a href="#AsyncParallelHook-与-AsyncParallelBailHook" class="headerlink" title="AsyncParallelHook 与 AsyncParallelBailHook"></a><code>AsyncParallelHook</code> 与 <code>AsyncParallelBailHook</code></h2><p>异步的勾子分两种<code>串行</code>和<code>并行</code></p><p><code>并行</code>等待所有并发的异步事件执行后执行回调</p><p>注册的三种方法</p><ol><li>异步的注册方法<code>tap</code></li><li>异步的注册方法<code>tapAsync</code>， 还有个回调参数</li><li><code>topPromise</code>,注册<code>promise</code></li></ol><p>调用的三种</p><ol><li>call (同步)</li><li>callAsync （异步）</li><li>promise （异步）</li></ol><p>这里介绍的是异步并行的</p><h4 id="AsyncParallelHook"><a href="#AsyncParallelHook" class="headerlink" title="AsyncParallelHook"></a>AsyncParallelHook</h4><p>不关心监听函数的返回值。</p><p><code>5.use.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">let &#123;AsyncParallelHook&#125; = require(&#x27;tapable&#x27;)   // 解构同步勾子</span><br><span class="line"></span><br><span class="line">// 不返回undefined 会多次执行</span><br><span class="line"></span><br><span class="line">class Lesson &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.index = 0</span><br><span class="line">        this.hooks = &#123;</span><br><span class="line">            // 订阅勾子</span><br><span class="line">            arch: new AsyncParallelHook([&#x27;name&#x27;]),</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start() &#123;</span><br><span class="line">        // 发布callAsync</span><br><span class="line">        // this.hooks.arch.callAsync(&#x27;may&#x27;, function () &#123;</span><br><span class="line">        //     console.log(&#x27;end&#x27;);</span><br><span class="line">        // &#125;)</span><br><span class="line">        // 另一种发布promise</span><br><span class="line">        this.hooks.arch.promise(&#x27;may&#x27;).then(function () &#123;</span><br><span class="line">                console.log(&#x27;end&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tap() &#123;   //  注册监听函数,订阅</span><br><span class="line">        // 注册tapAsync</span><br><span class="line">        // this.hooks.arch.tapAsync(&#x27;node&#x27;,  (name, callback) =&gt; &#123;</span><br><span class="line">        //     setTimeout(() =&gt; &#123;</span><br><span class="line">        //         console.log(&#x27;node&#x27;, name)</span><br><span class="line">        //         callback()</span><br><span class="line">        //     &#125;, 1000)</span><br><span class="line">        // &#125;)</span><br><span class="line">        // this.hooks.arch.tapAsync(&#x27;react&#x27;,  (name, callback) =&gt; &#123;</span><br><span class="line">        //     setTimeout(() =&gt; &#123;</span><br><span class="line">        //         console.log(&#x27;react&#x27;, name)</span><br><span class="line">        //         callback()</span><br><span class="line">        //     &#125;, 1000)</span><br><span class="line">        // &#125;)</span><br><span class="line">        // 另一种订阅 tapPromise</span><br><span class="line">        this.hooks.arch.tapPromise(&#x27;node&#x27;, (name) =&gt; &#123;</span><br><span class="line">            return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    console.log(&#x27;node&#x27;, name)</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;, 1000)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        this.hooks.arch.tapPromise(&#x27;react&#x27;, (name) =&gt; &#123;</span><br><span class="line">            return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    console.log(&#x27;react&#x27;, name)</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;, 1000)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let l = new Lesson()</span><br><span class="line"></span><br><span class="line">l.tap();  //注册两个函数</span><br><span class="line">l.start() // 启动勾子</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>5.theory.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">class AsyncParallelHook &#123;  // 勾子是同步的 - 瀑布</span><br><span class="line">    constructor(args) &#123;  // args =&gt; [&#x27;name&#x27;]</span><br><span class="line">        this.tasks = []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tapAsync(name, task) &#123;</span><br><span class="line">        this.tasks.push(task)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tapPromise(name, task) &#123;</span><br><span class="line">        this.tasks.push(task)</span><br><span class="line">    &#125;</span><br><span class="line">    callAsync(...args) &#123;</span><br><span class="line">        let finalCallback = args.pop()   // 拿出最终的函数</span><br><span class="line">        let index = 0</span><br><span class="line">        let done = () =&gt; &#123;   // 类似promise.all的实现</span><br><span class="line">            index++;</span><br><span class="line">            if (index === this.tasks.length) &#123;</span><br><span class="line">                finalCallback();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.tasks.forEach(task =&gt; &#123;</span><br><span class="line">            task(...args, done) // 这里的args 已经把最后一个参数删掉</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    promise(...args) &#123;</span><br><span class="line">        let tasks = this.tasks.map(task =&gt; task(...args))</span><br><span class="line">        return Promise.all(tasks)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let hook = new AsyncParallelHook([&#x27;name&#x27;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// hook.tapAsync(&#x27;react&#x27;, function (name, callback) &#123;</span><br><span class="line">//     setTimeout(() =&gt; &#123;</span><br><span class="line">//         console.log(&#x27;react&#x27;, name);</span><br><span class="line">//         callback()</span><br><span class="line">//     &#125;, 1000)</span><br><span class="line">// &#125;)</span><br><span class="line">//</span><br><span class="line">// hook.tapAsync(&#x27;node&#x27;, function (name, callback) &#123;</span><br><span class="line">//     setTimeout(() =&gt; &#123;</span><br><span class="line">//         console.log(&#x27;node&#x27;, name);</span><br><span class="line">//         callback()</span><br><span class="line">//     &#125;, 1000)</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">// hook.tapAsync(&#x27;webpack&#x27;, function (name, callback) &#123;</span><br><span class="line">//     setTimeout(() =&gt; &#123;</span><br><span class="line">//         console.log(&#x27;webpack&#x27;, name);</span><br><span class="line">//         callback()</span><br><span class="line">//     &#125;, 1000)</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">hook.tapPromise(&#x27;react&#x27;, function (name, callback) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;react&#x27;, name);</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">hook.tapPromise(&#x27;node&#x27;, function (name, callback) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;node&#x27;, name);</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">// hook.callAsync(&#x27;jw&#x27;, function () &#123;</span><br><span class="line">//     console.log(&#x27;end&#x27;);</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hook.promise(&#x27;jw&#x27;).then(function () &#123;</span><br><span class="line">    console.log(&#x27;end&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="AsyncParallelBailHook"><a href="#AsyncParallelBailHook" class="headerlink" title="AsyncParallelBailHook"></a>AsyncParallelBailHook</h4><p>只要监听函数的返回值不为 <code>null</code>，就会忽略后面的监听函数执行，直接跳跃到<code>callAsync</code>等触发函数绑定的回调函数，然后执行这个被绑定的回调函数。</p><p>使用和原理与<code>SyncBailHook</code>相似</p><h2 id="异步串行-——-AsyncSeriesHook"><a href="#异步串行-——-AsyncSeriesHook" class="headerlink" title="异步串行 —— AsyncSeriesHook"></a>异步串行 —— AsyncSeriesHook</h2><p><code>串行 </code>one by one</p><p><code>6.use.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">let &#123;AsyncSeriesHook&#125; = require(&#x27;tapable&#x27;)   // 解构同步勾子</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Lesson &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.index = 0</span><br><span class="line">        this.hooks = &#123;</span><br><span class="line">            // 订阅勾子</span><br><span class="line">            arch: new AsyncSeriesHook([&#x27;name&#x27;]),</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start() &#123;</span><br><span class="line">        // 发布</span><br><span class="line">        // this.hooks.arch.callAsync(&#x27;may&#x27;, function () &#123;</span><br><span class="line">        //     console.log(&#x27;end&#x27;);</span><br><span class="line">        // &#125;)</span><br><span class="line">        // 另一种发布</span><br><span class="line">        this.hooks.arch.promise(&#x27;may&#x27;).then(function () &#123;</span><br><span class="line">                console.log(&#x27;end&#x27;);</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tap() &#123;   //  注册监听函数,订阅</span><br><span class="line">        // this.hooks.arch.tapAsync(&#x27;node&#x27;,  (name, callback) =&gt; &#123;</span><br><span class="line">        //     setTimeout(() =&gt; &#123;</span><br><span class="line">        //         console.log(&#x27;node&#x27;, name)</span><br><span class="line">        //         callback()</span><br><span class="line">        //     &#125;, 1000)</span><br><span class="line">        // &#125;)</span><br><span class="line">        // this.hooks.arch.tapAsync(&#x27;react&#x27;,  (name, callback) =&gt; &#123;</span><br><span class="line">        //     setTimeout(() =&gt; &#123;</span><br><span class="line">        //         console.log(&#x27;react&#x27;, name)</span><br><span class="line">        //         callback()</span><br><span class="line">        //     &#125;, 1000)</span><br><span class="line">        // &#125;)</span><br><span class="line">        // 另一种订阅</span><br><span class="line">        this.hooks.arch.tapPromise(&#x27;node&#x27;, (name) =&gt; &#123;</span><br><span class="line">            return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    console.log(&#x27;node&#x27;, name)</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;, 1000)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        this.hooks.arch.tapPromise(&#x27;react&#x27;, (name) =&gt; &#123;</span><br><span class="line">            return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    console.log(&#x27;react&#x27;, name)</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;, 1000)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let l = new Lesson()</span><br><span class="line"></span><br><span class="line">l.tap();  //注册两个函数</span><br><span class="line">l.start(); // 启动勾子</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>6.theory.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">class AsyncSeriesHook &#123;  //</span><br><span class="line">    constructor(args) &#123;  // args =&gt; [&#x27;name&#x27;]</span><br><span class="line">        this.tasks = []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tapAsync(name, task) &#123;</span><br><span class="line">        this.tasks.push(task)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tapPromise(name, task) &#123;</span><br><span class="line">        this.tasks.push(task)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    callAsync(...args) &#123;</span><br><span class="line">        let finalCallback = args.pop()</span><br><span class="line">        let index = 0;</span><br><span class="line">        let next = () =&gt; &#123;</span><br><span class="line">            if (this.tasks.length === index) return finalCallback();</span><br><span class="line">            let task = this.tasks[index++];</span><br><span class="line">            task(...args, next);</span><br><span class="line">        &#125;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    promise(...args) &#123;</span><br><span class="line">        // 将promise串联起来</span><br><span class="line">        let [first, ...other] = this.tasks</span><br><span class="line">        return other.reduce((p, n) =&gt; &#123;</span><br><span class="line">             return p.then(() =&gt; n (...args))</span><br><span class="line">        &#125;, first(...args))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let hook = new AsyncSeriesHook([&#x27;name&#x27;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// hook.tapAsync(&#x27;react&#x27;, function (name, callback) &#123;</span><br><span class="line">//     setTimeout(() =&gt; &#123;</span><br><span class="line">//         console.log(&#x27;react&#x27;, name);</span><br><span class="line">//         callback()</span><br><span class="line">//     &#125;, 1000)</span><br><span class="line">// &#125;)</span><br><span class="line">//</span><br><span class="line">// hook.tapAsync(&#x27;node&#x27;, function (name, callback) &#123;</span><br><span class="line">//     setTimeout(() =&gt; &#123;</span><br><span class="line">//         console.log(&#x27;node&#x27;, name);</span><br><span class="line">//         callback()</span><br><span class="line">//     &#125;, 1000)</span><br><span class="line">// &#125;)</span><br><span class="line">//</span><br><span class="line">// hook.tapAsync(&#x27;webpack&#x27;, function (name, callback) &#123;</span><br><span class="line">//     setTimeout(() =&gt; &#123;</span><br><span class="line">//         console.log(&#x27;webpack&#x27;, name);</span><br><span class="line">//         callback()</span><br><span class="line">//     &#125;, 1000)</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hook.tapPromise(&#x27;react&#x27;, function (name, callback) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;react&#x27;, name);</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">hook.tapPromise(&#x27;node&#x27;, function (name, callback) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;node&#x27;, name);</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// hook.callAsync(&#x27;jw&#x27;, function () &#123;</span><br><span class="line">//     console.log(&#x27;end&#x27;);</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hook.promise(&#x27;jw&#x27;).then(function () &#123;</span><br><span class="line">    console.log(&#x27;end&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异步串行-——-AsyncSeriesWaterfallHook"><a href="#异步串行-——-AsyncSeriesWaterfallHook" class="headerlink" title="异步串行 —— AsyncSeriesWaterfallHook"></a>异步串行 —— AsyncSeriesWaterfallHook</h2><p>上一个监听函数的中的<code>callback(err, data)</code>的第二个参数,可以作为下一个监听函数的参数</p><p><code>7.use.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">let &#123;AsyncSeriesWaterfallHook&#125; = require(&#x27;tapable&#x27;)   // 解构同步勾子</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Lesson &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.index = 0</span><br><span class="line">        this.hooks = &#123;</span><br><span class="line">            // 订阅勾子</span><br><span class="line">            arch: new AsyncSeriesWaterfallHook([&#x27;name&#x27;]),</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    start() &#123;</span><br><span class="line">        // 发布</span><br><span class="line">        this.hooks.arch.callAsync(&#x27;may&#x27;, function () &#123;</span><br><span class="line">            console.log(&#x27;end&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">        // 另一种发布</span><br><span class="line">        // this.hooks.arch.promise(&#x27;may&#x27;).then(function () &#123;</span><br><span class="line">        //         console.log(&#x27;end&#x27;);</span><br><span class="line">        //     &#125;</span><br><span class="line">        // )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tap() &#123;   //  注册监听函数,订阅</span><br><span class="line">        this.hooks.arch.tapAsync(&#x27;node&#x27;,  (name, callback) =&gt; &#123;</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                console.log(&#x27;node&#x27;, name)</span><br><span class="line">                // callback(null, &#x27;result&#x27;)</span><br><span class="line">                callback(&#x27;error&#x27;, &#x27;result&#x27;)   // 如果放error, 会跳过直接后面的勾子，直接走到最终的</span><br><span class="line"></span><br><span class="line">            &#125;, 1000)</span><br><span class="line">        &#125;)</span><br><span class="line">        this.hooks.arch.tapAsync(&#x27;react&#x27;,  (name, callback) =&gt; &#123;</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                console.log(&#x27;react&#x27;, name)</span><br><span class="line">                callback()</span><br><span class="line">            &#125;, 1000)</span><br><span class="line">        &#125;)</span><br><span class="line">        // 另一种订阅</span><br><span class="line">        // this.hooks.arch.tapPromise(&#x27;node&#x27;, (name) =&gt; &#123;</span><br><span class="line">        //     return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        //         setTimeout(() =&gt; &#123;</span><br><span class="line">        //             console.log(&#x27;node&#x27;, name)</span><br><span class="line">        //             resolve()</span><br><span class="line">        //         &#125;, 1000)</span><br><span class="line">        //     &#125;)</span><br><span class="line">        // &#125;)</span><br><span class="line">        // this.hooks.arch.tapPromise(&#x27;react&#x27;, (name) =&gt; &#123;</span><br><span class="line">        //     return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        //         setTimeout(() =&gt; &#123;</span><br><span class="line">        //             console.log(&#x27;react&#x27;, name)</span><br><span class="line">        //             resolve()</span><br><span class="line">        //         &#125;, 1000)</span><br><span class="line">        //     &#125;)</span><br><span class="line">        // &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let l = new Lesson()</span><br><span class="line"></span><br><span class="line">l.tap();  //注册两个函数</span><br><span class="line">l.start(); // 启动勾子</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>7.theory.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">class AsyncSeriesWaterfallHook &#123;  //</span><br><span class="line">    constructor(args) &#123;  // args =&gt; [&#x27;name&#x27;]</span><br><span class="line">        this.tasks = []</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tapAsync(name, task) &#123;</span><br><span class="line">        this.tasks.push(task)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tapPromise(name, task) &#123;</span><br><span class="line">        this.tasks.push(task)</span><br><span class="line">    &#125;</span><br><span class="line">    callAsync(...args) &#123;</span><br><span class="line">        let finalCallback = args.pop()</span><br><span class="line">        let index = 0;</span><br><span class="line">        let next = (err, data) =&gt; &#123;</span><br><span class="line">            let task = this.tasks[index]</span><br><span class="line">            if(!task) return finalCallback();</span><br><span class="line">            if (index === 0) &#123;</span><br><span class="line">                // 执行的第一个</span><br><span class="line">                task(...args, next)</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                task(data, next)</span><br><span class="line">            &#125;</span><br><span class="line">            index ++</span><br><span class="line">        &#125;</span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    promise(...args) &#123;</span><br><span class="line">        // 将promise串联起来</span><br><span class="line">        let [first, ...other] = this.tasks</span><br><span class="line">        return other.reduce((p, n) =&gt; &#123;</span><br><span class="line">             return p.then((data) =&gt; n(data))</span><br><span class="line">        &#125;, first(...args))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let hook = new AsyncSeriesWaterfallHook([&#x27;name&#x27;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// hook.tapAsync(&#x27;react&#x27;, function (name, callback) &#123;</span><br><span class="line">//     setTimeout(() =&gt; &#123;</span><br><span class="line">//         console.log(&#x27;react&#x27;, name);</span><br><span class="line">//         callback(null, &#x27;结果1&#x27;)</span><br><span class="line">//     &#125;, 1000)</span><br><span class="line">// &#125;)</span><br><span class="line">//</span><br><span class="line">// hook.tapAsync(&#x27;node&#x27;, function (name, callback) &#123;</span><br><span class="line">//     setTimeout(() =&gt; &#123;</span><br><span class="line">//         console.log(&#x27;node&#x27;, name);</span><br><span class="line">//         callback(null, &#x27;结果2&#x27;)</span><br><span class="line">//     &#125;, 1000)</span><br><span class="line">// &#125;)</span><br><span class="line">//</span><br><span class="line">// hook.tapAsync(&#x27;webpack&#x27;, function (name, callback) &#123;</span><br><span class="line">//     setTimeout(() =&gt; &#123;</span><br><span class="line">//         console.log(&#x27;webpack&#x27;, name);</span><br><span class="line">//         callback()</span><br><span class="line">//     &#125;, 1000)</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">hook.tapPromise(&#x27;react&#x27;, function (name, callback) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;react&#x27;, name);</span><br><span class="line">            resolve(&#x27;result&#x27;)</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">hook.tapPromise(&#x27;node&#x27;, function (name, callback) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            console.log(&#x27;node&#x27;, name);</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">// hook.callAsync(&#x27;jw&#x27;, function () &#123;</span><br><span class="line">//     console.log(&#x27;end&#x27;);</span><br><span class="line">// &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hook.promise(&#x27;jw&#x27;).then(function () &#123;</span><br><span class="line">    console.log(&#x27;end&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="手写webpack"><a href="#手写webpack" class="headerlink" title="手写webpack"></a>手写webpack</h2><p><a href="https://github.com/mayufo/webpack-training">对应的may-pack项目</a></p><p><code>yarn add webpack webpack-cli -D</code></p><p><code>webpack.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: &#x27;development&#x27;,</span><br><span class="line">    entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &#x27;bundle.js&#x27;,</span><br><span class="line">        path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>npx webpack</code></p><p>生成文件<code>bundle.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">(function (modules) &#123;</span><br><span class="line">    var installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    function __webpack_require__(moduleId) &#123;</span><br><span class="line"></span><br><span class="line">        if (installedModules[moduleId]) &#123;</span><br><span class="line">            return installedModules[moduleId].exports;</span><br><span class="line">        &#125;</span><br><span class="line">        var module = installedModules[moduleId] = &#123;</span><br><span class="line">            i: moduleId,</span><br><span class="line">            l: false,</span><br><span class="line">            exports: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class="line"></span><br><span class="line">        module.l = true;</span><br><span class="line"></span><br><span class="line">        return module.exports;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // Load entry module and return exports</span><br><span class="line">    return __webpack_require__(__webpack_require__.s = &quot;./src/index.js&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">(&#123;</span><br><span class="line">    &quot;./src/a.js&quot;:</span><br><span class="line">        (function (module, exports, __webpack_require__) &#123;</span><br><span class="line">            eval(&quot;let b = __webpack_require__(/*! ./base/b */ \&quot;./src/base/b.js\&quot;)\n\nmodule.exports = &#x27;a&#x27;+ b\n\n\n\n//# sourceURL=webpack:///./src/a.js?&quot;);</span><br><span class="line">        &#125;),</span><br><span class="line">    &quot;./src/base/b.js&quot;:</span><br><span class="line">        (function (module, exports) &#123;</span><br><span class="line">            eval(&quot;module.exports = &#x27;b&#x27;\n\n\n//# sourceURL=webpack:///./src/base/b.js?&quot;);</span><br><span class="line">        &#125;),</span><br><span class="line">    &quot;./src/index.js&quot;:</span><br><span class="line">        (function (module, exports, __webpack_require__) &#123;</span><br><span class="line">            eval(&quot; let str = __webpack_require__(/*! ./a.js */ \&quot;./src/a.js\&quot;)\n\n console.log(str);\n\n\n//# sourceURL=webpack:///./src/index.js?&quot;);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建项目用于自己的<code>webpack</code>,这里叫<code>may-pack</code></p><p><code>yarn init</code></p><p>如果在node里想执行命令，创建<code>bin</code>文件,再创建<code>may-pack.js</code></p><p>配置<code>package.json</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;may-pack&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;bin&quot;: &#123;</span><br><span class="line">    &quot;may-pack&quot;: &quot;./bin/may-pack.js&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>may-pack.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#!  /usr/bin/env node </span><br><span class="line"></span><br><span class="line">// node环境</span><br><span class="line"></span><br><span class="line">console.log(&#x27;start&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行<code>npm link</code>将npm 模块链接到对应的运行项目中去，方便地对模块进行调试和测试</p><p>在想运行<code>may-pack</code>的项目中运行，<code>npm link may-pack</code> 得到 <code>start</code></p><h2 id="webpack分析及处理"><a href="#webpack分析及处理" class="headerlink" title="webpack分析及处理"></a>webpack分析及处理</h2><p><code>may-pack.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!  /usr/bin/env node</span><br><span class="line"></span><br><span class="line">// node环境</span><br><span class="line"></span><br><span class="line">console.log(&#x27;start&#x27;);</span><br><span class="line"></span><br><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line"></span><br><span class="line">// 拿到配置文件webpack.config.js</span><br><span class="line">let config = require(path.resolve(&#x27;webpack.config.js&#x27;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let Compiler = require(&#x27;../lib/Compiler.js&#x27;);</span><br><span class="line"></span><br><span class="line">let compiler = new Compiler(config);</span><br><span class="line"></span><br><span class="line">// 标识运行编译</span><br><span class="line">compiler.run()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建<code>lib</code>文件<code>Compiler.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line"></span><br><span class="line">class Compiler &#123;</span><br><span class="line">    constructor(config) &#123;</span><br><span class="line">        // entry  output</span><br><span class="line">        this.config = config</span><br><span class="line">        // 需要保存入口文件的路径</span><br><span class="line">        this.entryId = &#x27;&#x27;;   // &#x27;./src/index.js&#x27;</span><br><span class="line">        // 需要保存所有的模块依赖</span><br><span class="line">        this.modules = &#123;&#125;;</span><br><span class="line">        this.entry = config.entry  // 入口文件</span><br><span class="line">        // 工作目录</span><br><span class="line">        this.root = process.cwd(); // 当前运行npx的路径</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 构建模块</span><br><span class="line">    buildModule(modulePath, isEntry) &#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 发射文件</span><br><span class="line">    emitFile() &#123;</span><br><span class="line">        // 用数据 渲染想要的</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    run() &#123;</span><br><span class="line">        // 执行 创建模块的依赖关系</span><br><span class="line">        this.buildModule(path.resolve(this.root, this.entry), true)  // path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class="line">        // 发射打包后的文件</span><br><span class="line">        this.emitFile()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = Compiler</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>主要两个任务</p><ol><li>拿到入口Id</li><li>解析模块，也就是实现<code>buildModule</code>方法</li></ol><h2 id="创建依赖关系"><a href="#创建依赖关系" class="headerlink" title="创建依赖关系"></a>创建依赖关系</h2><p><code>may-pack</code>中<code>Compiler.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line">// babylon  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。</span><br><span class="line">// @babel/traverse 对ast解析遍历语法树 负责替换，删除和添加节点</span><br><span class="line">// @babel/types 用于AST节点的Lodash-esque实用程序库</span><br><span class="line">// @babel/generator 结果生成</span><br><span class="line"></span><br><span class="line">let babylon = require(&#x27;babylon&#x27;)</span><br><span class="line">let traverse = require(&#x27;@babel/traverse&#x27;).default;</span><br><span class="line">let type = require(&#x27;@babel/types&#x27;);</span><br><span class="line">let generator = require(&#x27;@babel/generator&#x27;).default</span><br><span class="line">class Compiler &#123;</span><br><span class="line">    constructor(config) &#123;</span><br><span class="line">        // entry  output</span><br><span class="line">        this.config = config</span><br><span class="line">        // 需要保存入口文件的路径</span><br><span class="line">        this.entryId = &#x27;&#x27;;   // &#x27;./src/index.js&#x27;</span><br><span class="line">        // 需要保存所有的模块依赖</span><br><span class="line">        this.modules = &#123;&#125;;</span><br><span class="line">        this.entry = config.entry  // 入口文件</span><br><span class="line">        // 工作目录</span><br><span class="line">        this.root = process.cwd(); // 当前运行npx的路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    // 拿到模块内容</span><br><span class="line">    getSource (modulePath) &#123;</span><br><span class="line">        let content = fs.readFileSync(modulePath, &#x27;utf8&#x27;)</span><br><span class="line">        return content</span><br><span class="line">    &#125;</span><br><span class="line">    parse (source, parentPath) &#123;</span><br><span class="line">        console.log(source, parentPath)</span><br><span class="line">    &#125;</span><br><span class="line">    // 构建模块</span><br><span class="line">    buildModule(modulePath, isEntry) &#123;</span><br><span class="line">        // 拿到模块内容</span><br><span class="line">        let source = this.getSource(modulePath)  // 得到入口文件的内容</span><br><span class="line">        // 模块id modulePath(需要相对路径) = modulePath(模块路径) - this.root(项目工作路径)   src/index.js</span><br><span class="line">        let moduleName = &#x27;./&#x27; + path.relative(this.root, modulePath)</span><br><span class="line">        console.log(source, moduleName);  // 拿到代码 和相对路径 ./src/index.js</span><br><span class="line">        if (isEntry) &#123;</span><br><span class="line">            this.entryId = moduleName</span><br><span class="line">        &#125;</span><br><span class="line">        let &#123;sourceCode, dependencies&#125; = this.parse(source, path.dirname(moduleName))   // ./src</span><br><span class="line">        // 把相对路径和模块中的内容对应起来</span><br><span class="line">        this.modules[moduleName] = sourceCode</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 发射文件</span><br><span class="line">    emitFile() &#123;</span><br><span class="line">        // 用数据 渲染想要的</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    run() &#123;</span><br><span class="line">        // 执行 创建模块的依赖关系</span><br><span class="line">        this.buildModule(path.resolve(this.root, this.entry), true)  // path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class="line">        console.log(this.modules, this.entryId);</span><br><span class="line">        // 发射打包后的文件</span><br><span class="line">        this.emitFile()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = Compiler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ast递归解析"><a href="#ast递归解析" class="headerlink" title="ast递归解析"></a>ast递归解析</h2><p><code>parse</code>方法主要靠解析语法树来进行转义<br><code>babylon</code>  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。<br><code>@babel/traverse</code> 对ast解析遍历语法树 负责替换，删除和添加节点<br><code>@babel/types</code> 用于AST节点的Lodash-esque实用程序库<br><code>@babel/generator</code> 结果生成</p><p><code>yarn add babylon @babel/traverse @babel/types @babel/generator</code></p><p><code>may-pack</code>中<code>Compiler.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line">let fs = require(&#x27;fs&#x27;)</span><br><span class="line">// babylon  主要把源码转成ast Babylon 是 Babel 中使用的 JavaScript 解析器。</span><br><span class="line">// @babel/traverse 对ast解析遍历语法树 负责替换，删除和添加节点</span><br><span class="line">// @babel/types 用于AST节点的Lodash-esque实用程序库</span><br><span class="line">// @babel/generator 结果生成</span><br><span class="line"></span><br><span class="line">let babylon = require(&#x27;babylon&#x27;)</span><br><span class="line">let traverse = require(&#x27;@babel/traverse&#x27;).default;</span><br><span class="line">let type = require(&#x27;@babel/types&#x27;);</span><br><span class="line">let generator = require(&#x27;@babel/generator&#x27;).default</span><br><span class="line">class Compiler &#123;</span><br><span class="line">    constructor(config) &#123;</span><br><span class="line">        // entry  output</span><br><span class="line">        this.config = config</span><br><span class="line">        // 需要保存入口文件的路径</span><br><span class="line">        this.entryId = &#x27;&#x27;;   // &#x27;./src/index.js&#x27;</span><br><span class="line">        // 需要保存所有的模块依赖</span><br><span class="line">        this.modules = &#123;&#125;;</span><br><span class="line">        this.entry = config.entry  // 入口文件</span><br><span class="line">        // 工作目录</span><br><span class="line">        this.root = process.cwd(); // 当前运行npx的路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    // 拿到模块内容</span><br><span class="line">    getSource (modulePath) &#123;</span><br><span class="line">        let content = fs.readFileSync(modulePath, &#x27;utf8&#x27;)</span><br><span class="line">        return content</span><br><span class="line">    &#125;</span><br><span class="line">    parse (source, parentPath) &#123;</span><br><span class="line">        // AST解析语法树</span><br><span class="line">        let ast = babylon.parse(source)</span><br><span class="line">        let dependencies = []; // 依赖的数组</span><br><span class="line">        // https://astexplorer.net/</span><br><span class="line">        traverse(ast, &#123;</span><br><span class="line">            // 调用表达式</span><br><span class="line">            CallExpression(p) &#123;</span><br><span class="line">                let node = p.node; //对应的节点</span><br><span class="line">                if(node.callee.name === &#x27;require&#x27;) &#123;</span><br><span class="line">                   node.callee.name = &#x27;__webpack_require__&#x27;</span><br><span class="line">                    let moduledName = node.arguments[0].value   // 取到模块的引用名字</span><br><span class="line">                    moduledName = moduledName + (path.extname(moduledName) ? &#x27;&#x27;: &#x27;.js&#x27;);  // ./a.js</span><br><span class="line">                    moduledName = &#x27;./&#x27; + path.join(parentPath, moduledName)  // &#x27;./src/a.js&#x27;</span><br><span class="line">                    dependencies.push(moduledName)</span><br><span class="line">                    node.arguments = [type.stringLiteral(moduledName)] // 改掉源码</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        let sourceCode = generator(ast).code</span><br><span class="line">        return &#123; sourceCode, dependencies &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // 构建模块</span><br><span class="line">    buildModule(modulePath, isEntry) &#123;</span><br><span class="line">        // 拿到模块内容</span><br><span class="line">        let source = this.getSource(modulePath)  // 得到入口文件的内容</span><br><span class="line">        // 模块id modulePath(需要相对路径) = modulePath(模块路径) - this.root(项目工作路径)   src/index.js</span><br><span class="line">        let moduleName = &#x27;./&#x27; + path.relative(this.root, modulePath)</span><br><span class="line">        // console.log(source, moduleName);  // 拿到代码 和相对路径 ./src/index.js</span><br><span class="line">        if (isEntry) &#123;</span><br><span class="line">            this.entryId = moduleName</span><br><span class="line">        &#125;</span><br><span class="line">        // 解析把source源码进行改造， 返回一个依赖列表</span><br><span class="line">        let &#123;sourceCode, dependencies&#125; = this.parse(source, path.dirname(moduleName))   // ./src</span><br><span class="line">        // 把相对路径和模块中的内容对应起来</span><br><span class="line">        this.modules[moduleName] = sourceCode</span><br><span class="line">        dependencies.forEach(dep =&gt; &#123;  // 附模块的加载 递归加载</span><br><span class="line">            this.buildModule(path.join(this.root, dep), false)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 发射文件</span><br><span class="line">    emitFile() &#123;</span><br><span class="line">        // 用数据 渲染想要的</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    run() &#123;</span><br><span class="line">        // 执行 创建模块的依赖关系</span><br><span class="line">        this.buildModule(path.resolve(this.root, this.entry), true)  // path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class="line">        console.log(this.modules, this.entryId);</span><br><span class="line">        // 发射打包后的文件</span><br><span class="line">        this.emitFile()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = Compiler</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="生成打包工具"><a href="#生成打包工具" class="headerlink" title="生成打包工具"></a>生成打包工具</h2><p>使用ejs模板</p><p><code>may-pack</code>中<code>main.ejs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">(function (modules) &#123;</span><br><span class="line">var installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">function __webpack_require__(moduleId) &#123;</span><br><span class="line"></span><br><span class="line">if (installedModules[moduleId]) &#123;</span><br><span class="line">return installedModules[moduleId].exports;</span><br><span class="line">&#125;</span><br><span class="line">var module = installedModules[moduleId] = &#123;</span><br><span class="line">i: moduleId,</span><br><span class="line">l: false,</span><br><span class="line">exports: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);</span><br><span class="line"></span><br><span class="line">module.l = true;</span><br><span class="line"></span><br><span class="line">return module.exports;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Load entry module and return exports</span><br><span class="line">return __webpack_require__(__webpack_require__.s = &quot;&lt;%-entryId %&gt;&quot;);</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">&lt;% for(let key in modules)&#123; %&gt;</span><br><span class="line">    &quot;&lt;%- key %&gt;&quot;:</span><br><span class="line">    (function (module, exports,__webpack_require__) &#123;</span><br><span class="line">eval(`&lt;%-modules[key] %&gt;`);</span><br><span class="line">&#125;),</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://ejs.bootcss.com/">ejs入门</a></p><p><code>yarn add ejs</code></p><p><code>may-pack</code>中<code>Compiler.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let ejs = require(&#x27;ejs&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 发射文件</span><br><span class="line">    emitFile() &#123;</span><br><span class="line">        // 用数据 渲染想要的</span><br><span class="line">        // 输出到那个目录下</span><br><span class="line">        let main = path.join(this.config.output.path, this.config.output.filename)</span><br><span class="line">        let templateStr = this.getSource(path.join(__dirname, &#x27;main.ejs&#x27;))</span><br><span class="line">        let code = ejs.render(templateStr, &#123; entryId: this.entryId, modules: this.modules&#125;)</span><br><span class="line">        this.assets = &#123;&#125;</span><br><span class="line">        // 路径对应的代码</span><br><span class="line">        this.assets[main] = code</span><br><span class="line">        fs.writeFileSync(main, this.assets[main])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>webpack-training</code>项目中运行<code>npx may-pack</code>, 得到<code>bundle.js</code>,运行得到结果</p><h2 id="增加loader"><a href="#增加loader" class="headerlink" title="增加loader"></a>增加loader</h2><p>创建<code>loader</code>文件夹，创建<code>less-loader1.js</code>和<code>style-loader1.js</code></p><p><code>yarn add less</code></p><p><a href="http://lesscss.cn/#using-less">less使用</a></p><p><code>less-loader1.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 将less转为css</span><br><span class="line">let less = require(&#x27;less&#x27;)</span><br><span class="line"></span><br><span class="line">function loader(source) &#123;</span><br><span class="line">    let css = &#x27;&#x27;</span><br><span class="line">    less.render(source, function (err, output) &#123;</span><br><span class="line">        css = output.css</span><br><span class="line">    &#125;)</span><br><span class="line">    css = css.replace(/\n/g, &#x27;\\n&#x27;);</span><br><span class="line">    return css</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = loader</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>style-loader1.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 将css插入到html头部</span><br><span class="line">function loader(source) &#123;</span><br><span class="line">    console.log(111);</span><br><span class="line">    let style = `</span><br><span class="line">    let style = document.createElement(&#x27;style&#x27;)</span><br><span class="line">    style.innerHTML = $&#123;JSON.stringify(source)&#125;</span><br><span class="line">    document.head.appendChild(style)</span><br><span class="line">   `</span><br><span class="line">    return style</span><br><span class="line">&#125;</span><br><span class="line">module.exports = loader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// JSON.stringify(source) 可以将代码转为一行</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: &#x27;development&#x27;,</span><br><span class="line">    entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &#x27;bundle.js&#x27;,</span><br><span class="line">        path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.less$/,</span><br><span class="line">                use: [</span><br><span class="line">                    path.resolve(__dirname, &#x27;loader&#x27;, &#x27;style-loader1&#x27;),</span><br><span class="line">                    path.resolve(__dirname, &#x27;loader&#x27;, &#x27;less-loader1&#x27;)</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建<code>index.less</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">  background: red</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let str = require(&#x27;./a.js&#x27;)</span><br><span class="line"></span><br><span class="line">require(&#x27;./index.less&#x27;)</span><br><span class="line"></span><br><span class="line">console.log(str);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>may-pack</code>中<code>Compiler.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 拿到模块内容</span><br><span class="line">    getSource (modulePath) &#123;</span><br><span class="line">        // 匹配各种文件的规则</span><br><span class="line">        let rules= this.config.module.rules;   // webpack.config.js 中rules的数组</span><br><span class="line">        let content = fs.readFileSync(modulePath, &#x27;utf8&#x27;)</span><br><span class="line"></span><br><span class="line">        for (let i = 0; i &lt; rules.length; i++) &#123;</span><br><span class="line">            let rule = rules[i]</span><br><span class="line">            let &#123;test, use&#125; = rule</span><br><span class="line">            let len = use.length - 1</span><br><span class="line"></span><br><span class="line">            if (test.test(modulePath)) &#123;</span><br><span class="line">                // console.log(use[len]);</span><br><span class="line">                function normalLoader () &#123;</span><br><span class="line">                    // console.log(use[len--]);</span><br><span class="line">                    let loader = require(use[len--])</span><br><span class="line">                    content = loader(content)</span><br><span class="line">                    // 递归调用loader 实现转化</span><br><span class="line">                    if (len &gt;= 0) &#123;</span><br><span class="line">                        normalLoader()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                normalLoader()</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        return content</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行<code>npx may-pack</code></p><h2 id="增加plugins"><a href="#增加plugins" class="headerlink" title="增加plugins"></a>增加plugins</h2><p><code>yarn add tapable</code></p><p><code>may-pack</code>中<code>Compiler.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">constructor(config) &#123;</span><br><span class="line">        // entry  output</span><br><span class="line">        this.config = config</span><br><span class="line">        // 需要保存入口文件的路径</span><br><span class="line">        this.entryId = &#x27;&#x27;;   // &#x27;./src/index.js&#x27;</span><br><span class="line">        // 需要保存所有的模块依赖</span><br><span class="line">        this.modules = &#123;&#125;;</span><br><span class="line">        this.entry = config.entry  // 入口文件</span><br><span class="line">        // 工作目录</span><br><span class="line">        this.root = process.cwd(); // 当前运行npx的路径</span><br><span class="line"></span><br><span class="line">        this.hooks = &#123;</span><br><span class="line">            entryOption: new SyncHook(),  // 入口选项</span><br><span class="line">            compile: new SyncHook(),      // 编译</span><br><span class="line">            afterCompile: new SyncHook(),  // 编译完成</span><br><span class="line">            afterPlugins: new SyncHook(),   // 编译完插件</span><br><span class="line">            run: new SyncHook(),         // 运行</span><br><span class="line">            emit: new SyncHook(),        // 发射</span><br><span class="line">            done: new SyncHook()         // 完成</span><br><span class="line">        &#125;</span><br><span class="line">        // 如果传递了plugins参数</span><br><span class="line">        let plugins = this.config.plugins</span><br><span class="line">        if (Array.isArray(plugins)) &#123;</span><br><span class="line">            plugins.forEach(plugin =&gt; &#123;</span><br><span class="line">                plugin.apply(this); // 这里只是appLy方法不是改变this指向</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        this.hooks.afterPlugins.call()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>webpack.config.js</code>中写插件方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">class P &#123;</span><br><span class="line">    apply(compiler) &#123;   // 这里只是appLy方法不是改变this指向</span><br><span class="line">        // 绑定</span><br><span class="line">        compiler.hooks.emit.tap(&#x27;emit&#x27;, function () &#123;</span><br><span class="line">            console.log(&#x27;emit&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class P1 &#123;</span><br><span class="line">    apply(compiler) &#123;   // 这里只是appLy方法不是改变this指向</span><br><span class="line">        // 绑定</span><br><span class="line">        compiler.hooks.afterPlugins.tap(&#x27;emit&#x27;, function () &#123;</span><br><span class="line">            console.log(&#x27;afterPlugins&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: &#x27;development&#x27;,</span><br><span class="line">    entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &#x27;bundle.js&#x27;,</span><br><span class="line">        path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.less$/,</span><br><span class="line">                use: [</span><br><span class="line">                    path.resolve(__dirname, &#x27;loader&#x27;, &#x27;style-loader&#x27;),</span><br><span class="line">                    path.resolve(__dirname, &#x27;loader&#x27;, &#x27;less-loader&#x27;)</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new P(),</span><br><span class="line">        new P1()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后在各个地方调用</p><p><code>may-pack</code>中<code>may-pack.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.....</span><br><span class="line">// 调用</span><br><span class="line">compiler.hooks.entryOption.call()</span><br><span class="line">// 标识运行编译</span><br><span class="line">compiler.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>may-pack</code>中<code>Compiler.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">run() &#123;</span><br><span class="line">        this.hooks.run.call()</span><br><span class="line"></span><br><span class="line">        this.hooks.compile.call()</span><br><span class="line">        // 执行 创建模块的依赖关系</span><br><span class="line">        this.buildModule(path.resolve(this.root, this.entry), true)  // path.resolve(this.root, this.entry) 得到入口文件的绝对路径</span><br><span class="line">        // console.log(this.modules, this.entryId);</span><br><span class="line">        this.hooks.afterCompile.call()</span><br><span class="line">        // 发射打包后的文件</span><br><span class="line">        this.emitFile()</span><br><span class="line">        this.hooks.emit.call()</span><br><span class="line">        this.hooks.done.call()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行<code>npx may-pack</code></p><h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><p><a href="https://juejin.im/post/59e6a5de518825469c7461da">手写loader</a></p><p><code>webapck.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: &#x27;development&#x27;,</span><br><span class="line">    entry: &#x27;./src/index&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &#x27;build.js&#x27;,</span><br><span class="line">        path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.js/,</span><br><span class="line">                use: &#x27;loader1&#x27; // 如何找到这个loader1</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建<code>loader</code>文件<code>loader1.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">console.log(22);</span><br><span class="line"></span><br><span class="line">function loader(source) &#123;  // loader的参数就是源代码</span><br><span class="line">    return source</span><br><span class="line">&#125;</span><br><span class="line">module.exports = loader</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: &#x27;development&#x27;,</span><br><span class="line">    entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &#x27;build.js&#x27;,</span><br><span class="line">        path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    resolveLoader: &#123;</span><br><span class="line">      // 别名</span><br><span class="line">      // alias: &#123;</span><br><span class="line">      //     loader1: path.resolve(__dirname, &#x27;loader&#x27;, &#x27;loader1&#x27;)</span><br><span class="line">      // &#125;</span><br><span class="line">        modules: [&#x27;node_modules&#x27;, path.resolve(__dirname, &#x27;loader&#x27;)]  // 先找node_modules, 再去loader中去找</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.js$/,</span><br><span class="line">                // use: [path.resolve(__dirname, &#x27;loader&#x27;, &#x27;loader1&#x27;)]</span><br><span class="line">                use: &#x27;loader1&#x27; // 如何找到这个loader1</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            // &#123;</span><br><span class="line">            //     test: /\.less$/,</span><br><span class="line">            //     use: [</span><br><span class="line">            //         path.resolve(__dirname, &#x27;loader&#x27;, &#x27;style-loader&#x27;),</span><br><span class="line">            //         path.resolve(__dirname, &#x27;loader&#x27;, &#x27;less-loader&#x27;)</span><br><span class="line">            //     ]</span><br><span class="line">            // &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如何找到这个<code>loader1</code></p><ol><li>通过配别名<code>alias</code></li><li>通过<code>modules</code></li></ol><p><code>npx webpack</code></p><h2 id="配置多个loader"><a href="#配置多个loader" class="headerlink" title="配置多个loader"></a>配置多个loader</h2><ol><li>数组方式</li></ol><p>先分别在<code>loader</code>文件下创建，<code>loader2.js</code>和<code>loader3.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function loader(source) &#123;  // loader的参数就是源代码</span><br><span class="line">    console.log(&#x27;loader2&#x27;);  // loader3.js 类似</span><br><span class="line">    return source</span><br><span class="line">&#125;</span><br><span class="line">module.exports = loader</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">    &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        use: [&#x27;loader3&#x27;, &#x27;loader2&#x27;, &#x27;loader1&#x27;]</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行<code>npx webpack</code>,分别打出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">loader1</span><br><span class="line">loader2</span><br><span class="line">loader3</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>对象方式</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">    &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        use: [&#x27;loader3&#x27;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        use: [&#x27;loader2&#x27;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        test: /\.js$/,</span><br><span class="line">        use: [&#x27;loader1&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行<code>npx webpack</code>,分别打出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">loader1</span><br><span class="line">loader2</span><br><span class="line">loader3</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>loader</code>的顺序: 从右到左, 从下到上</p></blockquote><p>也可以通过配置不同的参数改变<code>loader</code>的执行顺序，<code>pre</code> 前面的， <code>post</code>在后面的， <code>normal</code>正常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: /\.js$/,</span><br><span class="line">    use: [&#x27;loader1&#x27;],</span><br><span class="line">    enforce: &quot;pre&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test: /\.js$/,</span><br><span class="line">    use: [&#x27;loader2&#x27;]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test: /\.js$/,</span><br><span class="line">    use: [&#x27;loader3&#x27;],</span><br><span class="line">    enforce: &quot;post&quot;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>loader</code> 带参数执行的顺序: <code>pre  -&gt; normal -&gt; inline -&gt; post</code></p><p><code>inline</code>为行内<code>loader</code></p><p>在<code>loader</code>文件中新建<code>inlin-loader</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function loader(source) &#123;  // loader的参数就是源代码</span><br><span class="line">    console.log(&#x27;inline&#x27;);</span><br><span class="line">    return source</span><br><span class="line">&#125;</span><br><span class="line">module.exports = loader</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>src/a.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#x27;may&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>src/index</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#x27;hello&#x27;)</span><br><span class="line">let srt = require(&#x27;-!inline-loader!./a&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><code>-!</code>禁用<code>pre-loader</code>和 <code>normal-loader</code>来处理了</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">loader1</span><br><span class="line">loader2</span><br><span class="line">loader3</span><br><span class="line">inline</span><br><span class="line">loader3</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><code>!</code>禁用<code>normal-loader</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loader1</span><br><span class="line">loader2</span><br><span class="line">loader3</span><br><span class="line">loader1</span><br><span class="line">inline</span><br><span class="line">loader3</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><code>!!</code> 禁用<code>pre-loader</code>、<code>normal-loader</code>、<code>post-loader</code>,只能行内处理</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">loader1</span><br><span class="line">loader2</span><br><span class="line">loader3</span><br><span class="line">inline</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>loader 默认由两部分组成<code>pitch</code>和<code>normal</code></p><p><code>user: [loader3, loader2, loader1]</code></p><p>无返回值: 先执行pitch方法,从左到右，再获取资源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    pitch loader - 无返回值</span><br><span class="line">    </span><br><span class="line">pitch   loader3 → loader2 → loader1  </span><br><span class="line">                                    ↘</span><br><span class="line">                                      资源</span><br><span class="line">                                    ↙</span><br><span class="line">normal   loader3 ← loader2 ← loader1 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有返回值: 直接跳过后续所有的<code>loader</code>包括自己的,跳到之前的<code>loader</code>, 可用于阻断</p><p><a href="https://webpack.docschina.org/api/loaders/">loader</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">user: [loader3, loader2, loader1]</span><br><span class="line"></span><br><span class="line">    pitch loader - 有返回值</span><br><span class="line">    </span><br><span class="line">pitch   loader3 → loader2  loader1  </span><br><span class="line">                     ↙               </span><br><span class="line">               有返回值               资源</span><br><span class="line">               ↙                      </span><br><span class="line">normal  loader3  loader2  loader1 </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>loadeer2.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function loader(source) &#123;  // loader的参数就是源代码</span><br><span class="line">    console.log(&#x27;loader2&#x27;);</span><br><span class="line">    return source</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loader.pitch = function () &#123;</span><br><span class="line">    return &#x27;111&#x27;</span><br><span class="line">&#125;</span><br><span class="line">module.exports = loader</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loader3</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="babel-loader实现"><a href="#babel-loader实现" class="headerlink" title="babel-loader实现"></a><code>babel-loader</code>实现</h2><p><code>yarn add @babel/core @babel/preset-env</code></p><p><code>webpack.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: &#x27;\.js$/&#x27;,</span><br><span class="line">    use: &#123;</span><br><span class="line">        loader: &#x27;babel-loader2&#x27;,</span><br><span class="line">        options: &#123;</span><br><span class="line">            presets: [</span><br><span class="line">                &#x27;@babel/preset-env&#x27;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>loader</code>文件创建<code>babel-loader2.js</code>(如果你已经装过<code>babel-loader</code>)</p><p>拿到<code>babel</code>的参数</p><p><code>yarn add loader-utils</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 需要在webpack.config.js拿到babel的预设, 通过预设转换模块, 先引入babel</span><br><span class="line">let babel = require(&#x27;@babel/core&#x27;)</span><br><span class="line"></span><br><span class="line">// 拿到babel的参数 需要工具 loaderUtils</span><br><span class="line">let loaderUtils =require(&#x27;loader-utils&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function loader(source) &#123;  // loader的参数就是源代码  这里的this就是loader的上下文</span><br><span class="line">    let options = loaderUtils.getOptions(this)</span><br><span class="line">    console.log(this.resourcePath, 444);   // [./src/index.js]</span><br><span class="line">    let callback = this.async(); // babel的转换是异步的,同步的返回是不行的， 不能用return  同步就是直接掉用 异步会在async中</span><br><span class="line">    babel.transform(source, &#123;</span><br><span class="line">        ...options,</span><br><span class="line">        sourceMap: true,         // 是否设置sourceMap 还需要再webpack.config.js 中配置  devtool: &#x27;source-map&#x27;</span><br><span class="line">        filename: this.resourcePath.split(&#x27;/&#x27;).pop()   //  给生成的`source-map`指定名字</span><br><span class="line">    &#125;, function (err, result) &#123;</span><br><span class="line">        callback(err, result.code, result.map)   // 异步 参数分别是「错误 转化后的代码 和 sourceMap」</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(options);</span><br><span class="line">    // return source  失效</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = loader</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class May &#123;</span><br><span class="line">    constructor () &#123;</span><br><span class="line">        this.name = &#x27;may&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    getName () &#123;</span><br><span class="line">        return this.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">let may = new May()</span><br><span class="line"></span><br><span class="line">console.log(may.getName());</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>npx webpack</code></p><h2 id="banner-loader实现-自创"><a href="#banner-loader实现-自创" class="headerlink" title="banner-loader实现(自创)"></a><code>banner-loader</code>实现(自创)</h2><p>给所有匹配的<code>js</code>加一个注释</p><p><code>webpack.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;    // 给所有匹配的`js`加一个注释</span><br><span class="line">    test: /\.js$/,</span><br><span class="line">    use: &#123;</span><br><span class="line">        loader: &#x27;banner-loader&#x27;,</span><br><span class="line">        options: &#123;</span><br><span class="line">           text: &#x27;may&#x27;,</span><br><span class="line">           filename: path.resolve(__dirname, &#x27;banner.js&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>banner.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">二次星球中毒</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>loader</code>文件创建<code>banner-loader.js</code></p><p><code>yarn add schema-utils</code> 校验自己写的<code>loader</code>格式是否正确</p><p><a href="https://github.com/webpack-contrib/schema-utils">schema-utils</a></p><p><code>banner-loader.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// 拿到loader的配置</span><br><span class="line">let loaderUtils = require(&#x27;loader-utils&#x27;)</span><br><span class="line">// 校验loader</span><br><span class="line">let validateOptions = require(&#x27;schema-utils&#x27;)</span><br><span class="line">// 读取文件</span><br><span class="line">let fs = require(&#x27;fs&#x27;)  // 异步</span><br><span class="line"></span><br><span class="line">function loader(source) &#123;  // loader的参数就是源代码</span><br><span class="line">    let options = loaderUtils.getOptions(this)</span><br><span class="line">    let callback = this.async()  // 读取文件是异步</span><br><span class="line">    let schema = &#123;</span><br><span class="line">        type: &#x27;object&#x27;,</span><br><span class="line">        properties: &#123;</span><br><span class="line">            text: &#123;</span><br><span class="line">                type: &#x27;string&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            filename: &#123;</span><br><span class="line">                type: &#x27;string&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    validateOptions(schema, options, &#x27;banner-loader&#x27;)  // 自己的校验格式， 自己的写的配置， 对应的loader名字</span><br><span class="line">    if (options.filename) &#123;</span><br><span class="line">        this.cacheable(false)  // 不要缓存  如果有大量计算 推荐缓存</span><br><span class="line">        // this.cacheable &amp;&amp; this.cacheable()</span><br><span class="line">        this.addDependency(options.filename) // 自动增加依赖</span><br><span class="line">        fs.readFile(options.filename, &#x27;utf8&#x27;, function (err, data) &#123;</span><br><span class="line">            callback(err, `/**$&#123;data&#125;**/$&#123;source&#125;`)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        callback(null, `/**$&#123;options.text&#125;**/$&#123;source&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line">    return source</span><br><span class="line">&#125;</span><br><span class="line">module.exports = loader</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>优化:</p><ol><li>修改<code>banner.js</code>的内容后, <code>webpack</code>进行监控，打包<code>webapck.config.js</code>配置<code>watch: true</code></li><li><code>loader</code>缓存</li></ol><h2 id="实现file-loader和url-loader"><a href="#实现file-loader和url-loader" class="headerlink" title="实现file-loader和url-loader"></a>实现<code>file-loader</code>和<code>url-loader</code></h2><p><code>yarn add mime</code></p><p>其主要用途是设置某种扩展名的文件的响应程序类型</p><p><a href="https://github.com/broofa/node-mime#readme">mime</a></p><p>创建<code>file-loader.js1</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 拿到babel的参数 需要工具 loaderUtils</span><br><span class="line">let loaderUtils = require(&#x27;loader-utils&#x27;)</span><br><span class="line"></span><br><span class="line">function loader(source) &#123;  // loader的参数就是源代码</span><br><span class="line">    // file-loader需要返回路径</span><br><span class="line">    let filename = loaderUtils.interpolateName(this, &#x27;[hash].[ext]&#x27;, &#123;content: source &#125;)</span><br><span class="line">    this.emitFile(filename, source) // 发射文件</span><br><span class="line">    console.log(&#x27;loader1&#x27;);</span><br><span class="line">    return `module.exports=&quot;$&#123;filename&#125;&quot;`</span><br><span class="line">&#125;</span><br><span class="line">loader.raw = true // 二进制</span><br><span class="line">module.exports = loader</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建<code>url-loader1.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 拿到babel的参数 需要工具 loaderUtils</span><br><span class="line">let loaderUtils = require(&#x27;loader-utils&#x27;)</span><br><span class="line">let mime = require(&#x27;mime&#x27;)  // 途是设置某种扩展名的文件的响应程序类型</span><br><span class="line"></span><br><span class="line">function loader(source) &#123;  // loader的参数就是源代码</span><br><span class="line">    let &#123;limit&#125; = loaderUtils.getOptions(this)</span><br><span class="line">    console.log(this.resourcePath);</span><br><span class="line">    if (limit &amp;&amp; limit &gt; source.length) &#123;</span><br><span class="line">        return `module.exports=&quot;data:$&#123;mime.getType(this.resourcePath)&#125;;base64,$&#123;source.toString(&#x27;base64&#x27;)&#125;&quot;`</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return require(&#x27;./file-loader1&#x27;).call(this, source)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">loader.raw = true // 二进制</span><br><span class="line">module.exports = loader</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>webpack.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: /\.png$/,</span><br><span class="line">    // 目的是根据图片生成md5 发射到dist目录下，file-loader 返回当前图片路径</span><br><span class="line">    // use: &#x27;file-loader&#x27;</span><br><span class="line">    // 处理路径</span><br><span class="line">    use: &#123;</span><br><span class="line">        loader: &#x27;url-loader1&#x27;,</span><br><span class="line">        options: &#123;</span><br><span class="line">            limit: 200 * 1024</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>index.js</code>引入图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import p from &#x27;./photo.png&#x27;</span><br><span class="line"></span><br><span class="line">let img = document.createElement(&#x27;img&#x27;)</span><br><span class="line">img.src = p</span><br><span class="line">document.body.appendChild(img);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="less-loader和css-loader"><a href="#less-loader和css-loader" class="headerlink" title="less-loader和css-loader"></a><code>less-loader</code>和<code>css-loader</code></h2><p>先安装<code>less</code></p><p>分别创建<code>style-loader2</code> <code>css-loader2</code> <code>less-loader2</code></p><p><code>style-loader1</code> 与 <code>less-loader1</code> 同之前的</p><h2 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a><code>css-loader</code></h2><p>主要用来处理<code>css</code>中的图片链接，需要把<code>url</code>转换成<code>require</code></p><p><code>webpack.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    test: /\.png$/,</span><br><span class="line">    // 目的是根据图片生成md5 发射到dist目录下，file-loader 返回当前图片路径</span><br><span class="line">    // use: &#x27;file-loader&#x27;</span><br><span class="line">    // 处理路径</span><br><span class="line">    use: &#123;</span><br><span class="line">        loader: &#x27;url-loader1&#x27;,</span><br><span class="line">        options: &#123;</span><br><span class="line">            limit: 200 * 1024</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test: /\.less$/,</span><br><span class="line">    use: [&#x27;style-loader2&#x27;, &#x27;css-loader2&#x27;, &#x27;less-loader2&#x27;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>创建<code>index.less</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@base: #f938ab;</span><br><span class="line">body &#123;</span><br><span class="line">  background: @base;</span><br><span class="line">  background: url(&quot;./photo.png&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>less-loader2.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 将less转为css</span><br><span class="line">let less = require(&#x27;less&#x27;)</span><br><span class="line"></span><br><span class="line">function loader(source) &#123;</span><br><span class="line">    let css = &#x27;&#x27;</span><br><span class="line">    // console.log(source, 2222);</span><br><span class="line">    less.render(source, function (err, output) &#123;</span><br><span class="line">        // console.log(output);</span><br><span class="line">        css = output.css</span><br><span class="line">    &#125;)</span><br><span class="line">    // css = css.replace(/\n/g, &#x27;\\n&#x27;);</span><br><span class="line">    return css</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = loader</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>css-loader2.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// css-loader 用来解析@import这种语法,包括css中引入的图片</span><br><span class="line">function loader(source) &#123;</span><br><span class="line">    let reg = /url\((.+?)\)/g   // 匹配括号</span><br><span class="line"></span><br><span class="line">    let pos = 0;</span><br><span class="line">    let current;</span><br><span class="line"></span><br><span class="line">    let arr = [&#x27;let list = []&#x27;]</span><br><span class="line"></span><br><span class="line">    while (current = reg.exec(source)) &#123;</span><br><span class="line">        let [matchUrl, g] = current   // matchUrl -&gt; &#x27;url(&quot;./photo.png&quot;)&#x27;, g  -&gt; &#x27;&quot;./photo.png&quot;&#x27;</span><br><span class="line">        // console.log(matchUrl, g, 88);</span><br><span class="line">        let lastIndex = reg.lastIndex - matchUrl.length    // 拿到css从开通到地址链接之前的index</span><br><span class="line">        arr.push(`list.push($&#123;JSON.stringify(source.slice(pos, lastIndex))&#125;)`)  // 拼入开始和地址之前的代码</span><br><span class="line">        pos = reg.lastIndex</span><br><span class="line">        arr.push(`list.push(&#x27;url(&#x27;+ require($&#123;g&#125;) +&#x27;)&#x27;)`)    // 拼入图片地址</span><br><span class="line">    &#125;</span><br><span class="line">    arr.push(`list.push($&#123;JSON.stringify(source.slice(pos))&#125;)`)  // 拼入地址到结尾的代码</span><br><span class="line">    arr.push(`module.exports = list.join(&#x27;&#x27;)`)</span><br><span class="line">    console.log(arr.join(&#x27;\r\n&#x27;));</span><br><span class="line">    // let list = []</span><br><span class="line">    // list.push(&quot;body &#123;\\n  background: #f938ab;\\n  background: &quot;)</span><br><span class="line">    // list.push(&#x27;url(&#x27;+ require(&quot;./photo.png&quot;) +&#x27;)&#x27;)</span><br><span class="line">    // list.push(&quot;;\\n&#125;\\n&quot;)</span><br><span class="line">    // module.exports = list.join(&#x27;&#x27;)</span><br><span class="line"></span><br><span class="line">    return arr.join(&#x27;\r\n&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">module.exports = loader</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>style-loader2.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">let loaderUtils = require(&#x27;loader-utils&#x27;)</span><br><span class="line"></span><br><span class="line">// 将css插入到html头部</span><br><span class="line">function loader(source) &#123;</span><br><span class="line">    let str = `</span><br><span class="line">    let style = document.createElement(&#x27;style&#x27;)</span><br><span class="line">    style.innerHTML = $&#123;JSON.stringify(source)&#125;</span><br><span class="line">    document.head.appendChild(style)</span><br><span class="line">   `</span><br><span class="line">    return str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// style-loader写了pitch,有返回后面的跳过，自己的写不会走</span><br><span class="line">loader.pitch = function (remainingRequest) &#123;  // 剩余的请求</span><br><span class="line">    console.log(loaderUtils.stringifyRequest(this, &#x27;!!&#x27; + remainingRequest, 99999999))</span><br><span class="line">    // 让style-loader 处理 less-loader 和css-loader拼接的结果</span><br><span class="line">    // 得到 /Users/liuhuimin/work/webpack/loader/css-loader2.js!/Users/liuhuimin/work/webpack/loader/less-loader2.js!/Users/liuhuimin/work/webpack/src/index.less</span><br><span class="line">    // 剩余的请求 less-loader!css-loader!./index.less</span><br><span class="line">    // console.log(remainingRequest, 1223);</span><br><span class="line">    // require返回的就是css-loader处理好的结果require(&#x27;!!css-loader!less-loader!./index.less&#x27;)</span><br><span class="line">    let str = `</span><br><span class="line">    let style = document.createElement(&#x27;style&#x27;)</span><br><span class="line">    style.innerHTML = require($&#123;loaderUtils.stringifyRequest(this, &#x27;!!&#x27; + remainingRequest)&#125;)</span><br><span class="line">    document.head.appendChild(style)</span><br><span class="line">   `</span><br><span class="line">    // stringifyRequest 绝对路径转相对路径</span><br><span class="line">    return str</span><br><span class="line">&#125;</span><br><span class="line">module.exports = loader</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">user: [&#x27;style-loader2&#x27;, &#x27;css-loader2&#x27;, &#x27;less-loader2&#x27;]</span><br><span class="line"></span><br><span class="line">    pitch loader - 有返回值</span><br><span class="line">    </span><br><span class="line">pitch   style-loader2 → css-loader2  less-loader2  </span><br><span class="line">                     ↙               </span><br><span class="line">               有返回值               资源</span><br><span class="line">               ↙                      </span><br><span class="line">normal  style-loader2  css-loader2  less-loader2</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>style-loader2</code>中 引用了<code>less-loader</code> <code>css-loader</code> 和<code>less</code>文件</p><h2 id="webpack-中的插件"><a href="#webpack-中的插件" class="headerlink" title="webpack 中的插件"></a>webpack 中的插件</h2><p><code>yarn add webpack webpack-cil -D</code></p><p><code>webpack.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line">let DonePlugin = require(&#x27;./plugins/DonePlugins&#x27;)</span><br><span class="line">let AsyncPlugins = require(&#x27;./plugins/AsyncPlugins&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: &#x27;development&#x27;,</span><br><span class="line">    entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &#x27;build.js&#x27;,</span><br><span class="line">        path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new DonePlugin(),    // 同步</span><br><span class="line">        new AsyncPlugins()   // 异步</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>node_modules/webpack/lib</code>中查看<code>Compiler.js</code></p><ol><li>同步<code>plugins/DonePlugins</code></li></ol><p>打包完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class DonePlugins &#123;</span><br><span class="line">    apply (compiler) &#123;</span><br><span class="line">        console.log(1);</span><br><span class="line">        compiler.hooks.done.tap(&#x27;DonePlugin&#x27;, (stats) =&gt; &#123;</span><br><span class="line">            console.log(&#x27;编译完成&#x27;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = DonePlugins</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>异步<code>plugins/AsyncPlugins</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class AsyncPlugins &#123;</span><br><span class="line">    apply (compiler) &#123;</span><br><span class="line">        console.log(2);</span><br><span class="line">        compiler.hooks.emit.tapAsync(&#x27;AsyncPlugin&#x27;, (complete, callback) =&gt; &#123;</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                console.log(&#x27;文件发射出来&#x27;);</span><br><span class="line">                callback()</span><br><span class="line">            &#125;, 1000)</span><br><span class="line">        &#125;)</span><br><span class="line">        compiler.hooks.emit.tapPromise(&#x27;AsyncPlugin&#x27;, (complete, callback) =&gt; &#123;</span><br><span class="line">            return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">                setTimeout(() =&gt; &#123;</span><br><span class="line">                    console.log(&#x27;文件发射出来 222&#x27;);</span><br><span class="line">                    resolve()</span><br><span class="line">                &#125;, 1000)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = AsyncPlugins</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文件列表插件"><a href="#文件列表插件" class="headerlink" title="文件列表插件"></a>文件列表插件</h2><p>希望生成一个文件描述打包出来的文件</p><p>在<code>plugins</code>中新建<code>FileListPlugin</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class FileListPlugin &#123;</span><br><span class="line">    constructor (&#123;filename&#125;) &#123;</span><br><span class="line">        this.filename = filename</span><br><span class="line">    &#125;</span><br><span class="line">    apply (compiler) &#123;</span><br><span class="line">        // 文件已经准备好了 要进行发射</span><br><span class="line">        // emit</span><br><span class="line">        compiler.hooks.emit.tap(&#x27;FileListPlugin&#x27;, (compilation) =&gt; &#123;</span><br><span class="line">            let assets = compilation.assets;</span><br><span class="line">            console.log(assets, 55);</span><br><span class="line">            let content = `## 文件名  资源大小\r\n`</span><br><span class="line">            // [ [bundls.js, &#123;&#125;], [index.html, &#123;&#125;]]</span><br><span class="line">            Object.entries(assets).forEach(([filename, stateObj]) =&gt; &#123;</span><br><span class="line">                content += `- $&#123;filename&#125;    $&#123;stateObj.size()&#125;\r\n`</span><br><span class="line">            &#125;)</span><br><span class="line">            // 资源对象</span><br><span class="line">            assets[this.filename] = &#123;</span><br><span class="line">                source () &#123;</span><br><span class="line">                    return content;</span><br><span class="line">                &#125;,</span><br><span class="line">                size () &#123;</span><br><span class="line">                    return content.length</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = FileListPlugin</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line">let DonePlugin = require(&#x27;./plugins/DonePlugins&#x27;)</span><br><span class="line">let AsyncPlugins = require(&#x27;./plugins/AsyncPlugins&#x27;)</span><br><span class="line">let HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)</span><br><span class="line">let FileListPlugin = require(&#x27;./plugins/FileListPlugin&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: &#x27;development&#x27;,</span><br><span class="line">    entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &#x27;build.js&#x27;,</span><br><span class="line">        path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        new DonePlugin(),</span><br><span class="line">        new AsyncPlugins(),</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &#x27;./src/index.html&#x27;,</span><br><span class="line">            filename: &#x27;index.html&#x27;</span><br><span class="line">        &#125;),</span><br><span class="line">        new FileListPlugin(&#123;</span><br><span class="line">            filename: &#x27;list.md&#x27;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>生成<code>list.md</code></p><h2 id="内联的webpack插件"><a href="#内联的webpack插件" class="headerlink" title="内联的webpack插件"></a>内联的<code>webpack</code>插件</h2><p>新建<code>index.css</code>引入<code>index.js</code></p><p><code>yarn add css-loader mini-css-extract-plugin -D</code></p><p>希望打包后<code>css、js</code>内联在<code>index.html</code>文件中</p><p>创建<code>plugins</code>中<code>InlineSourcePlugins.js</code></p><p><code>yarn add --dev html-webpack-plugin@next</code></p><p><a href="https://github.com/jantimon/html-webpack-plugin">HTML Webpack Plugin</a></p><p><code>webpack.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line">let DonePlugin = require(&#x27;./plugins/DonePlugins&#x27;)</span><br><span class="line">let AsyncPlugins = require(&#x27;./plugins/AsyncPlugins&#x27;)</span><br><span class="line">let HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)</span><br><span class="line">let FileListPlugin = require(&#x27;./plugins/FileListPlugin&#x27;)</span><br><span class="line"></span><br><span class="line">let InlineSourcePlugins = require(&#x27;./plugins/InlineSourcePlugins&#x27;)</span><br><span class="line"></span><br><span class="line">let MiniCssExtractPlugin = require(&#x27;mini-css-extract-plugin&#x27;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    mode: &#x27;production&#x27;,</span><br><span class="line">    entry: &#x27;./src/index.js&#x27;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: &#x27;bundle.js&#x27;,</span><br><span class="line">        path: path.resolve(__dirname, &#x27;dist&#x27;)</span><br><span class="line">    &#125;,</span><br><span class="line">    module: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                use: [MiniCssExtractPlugin.loader, &#x27;css-loader&#x27;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        // new DonePlugin(),</span><br><span class="line">        // new AsyncPlugins(),</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &#x27;./src/index.html&#x27;,</span><br><span class="line">            filename: &#x27;index.html&#x27;</span><br><span class="line">        &#125;),</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: &#x27;index.css&#x27;</span><br><span class="line">        &#125;),</span><br><span class="line">        new InlineSourcePlugins(&#123;</span><br><span class="line">            match: /\.(js|css)/</span><br><span class="line">        &#125;),</span><br><span class="line">        // new FileListPlugin(&#123;</span><br><span class="line">        //     filename: &#x27;list.md&#x27;</span><br><span class="line">        // &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>InlineSourcePlugins.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">const HtmlWebpackPlugin = require(&#x27;html-webpack-plugin&#x27;)</span><br><span class="line"></span><br><span class="line">// 把外链的标签编程内联的标签</span><br><span class="line">class InlineSourcePlugins &#123;</span><br><span class="line">    constructor(&#123;match&#125;) &#123;</span><br><span class="line">        this.reg = match  // 正则</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 处理某一个标签</span><br><span class="line">    processTag(tag, compilation) &#123;</span><br><span class="line">        let newTag = &#123;&#125;</span><br><span class="line">        let url = &#x27;&#x27;</span><br><span class="line">        if (tag.tagName === &#x27;link&#x27; &amp;&amp; this.reg.test(tag.attributes.href)) &#123;</span><br><span class="line">            newTag = &#123;</span><br><span class="line">                tagName: &#x27;style&#x27;,</span><br><span class="line">                attributes: &#123;type: &#x27;text/css&#x27;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            url = tag.attributes.href</span><br><span class="line">        &#125; else if (tag.tagName === &#x27;script&#x27; &amp;&amp; this.reg.test(tag.attributes.src)) &#123;</span><br><span class="line">            newTag = &#123;</span><br><span class="line">                tagName: &#x27;script&#x27;,</span><br><span class="line">                attributes: &#123;type: &#x27;application/javascript&#x27;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            url = tag.attributes.src</span><br><span class="line">        &#125;</span><br><span class="line">        if (url) &#123;</span><br><span class="line">            newTag.innerHTML = compilation.assets[url].source(); // 文件内容放到innerHTML属性中</span><br><span class="line">            delete compilation.assets[url]   // 删除原有的资源</span><br><span class="line">            return newTag</span><br><span class="line">            // console.log(compilation.assets[url].source());</span><br><span class="line">        &#125;</span><br><span class="line">        return tag</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 处理引入标签的数据</span><br><span class="line">    processTags(data, compilation) &#123;</span><br><span class="line">        let headTags = []</span><br><span class="line">        let bodyTags = []</span><br><span class="line">        data.headTags.forEach(headTag =&gt; &#123;</span><br><span class="line">            headTags.push(this.processTag(headTag, compilation))</span><br><span class="line">        &#125;)</span><br><span class="line">        data.bodyTags.forEach(bodyTag =&gt; &#123;</span><br><span class="line">            bodyTags.push(this.processTag(bodyTag, compilation))</span><br><span class="line">        &#125;)</span><br><span class="line">        console.log(&#123;...data, headTags, bodyTags&#125;)</span><br><span class="line">        return &#123;...data, headTags, bodyTags&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    apply(compiler) &#123;</span><br><span class="line">        // 通过webpackPlugin来实现  npm搜索  html-webpack-plugin</span><br><span class="line">        compiler.hooks.compilation.tap(&#x27;InlineSourcePlugins&#x27;, (compilation) =&gt; &#123;</span><br><span class="line">            HtmlWebpackPlugin.getHooks(compilation).alterAssetTagGroups.tapAsync(</span><br><span class="line">                &#x27;alertPlugin&#x27;,</span><br><span class="line">                (data, callback) =&gt; &#123;</span><br><span class="line">                    // console.log(&#x27;======&#x27;);</span><br><span class="line">                    // console.log(data) // 插入html标签的数据</span><br><span class="line">                    // console.log(&#x27;======&#x27;);</span><br><span class="line">                    data = this.processTags(data, compilation)   // compilation.assets 资源的链接</span><br><span class="line">                    callback(null, data)</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = InlineSourcePlugins</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="打包后自动发布"><a href="#打包后自动发布" class="headerlink" title="打包后自动发布"></a>打包后自动发布</h2><p>打包好的文件自动上传致七牛</p><p>需要这几个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bucket: &#x27;&#x27;  // 七牛的存储空间</span><br><span class="line">domain: &#x27;&#x27;,</span><br><span class="line">accessKey: &#x27;&#x27;, // 七牛云的两对密匙</span><br><span class="line">secretKey: &#x27;&#x27; // 七牛云的两对密匙</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注册七牛，并在对象存储里面,新建存储空间列表<code>test</code>,<code>bucket: &#39;test&#39;</code></p><p>内容管理外链接默认域名 <code>domain: &#39;xxxxxxxx&#39;</code></p><p>右上角个人面板里面个人中心,密钥管理分别对应<code>accessKey</code>和<code>secretKey</code></p><p><a href="https://developer.qiniu.com/">进入开发者中心</a> -&gt; SDK&amp;工具 -&gt; 官方SDK -&gt; Node服务端文档 —&gt; 文件上传</p><p><a href="https://developer.qiniu.com/kodo/sdk/1289/nodejs">node文件上传</a></p><p><code>npm install qiniu</code></p><p><a href="https://webpack.docschina.org/api/compiler-hooks">compiler-hooks</a></p><p><code>webpack.config.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">        new HtmlWebpackPlugin(&#123;</span><br><span class="line">            template: &#x27;./src/index.html&#x27;,</span><br><span class="line">            filename: &#x27;index.html&#x27;</span><br><span class="line">        &#125;),</span><br><span class="line">        new MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: &#x27;index.css&#x27;</span><br><span class="line">        &#125;),</span><br><span class="line">        new UploadPlugin(&#123;</span><br><span class="line">            bucket: &#x27;test&#x27;,  // 七牛的存储空间</span><br><span class="line">            domain: &#x27;poyrjyh1b.bkt.clouddn.com&#x27;,</span><br><span class="line">            accessKey: &#x27;xxxxxx&#x27;, // 七牛云的两对密匙</span><br><span class="line">            secretKey: &#x27;yyyyyy&#x27; // 七牛云的两对密匙</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>UploadPlugin.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">let qiniu = require(&#x27;qiniu&#x27;)</span><br><span class="line">let path = require(&#x27;path&#x27;)</span><br><span class="line"></span><br><span class="line">class UploadPlugin &#123;</span><br><span class="line">    constructor (options = &#123;&#125;) &#123;</span><br><span class="line">        // 参考 https://developer.qiniu.com/kodo/sdk/1289/nodejs</span><br><span class="line">        let &#123; bucket = &#x27;&#x27;, domain = &#x27;&#x27;, accessKey = &#x27;&#x27;, secretKey = &#x27;&#x27;&#125; = options</span><br><span class="line">        let mac = new qiniu.auth.digest.Mac(accessKey, secretKey)</span><br><span class="line">        let putPolicy = new qiniu.rs.PutPolicy(&#123;</span><br><span class="line">            scope: bucket</span><br><span class="line">        &#125;);</span><br><span class="line">        this.uploadToken = putPolicy.uploadToken(mac)</span><br><span class="line">        let config = new qiniu.conf.Config();</span><br><span class="line">        this.formUploader = new qiniu.form_up.FormUploader(config)</span><br><span class="line">        this.putExtra = new qiniu.form_up.PutExtra()</span><br><span class="line">    &#125;</span><br><span class="line">    apply (compiler) &#123;</span><br><span class="line">        compiler.hooks.afterEmit.tapPromise(&#x27;UploadPlugin&#x27;, (complication) =&gt; &#123;</span><br><span class="line">            let assets = complication.assets</span><br><span class="line">            let promise = []</span><br><span class="line">            Object.keys(assets).forEach(filename =&gt; &#123;</span><br><span class="line">                promise.push(this.upload(filename))</span><br><span class="line">            &#125;)</span><br><span class="line">            return Promise.all(promise)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upload (filename) &#123;</span><br><span class="line">        return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">            let localFile = path.resolve(__dirname, &#x27;../dist&#x27;, filename)</span><br><span class="line">            this.formUploader.putFile(this.uploadToken, filename, localFile, this.putExtra, function(respErr,</span><br><span class="line">                                                                                 respBody, respInfo) &#123;</span><br><span class="line">                if (respErr) &#123;</span><br><span class="line">                    reject(respErr)</span><br><span class="line">                &#125;</span><br><span class="line">                if (respInfo.statusCode == 200) &#123;</span><br><span class="line">                    resolve(respBody)</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    console.log(respInfo.statusCode)</span><br><span class="line">                    console.log(respBody)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = UploadPlugin</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="后续还有持续更新！"><a href="#后续还有持续更新！" class="headerlink" title="后续还有持续更新！"></a>后续还有持续更新！</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.webpackjs.com/concepts/&quot;&gt;官网文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;webpack-安装&quot;&gt;&lt;a href=&quot;#webpack-安装&quot; class=&quot;headerlink&quot; title=&quot;webpack 安装&quot;&gt;&lt;/a&gt;webpack 安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;yarn init -y&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;yarn add webpack webpack-cli -D&lt;/strong&gt;     [D代表开发时依赖]&lt;/li&gt;
&lt;li&gt;默认可以使用npx webpack命令进行打包&lt;/li&gt;
&lt;li&gt;linux命令： rm -rf [build] 删除某个文件</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="打包工具" scheme="http://example.com/tags/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
    <category term="webpack" scheme="http://example.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>算法和实例</title>
    <link href="http://example.com/2019/06/12/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://example.com/2019/06/12/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2019-06-12T13:46:28.000Z</published>
    <updated>2022-03-28T12:38:36.890Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://javascript.ruanyifeng.com/library/sorting.html">阮一峰老师算法讲解</a></p><h2 id="😐排序算法说明："><a href="#😐排序算法说明：" class="headerlink" title="😐排序算法说明："></a>😐排序算法说明：</h2><p><strong>（1）对于评述算法优劣术语的说明</strong></p><ul><li><strong>稳定</strong>：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；</li><li><strong>不稳定</strong>：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；</li><li><strong>内排序</strong>：所有排序操作都在内存中完成；</li><li><strong>外排序</strong>：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li><li><strong>时间复杂度</strong>: 一个算法执行所耗费的时间。</li><li><strong>空间复杂度</strong>: 运行完一个程序所需内存的大小</li></ul><p><a href="https://imgchr.com/i/V2fd9U"><img src="https://s2.ax1x.com/2019/06/12/V2fd9U.png" alt="算法概述"></a></p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ArrayList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">insert</span> = <span class="keyword">function</span> (<span class="params">item</span>) &#123;         <span class="comment">//向数据结构添加元素</span></span><br><span class="line">        array.<span class="title function_">push</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;           <span class="comment">//返回字符串结果</span></span><br><span class="line">        <span class="keyword">return</span> array.<span class="title function_">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> swap = <span class="keyword">function</span> (<span class="params">array, index1, index2</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> aux = array[index1];                   <span class="comment">//中间值保留被换的位置 j </span></span><br><span class="line">        array[index1] = array[index2];</span><br><span class="line">        array[index2] = aux;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 冒泡排序</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bubbleSort</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> length = array.<span class="property">length</span>;                  <span class="comment">//保存数组长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;          <span class="comment">//外循环从数组第一位迭代到最后一位 控制数组排序轮数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span>; j++) &#123;      <span class="comment">//内循环从第一位迭代至倒数第二位 </span></span><br><span class="line">                <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;          <span class="comment">//内循环实际上进行当前项和下一项比较</span></span><br><span class="line">                    <span class="title function_">swap</span>(array, j, j + <span class="number">1</span>);              <span class="comment">//两项顺序不对则交换他们，位置为 j+1 的值将会被换置到位置 j 处反之如此。</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 冒泡排序 改进</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">modifiedBubbleSort</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> length = array.<span class="property">length</span>;                  <span class="comment">//保存数组长度</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;          <span class="comment">//外循环从数组第一位迭代到最后一位 控制数组排序轮数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j&lt;length-<span class="number">1</span>-i; j++) &#123;      <span class="comment">//内循环 - 外循环 次数 避免内循环不必要比较</span></span><br><span class="line">                <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;          <span class="comment">//内循环实际上进行当前项和下一项比较</span></span><br><span class="line">                    <span class="title function_">swap</span>(array,j,j+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选择排序 </span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">selectionSort</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> length = array.<span class="property">length</span>,      <span class="comment">//数组长度和声明最小值</span></span><br><span class="line">        indexMin;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; length -<span class="number">1</span>;i++)&#123;   <span class="comment">//</span></span><br><span class="line">            indexMin = i;</span><br><span class="line">            <span class="comment">// console.log(&quot;i&quot;+i) 0 1 2 3</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = i;j &lt; length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array[indexMin] &gt; array[j])&#123;</span><br><span class="line">                    indexMin = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( i != indexMin)&#123;</span><br><span class="line">                <span class="title function_">swap</span>(array,i,indexMin);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 选择排序 简便</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">modifiedSelectionSort</span>= <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> length = array.<span class="property">length</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>;i &lt; length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = i;j &gt; <span class="number">0</span> &amp;&amp; array[j] &lt; array[j-<span class="number">1</span>];j--)&#123;</span><br><span class="line">                <span class="title function_">swap</span>(array,j,j-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createNonSortedArray</span>(<span class="params">size</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = size; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        array.<span class="title function_">insert</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = <span class="title function_">createNonSortedArray</span>(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// console.log(array.toString()); </span></span><br><span class="line"><span class="comment">// array.bubbleSort();              //冒泡排序</span></span><br><span class="line"><span class="comment">// array.modifiedBubbleSort();     //冒泡排序 改进</span></span><br><span class="line"><span class="comment">// array.selectionSort();             //选择排序</span></span><br><span class="line">array.<span class="title function_">modifiedSelectionSort</span>();      <span class="comment">//选择排序 改进</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure><h2 id="利用ES6-Set去重"><a href="#利用ES6-Set去重" class="headerlink" title="利用ES6 Set去重"></a>利用ES6 Set去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;            </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]==arr[j])&#123;         <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                    arr.<span class="title function_">splice</span>(j,<span class="number">1</span>);</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //NaN和&#123;&#125;没有去重，两个null直接消失了</span></span><br></pre></td></tr></table></figure><!-- more --><p><code>不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉“&#123;&#125;”空对象，后面的高阶方法会添加去掉重复“&#123;&#125;”的方法。</code></p><h2 id="利用for嵌套for，然后splice去重"><a href="#利用for嵌套for，然后splice去重" class="headerlink" title="利用for嵌套for，然后splice去重"></a>利用for嵌套for，然后splice去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;            </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>; j&lt;arr.<span class="property">length</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i]==arr[j])&#123;         <span class="comment">//第一个等同于第二个，splice方法删除第二个</span></span><br><span class="line">                    arr.<span class="title function_">splice</span>(j,<span class="number">1</span>);</span><br><span class="line">                    j--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //NaN和&#123;&#125;没有去重，两个null直接消失了</span></span><br></pre></td></tr></table></figure><p><code>双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。</code></p><h2 id="利用indexOf去重"><a href="#利用indexOf去重" class="headerlink" title="利用indexOf去重"></a>利用indexOf去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (array .<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            array .<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">   <span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]  //NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><p><code>新建一个空的结果数组，for 循环原数组，判断结果数组是否存在当前元素，如果有相同的值则跳过，不相同则push进数组。</code></p><h2 id="利用sort"><a href="#利用sort" class="headerlink" title="利用sort()"></a>利用sort()</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arr = arr.<span class="title function_">sort</span>()</span><br><span class="line">    <span class="keyword">var</span> arrry= [arr[<span class="number">0</span>]];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] !== arr[i-<span class="number">1</span>]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line">     <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, &#123;…&#125;, &#123;…&#125;, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined]      //NaN、&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><p><code>利用sort()排序方法，然后根据排序后的结果进行遍历及相邻元素比对。</code></p><h2 id="利用对象的属性不能相同的特点进行去重"><a href="#利用对象的属性不能相同的特点进行去重" class="headerlink" title="利用对象的属性不能相同的特点进行去重"></a>利用对象的属性不能相同的特点进行去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arrry= [];</span><br><span class="line">     <span class="keyword">var</span>  obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!obj[arr[i]]) &#123;</span><br><span class="line">            arrry.<span class="title function_">push</span>(arr[i])</span><br><span class="line">            obj[arr[i]] = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            obj[arr[i]]++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arrry;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, 15, false, undefined, null, NaN, 0, &quot;a&quot;, &#123;…&#125;]    //两个true直接去掉了，NaN和&#123;&#125;去重</span></span><br></pre></td></tr></table></figure><h2 id="利用includes"><a href="#利用includes" class="headerlink" title="利用includes"></a>利用includes</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;type error!&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> array =[];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>( !array.<span class="title function_">includes</span>( arr[i]) ) &#123;<span class="comment">//includes 检测数组是否有某个值</span></span><br><span class="line">                    array.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">              &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line">    <span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]     //&#123;&#125;没有去重</span></span><br></pre></td></tr></table></figure><h2 id="利用hasOwnProperty"><a href="#利用hasOwnProperty" class="headerlink" title="利用hasOwnProperty"></a>利用hasOwnProperty</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> obj.<span class="title function_">hasOwnProperty</span>(<span class="keyword">typeof</span> item + item) ? <span class="literal">false</span> : (obj[<span class="keyword">typeof</span> item + item] = <span class="literal">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;]   //所有的都去重了</span></span><br></pre></td></tr></table></figure><p><code>利用hasOwnProperty 判断是否存在对象属性</code></p><h2 id="利用filter"><a href="#利用filter" class="headerlink" title="利用filter"></a>利用filter</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">    <span class="comment">//当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item, <span class="number">0</span>) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br></pre></td></tr></table></figure><h2 id="利用递归去重"><a href="#利用递归去重" class="headerlink" title="利用递归去重"></a>利用递归去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> array= arr;</span><br><span class="line">        <span class="keyword">var</span> len = array.<span class="property">length</span>;</span><br><span class="line"></span><br><span class="line">    array.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;   <span class="comment">//排序后更加方便去重</span></span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">index</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[index] === array[index-<span class="number">1</span>])&#123;</span><br><span class="line">                array.<span class="title function_">splice</span>(index,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">loop</span>(index - <span class="number">1</span>);    <span class="comment">//递归loop，然后数组去重</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">loop</span>(len-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="利用Map数据结构去重"><a href="#利用Map数据结构去重" class="headerlink" title="利用Map数据结构去重"></a>利用Map数据结构去重</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">arrayNonRepeatfy</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> array = <span class="keyword">new</span> <span class="title class_">Array</span>();  <span class="comment">// 数组用于返回结果</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(map .<span class="title function_">has</span>(arr[i])) &#123;  <span class="comment">// 如果有该key值</span></span><br><span class="line">      map .<span class="title function_">set</span>(arr[i], <span class="literal">true</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">      map .<span class="title function_">set</span>(arr[i], <span class="literal">false</span>);   <span class="comment">// 如果没有该key值</span></span><br><span class="line">      array .<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">return</span> array ;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr))</span><br><span class="line"><span class="comment">//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;…&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, undefined]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>创建一个空Map数据结构，遍历需要去重的数组，把数组的每一个元素作为key存到Map中。由于Map中不会出现相同的key值，所以最终得到的就是去重后的结果。</code></p><h2 id="利用reduce-includes"><a href="#利用reduce-includes" class="headerlink" title="利用reduce+includes"></a>利用reduce+includes</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,cur</span>) =&gt;</span> prev.<span class="title function_">includes</span>(cur) ? prev : [...prev,cur],[]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;true&#x27;</span>,<span class="literal">true</span>,<span class="literal">true</span>,<span class="number">15</span>,<span class="number">15</span>,<span class="literal">false</span>,<span class="literal">false</span>, <span class="literal">undefined</span>,<span class="literal">undefined</span>, <span class="literal">null</span>,<span class="literal">null</span>, <span class="title class_">NaN</span>, <span class="title class_">NaN</span>,<span class="string">&#x27;NaN&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;a&#x27;</span>,&#123;&#125;,&#123;&#125;];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(arr));</span><br><span class="line"><span class="comment">// [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;…&#125;, &#123;…&#125;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="…new-Set-arr"><a href="#…new-Set-arr" class="headerlink" title="[…new Set(arr)]"></a>[…new Set(arr)]</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)] </span><br><span class="line"><span class="comment">//代码就是这么少----（其实，严格来说并不算是一种，相对于第一种方法来说只是简化了代码）</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/library/sorting.html&quot;&gt;阮一峰老师算法讲解&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;😐排序算法说明：&quot;&gt;&lt;a href=&quot;#😐排序算法说明：&quot; class=&quot;headerlink&quot; title=&quot;😐排序算法说明：&quot;&gt;&lt;/a&gt;😐排序算法说明：&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;（1）对于评述算法优劣术语的说明&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;稳定&lt;/strong&gt;：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不稳定&lt;/strong&gt;：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;内排序&lt;/strong&gt;：所有排序操作都在内存中完成；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;外排序&lt;/strong&gt;：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间复杂度&lt;/strong&gt;: 一个算法执行所耗费的时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空间复杂度&lt;/strong&gt;: 运行完一个程序所需内存的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/V2fd9U&quot;&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/06/12/V2fd9U.png&quot; alt=&quot;算法概述&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="排序算法" scheme="http://example.com/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://example.com/2019/06/11/Git/"/>
    <id>http://example.com/2019/06/11/Git/</id>
    <published>2019-06-11T15:26:20.000Z</published>
    <updated>2019-07-07T14:35:10.172Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://imgchr.com/i/V2iRzD"><img src="https://s2.ax1x.com/2019/06/11/V2iRzD.png" alt="Git流程图"></a></p><span id="more"></span><p><a href="https://git-scm.com/">官方链接</a></p><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖老师Git教程</a></p><p><a href="https://blog.csdn.net/BaQiShiGuang/article/details/78125295">git远程操作详解</a></p><p><a href="https://www.jianshu.com/p/947eaa90d6cf">GitHub上与GitLab的区别以及GitLab的搭建与使用</a></p><h2 id="🤓版本控制工具应该具备的功能"><a href="#🤓版本控制工具应该具备的功能" class="headerlink" title="🤓版本控制工具应该具备的功能"></a>🤓版本控制工具应该具备的功能</h2><ul><li><strong>协同修改</strong><ul><li>多人并行不悖的修改服务器端的同一个文件。</li></ul></li><li><strong>数据备份</strong><ul><li>不仅保存目录和文件的当前状态，还能够保存每一个提交过的历史状态。</li></ul></li><li><strong>版本管理</strong><ul><li>在保存每一个版本的文件的当前状态，还能够保存每一个提交过的历史状态。</li></ul></li><li><strong>权限控制</strong><ul><li>对团队中参与开发的人员进行权限控制。</li><li>对团队外开发者贡献的代码进行审核—git独有</li></ul></li><li><strong>历史记录</strong><ul><li>查看修改人、修改时间、修改内容、日志信息。</li><li>将本地文件恢复到某一个历史状态。</li></ul></li><li><strong>分支管理</strong><ul><li>允许开发团队在工作过程中多条生产线同时推进任务，进一步提高效率。</li></ul></li></ul><h2 id="😕版本控制简介"><a href="#😕版本控制简介" class="headerlink" title="😕版本控制简介"></a>😕版本控制简介</h2><ul><li><strong>版本控制</strong><ul><li>工程设计领域中使用版本控制管理工程蓝图的设计过程。在 IT 开发过程中也可以使用版本控制思想管理代码的版本迭代。</li></ul></li><li><strong>版本控制工具</strong><ul><li>集中式版本控制工具：CVS、SVN、VSS……</li><li>分布式版本控制工具：Git、Mercurial、Bazaar、Darcs……</li></ul></li></ul><h2 id="😟Linux基础命令"><a href="#😟Linux基础命令" class="headerlink" title="😟Linux基础命令"></a>😟Linux基础命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">git config --global color.ui true 设置 git bashhere 颜色作为区别</span><br><span class="line">mkdir ** 创建目录</span><br><span class="line">cd **/ 切换到某个目录</span><br><span class="line">pwd  用于显示当前文件夹中有什么</span><br><span class="line">git init 初始化 初始化本地库</span><br><span class="line">ll 查看目录里有什么 **注意：**不能显示隐藏文件</span><br><span class="line">ll -lA查看所有文件包括隐藏文件（.git默认是隐藏文件）</span><br><span class="line">ll.git/查看隐藏文件夹中有什么</span><br><span class="line">cat  ** 查看文件内容</span><br><span class="line">vim  ** 使用vim编辑器编辑</span><br><span class="line">1.i进入编辑模式</span><br><span class="line">2.或:set nu进入编辑</span><br><span class="line">2.esc键:wq保存退出</span><br><span class="line">一般跟短命令选项（通常是单字母，也有一些命令是例外的），-- 后一般跟长命令选项。如果只有一个单独的--，</span><br><span class="line">后面不紧跟任何选项，则表示命令选项结束，后续的都作为命令的参数而不是选项。</span><br><span class="line">例如：</span><br><span class="line">git checkout -- filename</span><br><span class="line">filename作为git checkout 的参数，而不是选项。</span><br></pre></td></tr></table></figure><h2 id="🤨明确一些概念"><a href="#🤨明确一些概念" class="headerlink" title="🤨明确一些概念"></a>🤨明确一些概念</h2><ul><li>git版本管理工具中四个区域概念：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(1)Workspace：工作区</span><br><span class="line">(2)Stage：暂存区</span><br><span class="line">(3)Repository：仓库区（或本地仓库）</span><br><span class="line">(4)Remote：远程仓库</span><br><span class="line">其中工作区和暂存区在各个不同的分支中是共享的（方便理解stash操作）</span><br><span class="line">-）git中一些</span><br><span class="line"> HEAD   表示当前版本，上一个版本就是HEAD^(可以写为HEAD~1)，上上一个版本就是HEAD^^^^^(可以写为HEAD~5),</span><br><span class="line">-) git中文件状态</span><br><span class="line"> untracked：新建的文件，没有git add [filename] 的都属于未被git追踪到文件</span><br><span class="line"> 未加入到暂存区的文件: 指的是已经被追踪（tracked）过，但是没有加入到暂存区(已经执行过git add的但是这次修改后还没有git add)</span><br><span class="line">-）远程库</span><br><span class="line"> origin : git给远程库起的默认名称是origin</span><br></pre></td></tr></table></figure><h2 id="🤔Git-基础操作"><a href="#🤔Git-基础操作" class="headerlink" title="🤔Git 基础操作"></a>🤔<strong>Git</strong> <strong>基础操作</strong></h2><h3 id="本地库初始化"><a href="#本地库初始化" class="headerlink" title="本地库初始化"></a>本地库初始化</h3><ul><li><p>命令：git init</p><p><img src="https://s2.ax1x.com/2019/05/28/VeIHKJ.png" alt="VeIHKJ.png"></p></li><li><p>注意：.git目录中存放的是本地库相关的子目录和文件，不要<strong>删除</strong>，也不要胡乱<strong>修改</strong>。</p></li></ul><h3 id="设置签名"><a href="#设置签名" class="headerlink" title="设置签名"></a>设置签名</h3><ul><li><p>形式</p><ul><li>用户名：tom</li><li>email地址：<a href="mailto:&#77;&#x69;&#97;&#x6f;&#49;&#50;&#51;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#109;">&#77;&#x69;&#97;&#x6f;&#49;&#50;&#51;&#x40;&#113;&#x71;&#x2e;&#x63;&#111;&#109;</a></li></ul></li><li><p>作用：区别不同开发人员的身份</p></li><li><p>辨析：这里设置的签名和登录远程库（代码托管中心）的账号、密码没有任何关系。</p></li><li><p>命令（就近原则）</p><ul><li><p>项目级别/仓库级别：仅在当前本地库范围有效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name tom_pro</span><br><span class="line">git config user.email Miao123@qq.com</span><br></pre></td></tr></table></figure><ul><li><p>信息保存位置：./git/config文件</p><p><img src="https://s2.ax1x.com/2019/05/28/VmphIU.png" alt="VmphIU.png"></p></li></ul></li><li><p>系统用户级别：登录当前操作系统的用户范围</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name tom_global</span><br><span class="line">git config --global user.email Miao123@qq.com</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/05/28/Vm98oT.png" alt="Vm98oT.png"></p></li><li><p>级别优先级</p><ul><li>就近原则：项目级别优先于系统用户级别，二者都有时采用项目级别的签名</li><li>如果只有系统用户级别的签名，就以系统用户级别为准。</li><li>二者都没有不允许</li></ul></li></ul></li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ul><li><p>状态查看操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br><span class="line">查看工作区、暂存区状态</span><br></pre></td></tr></table></figure></li><li><p>添加操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add [file name]</span><br><span class="line">将工作区的“新建/修改”添加到暂存区</span><br></pre></td></tr></table></figure></li><li><p>提交操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;commit message&quot; [file name]</span><br><span class="line">将暂存区的内容提交到本地库</span><br></pre></td></tr></table></figure></li><li><p>查看历史记录操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">-多屏显示控制方式：空格向下翻页、b向上翻页、q 退出</span><br><span class="line">- 如果嫌输出信息太多，可以试着添加 pretty=oneline 或者 --oneline </span><br><span class="line">- 只显示提交信息的第一行 git log --pretty=short</span><br><span class="line">- 只显示指定目录、文件的日志    git log **.**文件名</span><br><span class="line">- 只显示文件的改动   git log -p</span><br><span class="line">- 显示指定文件详细改动信息     git log -p **.**</span><br><span class="line"></span><br><span class="line">git log --graph以图表形式查看分支</span><br><span class="line"></span><br><span class="line">git reflog</span><br><span class="line">- HEAD@&#123;移动到当前版本需要多少步&#125;</span><br><span class="line">- git log只能查看以当前时间状态为终点的历史日志。</span><br><span class="line">- reflog查看当前仓库所有历史操作，在日志中可以看到，commit/checkout/reset/merge等git命令的执行记录（哈希值）,只要不进行GC（垃圾回收），都可以查到</span><br><span class="line">- 例：git reset --hadr 83b5s0</span><br></pre></td></tr></table></figure></li><li><p>前进后退</p><ul><li><p>基于索引值操作[推荐]</p><ul><li>```<ul><li>git reset –hard [局部索引值]</li><li>git reset –hard a6ace91<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 使用^符号：只能后退</span><br><span class="line"></span><br><span class="line">  - ```</span><br><span class="line">    - git reset --hard HEAD^</span><br><span class="line">    - 注：一个^表示后退一步，n 个表示后退 n 步</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>使用~符号：只能后退</p><ul><li>```<ul><li>git reset –hard HEAD~n</li><li>注：表示后退 n 步<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- reset 命令的三个参数对比</span><br><span class="line"></span><br><span class="line">  - --soft 参数</span><br><span class="line">    - 仅仅在本地库移动 HEAD 指针</span><br><span class="line">  - --mixed 参数</span><br><span class="line">    - 在本地库移动 HEAD 指针</span><br><span class="line">    - 重置暂存区</span><br><span class="line">  - --hard 参数</span><br><span class="line">    - 在本地库移动 HEAD 指针</span><br><span class="line">    - 重置暂存区</span><br><span class="line">    - 重置工作区</span><br><span class="line"></span><br><span class="line">- 删除文件并找回</span><br><span class="line"></span><br><span class="line">  - 前提：删除前，文件存在时的状态提交到了本地库。</span><br><span class="line">  - 操作：git reset --hard [指针位置]</span><br><span class="line">    - 删除操作已经提交到本地库：指针位置指向历史记录</span><br><span class="line">    - 删除操作尚未提交到本地库：指针位置使用 HEAD^或HEAD~</span><br><span class="line"></span><br><span class="line">- 比较文件差异</span><br><span class="line"></span><br><span class="line">  - git diff [文件名]</span><br><span class="line">    - 将工作区中的文件和暂存区进行比较</span><br><span class="line">  - git diff [HEAD || 本地库中历史版本] [文件名]</span><br><span class="line">    - 将工作区中的文件和本地库历史记录比较</span><br><span class="line">  - 不带文件名比较多个文件</span><br><span class="line"></span><br><span class="line">- 命令帮助</span><br><span class="line"></span><br><span class="line">### 分支管理</span><br><span class="line"></span><br><span class="line">- **什么是分支？**</span><br><span class="line"></span><br><span class="line">  - 在版本控制过程中，使用多条线同时推进多个任务。</span><br><span class="line"></span><br><span class="line">    [![VnTo7j.md.png](https://s2.ax1x.com/2019/05/29/VnTo7j.md.png)](https://imgchr.com/i/VnTo7j)</span><br><span class="line"></span><br><span class="line">- **分支的好处？**</span><br><span class="line"></span><br><span class="line">  - 同时并行推进多个功能开发，提高开发效率</span><br><span class="line">  - 各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任何影响。失败的分支删除重新开始即可。</span><br><span class="line"></span><br><span class="line">- **分支操作**</span><br><span class="line"></span><br><span class="line">  - 创建分支</span><br><span class="line"></span><br><span class="line">    - git branch [分支名]</span><br><span class="line"></span><br><span class="line">  - 查看分支</span><br><span class="line"></span><br><span class="line">    - git branch -v</span><br><span class="line"></span><br><span class="line">  - 切换分支</span><br><span class="line"></span><br><span class="line">    - git checkout [分支名]</span><br><span class="line"></span><br><span class="line">  - 合并分支</span><br><span class="line"></span><br><span class="line">    - 第一步：切换到接受修改的分支（被合并，增加新内容）上 git checkout [被合并分支名]</span><br><span class="line"></span><br><span class="line">    - 第二步：执行 merge 命令 git merge [有新内容分支名]</span><br><span class="line"></span><br><span class="line">    - 解决冲突</span><br><span class="line"></span><br><span class="line">      - 冲突的表现</span><br><span class="line"></span><br><span class="line">        [![VnqvGR.png](https://s2.ax1x.com/2019/05/29/VnqvGR.png)](https://imgchr.com/i/VnqvGR)</span><br><span class="line"></span><br><span class="line">      - 冲突的解决</span><br><span class="line"></span><br><span class="line">        - 第一步：编辑文件，删除特殊符号</span><br><span class="line">        - 第二步：把文件修改到满意的程度，保存退出</span><br><span class="line">        - 第三步：git add [文件名]</span><br><span class="line">        - 第四步：git commit -m &quot;日志信息&quot;</span><br><span class="line">          - **注意：此时 commit 一定不能带具体文件名**</span><br><span class="line"></span><br><span class="line">## 😑基本流程</span><br><span class="line"></span><br><span class="line">- - 创建新仓库</span><br><span class="line">  - 创建仓库文件夹, 并进入文件夹</span><br><span class="line">  - git init : 创建新的git仓库(会生成.git文件夹)</span><br><span class="line">- 克隆远程仓库</span><br><span class="line">  - git clone 远程仓库的地址(git@github.com:baihaojie/0728.git)【注意是 ssh 的地址】</span><br><span class="line">- 工作流</span><br><span class="line">  - 你的本地仓库由 git 维护的三棵“树”组成</span><br><span class="line">  - 第1个: 工作区(working dir) 你的工作目录</span><br><span class="line">  - 第2个: 暂存区（Index/Stage）它像个缓存区域，临时保存你的改动</span><br><span class="line">  - 第3个: 版本区(HEAD), 它指向你最后一次提交的结果</span><br><span class="line">- 添加和提交</span><br><span class="line">  - 将工作区的新增/修改提交到暂存区: git add &lt;filename&gt;/*</span><br><span class="line">  - 将暂存区的更新提交到版本区(HEAD) : git commit -m &quot;代码提交信息&quot;</span><br><span class="line">    - 查看状态: git status</span><br><span class="line">- 推送改动</span><br><span class="line">  - 如果不是克隆的仓库, 第一次需要先关联上远程仓库: git remote add origin url(远程仓库的地址)</span><br><span class="line">  - 推送之前先同步代码，将远程最新版本拉到本地: git pull origin master</span><br><span class="line">  - 将本地版本区的更新推送到远程仓库 : git push origin master</span><br><span class="line">    - 提示输入username</span><br><span class="line">    - 提示输入password</span><br><span class="line">- 分支git</span><br><span class="line">  - 查看所有分支: git branch</span><br><span class="line">  - 创建一个叫做“feature_x”的分支，并切换过去 : git checkout -b feature_x</span><br><span class="line">  - 创建新文件(x.txt),并添加提交: git add * ---&gt;git commit -m &quot;new x file&quot;</span><br><span class="line">  - 切换回主分支 : git checkout master</span><br><span class="line">  - 推送到远程仓库: git push origin feature_x</span><br><span class="line">  - 删掉新建的分支 : git branch -D feature_x</span><br><span class="line">- 更新与合并</span><br><span class="line">  - 将远程最新版本拉到本地: git pull origin master</span><br><span class="line">  - 比较2个分支版本的区别: git diff &lt;source_branch&gt; &lt;target_branch&gt;</span><br><span class="line">  - 合并分支: git merge &lt;branch&gt;</span><br><span class="line">  - 在更新或合并时可能会出现冲突, 解决冲突</span><br><span class="line">    - 打开文件修改文件内容</span><br><span class="line">    - git add *</span><br><span class="line">    - git commit -m &quot;resolve conflict&quot;</span><br><span class="line">- 标签(备份重要版本)</span><br><span class="line">  - 查看提交日志 : git log (按Q退出)</span><br><span class="line">  - 记录每一次命令: git reflog </span><br><span class="line">  - 给重要版本创建标签: git tag 1.0.0 1b2e1d63ff(某个提交ID)</span><br><span class="line">  - 将工作区切换到标签版本: git checkout 1.0.0</span><br><span class="line">- 替换本地改动</span><br><span class="line">  - 回到未来： git reset --hard 1b2e1d63ff(某个提交ID)</span><br><span class="line">  - 使用HEAD中的最新内容替换掉你的工作目录中的文件 : git checkout -- &lt;filename&gt;</span><br><span class="line">  - 取得远程的代码，但是不合并： git fetch origin master</span><br><span class="line">  - 丢弃你在本地的所有改动与提交 :  git fetch origin --&gt; </span><br><span class="line">      git reset --hard origin/master</span><br><span class="line"></span><br><span class="line">------</span><br><span class="line"></span><br><span class="line">- git fetch 与 git pull 的比较</span><br><span class="line">  - pull = fetch + merge</span><br><span class="line"></span><br><span class="line">## 🤤Git命令大全</span><br><span class="line"></span><br><span class="line">- git init</span><br><span class="line"></span><br><span class="line">  git init 初始化git仓库</span><br><span class="line"></span><br></pre></td></tr></table></figure>git init [program-name] 新建一个目录，将其初始化为Git代码库<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git clone（默认 ： clone下来的版本只能看到master分支， 如果，想要在dev分支上开发，就必须创建远程</span><br><span class="line">  origin的dev分支到本地）</span><br><span class="line"></span><br></pre></td></tr></table></figure>git clone <a href="mailto:&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#99;&#x6f;&#109;">&#x67;&#105;&#x74;&#64;&#103;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#99;&#x6f;&#109;</a>:yanqiangsjz/website.git 将远程仓库克隆到本地开发（多人协作开发）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  git checkout -b [branch] [remote]/[branch] （创建远程[remote]的[branch]分支到本地。  一般远程仓库和本地仓库分支命名一样）</span><br><span class="line"></span><br><span class="line">- git config （--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。  如果不加，那只针对当前的仓库起作用。）</span><br><span class="line"></span><br><span class="line">  git config --list 显示当前的Git配置</span><br><span class="line"></span><br></pre></td></tr></table></figure>git config user.name 查看用户名</li></ul></li></ul></li></ul><p>git config user.email  </p><p>git config –global user.name [username] 设置全局用户名</p><p>git config –global user.email [email]</p><p>git config –global color.ui true 配置Git显示颜色</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git add </span><br><span class="line"></span><br><span class="line">  git add [filename]  添加指定文件到暂存区(表示添加新文件和编辑过的文件不包括删除的文件)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git add [dir]  添加指定目录到暂存区，包括子目录    </p><p>git add .  添加当前目录的所有文件到暂存区(表示添加新文件和编辑过的文件不包括删除的文件)</p><p>git add -u  表示添加编辑或者删除的文件，不包括新添加的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git rm filename  </span><br><span class="line"></span><br><span class="line">  git rm [filename] 删除工作区文件并放进暂存区</span><br><span class="line">  如果想从暂存区撤销：git reset HEAD -- [filename]</span><br><span class="line">  如果想撤销工作区的修改：git checkout -- [filename]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意区别 : rm [filename]  删除工作区文件, 并没有放进暂存区<br>如果想撤销工作区的修改：git checkout – [filename]</p><p>git rm –cached [filename]    停止追踪文件，但该文件会保留在工作区(untracked状态)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git diff</span><br><span class="line"></span><br><span class="line">  git diff [filename] 比较的是工作区文件与暂存区文件的差异</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git diff –cached [filenam] 比较的是暂存区的文件与上一个commit的差异</p><p>git diff HEAD – [filename] 比较的是工作区与当前分支最新commit之间的差异</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git status</span><br><span class="line"></span><br><span class="line">  git status 查看文件状态; 还可以在分支合并冲突的时候提示哪个文件冲突</span><br><span class="line"></span><br><span class="line">- git commit</span><br><span class="line"></span><br><span class="line">  git commit -m [message]  暂存区提交到仓库区</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git commit [filename1] [filename2] … -m [message]  暂存区的指定文件提交到仓库区</p><p>git commit -a -m [message]  工作区中修改后，还未使用git add . 命令添加到暂存区中的文件也一并提交上去<br>相当于git add . 与git commit –m [message] 两句操作合并为一句进行使用。commit完成过后，git status,<br>下方的工作区是干净的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git log</span><br><span class="line"></span><br><span class="line">  git log 查看当前分支的版本历史</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git log –stat 查看commit历史，以及每次commit发生变更的文件</p><p>git log –pretty=oneline 查看从最近到最远的提交日志简单日志（–pretty=oneline：单行模式）</p><p>git log -1 查看最近一次的提交信息</p><p>git log -n 查看最近n次的提交信息</p><p>git log –graph  查看分支合并图</p><p>git log –graph –pretty=oneline  查看分支合并图；简单日志</p><p>git reflog 查看命令历史，以便确定要回到未来的哪个版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git blame</span><br><span class="line"></span><br><span class="line">  git blame [filename]  查看指定文件是什么人在什么时间修改过</span><br><span class="line"></span><br><span class="line">- git shortlog</span><br><span class="line"></span><br><span class="line">  git shortlog -sn 查看所有提交过的用户，按提交次数排序</span><br><span class="line"></span><br><span class="line">- git show</span><br><span class="line">  git show [commit] 显示某次提交时，文件变化</span><br><span class="line"></span><br><span class="line">  git show [commit]:[filename]  显示某次提交时，某个文件的内容(注意[commit]:[filename]冒号之间没有空格)</span><br><span class="line"></span><br><span class="line">- git checkout (1)</span><br><span class="line"></span><br><span class="line">  git checkout -- [filename]  工作区filename的修改撤销</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git checkout . 撤销工作区的全部修改<br>解释 ：一种是文件修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；<br>一种是文件已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一次git commit或git add时的状态。    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git checkout (2)</span><br><span class="line"></span><br><span class="line">  git checkout [branch] 切换分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git checkout -b [branch] 创建并切换到该分支(如果在切换分支的时候，未commit, 有可能会报错)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git checkout (3) </span><br><span class="line"></span><br><span class="line">  git checkout -b [branch] [remote]/[branch]</span><br><span class="line">  说明：</span><br><span class="line">   多人协作时，如果同事从远程库clone时，默认情况下，你的同事只能看到本地的master分支。如果，你的同事要在（[branch]）分支上开发，</span><br><span class="line">  就必须创建远程([remote])的([branch])到本地</span><br><span class="line"></span><br><span class="line">- git reset (1)</span><br><span class="line"></span><br><span class="line">  git reset [filename] 重置暂存区的指定文件，与上一次commit保持一致，工作区不变</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git reset –hard  重置暂存区与工作区，与上一次commit保持一致</p><p>git reset –hard HEAD~2  回退到某个版本(这里是从当前版本回退两个版本)</p><p>git reset –hard commitID 回退到某个版本（commitID是版本号）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git reset (2)</span><br><span class="line"></span><br><span class="line">  git reset HEAD -- [filename] 把暂存区的修改撤销（unstage），重新放回工作区</span><br><span class="line"></span><br><span class="line">- git branch 分支名称</span><br><span class="line"></span><br><span class="line">  git branch [branch] 创建分支  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git branch 列出所有本地分支</p><p>git branch -a 列出所有本地分支和远程分支</p><p>git branch -r 列出所有远程分支</p><p>git branch -d [branch] 删除分支</p><p>git branch -D [branch]  强制删除一个还没有合并（已经commit）的分支</p><p>说明：<br>1、如果一个分支在开发完成以后（分支已经commit）待合并，如果出于某种原因这个分支废弃了，但是这个分支必须删除。git branch -D [branch]<br>2、如果一个分支还没有commit， 是可以使用 git branch -d [branch]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git merge (merge之前必须都先commit，即工作区和暂存区使用git status 应该是干净的工作区域，即是已经是最新的commit)</span><br><span class="line"></span><br><span class="line">  git merge [branch] 合并指定分支([branch])到当前分支</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git merge –no-ff -m [message] [branch] 合并指定分支([branch])到当前分支,禁用Fast forward模式</p><p>解释 : 禁用Fast forward模式,Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p><p>必要 : 如果merge出现冲突， 则解决冲突以后必须：1、git add 2、git commit。</p><p>建议 :<br>(1 解决完成冲突以后，最好直接将分支删除，如果需要，再新建一条分支。原因是在解决冲突了以后，如果还切换回之前的分支继续开发，<br>分支还是冲突发生前的内容（解决冲突只解决的主分支master的（而且冲突解决不是全部按照分支内容解决的）所以再次提交会报错。<br>(2 如果合并冲突完全放弃原来主分支的冲突采用dev分支的内容，则合并后主分支的内容和现存在dev分支是一样的内容，不删除原来的分<br>支继续在上面开发也是可以的</p><p>冲突判定机制 : 先寻找两个commit的公共祖先，比较同一个文件分别在ours和theirs下对于公共祖先的差异，然后合并这两组差异如果<br>双方同时修改了一处地方且修改内容不同，就判定为合并冲突，依次输出双方修改的内容</p><p>分支策略 : 首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；那在哪干活呢？干活都在dev分支上,<br>也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；每个人<br>都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</p><p>补充建议 : 如果在dev分支上正在开发一个功能，但是这是master上需要解决一个bug，这时需要切换回master在开发出一个bug分支  来解决<br>这个bug，但是在dev分支上功能还没有开发完，不能commit。这时解决办法是：第一步、将dev分支上的工作现场  ‘封存’起来(git stash)<br>第二步、 切换到主分支，新建主分支的bug分支，将bug修改完然后切换回主分支将bug分支合并。 第三部、 切换回dev分支，将bug分支同时<br>合并到dev分支（原因是 ： 避免是如果bug分支上修改的东西太多，在最后  dev开发完成以后，master合并dev分支的时候出现大面积的冲突）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git stash</span><br><span class="line">  git stash list 查看使用储藏起来的工作现场</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git stash apply 恢复工作现场（但是stash内容并不删除）</p><p>git stash drop  删除stash内容</p><p>git stash pop  恢复工作现场并删除stash内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>说明：<br>git stash 只能“储藏”已被追踪过的文件。意思就是说如果是新添加的文件还没有执行过<code>git add</code>的文件，在使用git stash后还是会在工作区中出现，<br>并不会别“储藏”。所以要使用git stash, 请将untrack状态的文件执行git add, 使其可被git追踪</p><p>git stash 把当前工作现场“储藏”起来(如果在一个分支上修改了文件但是因为还没有修改完不能提交的时候，  如果要开发出一个新的分支解决一个问题，<br>如果不使用git stash， 那么在另一个分支上也是可以看到这个分支上修改的内容。)</p><p>结论 ：<br>1.工作区和暂存区是共用的，在各个分支里都可以看到没被stash的文件。<br>2.在工作区和暂存区的文件都可以stash，pop之后都会出现在工作区</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>说明 : 假设在dev分支上正在开发，忽然程序出现bug,需要即刻修复，但是dev分支上的任务还没有完成，无法提交合并到master。<br>但是现在就需要在master上创建一个分支bugs去修复这个问题。因为工作区和暂存区对所有分支默认都是共用的，所以在bugs分支<br>上会执行dev分支上未完成的修改。这样是不允许的。所以我们可以在dev分支中git stash 将dev分支<br>中的工作区和暂存区隐藏起来，这样在别的分支中就看不到dev分支工作区中和暂存区中的已有的工作，这意味着工作区是干净的。我们可以在<br>bugs分支中可以看到工作区是干净的，可以执行任意我们的任务。等待bugs分支开发完成，再切换到master分支，接着将bugs分支merge<br>到master。但是现在我们思考一下，现在主分支是最新的（修复了bugs并且merge上去的)，但是我们的dev分支却还是和未修复bugs的<br>master主分支同步的版本。如果这样的话，在我们开发完dev分支并且合并到master分支上时，就有可鞥会出现问题（除非是增加文件，否则就<br>会出现合并冲突）。如果我们的dev分支版本现在不存在master中存在的bug,则我们完全可以放心。但是如果dev中也会出现像master<br>中出现的bug,则当我们将dev合并到master中时，还是会出现同样的bug。主要是在这种情况下，还会发生合并时候冲突。所以在将bugs<br>合并到master以后，我们也可以选择将bugs分支合并到dev分支中，合并完成之后，现在master和dev中的代码是一样的。但是我们之前<br>在dev中执行了git stash, 还有“储藏”的工作区中已经开发但未提交的内容，当我们执行git stash pop 恢复之前的工作现场并删除<br>stash内容，会发现有冲突发生了（因为现在dev分支和master分支是一样的，现在该文件是已经修复完成的， 但是我们释放的工作区中之前就对<br>该文件做了修改：同一个文件不同的内容，这样就会明显的出现冲突）。这是我们就需要解决这些冲突（其实就是将之前修改的删掉，保留和现在<br>master主分支中的文件一样的信息）。解决完成以后。我们就完全解决了以后dev合并到master中可能存在的冲突，并且在合并以后不会再出现同样<br>的错误        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git remote (git给远程库起的默认名称是origin)</span><br><span class="line"></span><br><span class="line">  git remote -v 查看远程库的信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git remote show [remote] 显示某个远程仓库的信息</p><p>git remote add [remote] [url] 增加一个新的远程仓库，并命名 (一般是origin)</p><p>git remote rm [remote]  删除远程库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git push </span><br><span class="line">  git push [remote] master  将主分支推送到远程库</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git push [remote] [branch] 将([branch])分支推送到远程库</p><p>git push [remote] [tagname] 推送某个标签到远程</p><p>git push [remote] –tags 一次性推送全部尚未推送到远程的本地标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git pull origin 分支名称 （取回远程仓库的变化，并与本地分支合并）</span><br><span class="line"></span><br><span class="line">  git pull [remote] [branch]  取回远程仓库的变化，并与本地分支合并</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明 : 在向远程库推送某个分支的时候，需要先”Git pull”更新本地的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">即 ： 如果你的同事先在dev分支推送他的提交，接下来你去推送很有可能会失败。因为你的同事最新提交和你试图推送的提交有冲突，</span><br><span class="line">解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，</span><br><span class="line">git add -&gt; git commit -&gt; 再推送</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果: git pull 也失败了 ： </p><pre><code>        $ git pull        remote: Counting objects: 8, done.        remote: Compressing objects: 100% (6/6), done.        remote: Total 8 (delta 2), reused 8 (delta 2), pack-reused 0        Unpacking objects: 100% (8/8), done.        From github.com:yanqiangsjz/rhjt           6876a33..e2516f8  oneline    -&gt; origin/oneline        There is no tracking information for the current branch.        Please specify which branch you want to merge with.        See git-pull(1) for details.                    git pull &lt;remote&gt; &lt;branch&gt;                If you wish to set tracking information for this branch you can do so with:                    git branch --set-upstream-to=origin/&lt;branch&gt; oneline</code></pre><p>原因 ： 没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：git branch –set-upstream-to=origin/dev dev</p><p>git pull –rebase origin master 远程库同步到本地库  （解决的问题：error: failed to push some refs to ‘<a href="mailto:&#103;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#101;&#101;&#x2e;&#99;&#111;&#x6d;">&#103;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#101;&#101;&#x2e;&#99;&#111;&#x6d;</a>:name/project.git’）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git branch --set-upstream-to=origin/dev dev</span><br><span class="line"></span><br><span class="line">  git branch --set-upstream-to=origin/dev dev 设置dev和origin/dev的链接。成功以后就可以git pull</span><br><span class="line"></span><br><span class="line">- git tag </span><br><span class="line"></span><br><span class="line">  git tag [tagname] 为当前HEAD打标签（本地tag）</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git tag [tagname] commitId（commitId 默认未HEAD; 本地tag）</p><p>git tag -a [tagname] -m [message] commitId 为本地tag添加说明</p><p>git tag 查看所有标签信息</p><p>git show [tagname] 查看某个tag信息</p><p>git tag -d [tagname] 删除本地标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 删除远程标签</span><br><span class="line"></span><br><span class="line">  git tag -d [tagname] -&gt; git push [remote] :refs/tags/[tagname]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>说明：git tag -d [tagname]（先从本地删除）;  git push [remote] :refs/tags/[tagname]（然后，从远程删除）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- git checkout -b [branch] [tag]</span><br><span class="line"></span><br><span class="line">  git checkout -b[branch] [tagname] 新建一个分支，指向某个tag</span><br><span class="line"></span><br><span class="line">- git fetch (取回远程仓库的变化，但并不会主动与本地分支合并。这个比git pull 更安git全)</span><br><span class="line"></span><br><span class="line">  //方法一 例子</span><br><span class="line">  git fetch origin master //从远程的origin仓库的master分支下载代码到本地的origin master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git log -p master.. origin/master//比较本地的仓库和远程参考的区别</p><p>git merge origin/master//把远程下载下来的代码合并到本地仓库，远程的和本地的合并</p><p>//方法二<br>git fetch origin master:temp //从远程的origin仓库的master分支下载到本地并新建一个分支temp</p><p>git diff temp//比较master分支和temp分支的不同</p><p>git merge temp//合并temp分支到master分支</p><p>git branch -d temp//删除temp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 🙄.gitignore文件</span><br><span class="line"></span><br><span class="line">- 忽略特殊文件</span><br><span class="line"></span><br><span class="line">  有些时候，你必须把某些文件放到Git工作目录中，但又不能提交它们，比如保存了数据库密码的配置文件啦，等等，</span><br><span class="line">  每次git status都会显示Untracked files ...，有强迫症的童鞋心里肯定不爽。好在Git考虑到了大家的感受，</span><br><span class="line">  这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填</span><br><span class="line">  进去，Git就会自动忽略这些文件不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，</span><br><span class="line">  只需要组合一下就可以使用了。所有配置文件可以直接在线浏览. 查看请点击下面的链接 </span><br><span class="line"></span><br><span class="line">   [https://github.com/github/gitignore](https://github.com/github/gitignore &quot;github&quot;)</span><br><span class="line"></span><br><span class="line">## 🤨本地设置</span><br><span class="line"></span><br><span class="line">由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：</span><br><span class="line"></span><br><span class="line">- 第1步：</span><br><span class="line">  创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$ ssh-keygen -t rsa -C “<a href="mailto:&#x79;&#x6f;&#117;&#x72;&#x65;&#x6d;&#97;&#x69;&#x6c;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#109;">&#x79;&#x6f;&#117;&#x72;&#x65;&#x6d;&#97;&#x69;&#x6c;&#x40;&#101;&#120;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#x63;&#x6f;&#109;</a>“</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  你需要把邮件地址换成你自己的邮件地址，然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。</span><br><span class="line"></span><br><span class="line">  如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。</span><br><span class="line"></span><br><span class="line">- 第2步：</span><br><span class="line">  登陆GitHub，打开“settings”，“SSH Keys”页面：</span><br><span class="line">  然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：</span><br><span class="line">  [![V2Fakt.png](https://s2.ax1x.com/2019/06/11/V2Fakt.png)](https://imgchr.com/i/V2Fakt)</span><br><span class="line">  添加完成</span><br><span class="line">  [![V2FD1S.png](https://s2.ax1x.com/2019/06/11/V2FD1S.png)](https://imgchr.com/i/V2FD1S)</span><br><span class="line">  当前的 ssh key 的使用状态是未使用，我们可以通过 pull 命令专门要一次数据来实现激活。在第一次要数据的时候，系统会提示我们是否同意，我们输入 yes 表示同意即可。</span><br><span class="line"></span><br><span class="line">- 友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去。</span><br><span class="line">- 如果你不想让别人看到Git库，有两个办法:</span><br><span class="line">  1. 一个是交点保护费，让GitHub把公开的仓库变成私有的，这样别人就看不见了（不可读更不可写）</span><br><span class="line">  2. 一个办法是自己动手，搭一个Git服务器，因为是你自己的Git服务器，所以别人也是看不见的</span><br><span class="line">- 第3步：</span><br><span class="line">  - 测试是否配置成功</span><br><span class="line">    -` ssh  -T git@github.com `</span><br><span class="line">- 第4步：</span><br><span class="line">  - 测试上传文件是否成功</span><br><span class="line">  - 注意：远程仓库必须是使用 ssh 关联方式才能生效， 如果是 https 的方式就不会生效</span><br><span class="line">    - 断开关联</span><br><span class="line">      - `git remote remove origin` </span><br><span class="line">    - 建立关联</span><br><span class="line">      - `git remote add origin &quot;项目的ssh地址&quot;`</span><br><span class="line"></span><br><span class="line">## 😯**GitHub**</span><br><span class="line"></span><br><span class="line">- **创建远程库地址别名**</span><br><span class="line">  - git remote -v 查看当前所有远程地址别名</span><br><span class="line">  - git remote add [别名] [远程地址]</span><br><span class="line">- **推送**</span><br><span class="line">- git push [远程地址别名] [分支名]</span><br><span class="line">- **克隆**</span><br><span class="line">  - git clone [远程地址]</span><br><span class="line">  - 具有三个效果</span><br><span class="line">    - 完整的把远程库下载到本地</span><br><span class="line">    - 创建origin远程地址别名 </span><br><span class="line">    - 初始化本地库</span><br><span class="line">- **拉取**</span><br><span class="line">  - pull = fetch + merge</span><br><span class="line">  - git pull [远程库地址别名] [远程分支名]</span><br><span class="line">  - git fetch [远程库地址别名] [远程分支名]</span><br><span class="line">- git merge [远程库地址别名/远程分支名]      注意：这个合并两个之间加斜杠/</span><br><span class="line">- **团队成员邀请**</span><br><span class="line">  - 在项目中点击**settings**</span><br><span class="line">  - 点击左侧**collaborators** </span><br><span class="line">  - add添加 成员GitHub邮箱</span><br><span class="line">  - 点击**copy invite link** 将链接以其他方式交给成员</span><br><span class="line">  - 被邀请成员登录GitHub点链接**Accept invitation**按钮加入即可</span><br><span class="line">- **SSH登录**</span><br><span class="line">  - 进入当前用户根目录  cd ~</span><br><span class="line">  - 删除.ssh目录 rm - rvf.ssh</span><br><span class="line">  - 运行命令生成.ssh秘钥目录</span><br><span class="line">    - $ ssh-keygen -t rsa -C atguigu2018ybuq@aliyun.com </span><br><span class="line">    - **注意：这里-C 这个参数是大写的** **C**</span><br><span class="line">  - 进入.ssh 目录查看文件列表  $ cd .ssh</span><br><span class="line">    - $ ls -lF</span><br><span class="line">  - 查看id_rsa.pub文件内容</span><br><span class="line">    - $ cat id_rsa.pub</span><br><span class="line">  - 复制 id_rsa.pub 文件内容，登录 GitHub，点击用户头像→Settings→SSH and GPG keys</span><br><span class="line">  - New SSH Key</span><br><span class="line">    - 输入复制的密钥信息</span><br><span class="line">    - 回到 Git bash 创建远程地址别名</span><br><span class="line">    - git remote add origin_ssh git@github.com:atguigu2018ybuq/huashan.git</span><br><span class="line">    - 注意：这时候就用ssh地址即可</span><br><span class="line"></span><br><span class="line">## 😫创建远程仓库货和推送信息</span><br><span class="line"></span><br><span class="line">现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</span><br><span class="line">首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：</span><br><span class="line">![V2Fc0s.png](https://s2.ax1x.com/2019/06/11/V2Fc0s.png)</span><br><span class="line"></span><br><span class="line">目前，在GitHub上的这个 仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</span><br><span class="line"></span><br><span class="line">[![V2Fg7n.png](https://s2.ax1x.com/2019/06/11/V2Fg7n.png)](https://imgchr.com/i/V2Fg7n)</span><br><span class="line"></span><br><span class="line">现在，我们根据GitHub的提示，在本地的仓库下运行命令：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$ git remote add origin <a href="mailto:&#103;&#x69;&#116;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#x6d;">&#103;&#x69;&#116;&#64;&#x67;&#x69;&#116;&#x68;&#x75;&#98;&#x2e;&#99;&#x6f;&#x6d;</a>:baihaojie/test0830.git</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</span><br><span class="line"></span><br><span class="line">下一步，就可以把本地库的所有内容推送到远程库上：</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>$ git push -u origin master<br>Warning: Permanently added the RSA host key for IP address ‘192.30.253.112’ to t                 he list of known hosts.<br>Counting objects: 3, done.<br>Writing objects: 100% (3/3), 236 bytes | 0 bytes/s, done.<br>Total 3 (delta 0), reused 0 (delta 0)<br>To <a href="mailto:&#103;&#105;&#116;&#x40;&#103;&#105;&#116;&#104;&#x75;&#98;&#46;&#99;&#111;&#109;">&#103;&#105;&#116;&#x40;&#103;&#105;&#116;&#104;&#x75;&#98;&#46;&#99;&#111;&#109;</a>:baihaojie/test0830.git</p></li></ul><ul><li>[new branch]      master -&gt; master<br>Branch master set up to track remote branch master from origin.<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。</span><br><span class="line"></span><br><span class="line">由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</span><br><span class="line"></span><br><span class="line">推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</span><br><span class="line"></span><br><span class="line">[![V2kZ38.png](https://s2.ax1x.com/2019/06/11/V2kZ38.png)](https://imgchr.com/i/V2kZ38)</span><br><span class="line"></span><br><span class="line">//这个警告只会出现一次，后面的操作就不会有任何警告了。</span><br><span class="line"></span><br><span class="line">从现在起，只要本地作了提交，就可以通过命令：</span><br><span class="line"></span><br></pre></td></tr></table></figure>$ git push origin master<br>```</li></ul><p>把本地master分支的最新修改推送至GitHub，现在，你就拥有了分布式版本库</p><h2 id="GitLab-这个再说吧-😁"><a href="#GitLab-这个再说吧-😁" class="headerlink" title="GitLab 这个再说吧~~   😁"></a>GitLab 这个再说吧~~   😁</h2><ol><li>cd /etc/sysconfig/network-scripts/         切换到这个目录下</li><li>su root 切换到root账号</li><li>vim ifcfg-ens33  用vim编辑器打开此文件<ol><li><img src="C:\Users\Mc\AppData\Roaming\Typora\typora-user-images\1559621416905.png" alt="1559621416905"></li></ol></li><li>service network restart  重启网络服务</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://imgchr.com/i/V2iRzD&quot;&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/06/11/V2iRzD.png&quot; alt=&quot;Git流程图&quot;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="开发必备" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E5%BF%85%E5%A4%87/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>MySQL</title>
    <link href="http://example.com/2019/06/11/MySQL/"/>
    <id>http://example.com/2019/06/11/MySQL/</id>
    <published>2019-06-10T16:17:20.000Z</published>
    <updated>2022-03-28T12:18:07.023Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://dev.mysql.com/doc/refman/8.0/en/">官网参考手册</a></p><h3 id="数据库的概述"><a href="#数据库的概述" class="headerlink" title="数据库的概述"></a>数据库的概述</h3><p>​        Database（数据库，以特定的结构批量存储数据的软件）<br>​        数据库的发展史：</p><blockquote><p>网状数据库-&gt;层次型数据库-&gt;关系型数据库-&gt;非关系型数据库</p></blockquote><span id="more"></span><p>​        <strong>关系型数据库中数据的逻辑结构：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Server-&gt;Database-&gt;Table-&gt;Row-&gt;Column</span><br><span class="line">服务器-&gt;  数据库 -&gt;   表-&gt;  行-&gt;  列</span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><table><thead><tr><th>MySQL DB分支：</th><th><a href="http://www.mysql.com/">http://www.mysql.com/</a></th></tr></thead><tbody><tr><td>Maria DB分支:</td><td><a href="http://mariadb.org/">http://mariadb.org/</a></td></tr><tr><td>xampp官网：</td><td><a href="http://www.aspchefriends.org/">http://www.aspchefriends.org/</a></td></tr><tr><td></td><td>xampp是一个服务器套装，包含多款服务器软件。</td></tr><tr><td>bin:</td><td>bin文件夹下mysqld.exe:等同于启动</td></tr><tr><td></td><td>二进制</td></tr><tr><td></td><td>d-&gt;Deamon精灵，守护者</td></tr><tr><td></td><td>mysqld.exe启动MySQL服务器</td></tr></tbody></table><h3 id="MySQL数据库系统"><a href="#MySQL数据库系统" class="headerlink" title="MySQL数据库系统"></a>MySQL数据库系统</h3><h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><p>​            <strong>负责存储数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C：//xampp/.../MySQLD.exe</span><br></pre></td></tr></table></figure><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><p>​            <strong>负责向服务器发起增删改查的命令</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C：//xampp/.../MySQL.exe</span><br></pre></td></tr></table></figure><h4 id="连接MySQL据库服务器"><a href="#连接MySQL据库服务器" class="headerlink" title="连接MySQL据库服务器"></a>连接MySQL据库服务器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql.exe -h127.0.0.1 -P3306 -uroot -p</span><br><span class="line">简写：mysql -uroot</span><br><span class="line">-h服务器的IP地址/域名可以使用localhost</span><br><span class="line">-P端口，MySQL服务使用3306端口</span><br><span class="line">-u用户</span><br><span class="line">-p密码   </span><br></pre></td></tr></table></figure><h4 id="MySQL管理命令（每一个加分号-）"><a href="#MySQL管理命令（每一个加分号-）" class="headerlink" title="MySQL管理命令（每一个加分号;）"></a>MySQL管理命令（每一个加分号;）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">quit; 退出服务器连接</span><br><span class="line">show databases;显示数据库服务器上当前所有数据库</span><br><span class="line">use 数据库名称; 进入到指定的数据库</span><br><span class="line">show tables; 显示当前数据库中的数据表</span><br><span class="line">in set：记录</span><br><span class="line">desc 表名称;描述表中有哪些列（表头）</span><br></pre></td></tr></table></figure><h3 id="常用的sql命令"><a href="#常用的sql命令" class="headerlink" title="常用的sql命令"></a>常用的sql命令</h3><p>SQL：structured query Language    结构化查询语言（用于操作关系型数据库服务器中的数据）</p><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><ol><li>SQL语言最早是由IBM提出，后提交给ISO，成为行业内标准语言。</li><li>分为多个版本：<strong>SQL-87</strong>、<strong>SQL-92</strong>、<strong>SQL-99</strong>。</li><li>当前标准SQL语言被绝大多数的关系型数据库所支持。</li></ol><h4 id="SQL命令的两种执行方式"><a href="#SQL命令的两种执行方式" class="headerlink" title="SQL命令的两种执行方式"></a>SQL命令的两种执行方式</h4><ol><li>交互模式：客户端连接Mysql，输入一行，回车，服务器执行一行。<br>​                    —适用于临时性查看数据<br>​                    mysql -uroot 回车</li><li>脚本模式：客户端把要执行的多行命令写在一个脚本文件中，一次性的提交给服务器执行。<br>​                    —适用于<strong>批量操作</strong>数据。<br>​                    mysql -uroot &lt;C：/xampp/…/02.sql<br>​                    SQL syntax:语法的意思</li></ol><h4 id="SQL语法规范"><a href="#SQL语法规范" class="headerlink" title="SQL语法规范"></a>SQL语法规范</h4><ol><li>每条SQL语句以英文分号为结尾，一条语句可以跨越多行，见到（;）分号结束。</li></ol><p>若第N条SQL语句有语法错误，则后续所有语句不会再执行。</p><p>在SQL语句中不区分大小写。习惯上数据库关键字用大写，非关键字用小写。</p><p>SQL语句中还可以使用单行注释：#…或多行注释：/<em>….</em>/</p><p>注释的内容不会被服务器所执行。</p><h4 id="日常开发中常用的SQL命令"><a href="#日常开发中常用的SQL命令" class="headerlink" title="日常开发中常用的SQL命令"></a>日常开发中常用的SQL命令</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）丢弃数据库，如果存在的话;</span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> jd；</span><br><span class="line">（<span class="number">2</span>）创建新的数据库;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE jd；</span><br><span class="line">（<span class="number">3</span>）进入刚刚创建的数据库;</span><br><span class="line">USE jd;</span><br><span class="line">（<span class="number">4</span>）创建数据表;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student（</span><br><span class="line"> sid <span class="type">INT</span>,</span><br><span class="line"> name <span class="type">VARCHAR</span>(<span class="number">6</span>),</span><br><span class="line"> sex <span class="type">VARCHAR</span>(<span class="number">1</span>),</span><br><span class="line"> score <span class="type">INT</span></span><br><span class="line"> ）;</span><br><span class="line"> （<span class="number">5</span>）向数据表中插入纪录;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> student（表名称） <span class="keyword">VALUES</span>(<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;TOM&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;89&#x27;</span>),</span><br><span class="line">  (<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;gren&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;92&#x27;</span>),</span><br><span class="line">      (<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;Kate&#x27;</span>,<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;89&#x27;</span>);</span><br><span class="line">（<span class="number">6</span>）查询数据表中所有的记录;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> FORM student（表名称）;</span><br></pre></td></tr></table></figure><h4 id="增删改查—更改和删除"><a href="#增删改查—更改和删除" class="headerlink" title="增删改查—更改和删除"></a>增删改查—更改和删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>)更改记录</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span></span><br><span class="line">upwd<span class="operator">=</span><span class="string">&#x27;123&#x27;</span>,email<span class="operator">=</span><span class="string">&#x27;123@qq.com&#x27;</span> <span class="keyword">WHERE</span> uid<span class="operator">=</span><span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">(<span class="number">2</span>)删除记录</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> uid<span class="operator">=</span><span class="string">&#x27;3&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="数据库中的中文乱码问题"><a href="#数据库中的中文乱码问题" class="headerlink" title="数据库中的中文乱码问题"></a>数据库中的中文乱码问题</h3><table><thead><tr><th align="right">计算机中如何存储英文字符：</th><th align="left"></th></tr></thead><tbody><tr><td align="right">ASCII：</td><td align="left">总共有128个，对所有的英文字符及符号进行了编码。</td></tr><tr><td align="right">Latin-1：</td><td align="left">总共有256个，兼容ASCII，同时对欧洲符号进行编码</td></tr></tbody></table><table><thead><tr><th align="right">计算机存储中文字符：</th><th></th></tr></thead><tbody><tr><td align="right">GB2312：</td><td>对6000多常用的汉字进行编码，兼容ASCII码。</td></tr><tr><td align="right">GBK：</td><td>对20000多汉字进行编码，同时兼容GB2312。</td></tr><tr><td align="right">BIG5：</td><td>台湾繁体字编码，不兼容GB2312和GBK，兼容ASCII码。</td></tr><tr><td align="right">Unicode：</td><td>对世界上主要的语言的字符进行编码，兼容ASCII码，不兼容GBK，GB2312,BIG5等。</td></tr><tr><td align="right"></td><td>具体分为Utf-8，UTF-16，UTF-32三种存储方案。</td></tr></tbody></table><table><thead><tr><th>中文乱码产生的根源：</th></tr></thead><tbody><tr><td>MySQL默认使用latin-1编码，而这个编码不能存储中文的。</td></tr></tbody></table><table><thead><tr><th>解决MySQL存储中文乱码：</th></tr></thead><tbody><tr><td>（1）sql脚本文件另存为的编码</td></tr><tr><td>（2）客户端连接服务器使用的编码</td></tr><tr><td>（3）服务器端数据库存储数据使用的编码</td></tr><tr><td>（4）都统一使用UTF8编码。</td></tr><tr><td>（5）设置<strong>编辑器</strong>的默认编码：</td></tr><tr><td>Tools-&gt;preference-&gt;file-&gt;default encoding</td></tr></tbody></table><h3 id="MySQL列类型"><a href="#MySQL列类型" class="headerlink" title="MySQL列类型"></a>MySQL列类型</h3><p>​        <strong>列类型：在创建表的时候，指定列可以存储的数据类型。</strong><br>​        <strong>CREATE TABLE book (bid 列类型)；</strong></p><h4 id="数值类型—可以不加引号"><a href="#数值类型—可以不加引号" class="headerlink" title="数值类型—可以不加引号"></a><strong>数值类型—可以不加引号</strong></h4><table><thead><tr><th align="right">数值类型：</th><th></th></tr></thead><tbody><tr><td align="right">TINYINT：</td><td>微整型，占用一个字节，-128~127。</td></tr><tr><td align="right">SMALLINT：</td><td>小整型 占用2个字节，-32768~32767。</td></tr><tr><td align="right">INT：</td><td>整型    占用4个字节，-2147483648~2147483647。</td></tr><tr><td align="right">BIGINT：</td><td>大整型，占用8个字节，1byte=8bit</td></tr><tr><td align="right">FLOAT：</td><td>单精度浮点型，占4个字节，3.4*10的8次方或3.4E38，范围比INT大的多，但是精度不如INT，可能产生误差。</td></tr><tr><td align="right">DOUBLE：</td><td>双精度浮点型，占8个字节，占1.79E308，范围比BIGINT大的多，但是精度不如BGINT，可能产生误差。</td></tr><tr><td align="right">DECIMAL(M,D)：</td><td>定点小数，不会产生计算误差舍入，M代表总的有效位数，D代表小数点后有效位数。</td></tr><tr><td align="right">BOOL：</td><td>布尔型，取值只能是TRUE/1、FALSE/0,数据库在存储的时候使用TINYINT（1或0）</td></tr><tr><td align="right"></td><td><strong>TRUE</strong>和<strong>FALSE</strong>不能加引号。</td></tr></tbody></table><h4 id="字符串类型—必须加引号"><a href="#字符串类型—必须加引号" class="headerlink" title="字符串类型—必须加引号"></a><strong>字符串类型—必须加引号</strong></h4><table><thead><tr><th align="right">字符串类型：</th><th></th></tr></thead><tbody><tr><td align="right">VARCHAR（M）：</td><td>变长字符串，不会产生空间浪费，操作速度相对较慢，M不能超过65535。</td></tr><tr><td align="right">CHAR（M）：</td><td>定长字符串，可能产生空间浪费，操作速度相对较快，M不能超过255。</td></tr><tr><td align="right">TEXT（M）：</td><td>大型变长字符串，M不超过2G。</td></tr></tbody></table><h4 id="日期时间类型—必须加引号"><a href="#日期时间类型—必须加引号" class="headerlink" title="日期时间类型—必须加引号"></a><strong>日期时间类型—必须加引号</strong></h4><table><thead><tr><th>日期时间类型</th><th></th></tr></thead><tbody><tr><td>DATETIME：</td><td>日期时间类型     ;2018-11-2 15:18:30’</td></tr><tr><td>DATE:</td><td>日期类型 ‘2018-11-2’</td></tr><tr><td>time：</td><td>时间类型  ‘15:18:30’</td></tr></tbody></table><h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MySQL中的NULL含义：空的，空缺的；</span><br><span class="line">指应该有某个数据，但暂时还不能确定具体的值；</span><br><span class="line">例如：还没到发年终奖，未决定员工的部门，未确定部门经理是谁？</span><br></pre></td></tr></table></figure><h3 id="列约束"><a href="#列约束" class="headerlink" title="列约束"></a>列约束</h3><p>​    <strong>MySQL可以对插入的数据进行特定的检验，只有满足条件的数据才能插入成功，否则会提示”非法插入”，”禁止插入”</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：插入人的年龄范围是0~100之间。商品的价格大于0...</span><br></pre></td></tr></table></figure><h4 id="MySQL提供了六种列约束"><a href="#MySQL提供了六种列约束" class="headerlink" title="MySQL提供了六种列约束"></a><strong>MySQL提供了六种列约束</strong></h4><h5 id="（1）主键约束—PRIMARY-KEY"><a href="#（1）主键约束—PRIMARY-KEY" class="headerlink" title="（1）主键约束—PRIMARY KEY"></a>（1）主键约束—<font color="#1E90FF"><strong>PRIMARY KEY</strong></font></h5><p>​    声明了主键约束的列不能插入重复的值，如果主键上的数据是数值会自动按照由小到大的顺序排列—加快查找速度。注意：一个表中只能有一个主键。</p><h5 id="（2）唯一约束—UNIQUE"><a href="#（2）唯一约束—UNIQUE" class="headerlink" title="（2）唯一约束—UNIQUE"></a>（2）唯一约束—<font color="#1E90FF"><strong>UNIQUE</strong></font></h5><p>声明了唯一约束的列不能插入重复的值,但可以插入NULL，而且可以插入多个NULL。</p><p>NULL：关键字不能加引号</p><h5 id="（3）非空约束—NOT-NULL"><a href="#（3）非空约束—NOT-NULL" class="headerlink" title="（3）非空约束—NOT NULL"></a>（3）非空约束—<font color="#1E90FF"><strong>NOT NULL</strong></font></h5><p>声明非空约束的列上不能插入NULL值，如果插入的是NULL也不会报错，只是会显示空内容。</p><h5 id="（4）默认值约束—DEFAULT"><a href="#（4）默认值约束—DEFAULT" class="headerlink" title="（4）默认值约束—DEFAULT"></a>（4）默认值约束—<font color="#1E90FF"><strong>DEFAULT</strong></font></h5><p>可使用default关键字为列声明默认值；有以下两种用法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> xz_laptop <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;小米AIR&#x27;</span>,<span class="keyword">DEFAULT</span>);直接写<span class="keyword">default</span>，或者不写</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> xz_laptop(lid,title)<span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;苹果pro&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="（5）检查约束"><a href="#（5）检查约束" class="headerlink" title="（5）检查约束"></a>（5）检查约束</h5><p>检查约束可以对插入的数据范围进行验证</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">age TINYINT <span class="keyword">CHECK</span>(age<span class="operator">&gt;</span><span class="number">18</span> <span class="keyword">AND</span> age<span class="operator">&lt;</span><span class="number">60</span>)</span><br><span class="line">);</span><br><span class="line">注意：MySQL不支持,会降低插入和更新等操作速度效率。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="（6）外键约束—FOREIGN-KEY"><a href="#（6）外键约束—FOREIGN-KEY" class="headerlink" title="（6）外键约束—FOREIGN KEY"></a>（6）外键约束—<font color="#1E90FF"><strong>FOREIGN KEY</strong></font></h5><ol><li><p>声明了外键约束的列，取值必须在另一个表的主键上出现过</p></li><li><p>取值可以是NULL</p><p>注意：外键的列类型要和另外一个表主键的列类型一致。<br>​   FOREIGN KEY(familyid) REFERENCES xz_laptop_family(fid)</p></li><li><p>所有的列约束中，主键约束推荐使用—可以提高查询效率；但是其他的列约束是否使用根据项目而定，可以不用—会影响数据的插入和更新效率。</p></li></ol><h3 id="MySQL中的自增列"><a href="#MySQL中的自增列" class="headerlink" title="MySQL中的自增列"></a>MySQL中的自增列</h3><p>​    AUTO_INCREMENT：自动增加,假如一个列声明了自增列，无需手动赋值，直接指定为NULL，会自动获取当前的最大值，新纪录会执行+1然后插入。<br>​            <strong>注意：</strong><br>​                1.允许手动赋值<br>​                2.只用于整数型的主键列上</p><h3 id="项目中存储日期时间数据"><a href="#项目中存储日期时间数据" class="headerlink" title="项目中存储日期时间数据"></a>项目中存储日期时间数据</h3><p>​    储存的是距离计算机元年的毫秒数,使用BIGINT类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">计算机元年 1970-1-10:0:0</span><br><span class="line">1秒=1000毫秒</span><br><span class="line">数据库存储10001970-1-1  0:0:1</span><br><span class="line">1000*601970-1-10:1:0</span><br><span class="line">1000*60*601970-1-11:0:0</span><br><span class="line">2018年距离计算机元年的毫秒：48*365*24*60*60*1000</span><br></pre></td></tr></table></figure><h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）查询所有的列</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp;</span><br><span class="line">    <span class="operator">*</span>代表所有的列</span><br><span class="line">（<span class="number">2</span>）查询特定的列</span><br><span class="line">示例：查询所有员工的姓名，生日，工资</span><br><span class="line">    <span class="keyword">SELECT</span> ename,birthday,salary <span class="keyword">FROM</span> emp;</span><br><span class="line">练习：查询所有员工的编号，姓名，性别，工资</span><br><span class="line">        <span class="keyword">SELECT</span> eid,ename,sex,salary <span class="keyword">FROM</span> emp;</span><br><span class="line">（<span class="number">3</span>）给列取别名</span><br><span class="line">示例：查询所有员工的姓名和工资，列名使用汉字。</span><br><span class="line"><span class="keyword">SELECT</span> ename <span class="keyword">AS</span> 姓名,salary <span class="keyword">AS</span> 工资 <span class="keyword">FROM</span> emp;</span><br><span class="line">练习：查询所有员工编号，姓名，性别，生日，全部使用中文别名。</span><br><span class="line"><span class="keyword">SELECT</span> eid <span class="keyword">AS</span> 编号,ename <span class="keyword">AS</span> 姓名,sex <span class="keyword">AS</span> 性别,birthday <span class="keyword">AS</span> 生日 <span class="keyword">FROM</span> emp;</span><br><span class="line">练习：查询所有员工的编号，姓名，性别，生日，使用一个英文字母作为别名。</span><br><span class="line"><span class="keyword">SELECT</span> eid e,ename n,sex s,birthday b <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">AS</span>关键字可以省略</span><br><span class="line">（<span class="number">4</span>）只显示不同的值<span class="operator">/</span>合并相同的项</span><br><span class="line">练习：查询公司都有哪些性别的员工</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> sex <span class="keyword">FROM</span> emp;</span><br><span class="line">   （合并）</span><br><span class="line">练习：公司员工都分布在哪些部门</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> deptid <span class="keyword">FROM</span> emp;</span><br><span class="line">（<span class="number">5</span>）查询时执行运算</span><br><span class="line">示例：计算<span class="number">5</span><span class="operator">+</span><span class="number">3</span><span class="number">-7</span><span class="operator">/</span><span class="number">2</span><span class="operator">*</span><span class="number">9</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="number">5</span><span class="operator">+</span><span class="number">3</span><span class="number">-7</span><span class="operator">/</span><span class="number">2</span><span class="operator">*</span><span class="number">9</span> 结果;</span><br><span class="line">练习：查询所有员工的工资及其年薪。</span><br><span class="line"><span class="keyword">SELECT</span> ename 姓名,salary<span class="operator">*</span><span class="number">12</span> 年薪 <span class="keyword">FROM</span> emp;</span><br><span class="line">练习：假设所有员工工资加<span class="number">500</span>，年终奖<span class="number">5000</span>元，查询出姓名和年薪起别名</span><br><span class="line"><span class="keyword">SELECT</span> ename 姓名,(salary<span class="operator">+</span><span class="number">500</span>)<span class="operator">*</span><span class="number">12</span><span class="operator">+</span><span class="number">5000</span> 工资 <span class="keyword">FROM</span> emp;</span><br><span class="line">（<span class="number">6</span>）对查询的结果排序</span><br><span class="line">示例：查询所有员工的信息，结果按照由低到高排序</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span>; </span><br><span class="line">  （升序 ascend）</span><br><span class="line">   <span class="keyword">DESC</span></span><br><span class="line">示例：查询所有员工的信息，结果按照由高到低排序</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>; </span><br><span class="line">   （降序 descend）</span><br><span class="line">练习：查询所有员工的信息，结果按照年龄由大到小排序</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> birthday <span class="keyword">ASC</span>;</span><br><span class="line">练习：查询所有员工的信息，结果按照姓名的排序。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> ename <span class="keyword">ASC</span>;</span><br><span class="line">练习：查询所有员工的信息，按生日由大到小，若生日相同，再按照姓名升序排。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> birthday <span class="keyword">ASC</span>,ename <span class="keyword">ASC</span>;</span><br><span class="line">多个之间用逗号隔开</span><br><span class="line">练习：查询所有员工信息，按照工资由大到小排列，要求女员工必须排在男员工的前边。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">ORDER</span> <span class="keyword">BY</span> sex <span class="keyword">ASC</span>,salary <span class="keyword">DESC</span>;</span><br><span class="line">如果不加排序规则默认是按照升序排列。</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 可以按照数值、日期、字符串（字符串的编码）来排序。</span><br><span class="line">（<span class="number">7</span>）条件查询</span><br><span class="line">示例：查询编号为<span class="number">5</span>的员工工资。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">where</span> eid<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">SQL</span>语句中支持的比较运算符：</span><br><span class="line"><span class="operator">=</span><span class="operator">&gt;</span>      <span class="operator">&lt;</span>     <span class="operator">=</span>     <span class="operator">&gt;=</span>         <span class="operator">&lt;=</span>       <span class="operator">!=</span> </span><br><span class="line">大于 小于 等于 大于等于 小于等于 不等于</span><br><span class="line">练习：查询出工资大于等于<span class="number">6000</span>的员工所有信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary<span class="operator">&gt;=</span><span class="number">6000</span>;</span><br><span class="line">练习：查询出所有女员工的信息；</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line">练习：查询出员工姓名为king的所有信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename<span class="operator">=</span><span class="string">&#x27;king&#x27;</span>;</span><br><span class="line">练习：查询出不在<span class="number">10</span>部门的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptid<span class="operator">!=</span><span class="number">10</span>;</span><br><span class="line">练习：查询出<span class="number">1990</span>年之前出生的信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> birthday<span class="operator">&lt;</span><span class="string">&#x27;1990-1-1&#x27;</span>;</span><br><span class="line">练习：查询<span class="number">1993</span>年之后的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> birthday<span class="operator">&gt;</span><span class="string">&#x27;1993-12-31&#x27;</span>;</span><br><span class="line">练习：查询出没有明确部门的员工信息</span><br><span class="line">#<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptid<span class="operator">=</span><span class="keyword">NULL</span> 错误;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptid <span class="keyword">is</span> <span class="keyword">NULL</span>;</span><br><span class="line">注意:<span class="keyword">NULL</span>不能和任何值进行等于<span class="operator">/</span>不等于判定，包括<span class="keyword">NULL</span>自己。可以使用<span class="keyword">is</span> <span class="keyword">NULL</span>和<span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">NULL</span></span><br><span class="line">练习：查询所有有明确部门的员工信息。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptid <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br><span class="line">练习：查询出<span class="number">10</span>号部门所有女员工的信息。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptid<span class="operator">=</span><span class="number">10</span> <span class="keyword">AND</span> sex<span class="operator">=</span><span class="number">0</span>;</span><br><span class="line"><span class="keyword">AND</span>（并且） <span class="keyword">OR</span>（或者）</span><br><span class="line">练习：查询出<span class="number">10</span>号部门和<span class="number">30</span>号部门所有的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptid<span class="operator">=</span><span class="number">10</span> <span class="keyword">OR</span> deptid<span class="operator">=</span><span class="number">30</span>;</span><br><span class="line">练习：查询出工资在<span class="number">6000</span><span class="operator">~</span><span class="number">8000</span>之间所有员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary<span class="operator">&gt;=</span><span class="number">6000</span> <span class="keyword">AND</span> salary<span class="operator">&lt;=</span><span class="number">8000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> <span class="number">6000</span> <span class="keyword">AND</span> <span class="number">8000</span>;</span><br><span class="line">between...and... 大于等于第一个值，小于等于第二个值</span><br><span class="line">not....between...and</span><br><span class="line">练习：查询出工资不在<span class="number">6000</span><span class="operator">~</span><span class="number">8000</span>之间的所有员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary<span class="operator">&lt;</span><span class="number">6000</span> <span class="keyword">OR</span> salary<span class="operator">&gt;</span><span class="number">8000</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">6000</span> <span class="keyword">and</span> <span class="number">8000</span>;</span><br><span class="line">练习：查询出<span class="number">1990</span>年出生的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> birthday <span class="keyword">between</span> <span class="string">&#x27;1990-1-1&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;1990-12-31&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> birthday<span class="operator">&gt;=</span><span class="string">&#x27;1990-1-1&#x27;</span> <span class="keyword">AND</span> birthday<span class="operator">&lt;=</span><span class="string">&#x27;1990-12-31&#x27;</span>;</span><br><span class="line">练习：查询<span class="number">10</span>号和<span class="number">20</span>号部门的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptid<span class="operator">=</span><span class="number">10</span> <span class="keyword">OR</span> deptid<span class="operator">=</span><span class="number">20</span> <span class="keyword">OR</span> deptid<span class="operator">=</span><span class="number">30</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptid <span class="keyword">IN</span>(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>);</span><br><span class="line">练习：查询出不在<span class="number">10</span>号和<span class="number">20</span>号部门的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptid <span class="keyword">NOT</span> <span class="keyword">IN</span>(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">（<span class="number">8</span>）模糊条件查询</span><br><span class="line">示例：查出姓名中含有字母e的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;%e%&#x27;</span>;</span><br><span class="line">练习：查询出姓名以e结尾的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;%e&#x27;</span>;</span><br><span class="line">练习：查询出姓名中倒数第二个字符为e的员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename <span class="keyword">LIKE</span> <span class="string">&#x27;%e_&#x27;</span>;</span><br><span class="line"><span class="operator">%</span> 任意多个字符 大于等于<span class="number">0</span> 用<span class="keyword">LIKE</span>关键字</span><br><span class="line">_ 任意一个字符  等于<span class="number">1</span></span><br><span class="line">上述两个符号不能和等号<span class="operator">=</span>连用，必须使用<span class="keyword">LIKE</span></span><br><span class="line">（<span class="number">9</span>）分页查询</span><br><span class="line">分页显示：假如查询的结果集中有太多的记录，一次显示不完，可以分多页显示。</span><br><span class="line">第一页  开始 结束</span><br><span class="line">第一页   <span class="number">0</span>   <span class="number">4</span></span><br><span class="line">第二页   <span class="number">5</span>   <span class="number">9</span></span><br><span class="line">第三页   <span class="number">10</span>   <span class="number">14</span></span><br><span class="line">第四页   <span class="number">15</span>   <span class="number">19</span></span><br><span class="line">开始<span class="operator">=</span>(页面<span class="number">-1</span>)<span class="operator">*</span>每页数量</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="keyword">start</span>,count;</span><br><span class="line"><span class="keyword">start</span>:开始的值</span><br><span class="line">count：查询的数量</span><br><span class="line">示例：每页大小是<span class="number">5</span>，查询第<span class="number">1</span>页的数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">0</span>,<span class="number">5</span>;</span><br><span class="line">练习：每页大小是<span class="number">5</span>，查询第<span class="number">2</span>页的数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">5</span>,<span class="number">5</span>;</span><br><span class="line">练习：每页大小是<span class="number">5</span>，查询第三页的数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">10</span>,<span class="number">5</span>;</span><br><span class="line">练习：每页大小是<span class="number">5</span>，查询第四页的数据</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp LIMIT <span class="number">15</span>,<span class="number">5</span>;</span><br><span class="line">注意：LIMIT后边的两个数值不能加引号。</span><br><span class="line">SYNTAX语法错误提示</span><br><span class="line">综合：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp</span><br><span class="line">WHERE...</span><br><span class="line"><span class="keyword">ORDER</span> BY...</span><br><span class="line">LIMIT...</span><br><span class="line">练习：查询出所有的男员工工资最高的前三人。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="number">1</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span> LIMIT <span class="number">0</span>,<span class="number">3</span>;  </span><br></pre></td></tr></table></figure><h3 id="复杂查询"><a href="#复杂查询" class="headerlink" title="复杂查询"></a>复杂查询</h3><h4 id="聚合查询-分组查询"><a href="#聚合查询-分组查询" class="headerlink" title="聚合查询/分组查询"></a>聚合查询/分组查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">示例：查询出所有员工的数量</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(eid) <span class="keyword">FROM</span> emp;</span><br><span class="line">练习：使用员工的姓名这一列来查询员工数量</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(ename) <span class="keyword">FROM</span> emp;</span><br><span class="line">练习：使用员工的部门编号这一列来查询员工数量</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp;</span><br><span class="line">练习：查询所有男员工的数量</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> sex<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">聚合函数：</span><br><span class="line">函数，就是一个功能体，提供数据，产出结果。</span><br><span class="line"><span class="built_in">COUNT</span>(....)<span class="operator">/</span><span class="built_in">SUM</span>(...)<span class="operator">/</span><span class="built_in">AVG</span>(...)<span class="operator">/</span><span class="built_in">MAX</span>(...)<span class="operator">/</span><span class="built_in">MIN</span>(...)</span><br><span class="line">练习：查询所有员工工资综合多少</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary) <span class="keyword">FROM</span> emp;</span><br><span class="line">练习：查询出所有员工平均工资</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary) <span class="keyword">FROM</span> emp;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUM</span>(salary)<span class="operator">/</span><span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp;</span><br><span class="line">练习：查询出工资最高的员工</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(salary) <span class="keyword">FROM</span> emp;</span><br><span class="line">练习：查询出工资最低的员工</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(salary) <span class="keyword">FROM</span> emp;</span><br><span class="line">练习：查询出年龄最大的员工</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MIN</span>(birthday) <span class="keyword">FROM</span> emp;</span><br><span class="line">分组查询：只能查询分组条件和聚合函数</span><br><span class="line">示例：查询出每个部门的员工数量是多少</span><br><span class="line"><span class="keyword">SELECT</span> deptid,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line">练习：查询出男女员工的平均工资，还有最高工资，最低工资</span><br><span class="line"><span class="keyword">SELECT</span> sex,<span class="built_in">AVG</span>(salary),<span class="built_in">MAX</span>(salary),<span class="built_in">MIN</span>(salary) <span class="keyword">FROM</span> emp <span class="keyword">GROUP</span> <span class="keyword">BY</span> sex;</span><br><span class="line">函数补充：<span class="keyword">YEAR</span>(...) 获取日期中的年份</span><br><span class="line"> <span class="keyword">MONTH</span>(...)获取日期中的月份</span><br><span class="line"> <span class="keyword">DAY</span>(....)获取日期中的日</span><br><span class="line">示例：查询出<span class="number">1991</span>年出生的员工所有信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(birthday)<span class="operator">=</span><span class="number">1991</span>;</span><br><span class="line">练习：查询出三月份出生的员工所有信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> <span class="keyword">MONTH</span>(birthday)<span class="operator">=</span><span class="number">3</span>;</span><br><span class="line">练习：查询出<span class="number">5</span>号出生的员工所有信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> <span class="keyword">DAY</span>(birthday)<span class="operator">=</span><span class="number">5</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> <span class="keyword">YEAR</span><span class="operator">-</span><span class="keyword">MONTH</span><span class="operator">-</span><span class="keyword">DAY</span>(birthday)<span class="operator">=</span><span class="number">1990</span><span class="number">-05</span><span class="number">-5</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">把一个<span class="keyword">SQL</span>语句的查询结果作为另一个<span class="keyword">SQL</span>语句的查询条件</span><br><span class="line">示例：查询出研发部所有的员工信息</span><br><span class="line">步骤<span class="number">1</span>：查询出研发部的部门编号—<span class="number">10</span></span><br><span class="line"><span class="keyword">SELECT</span> did <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> dname<span class="operator">=</span><span class="string">&#x27;研发部&#x27;</span>;</span><br><span class="line">步骤<span class="number">2</span>：根据研发部的部门编号查询员工信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span><span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptid<span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">综合：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> deptid<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">SELECT</span> did <span class="keyword">FROM</span> dept <span class="keyword">WHERE</span> dname<span class="operator">=</span><span class="string">&#x27;研发部&#x27;</span></span><br><span class="line">);</span><br><span class="line">练习：查询出比tom工资高的员工的所有信息</span><br><span class="line">步骤<span class="number">1</span>：查询出TOM的工资</span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line">步骤<span class="number">2</span>：查询出工资比<span class="number">6000</span>高的员工所有信息</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary<span class="operator">&gt;</span><span class="number">6000</span>;</span><br><span class="line"></span><br><span class="line">综合：<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> salary<span class="operator">&gt;</span>(</span><br><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span></span><br><span class="line">);</span><br><span class="line">练习：查询出和tom同一年出生的员工信息</span><br><span class="line">步骤<span class="number">1</span>：<span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(birthday) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span>;</span><br><span class="line">步骤<span class="number">2</span>：<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(birthday)<span class="operator">=</span><span class="number">1990</span>;</span><br><span class="line">综合：<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(birthday)<span class="operator">=</span>(</span><br><span class="line"> <span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(birthday) <span class="keyword">FROM</span> emp <span class="keyword">WHERE</span> ename<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">示例：查询出所有员工的姓名及其部门名称。</span><br><span class="line"><span class="keyword">SELECT</span> ename,dname <span class="keyword">FROM</span> emp,dept;</span><br><span class="line">错误：产生笛卡尔积两个表里数据自由组合。</span><br><span class="line">多表查询如何避免产生笛卡尔积，添加查询条件</span><br><span class="line"><span class="keyword">SELECT</span> ename,dname <span class="keyword">FROM</span> emp,dept <span class="keyword">WHERE</span> deptid<span class="operator">=</span>did;</span><br><span class="line">上述多表查询语法是<span class="keyword">SQL</span><span class="number">-92</span>中，无法查询出没有部门的员工，也无法查询出没有员工的部门。</span><br><span class="line"><span class="keyword">SQL</span><span class="number">-99</span>中提出了新的多表查询方法。</span><br><span class="line">（<span class="number">1</span>）内连接INNER....JOIN....ON和SQL92结果一致</span><br><span class="line"><span class="keyword">SELECT</span> ename,dname <span class="keyword">FROM</span> emp <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> deptid<span class="operator">=</span>did;</span><br><span class="line">（<span class="number">2</span>）左外连接 <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> JOIN.....ON....</span><br><span class="line"><span class="keyword">SELECT</span> ename,dname <span class="keyword">FROM</span> emp <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> deptid<span class="operator">=</span>did;</span><br><span class="line">查询结果是左侧所有的记录都显示；<span class="keyword">outer</span>可以省略</span><br><span class="line">（<span class="number">3</span>）右外连接<span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> JOIN....ON....</span><br><span class="line"><span class="keyword">SELECT</span> ename,dname <span class="keyword">FROM</span> emp <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> deptid<span class="operator">=</span>did;</span><br><span class="line">查询结果是右侧所有记录都显示；<span class="keyword">outer</span>可以省略</span><br><span class="line">（<span class="number">4</span>）全连接 <span class="keyword">FULL</span> <span class="keyword">JOIN</span></span><br><span class="line">显示左侧和右侧所有记录—MySQL不支持</span><br><span class="line"><span class="keyword">UNION</span> 合并相同的项;</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span> 不合并相同的项;</span><br><span class="line">(<span class="keyword">SELECT</span> ename,dname <span class="keyword">FROM</span> emp <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> deptid<span class="operator">=</span>did)</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line">(<span class="keyword">SELECT</span> ename,dname <span class="keyword">FROM</span> emp <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dept <span class="keyword">ON</span> deptid<span class="operator">=</span>did);</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/8.0/en/&quot;&gt;官网参考手册&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;数据库的概述&quot;&gt;&lt;a href=&quot;#数据库的概述&quot; class=&quot;headerlink&quot; title=&quot;数据库的概述&quot;&gt;&lt;/a&gt;数据库的概述&lt;/h3&gt;&lt;p&gt;​        Database（数据库，以特定的结构批量存储数据的软件）&lt;br&gt;​        数据库的发展史：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;网状数据库-&amp;gt;层次型数据库-&amp;gt;关系型数据库-&amp;gt;非关系型数据库&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="后端开发" scheme="http://example.com/categories/%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>

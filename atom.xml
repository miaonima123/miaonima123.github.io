<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miao Chen</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-09T13:44:00.598Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Miao Chen</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/03/15/%E8%8D%89%E7%A8%BF/"/>
    <id>http://example.com/2022/03/15/%E8%8D%89%E7%A8%BF/</id>
    <published>2022-03-15T15:21:52.172Z</published>
    <updated>2022-02-09T13:44:00.598Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org #配置国内的镜像源</span><br><span class="line">npm info hexo # 测试查看hexo的安装信息，是否是taobao.org的源</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com  安装淘宝镜像</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo #通过npm安装hexo博客框架</span><br><span class="line"># -g 指定全局安装，可以使用hexo命令</span><br><span class="line">hexo init test 初始化创建，创建test文件夹</span><br><span class="line">cd test 进入目录</span><br><span class="line">npm install 进一步安装hexo所需文件</span><br></pre></td></tr></table></figure><h3 id="发现问题"><a href="#发现问题" class="headerlink" title="发现问题"></a>发现问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hexo : 无法加载文件 D:\node\nvm\v16.13.2\hexo.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go.microsoft</span><br><span class="line">.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ hexo -v</span><br><span class="line">+ ~~~~</span><br><span class="line">    + CategoryInfo          : SecurityError: (:) []，PSSecurityException</span><br><span class="line">    + FullyQualifiedErrorId : UnauthorizedAccess</span><br><span class="line">hexo框架权限不足</span><br></pre></td></tr></table></figure><p>解决问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1、以管理员身份运行 Windows PowerShell(管理员)</span><br><span class="line">2、输入 set-ExecutionPolicy RemoteSigned ，然后输入A 回车</span><br><span class="line">3、还可以通过 get-ExecutionPolicy 查看当前的状态</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"> <span class="attr">repo:</span> <span class="string">https://gitee.com/mcweblog/mcweblog</span></span><br><span class="line"> <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line"><span class="comment">#注：冒号后面需携空格</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">“ssh-keygen -t rsa -C  youremail@example.com”</span><br><span class="line">git config --global user.email *********@qq.com # 设置gitee邮箱（gitee的注册邮箱）</span><br><span class="line">git config --global user.name &#x27;****&#x27;</span><br></pre></td></tr></table></figure><p>gitee账号密码 mcweblog zxcvbvzx123</p>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/03/14/hello-world/"/>
    <id>http://example.com/2022/03/14/hello-world/</id>
    <published>2022-03-14T07:33:30.191Z</published>
    <updated>2022-02-14T12:03:44.379Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p>测试网页内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>数据结构与算法笔记</title>
    <link href="http://example.com/2020/11/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/11/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-03T03:46:48.000Z</published>
    <updated>2020-11-03T04:03:07.250Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript笔记</title>
    <link href="http://example.com/2020/11/02/JavaScript%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2020/11/02/JavaScript%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-02T11:47:24.000Z</published>
    <updated>2020-11-02T11:47:24.236Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>各种问题总结 😓</title>
    <link href="http://example.com/2020/10/30/%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2020/10/30/%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-30T08:25:43.000Z</published>
    <updated>2020-10-30T09:01:41.658Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>VScode工具每次打开会替换窗口</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">workbench.<span class="property">editor</span>.<span class="property">enablePreview</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>cnpm : 无法加载文件 node_global\cnpm.ps1，因为在此系统上禁止运行脚本</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//更改权限 </span><br><span class="line">以管理员身份打开PowerShell执行Start-Process powershell -Verb runAs</span><br><span class="line">继续重新执行set-ExecutionPolicy RemoteSigned 选择 Y</span><br></pre></td></tr></table></figure><blockquote><p>博客在上传云服务器时候报错 Error Deployer not found:git</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-de</span><br></pre></td></tr></table></figure><h2 id="nvm管理工具命令和用法"><a href="#nvm管理工具命令和用法" class="headerlink" title="nvm管理工具命令和用法"></a>nvm管理工具命令和用法</h2><p><a href="https://github.com/coreybutler/nvm-windows/releases">nvm下载地址</a></p><p><strong>nvm-setup.zip 安装版 推荐使用</strong></p><ol><li><p>查看当前系统nodejs版本和列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nvm list [available]</span><br><span class="line">可选参数表示所有可下载列表</span><br></pre></td></tr></table></figure></li><li><p>安装版本号可自定义具体参数可按照第一条</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 12.16.1</span><br></pre></td></tr></table></figure></li><li><p>使用特定版本（第一条列表里显示有的）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 12.16.1</span><br></pre></td></tr></table></figure></li><li><p>卸载不需要版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall 版本号</span><br></pre></td></tr></table></figure></li></ol><p><strong>nvm -v</strong>检查当前nvm版本  常用功能就以上 其他命令可参考下面链接</p><blockquote><p><a href="https://www.cnblogs.com/gaozejie/p/10689742.html">https://www.cnblogs.com/gaozejie/p/10689742.html</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;VScode工具每次打开会替换窗口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin</summary>
      
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="常见问题" scheme="http://example.com/tags/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>系统API</title>
    <link href="http://example.com/2020/06/05/%E7%B3%BB%E7%BB%9Fapi/"/>
    <id>http://example.com/2020/06/05/%E7%B3%BB%E7%BB%9Fapi/</id>
    <published>2020-06-05T13:46:28.000Z</published>
    <updated>2020-06-05T15:33:47.807Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-后端环境搭建"><a href="#一-后端环境搭建" class="headerlink" title="一. 后端环境搭建"></a>一. 后端环境搭建</h1><h2 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h2><p>基础配置 config/app.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 应用名称</span></span><br><span class="line">    <span class="string">&#x27;app_name&#x27;</span>               =&gt; <span class="string">&#x27;后台API&#x27;</span>,</span><br><span class="line">    <span class="comment">// 应用地址</span></span><br><span class="line">    <span class="string">&#x27;app_host&#x27;</span>               =&gt; <span class="string">&#x27;http://miaochen.cloud/&#x27;</span>,</span><br><span class="line">    <span class="comment">// 应用调试模式</span></span><br><span class="line">    <span class="string">&#x27;app_debug&#x27;</span>              =&gt; <span class="literal">true</span>,</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// 是否强制使用路由</span></span><br><span class="line">    <span class="string">&#x27;url_route_must&#x27;</span>         =&gt; <span class="literal">true</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 路由是否完全匹配</span></span><br><span class="line">    <span class="string">&#x27;route_complete_match&#x27;</span>   =&gt; <span class="literal">true</span>,</span><br><span class="line">]   </span><br></pre></td></tr></table></figure><p>数据库配置 config/database.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// 数据库类型</span></span><br><span class="line">    <span class="string">&#x27;type&#x27;</span>            =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">    <span class="comment">// 服务器地址</span></span><br><span class="line">    <span class="string">&#x27;hostname&#x27;</span>        =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="comment">// 数据库名</span></span><br><span class="line">    <span class="string">&#x27;database&#x27;</span>        =&gt; <span class="string">&#x27;qiushibkapi&#x27;</span>,</span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>        =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>        =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="comment">// 端口</span></span><br><span class="line">    <span class="string">&#x27;hostport&#x27;</span>        =&gt; <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 数据集返回类型</span></span><br><span class="line">    <span class="string">&#x27;resultset_type&#x27;</span>  =&gt; <span class="string">&#x27;collection&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="2-返回状态码"><a href="#2-返回状态码" class="headerlink" title="2.返回状态码"></a>2.返回状态码</h2><table><thead><tr><th align="left">状态码</th><th>含义</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">200</td><td>OK</td><td align="left">请求成功</td></tr><tr><td align="left">201</td><td>CREATED</td><td align="left">创建成功</td></tr><tr><td align="left">202</td><td>ACCEPTED</td><td align="left">更新成功</td></tr><tr><td align="left">400</td><td>BAD REQUEST</td><td align="left">请求的地址不存在或者包含不支持的参数</td></tr><tr><td align="left">401</td><td>UNAUTHORIZED</td><td align="left">未授权</td></tr><tr><td align="left">403</td><td>FORBIDDEN</td><td align="left">被禁止访问</td></tr><tr><td align="left">404</td><td>NOT FOUND</td><td align="left">请求的资源不存在</td></tr><tr><td align="left">500</td><td>INTERNAL SERVER ERROR</td><td align="left">内部错误</td></tr></tbody></table><h1 id="二-【api开发】登录模块开发"><a href="#二-【api开发】登录模块开发" class="headerlink" title="二.【api开发】登录模块开发"></a>二.【api开发】登录模块开发</h1><h2 id="1-数据表设计"><a href="#1-数据表设计" class="headerlink" title="1. 数据表设计"></a>1. 数据表设计</h2><blockquote><p>用户表         user</p><p>id<br>username    用户名<br>userpic         头像<br>password     密码<br>phone           手机号码<br>email             邮箱<br>create_time      创建时间</p><p>status                状态  0禁用 1启用</p></blockquote><blockquote><p>用户资料表        userinfo</p><p>id<br>user_id        用户id<br>sex               性别<br>age               年龄<br>qg             情感<br>job            工作<br>birthday           生日<br>path              家乡</p></blockquote><blockquote><p>第三方登录表    user_bind<br>id<br>type            第三方类型（微信，微博，QQ，其他）<br>openid           openid<br>userid            用户id（默认是0）<br>nickname          第三方昵称<br>avatarurl           第三方头像</p></blockquote><h2 id="2-封装全局异常类"><a href="#2-封装全局异常类" class="headerlink" title="2. 封装全局异常类"></a>2. 封装全局异常类</h2><h2 id="3-封装全局验证层"><a href="#3-封装全局验证层" class="headerlink" title="3. 封装全局验证层"></a>3. 封装全局验证层</h2><h2 id="4-封装基类控制器"><a href="#4-封装基类控制器" class="headerlink" title="4. 封装基类控制器"></a>4. 封装基类控制器</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//api返回结果</span></span><br><span class="line"><span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showResCode</span>(<span class="params"><span class="variable">$msg</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$data</span> = [], <span class="variable">$code</span>=<span class="number">200</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$res</span> = [</span><br><span class="line">        <span class="string">&#x27;msg&#x27;</span>=&gt; <span class="variable">$msg</span> ? <span class="variable">$msg</span>:<span class="string">&#x27;未定义消息&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;data&#x27;</span>=&gt; <span class="variable">$data</span> ? <span class="variable">$data</span>:[]</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$res</span>,<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//api返回无数据结果</span></span><br><span class="line"><span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showResCodeWithOutData</span>(<span class="params"><span class="variable">$msg</span>=<span class="string">&#x27;&#x27;</span>,<span class="variable">$code</span>=<span class="number">200</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCode</span>(<span class="variable">$msg</span>,[],<span class="variable">$code</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-手机验证码api"><a href="#5-手机验证码api" class="headerlink" title="5. 手机验证码api"></a>5. 手机验证码api</h2><h4 id="获取验证码流程："><a href="#获取验证码流程：" class="headerlink" title="获取验证码流程："></a>获取验证码流程：</h4><p>（1）接收手机号码</p><p>（2）验证手机号码合法性</p><p>（3）判断是否已经获取过验证码（判断缓存中是否存在当前手机号的验证码，有则提示“你已经获取过验证码了”）</p><p>（4）生成4位数随机数字</p><p>（5）发送短信（阿里大于）</p><p>（6）手机号=&gt;验证码 的形式保存在缓存中（60秒）</p><p>（7）提示成功</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送验证码</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">sendCode</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取用户提交手机号码</span></span><br><span class="line">    <span class="variable">$phone</span> = <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">param</span>(<span class="string">&#x27;phone&#x27;</span>);</span><br><span class="line">    <span class="comment">// 判断是否已经发送过</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title class_">Cache</span>::<span class="title function_ invoke__">get</span>(<span class="variable">$phone</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;你操作得太快了&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30001</span>]);</span><br><span class="line">    <span class="comment">// 生成4位验证码</span></span><br><span class="line">    <span class="variable">$code</span> = <span class="title function_ invoke__">random_int</span>(<span class="number">1000</span>,<span class="number">9999</span>);</span><br><span class="line">    <span class="comment">// 判断是否开启验证码功能</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.isopen&#x27;</span>))&#123;</span><br><span class="line">        <span class="title class_">Cache</span>::<span class="title function_ invoke__">set</span>(<span class="variable">$phone</span>,<span class="variable">$code</span>,<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.expire&#x27;</span>));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;验证码：&#x27;</span>.<span class="variable">$code</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30005</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发送验证码</span></span><br><span class="line">    <span class="variable">$res</span> = <span class="title class_">AlismsController</span>::<span class="title function_ invoke__">SendSMS</span>(<span class="variable">$phone</span>,<span class="variable">$code</span>);</span><br><span class="line">    <span class="comment">//发送成功 写入缓存</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res</span>[<span class="string">&#x27;Code&#x27;</span>]==<span class="string">&#x27;OK&#x27;</span>) <span class="keyword">return</span> <span class="title class_">Cache</span>::<span class="title function_ invoke__">set</span>(<span class="variable">$phone</span>,<span class="variable">$code</span>,<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.expire&#x27;</span>));</span><br><span class="line">    <span class="comment">// 无效号码</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res</span>[<span class="string">&#x27;Code&#x27;</span>]==<span class="string">&#x27;isv.MOBILE_NUMBER_ILLEGAL&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;无效号码&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30002</span>]);</span><br><span class="line">    <span class="comment">// 触发日限制</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$res</span>[<span class="string">&#x27;Code&#x27;</span>]==<span class="string">&#x27;isv.DAY_LIMIT_CONTROL&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;今日你已经发送超过限制，改日再来&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30003</span>]);</span><br><span class="line">    <span class="comment">// 发送失败</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;发送失败&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30004</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>config/api.php（自定义配置文件）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="comment">// token失效时间，0代表永不失效</span></span><br><span class="line">    <span class="string">&#x27;token_expire&#x27;</span>=&gt;<span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 阿里大于</span></span><br><span class="line">    <span class="string">&#x27;aliSMS&#x27;</span>=&gt;[</span><br><span class="line">        <span class="string">&#x27;isopen&#x27;</span>=&gt; <span class="literal">false</span>,<span class="comment">//开启阿里大于</span></span><br><span class="line">        <span class="string">&#x27;accessKeyId&#x27;</span>=&gt;<span class="string">&#x27;&lt;accessKeyId&gt;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;accessSecret&#x27;</span>=&gt;<span class="string">&#x27;&lt;accessSecret&gt;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;regionId&#x27;</span>=&gt;<span class="string">&#x27;cn-hangzhou&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;product&#x27;</span>=&gt;<span class="string">&#x27;Dysmsapi&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;version&#x27;</span>=&gt;<span class="string">&#x27;2017-05-25&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;SignName&#x27;</span>=&gt;<span class="string">&#x27;&lt;YourSignName&gt;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;TemplateCode&#x27;</span>=&gt;<span class="string">&#x27;&lt;YourTemplateCode&gt;&#x27;</span>,</span><br><span class="line">        <span class="comment">// 验证码发送时间间隔（60秒）</span></span><br><span class="line">        <span class="string">&#x27;expire&#x27;</span>=&gt;<span class="number">60</span></span><br><span class="line">    ]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="对接阿里大于sdk"><a href="#对接阿里大于sdk" class="headerlink" title="对接阿里大于sdk"></a>对接阿里大于sdk</h4><blockquote><p>文档地址：</p><p><a href="https://help.aliyun.com/document_detail/112186.html?spm=a2c4g.11174283.6.635.37eb2c42jFVxfS">https://help.aliyun.com/document_detail/112186.html?spm=a2c4g.11174283.6.635.37eb2c42jFVxfS</a></p></blockquote><p>（1）composer安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer require alibabacloud/client</span><br></pre></td></tr></table></figure><p>（2）使用<a href="https://api.aliyun.com/#/?product=Dysmsapi&lang=PHP">OpenAPI Explorer</a>来生成相关API的Demo</p><blockquote><p>OpenAPI Explorer地址：</p><p><a href="https://api.aliyun.com/?spm=a2c4g.11186623.2.13.6a294e6afatgeU#/?product=Dysmsapi&amp;lang=PHP">https://api.aliyun.com/?spm=a2c4g.11186623.2.13.6a294e6afatgeU#/?product=Dysmsapi&amp;lang=PHP</a></p></blockquote><p>（3）\app\common\controller\AliSMSController.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">common</span>\<span class="title class_">controller</span>;</span><br><span class="line"><span class="comment">// 引入阿里sdk</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">AlibabaCloud</span>\<span class="title">Client</span>\<span class="title">AlibabaCloud</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">AlibabaCloud</span>\<span class="title">Client</span>\<span class="title">Exception</span>\<span class="title">ClientException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">AlibabaCloud</span>\<span class="title">Client</span>\<span class="title">Exception</span>\<span class="title">ServerException</span>;</span><br><span class="line"><span class="comment">// 引入异常类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">lib</span>\<span class="title">exception</span>\<span class="title">BaseException</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlismsController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">SendSMS</span>(<span class="params"><span class="variable">$phone</span>,<span class="variable">$code</span></span>)</span>&#123;</span><br><span class="line">        <span class="title class_">AlibabaCloud</span>::<span class="title function_ invoke__">accessKeyClient</span>(<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.accessKeyId&#x27;</span>),<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.accessSecret&#x27;</span>))-&gt;<span class="title function_ invoke__">regionId</span>(<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.regionId&#x27;</span>))-&gt;<span class="title function_ invoke__">asGlobalClient</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="variable">$option</span>=[</span><br><span class="line">                <span class="string">&#x27;query&#x27;</span> =&gt; [</span><br><span class="line">                    <span class="string">&#x27;RegionId&#x27;</span> =&gt; <span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.regionId&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;PhoneNumbers&#x27;</span> =&gt; <span class="variable">$phone</span>,</span><br><span class="line">                    <span class="string">&#x27;SignName&#x27;</span> =&gt;<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.SignName&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;TemplateCode&#x27;</span> =&gt;<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.TemplateCode&#x27;</span>),</span><br><span class="line">                    <span class="string">&#x27;TemplateParam&#x27;</span> =&gt;<span class="string">&#x27;&#123;&quot;code&quot;:&quot;&#x27;</span>.<span class="variable">$code</span>.<span class="string">&#x27;&quot;&#125;&#x27;</span>,</span><br><span class="line">                ],</span><br><span class="line">            ];</span><br><span class="line">            <span class="variable">$result</span> = <span class="title class_">AlibabaCloud</span>::<span class="title function_ invoke__">rpcRequest</span>()</span><br><span class="line">                    -&gt;<span class="title function_ invoke__">product</span>(<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.product&#x27;</span>))</span><br><span class="line">                    <span class="comment">// -&gt;scheme(&#x27;https&#x27;) // https | http</span></span><br><span class="line">                    -&gt;<span class="title function_ invoke__">version</span>(<span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.aliSMS.version&#x27;</span>))</span><br><span class="line">                    -&gt;<span class="title function_ invoke__">action</span>(<span class="string">&#x27;SendSms&#x27;</span>)</span><br><span class="line">                    -&gt;<span class="title function_ invoke__">method</span>(<span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line">                    -&gt;<span class="title function_ invoke__">options</span>(<span class="variable">$option</span>)-&gt;<span class="title function_ invoke__">request</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getErrorMessage</span>(),<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30000</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ServerException <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getErrorMessage</span>(),<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30000</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）使用方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">controller</span>\<span class="title">AliSMSController</span>;</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 生成验证码</span></span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">random_int</span>(<span class="number">1000</span>,<span class="number">9999</span>);</span><br><span class="line"><span class="comment">// 发送短信</span></span><br><span class="line"><span class="title class_">AliSMSController</span>::<span class="title function_ invoke__">SendSMS</span>(<span class="variable">$phone</span>,<span class="variable">$code</span>);</span><br></pre></td></tr></table></figure><h2 id="6-路由分组操作"><a href="#6-路由分组操作" class="headerlink" title="6.路由分组操作"></a>6.路由分组操作</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 发送验证码</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;user/sendcode&#x27;</span>,<span class="string">&#x27;api/:version.User/sendCode&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="7-手机号登录api"><a href="#7-手机号登录api" class="headerlink" title="7. 手机号登录api"></a>7. 手机号登录api</h2><p>controller层：application\api\controller\v1\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手机号码登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">phoneLogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 验证登录信息</span></span><br><span class="line">    (<span class="keyword">new</span> <span class="title class_">UserValidate</span>())-&gt;<span class="title function_ invoke__">goCheck</span>(<span class="string">&#x27;phonelogin&#x27;</span>);</span><br><span class="line">    <span class="comment">// 手机登录</span></span><br><span class="line">    <span class="variable">$token</span> = (<span class="keyword">new</span> <span class="title class_">UserModel</span>())-&gt;<span class="title function_ invoke__">phoneLogin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCode</span>(<span class="string">&#x27;登录成功&#x27;</span>,[<span class="string">&#x27;token&#x27;</span>=&gt;<span class="variable">$token</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route层：route\route.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 手机登录</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;user/phonelogin&#x27;</span>,<span class="string">&#x27;api/:version.User/phoneLogin&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>validate层：application\common\validate\UserValidate.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$rule</span> = [</span><br><span class="line">    ...</span><br><span class="line">        <span class="string">&#x27;phone&#x27;</span>=&gt;<span class="string">&#x27;require|mobile&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;code&#x27;</span>=&gt;<span class="string">&#x27;require|number|length:4|isPefectCode&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$scene</span> = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;phonelogin&#x27;</span>=&gt;[<span class="string">&#x27;phone&#x27;</span>,<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line">    ...</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>BaseValidate：application\common\validate\BaseValidate.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 验证码验证</span></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">isPefectCode</span>(<span class="params"><span class="variable">$value</span>, <span class="variable">$rule</span>=<span class="string">&#x27;&#x27;</span>, <span class="variable">$data</span>=<span class="string">&#x27;&#x27;</span>, <span class="variable">$field</span>=<span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 验证码不存在</span></span><br><span class="line">    <span class="variable">$beforeCode</span> = <span class="title function_ invoke__">cache</span>(<span class="variable">$data</span>[<span class="string">&#x27;phone&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$beforeCode</span>) <span class="keyword">return</span> <span class="string">&quot;请重新获取验证码&quot;</span>;</span><br><span class="line">    <span class="comment">// 验证验证码</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$value</span> != <span class="variable">$beforeCode</span>) <span class="keyword">return</span> <span class="string">&quot;验证码错误&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>model层：application\common\model\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动写入时间</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$autoWriteTimestamp</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定用户信息表</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">userinfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">hasOne</span>(<span class="string">&#x27;Userinfo&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断用户是否存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isExist</span>(<span class="params"><span class="variable">$arr</span>=[]</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_array</span>(<span class="variable">$arr</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;phone&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 手机号码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;phone&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;phone&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手机登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">phoneLogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取所有参数</span></span><br><span class="line">    <span class="variable">$param</span> = <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">param</span>();</span><br><span class="line">    <span class="comment">// 验证用户是否存在</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isExist</span>([<span class="string">&#x27;phone&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;phone&#x27;</span>]]);</span><br><span class="line">    <span class="comment">// 用户不存在，直接注册</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$user</span>)&#123;</span><br><span class="line">        <span class="comment">// 用户主表</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="built_in">self</span>::<span class="title function_ invoke__">create</span>([</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;phone&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;phone&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;phone&#x27;</span>],</span><br><span class="line">            <span class="comment">// &#x27;password&#x27;=&gt;password_hash($param[&#x27;phone&#x27;],PASSWORD_DEFAULT)</span></span><br><span class="line">        ]);</span><br><span class="line">        <span class="comment">// 在用户信息表创建对应的记录（用户存放用户其他信息）</span></span><br><span class="line">        <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">userinfo</span>()-&gt;<span class="title function_ invoke__">create</span>([ <span class="string">&#x27;user_id&#x27;</span>=&gt;<span class="variable">$user</span>-&gt;id ]);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">CreateSaveToken</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用户是否被禁用</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkStatus</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>());</span><br><span class="line">    <span class="comment">// 登录成功，返回token</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">CreateSaveToken</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成并保存token</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">CreateSaveToken</span>(<span class="params"><span class="variable">$arr</span>=[]</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 生成token</span></span><br><span class="line">    <span class="variable">$token</span> = <span class="title function_ invoke__">sha1</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">uniqid</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">microtime</span>(<span class="literal">true</span>)),<span class="literal">true</span>)));</span><br><span class="line">    <span class="variable">$arr</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="variable">$token</span>;</span><br><span class="line">    <span class="comment">// 登录过期时间</span></span><br><span class="line">    <span class="variable">$expire</span> =<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;expires_in&#x27;</span>,<span class="variable">$arr</span>) ? <span class="variable">$arr</span>[<span class="string">&#x27;expires_in&#x27;</span>] : <span class="title function_ invoke__">config</span>(<span class="string">&#x27;api.token_expire&#x27;</span>);</span><br><span class="line">    <span class="comment">// 保存到缓存中</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Cache</span>::<span class="title function_ invoke__">set</span>(<span class="variable">$token</span>,<span class="variable">$arr</span>,<span class="variable">$expire</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>();</span><br><span class="line">    <span class="comment">// 返回token</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$token</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户是否被禁用</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params"><span class="variable">$arr</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$status</span> = <span class="variable">$arr</span>[<span class="string">&#x27;status&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$status</span>==<span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;该用户已被禁用&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20001</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置文件（config/api.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// token过期时间</span></span><br><span class="line">    <span class="string">&#x27;token_expire&#x27;</span>=&gt;<span class="number">0</span>,</span><br><span class="line">    ...</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="8-账号密码登录api"><a href="#8-账号密码登录api" class="headerlink" title="8. 账号密码登录api"></a>8. 账号密码登录api</h2><p>controller层：application\api\controller\v1\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 账号密码登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 验证登录信息</span></span><br><span class="line">    (<span class="keyword">new</span> <span class="title class_">UserValidate</span>())-&gt;<span class="title function_ invoke__">goCheck</span>(<span class="string">&#x27;login&#x27;</span>);</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="variable">$token</span> = (<span class="keyword">new</span> <span class="title class_">UserModel</span>())-&gt;<span class="title function_ invoke__">login</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCode</span>(<span class="string">&#x27;登录成功&#x27;</span>,[<span class="string">&#x27;token&#x27;</span>=&gt;<span class="variable">$token</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route层：route\route.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 账号密码登录</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;user/login&#x27;</span>,<span class="string">&#x27;api/:version.User/login&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>validate层：application\common\validate\UserValidate.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证规则</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$rule</span> = [</span><br><span class="line">    ...</span><br><span class="line">        <span class="string">&#x27;username&#x27;</span>=&gt;<span class="string">&#x27;require&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;password&#x27;</span>=&gt;<span class="string">&#x27;require|alphaDash&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证场景</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$scene</span> = [</span><br><span class="line">    ...</span><br><span class="line">        <span class="string">&#x27;login&#x27;</span>=&gt;[<span class="string">&#x27;username&#x27;</span>,<span class="string">&#x27;password&#x27;</span>],</span><br><span class="line">    ...</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>model层：application\common\model\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断用户是否存在（在前面课程的基础上扩充）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isExist</span>(<span class="params"><span class="variable">$arr</span>=[]</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_array</span>(<span class="variable">$arr</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;phone&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 手机号码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;phone&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;phone&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用户id</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;id&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 用户名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;id&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;email&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 邮箱</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;email&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;email&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;username&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 用户名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;username&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;username&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 账号登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">login</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取所有参数</span></span><br><span class="line">    <span class="variable">$param</span> = <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">param</span>();</span><br><span class="line">    <span class="comment">// 验证用户是否存在</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isExist</span>(<span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">filterUserData</span>(<span class="variable">$param</span>[<span class="string">&#x27;username&#x27;</span>]));</span><br><span class="line">    <span class="comment">// 用户不存在</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="variable">$user</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;昵称/邮箱/手机号错误&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20000</span>]);</span><br><span class="line">    <span class="comment">// 用户是否被禁用</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkStatus</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>());</span><br><span class="line">    <span class="comment">// 验证密码</span></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkPassword</span>(<span class="variable">$param</span>[<span class="string">&#x27;password&#x27;</span>],<span class="variable">$user</span>-&gt;password);</span><br><span class="line">    <span class="comment">// 登录成功 生成token，进行缓存，返回客户端</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">CreateSaveToken</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证用户名是什么格式，昵称/邮箱/手机号</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filterUserData</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$arr</span>=[];</span><br><span class="line">    <span class="comment">// 验证是否是手机号码</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;^1(3|4|5|7|8)[0-9]\d&#123;8&#125;$^&#x27;</span>, <span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;phone&#x27;</span>]=<span class="variable">$data</span>; </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 验证是否是邮箱</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]&#123;2,&#125;)$/&#x27;</span>, <span class="variable">$data</span>))&#123;</span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;email&#x27;</span>]=<span class="variable">$data</span>; </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$arr</span>[<span class="string">&#x27;username&#x27;</span>]=<span class="variable">$data</span>; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证密码</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkPassword</span>(<span class="params"><span class="variable">$password</span>,<span class="variable">$hash</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$hash</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;密码错误&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20002</span>]);</span><br><span class="line">    <span class="comment">// 密码错误</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">password_verify</span>(<span class="variable">$password</span>,<span class="variable">$hash</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;密码错误&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20002</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-第三方登录api"><a href="#9-第三方登录api" class="headerlink" title="9. 第三方登录api"></a>9. 第三方登录api</h2><p>controller层：application\api\controller\v1\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第三方登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">otherLogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 验证登录信息</span></span><br><span class="line">    (<span class="keyword">new</span> <span class="title class_">UserValidate</span>())-&gt;<span class="title function_ invoke__">goCheck</span>(<span class="string">&#x27;otherlogin&#x27;</span>);</span><br><span class="line">    <span class="variable">$token</span> = (<span class="keyword">new</span> <span class="title class_">UserModel</span>())-&gt;<span class="title function_ invoke__">otherlogin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCode</span>(<span class="string">&#x27;登录成功&#x27;</span>,[<span class="string">&#x27;token&#x27;</span>=&gt;<span class="variable">$token</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route层：route\route.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 第三方登录</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;user/otherlogin&#x27;</span>,<span class="string">&#x27;api/:version.User/otherLogin&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>validate层：application\common\validate\UserValidate.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证规则</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$rule</span> = [</span><br><span class="line">    ...</span><br><span class="line">        <span class="string">&#x27;provider&#x27;</span>=&gt;<span class="string">&#x27;require&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;openid&#x27;</span>=&gt;<span class="string">&#x27;require&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;nickName&#x27;</span>=&gt;<span class="string">&#x27;require&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;avatarUrl&#x27;</span>=&gt;<span class="string">&#x27;require&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;expires_in&#x27;</span>=&gt;<span class="string">&#x27;require&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证场景</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$scene</span> = [</span><br><span class="line">    ...</span><br><span class="line">        <span class="string">&#x27;otherlogin&#x27;</span>=&gt;[<span class="string">&#x27;provider&#x27;</span>,<span class="string">&#x27;openid&#x27;</span>,<span class="string">&#x27;nickName&#x27;</span>,<span class="string">&#x27;avatarUrl&#x27;</span>,<span class="string">&#x27;expires_in&#x27;</span>],</span><br><span class="line">    ...</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>model层：application\common\model\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定第三方登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">userbind</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">hasMany</span>(<span class="string">&#x27;UserBind&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断用户是否存在（在前面课程的基础上扩充）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isExist</span>(<span class="params"><span class="variable">$arr</span>=[]</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_array</span>(<span class="variable">$arr</span>)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;phone&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 手机号码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;phone&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;phone&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用户id</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;id&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 用户名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;id&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;email&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 邮箱</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;email&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;email&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;username&#x27;</span>,<span class="variable">$arr</span>)) &#123; <span class="comment">// 用户名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;username&#x27;</span>,<span class="variable">$arr</span>[<span class="string">&#x27;username&#x27;</span>])-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第三方参数</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;provider&#x27;</span>,<span class="variable">$arr</span>)) &#123;</span><br><span class="line">        <span class="variable">$where</span> = [</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>=&gt;<span class="variable">$arr</span>[<span class="string">&#x27;provider&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;openid&#x27;</span>=&gt;<span class="variable">$arr</span>[<span class="string">&#x27;openid&#x27;</span>]</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">userbind</span>()-&gt;<span class="title function_ invoke__">where</span>(<span class="variable">$where</span>)-&gt;<span class="title function_ invoke__">find</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户是否被禁用（在前面课程基础上扩展）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params"><span class="variable">$arr</span>,<span class="variable">$isReget</span> = <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$status</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$isReget</span>) &#123;</span><br><span class="line">        <span class="comment">// 账号密码登录 和 第三方登录</span></span><br><span class="line">        <span class="variable">$userid</span> = <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;user_id&#x27;</span>,<span class="variable">$arr</span>)?<span class="variable">$arr</span>[<span class="string">&#x27;user_id&#x27;</span>]:<span class="variable">$arr</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="comment">// 判断第三方登录是否绑定了手机号码</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$userid</span> &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">        <span class="comment">// 查询user表</span></span><br><span class="line">        <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">find</span>(<span class="variable">$userid</span>)-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">        <span class="comment">// 拿到status</span></span><br><span class="line">        <span class="variable">$status</span> = <span class="variable">$user</span>[<span class="string">&#x27;status&#x27;</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$status</span> = <span class="variable">$arr</span>[<span class="string">&#x27;status&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$status</span>==<span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;该用户已被禁用&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20001</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三方登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">otherlogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取所有参数</span></span><br><span class="line">    <span class="variable">$param</span> = <span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">param</span>();</span><br><span class="line">    <span class="comment">// 解密过程（待添加）</span></span><br><span class="line">    <span class="comment">// 验证用户是否存在</span></span><br><span class="line">    <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">isExist</span>([<span class="string">&#x27;provider&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;provider&#x27;</span>],<span class="string">&#x27;openid&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;openid&#x27;</span>]]);</span><br><span class="line">    <span class="comment">// 用户不存在，创建用户</span></span><br><span class="line">    <span class="variable">$arr</span> = [];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable">$user</span>) &#123;</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">userbind</span>()-&gt;<span class="title function_ invoke__">create</span>([</span><br><span class="line">            <span class="string">&#x27;type&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;provider&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;openid&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;openid&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;nickname&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;nickName&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;avatarurl&#x27;</span>=&gt;<span class="variable">$param</span>[<span class="string">&#x27;avatarUrl&#x27;</span>],</span><br><span class="line">        ]);</span><br><span class="line">        <span class="variable">$arr</span> = <span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">        <span class="variable">$arr</span>[<span class="string">&#x27;expires_in&#x27;</span>] = <span class="variable">$param</span>[<span class="string">&#x27;expires_in&#x27;</span>]; </span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">CreateSaveToken</span>(<span class="variable">$arr</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 用户是否被禁用</span></span><br><span class="line">    <span class="variable">$arr</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">checkStatus</span>(<span class="variable">$user</span>-&gt;<span class="title function_ invoke__">toArray</span>());</span><br><span class="line">    <span class="comment">// 登录成功，返回token</span></span><br><span class="line">    <span class="variable">$arr</span>[<span class="string">&#x27;expires_in&#x27;</span>] = <span class="variable">$param</span>[<span class="string">&#x27;expires_in&#x27;</span>]; </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">CreateSaveToken</span>(<span class="variable">$arr</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-auth中间件封装"><a href="#10-auth中间件封装" class="headerlink" title="10. auth中间件封装"></a>10. auth中间件封装</h2><p>权限验证层</p><ol><li>创建中间件</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测token合法性（用户是否已登陆）</span></span><br><span class="line">php think make:middleware ApiUserAuth</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 检测第三方登录用户是否已经绑定手机（如果没有绑定手机，在User主表中没有记录，没法进行下面操作）</span></span><br><span class="line">php think make:middleware ApiUserBindPhone</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 检测用户是否被禁用</span></span><br><span class="line">php think make:middleware ApiUserStatus</span><br></pre></td></tr></table></figure><ol start="2"><li>注册中间件（config/middleware.php）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [</span><br><span class="line">    <span class="string">&#x27;ApiUserAuth&#x27;</span> =&gt; app\http\middleware\<span class="title class_">ApiUserAuth</span>::<span class="variable language_">class</span>,</span><br><span class="line">    <span class="string">&#x27;ApiUserStatus&#x27;</span> =&gt; app\http\middleware\<span class="title class_">ApiUserStatus</span>::<span class="variable language_">class</span>,</span><br><span class="line">    <span class="string">&#x27;ApiUserBindPhone&#x27;</span> =&gt; app\http\middleware\<span class="title class_">ApiUserBindPhone</span>::<span class="variable language_">class</span>,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ol start="3"><li>中间件定义</li></ol><p>（1） 检测token合法性（app\http\middleware\ApiUserAuth.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">http</span>\<span class="title class_">middleware</span>;</span><br><span class="line"><span class="comment">// 引入异常类</span></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">lib</span>\<span class="title">exception</span>\<span class="title">BaseException</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiUserAuth</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, \<span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 获取头部信息</span></span><br><span class="line">        <span class="variable">$param</span> = <span class="variable">$request</span>-&gt;<span class="title function_ invoke__">header</span>();</span><br><span class="line">        <span class="comment">// 不含token</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;token&#x27;</span>,<span class="variable">$param</span>)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;非法token，禁止操作&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20003</span>]);</span><br><span class="line">        <span class="comment">// 当前用户token是否存在（是否登录）</span></span><br><span class="line">        <span class="variable">$token</span> = <span class="variable">$param</span>[<span class="string">&#x27;token&#x27;</span>];</span><br><span class="line">        <span class="variable">$user</span> = \<span class="title class_">Cache</span>::<span class="title function_ invoke__">get</span>(<span class="variable">$token</span>);</span><br><span class="line">        <span class="comment">// 验证失败（未登录或已过期）</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$user</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;非法token，请重新登录&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20003</span>]);</span><br><span class="line">        <span class="comment">// 将token和userid这类常用参数放在request中</span></span><br><span class="line">        <span class="variable">$request</span>-&gt;userToken = <span class="variable">$token</span>;</span><br><span class="line">        <span class="variable">$request</span>-&gt;userId = <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;type&#x27;</span>,<span class="variable">$user</span>) ? <span class="variable">$user</span>[<span class="string">&#x27;user_id&#x27;</span>] : <span class="variable">$user</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="variable">$request</span>-&gt;userTokenUserInfo = <span class="variable">$user</span>; </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）检测第三方登录用户是否已经绑定手机（app\http\middleware\ApiUserBindPhone.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">http</span>\<span class="title class_">middleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">model</span>\<span class="title">User</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiUserBindPhone</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, \<span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$param</span> = <span class="variable">$request</span>-&gt;userTokenUserInfo;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">User</span>()) -&gt; <span class="title function_ invoke__">OtherLoginIsBindPhone</span>(<span class="variable">$param</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>model层：application\common\model\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 验证第三方登录是否绑定手机</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">OtherLoginIsBindPhone</span>(<span class="params"><span class="variable">$user</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 验证是否是第三方登录</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;type&#x27;</span>,<span class="variable">$user</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$user</span>[<span class="string">&#x27;user_id&#x27;</span>]&lt;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;请先绑定手机！&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20008</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$user</span>[<span class="string">&#x27;user_id&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 账号密码登录</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$user</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）检测用户是否被禁用（app\http\middleware\ApiUserStatus.php）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">http</span>\<span class="title class_">middleware</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">model</span>\<span class="title">User</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApiUserStatus</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params"><span class="variable">$request</span>, \<span class="built_in">Closure</span> <span class="variable">$next</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$param</span> = <span class="variable">$request</span>-&gt;userTokenUserInfo;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">User</span>()) -&gt; <span class="title function_ invoke__">checkStatus</span>(<span class="variable">$param</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$next</span>(<span class="variable">$request</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>model层：application\common\model\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户是否被禁用（在前面课程的基础上扩充）</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">checkStatus</span>(<span class="params"><span class="variable">$arr</span>,<span class="variable">$isReget</span> = <span class="literal">false</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$status</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$isReget</span>) &#123;</span><br><span class="line">        <span class="comment">// 账号密码登录</span></span><br><span class="line">        <span class="variable">$userid</span> = <span class="title function_ invoke__">array_key_exists</span>(<span class="string">&#x27;user_id&#x27;</span>,<span class="variable">$arr</span>)?<span class="variable">$arr</span>[<span class="string">&#x27;user_id&#x27;</span>]:<span class="variable">$arr</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">        <span class="variable">$user</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">find</span>(<span class="variable">$userid</span>)-&gt;<span class="title function_ invoke__">toArray</span>();</span><br><span class="line">        <span class="variable">$status</span> = <span class="variable">$user</span>[<span class="string">&#x27;status&#x27;</span>];</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$status</span> = <span class="variable">$arr</span>[<span class="string">&#x27;status&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$status</span>==<span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;该用户已被禁用&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">20001</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$arr</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>中间件使用（在路由中使用 route/route.php）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">middleware</span>([<span class="string">&#x27;ApiUserAuth&#x27;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要验证token，是否绑定手机，用户是否禁用（必须按顺序）</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">middleware</span>([<span class="string">&#x27;ApiUserAuth&#x27;</span>,<span class="string">&#x27;ApiUserBindPhone&#x27;</span>,<span class="string">&#x27;ApiUserStatus&#x27;</span>]);</span><br></pre></td></tr></table></figure><h2 id="11-退出登录api"><a href="#11-退出登录api" class="headerlink" title="11. 退出登录api"></a>11. 退出登录api</h2><p>controller层：application\api\controller\v1\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 退出登录</span></span><br><span class="line">    (<span class="keyword">new</span> <span class="title class_">UserModel</span>())-&gt;<span class="title function_ invoke__">logout</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCodeWithOutData</span>(<span class="string">&#x27;退出成功&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route层：route\route.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 退出登录</span></span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">post</span>(<span class="string">&#x27;user/logout&#x27;</span>,<span class="string">&#x27;api/:version.User/logout&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;)-&gt;<span class="title function_ invoke__">middleware</span>([<span class="string">&#x27;ApiUserAuth&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>model层：application\common\model\User.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出登录</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">logout</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title class_">Cache</span>::<span class="title function_ invoke__">pull</span>(<span class="title function_ invoke__">request</span>()-&gt;userToken)) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BaseException</span>([<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">200</span>,<span class="string">&#x27;msg&#x27;</span>=&gt;<span class="string">&#x27;你已经退出了&#x27;</span>,<span class="string">&#x27;errorCode&#x27;</span>=&gt;<span class="number">30006</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三-【api开发】文章分类模块开发"><a href="#三-【api开发】文章分类模块开发" class="headerlink" title="三.【api开发】文章分类模块开发"></a>三.【api开发】文章分类模块开发</h1><h2 id="1-数据表设计-1"><a href="#1-数据表设计-1" class="headerlink" title="1. 数据表设计"></a>1. 数据表设计</h2><blockquote><p>文章分类表 post_class</p><p>id<br>classname      分类名称<br>create_time    创建时间<br>status          分类状态  0禁用1启用</p></blockquote><h2 id="2-文章分类api开发"><a href="#2-文章分类api开发" class="headerlink" title="2.文章分类api开发"></a>2.文章分类api开发</h2><p>创建文章分类相关文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文章分类控制器</span></span><br><span class="line">php think make:controller api/v1/PostClass</span><br><span class="line"><span class="comment">// 创建文章分类模型</span></span><br><span class="line">php think make:model PostClass</span><br></pre></td></tr></table></figure><p>controller层：application\api\controller\v1\PostClass.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">model</span>\<span class="title">PostClass</span> <span class="keyword">as</span> <span class="title">PostClassModel</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取文章分类列表</span></span><br><span class="line">    <span class="variable">$list</span>=(<span class="keyword">new</span> PostClassModel)-&gt;<span class="title function_ invoke__">getPostClassList</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCode</span>(<span class="string">&#x27;获取成功&#x27;</span>,[<span class="string">&#x27;list&#x27;</span>=&gt;<span class="variable">$list</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route层：route\route.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 获取文章分类</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;postclass&#x27;</span>, <span class="string">&#x27;api/:version.PostClass/index&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>model层：application\common\model\PostClass.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有文章分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getPostClassList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">field</span>(<span class="string">&#x27;id,classname&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;status&#x27;</span>,<span class="number">1</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四-【api开发】话题分类模块"><a href="#四-【api开发】话题分类模块" class="headerlink" title="四.【api开发】话题分类模块"></a>四.【api开发】话题分类模块</h1><h2 id="1-数据表设计（同文章分类）"><a href="#1-数据表设计（同文章分类）" class="headerlink" title="1. 数据表设计（同文章分类）"></a>1. 数据表设计（同文章分类）</h2><h2 id="2-话题分类api开发"><a href="#2-话题分类api开发" class="headerlink" title="2. 话题分类api开发"></a>2. 话题分类api开发</h2><p>创建话题分类相关文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建话题分类控制器</span></span><br><span class="line">php think make:controller api/v1/TopicClass</span><br><span class="line"><span class="comment">// 创建话题分类模型</span></span><br><span class="line">php think make:model TopicClass</span><br></pre></td></tr></table></figure><p>controller层：application\api\controller\v1\TopicClass.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">common</span>\<span class="title">model</span>\<span class="title">TopicClass</span> <span class="keyword">as</span> <span class="title">TopicClassModel</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 获取话题分类列表</span></span><br><span class="line">    <span class="variable">$list</span>=(<span class="keyword">new</span> TopicClassModel)-&gt;<span class="title function_ invoke__">getTopicClassList</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">self</span>::<span class="title function_ invoke__">showResCode</span>(<span class="string">&#x27;获取成功&#x27;</span>,[<span class="string">&#x27;list&#x27;</span>=&gt;<span class="variable">$list</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>route层：route\route.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不需要验证token</span></span><br><span class="line"><span class="title class_">Route</span>::<span class="title function_ invoke__">group</span>(<span class="string">&#x27;api/:version/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 获取话题分类</span></span><br><span class="line">    <span class="title class_">Route</span>::<span class="title function_ invoke__">get</span>(<span class="string">&#x27;topicclass&#x27;</span>,<span class="string">&#x27;api/v1.TopicClass/index&#x27;</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>model层：application\common\model\TopicClass.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取所有话题分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getTopicClassList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">field</span>(<span class="string">&#x27;id,classname&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;status&#x27;</span>,<span class="number">1</span>)-&gt;<span class="title function_ invoke__">select</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/06/05/tySEy4.png" alt="tySEy4.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-后端环境搭建&quot;&gt;&lt;a href=&quot;#一-后端环境搭建&quot; class=&quot;headerlink&quot; title=&quot;一. 后端环境搭建&quot;&gt;&lt;/a&gt;一. 后端环境搭建&lt;/h1&gt;&lt;h2 id=&quot;1-基本配置&quot;&gt;&lt;a href=&quot;#1-基本配置&quot; class=&quot;header</summary>
      
    
    
    
    <category term="系统API" scheme="http://example.com/categories/%E7%B3%BB%E7%BB%9FAPI/"/>
    
    
    <category term="系统API" scheme="http://example.com/tags/%E7%B3%BB%E7%BB%9FAPI/"/>
    
  </entry>
  
  <entry>
    <title>博客整体搭建流程</title>
    <link href="http://example.com/2019/10/17/blog/"/>
    <id>http://example.com/2019/10/17/blog/</id>
    <published>2019-10-17T02:37:32.000Z</published>
    <updated>2019-10-17T06:16:08.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hexo生成"><a href="#Hexo生成" class="headerlink" title="Hexo生成"></a>Hexo生成</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">npm install --save hexo-deployer-git</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><blockquote><p>关于博客内部主题配置参考相对应主题文档。</p><p>butterfly:<a href="https://jerryc.me/posts/21cfbf15/">https://jerryc.me/posts/21cfbf15/</a> </p></blockquote><p><strong>我的域名和服务器都是阿里的，这里推荐还是搞腾讯的吧，阿里虽然便宜坑蛮多的。</strong></p><p><a href="https://www.aliyun.com/">阿里云</a></p><p><strong>正常买域名和服务器备案即可，时间大概得一个月吧。</strong></p><h2 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h2><blockquote><p>之前是在git仓库跑起来的，后来觉得速度太慢就从阿里买了服务器和域名。</p><p>Linux这块真是卡了我好久 orz  这里参考了很多优秀博客文章。</p></blockquote><h3 id="生成git公钥"><a href="#生成git公钥" class="headerlink" title="生成git公钥"></a><strong>生成git公钥</strong></h3><p>在本地WIN10系统里弄</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br><span class="line">直接回车三次就行。</span><br></pre></td></tr></table></figure><p> <strong>生成的文件默认在~/.ssh目录中，看到有id_rsa，id_rsa.pub这些文件即可，Win10中就是 我的电脑/C盘/用户/你自己的用户名/.shh/ 就可以看到了 ！</strong></p><h3 id="阿里云Centos搭建环境"><a href="#阿里云Centos搭建环境" class="headerlink" title="阿里云Centos搭建环境"></a><strong>阿里云Centos搭建环境</strong></h3><p><strong>注意：这是在你远程链接阿里云服务器后</strong>！！！</p><p>下个Xhell5，哈哈因为5免费。</p><p><strong>安装git</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><p><strong>创建git账户（这部分基本Linux学习范围了，仅供参考）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure><p><strong>添加用户权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers   //vim 是编辑的意思</span><br><span class="line">ESC键 :set nu 然后 i 是编辑的意思</span><br><span class="line">ESC键 :wq 是保存退出</span><br></pre></td></tr></table></figure><p><strong>添加以下内容</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git ALL = (ALL)  ALL</span><br></pre></td></tr></table></figure><p><strong>保存退出并修改权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><p><strong>设置git账户密码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure><p><strong>切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br><span class="line"># 然后将win10中生成的id_rsa.pub文件中的公钥复制到authorized_keys</span><br><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure><p><strong>在本地Git终端中测试是否能免密登录git，其中SERVER为填写自己的云主机IP，执行输入yes后不用密码就说明好了</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 注意此步骤跟xshell无关 是本机电脑用 git bash </span><br><span class="line">ssh -v git@SERVER</span><br><span class="line">server是你的服务器公共地址</span><br></pre></td></tr></table></figure><p><strong>创建目录 回到xshell</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#repo作为为Git仓库目录</span><br><span class="line">mkdir /var/repo</span><br><span class="line">chown -R git:git /var/repo</span><br><span class="line">chmod -R 755 /var/repo</span><br><span class="line">#hexo作为网站根目录</span><br><span class="line">mkdir /var/www/hexo</span><br><span class="line">chown -R git:git /var/www/hexo</span><br><span class="line">chmod -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure><p><strong>然后创建一个裸的 Git 仓库</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd var/repo</span><br><span class="line">git init --bare hexoBlog.git</span><br></pre></td></tr></table></figure><p> 创建一个新的 Git 钩子，用于自动部署<br>在 /var/repo/hexoBlog.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p><strong>按 i 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录（配置文件等</strong>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/hexoBlog.git checkout -f</span><br></pre></td></tr></table></figure><p><strong>修改文件权限，使得其可执行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/repo/hexoBlog.git/hooks/post-receive</span><br><span class="line">chmod +x /var/repo/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>到这里，我们的 Git 仓库算是完全搭建好了。下面进行 Nginx 的配置。</p><h2 id="阿里云Centos配置Nginx"><a href="#阿里云Centos配置Nginx" class="headerlink" title="阿里云Centos配置Nginx"></a>阿里云Centos配置Nginx</h2><p><strong>注意： Linux面板6.0安装命令(暂时仅兼容Centos7.x，其它系统版本请安装5.9稳定版) ，这块就看你在买服务器时候选的系统版本。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><p>**Linux面板6.0升级专业版 **</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://download.bt.cn/install/update6.sh|bash</span><br></pre></td></tr></table></figure><p> 安装完成后会显示面板后台地址·账号·密码。</p><p>打开面板后台地址登陆面板，选择Nginx的部署方案，静静等待部署。<br>部署完成，点击网站-添加站点-输入域名(没有域名的输入自己的IP地址)-底部的PHP版本选择”纯静态”(其他不改<br>或者根据自己的习惯来改)-提交。<br>网站创建完成后点击设置-配置文件 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    # server_name 填写自己的域名</span><br><span class="line">    server_name ali6.cn blog.ali6.cn;</span><br><span class="line">    index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">    # 这里root填写自己的网站根目录，修改为/var/www/hexo</span><br><span class="line">    root /var/www/hexo;</span><br></pre></td></tr></table></figure><p>保存</p><p>点击设置-网站目录，修改为/var/www/hexo ，保存</p><p>重启宝塔面板服务，面板上有重启键，点下就行，都是图形界面简单。</p><h2 id="本地Win10安装部署Hexo"><a href="#本地Win10安装部署Hexo" class="headerlink" title="本地Win10安装部署Hexo"></a>本地Win10安装部署Hexo</h2><p><strong>配置git本地</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#定义邮箱(更换为你的邮箱地址就行)</span><br><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">#定义名称(更换自定义一个名称就行)</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure><p><strong>更改你博客里面的配置文件_config.yml</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  #server改为你的服务IP地址或解析后的域名</span><br><span class="line">  #例如我改为repo: git@mcweblog.com:/var/repo/blog.git</span><br><span class="line">  repo: git@server:/var/repo/blog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="博客速度优化"><a href="#博客速度优化" class="headerlink" title="博客速度优化"></a>博客速度优化</h2><p><strong>用的是3.9的gulp，4.0的不会….</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g gulp@3.9.1   //或者</span><br><span class="line">npm install --save-dev gulp@3.9.1</span><br></pre></td></tr></table></figure><p><strong>安装5个模块</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br></pre></td></tr></table></figure><h5 id="添加gulpfile-js（在博客根目录下）"><a href="#添加gulpfile-js（在博客根目录下）" class="headerlink" title="添加gulpfile.js（在博客根目录下）"></a>添加gulpfile.js（在博客根目录下）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyJS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyCSS</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">minifyURLs</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">minifycss</span>(&#123;</span><br><span class="line">            <span class="attr">compatibility</span>: <span class="string">&#x27;ie8&#x27;</span></span><br><span class="line">        &#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-js&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/js/**/*.js&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩图片</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-images&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/images/**/*.*&#x27;</span>)</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">imagemin</span>(</span><br><span class="line">        [imagemin.<span class="title function_">gifsicle</span>(&#123;<span class="string">&#x27;optimizationLevel&#x27;</span>: <span class="number">3</span>&#125;), </span><br><span class="line">        imagemin.<span class="title function_">jpegtran</span>(&#123;<span class="string">&#x27;progressive&#x27;</span>: <span class="literal">true</span>&#125;), </span><br><span class="line">        imagemin.<span class="title function_">optipng</span>(&#123;<span class="string">&#x27;optimizationLevel&#x27;</span>: <span class="number">7</span>&#125;), </span><br><span class="line">        imagemin.<span class="title function_">svgo</span>()],</span><br><span class="line">        &#123;<span class="string">&#x27;verbose&#x27;</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/images&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;minify-html&#x27;</span>,<span class="string">&#x27;minify-css&#x27;</span>,<span class="string">&#x27;minify-js&#x27;</span>,<span class="string">&#x27;minify-images&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure><blockquote><p>hexo g 或者 hexo g &amp;&amp; gulp </p></blockquote><p><strong>注意：nodejs需要10.0以下版本</strong></p><p>坑还是挺多的，有空在继续写。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Hexo生成&quot;&gt;&lt;a href=&quot;#Hexo生成&quot; class=&quot;headerlink&quot; title=&quot;Hexo生成&quot;&gt;&lt;/a&gt;Hexo生成&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=</summary>
      
    
    
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>概率论与数理统计</title>
    <link href="http://example.com/2019/09/25/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
    <id>http://example.com/2019/09/25/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/</id>
    <published>2019-09-25T06:42:44.000Z</published>
    <updated>2019-10-14T03:44:17.266Z</updated>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="http://miaochen.mcweblog.com/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%281%29.pdf" width="100%" height="550" type="application/pdf"></div><div class="row">    <embed src="http://miaochen.mcweblog.com/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
      
      
    <summary type="html">

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;http://miaochen.mcweblog.com/%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E9%9A%8F%E6%9C%BA%E4%BA%8B%E4%BB%B6%281%29.</summary>
      
    
    
    
    
    <category term="数学" scheme="http://example.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>英语复习</title>
    <link href="http://example.com/2019/09/09/%E8%8B%B1%E8%AF%AD%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2019/09/09/%E8%8B%B1%E8%AF%AD%E5%A4%8D%E4%B9%A0/</id>
    <published>2019-09-09T06:29:08.000Z</published>
    <updated>2019-10-15T06:20:39.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高频词汇"><a href="#高频词汇" class="headerlink" title="高频词汇"></a>高频词汇</h2><div class="row">    <embed src="http://miaochen.mcweblog.com/%E9%AB%98%E9%A2%91%E8%AF%8D%E6%B1%87PDF%E5%85%A8.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="核心语法精讲"><a href="#核心语法精讲" class="headerlink" title="核心语法精讲"></a>核心语法精讲</h2><div class="row">    <embed src="http://miaochen.mcweblog.com/%E6%A0%B8%E5%BF%83%E8%AF%AD%E6%B3%95%E7%B2%BE%E8%AE%B2%EF%BC%88%E5%85%A8%EF%BC%89.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="初级语法"><a href="#初级语法" class="headerlink" title="初级语法"></a>初级语法</h2><h3 id="Lesson1-单数带词及-a-an-的用法"><a href="#Lesson1-单数带词及-a-an-的用法" class="headerlink" title="Lesson1 单数带词及 a/an 的用法"></a>Lesson1 单数带词及 a/an 的用法</h3><p>注意：英文必须要有”一个=a”的概念，不能像中文省略</p><p><strong>be</strong>动词要有以下三种，中文都代表”<strong>是</strong>“的意思</p><ul><li>is</li><li>am</li><li>are</li></ul><table><thead><tr><th align="center">常用搭配：</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center">我 I</td><td align="center">你 you</td><td align="center">他 he</td><td align="center">她 she</td><td align="center">它 it</td><td align="center">这个 this</td><td align="center">那个 that</td></tr><tr><td align="center"></td><td align="center">我是 <br />I am</td><td align="center">你是 <br />you are</td><td align="center">他是 <br />he is</td><td align="center">她是 <br />she is</td><td align="center">它是<br /> it is</td><td align="center">这个是<br /> this is</td><td align="center">那个是<br />that is</td></tr></tbody></table><p><strong>注意：its和it’s的区别：</strong></p><p>1、its是形容词型物主代词，它的。<br>2、It’s是 it和 is的缩写形式。</p><p>简单练习：**</p><ol><li>我是一个男孩<br><u>I am a boy.</u></li><li>你是一位老师<br><u>You are a teacher.</u></li><li>他是一名学生<br><u>He is a student.</u></li><li>她是一名医生<br><u>She is a doctor.</u></li><li>它是一本书<br><u>It is a book.</u></li><li>它是一只狗<br><u>It is a dog.</u></li><li>这个是一把椅子<br><u>This is a chair.</u></li><li>那个是一辆车<br><u>That is a car.</u></li></ol><p><strong>当开头发音是a,e,i,o,u的单词，要用an取代a</strong></p><p><strong>简单练习：</strong></p><ol><li>它是一个苹果<br><u>It is an apple.</u></li><li>这个是一个苹果<br><u>This is an apple.</u></li><li>那个是一个苹果<br><u>That is an apple.</u></li><li>它是一架飞机<br><u>It is an air plane.</u></li><li>这个是一架飞机<br><u>This is an air plane.</u></li><li>那个是一架飞机<br><u>That is an air plane.</u></li></ol><h3 id="Lesson2-复数代词及复数名词的用法"><a href="#Lesson2-复数代词及复数名词的用法" class="headerlink" title="Lesson2 复数代词及复数名词的用法"></a>Lesson2 复数代词及复数名词的用法</h3><p>注意：复数代词代表两个以上因此搭配的”是”要从 <strong>“is”<strong>改成 “<strong>are</strong>“，另外需要注意，名词也必须配合复数的概念，词尾通常要加上</strong>s</strong>或者<strong>es</strong>，来表示两个及以上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们是 = we are</span><br><span class="line">我们 必须和 are 来配合，girl变成复数，词尾要加上s变成girls.</span><br><span class="line">名词的数目有两个及两个以上，就不能再写&quot;a&quot;了这样还是代表一个。</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">常用搭配：</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center">我们 we</td><td align="center">你们 you</td><td align="center">他们  they</td><td align="center">这些 these</td><td align="center">那些 those</td></tr><tr><td align="center"></td><td align="center">我们是 <br />we are</td><td align="center">你们是 <br />you are</td><td align="center">他们是 <br />they are</td><td align="center">这些是 <br />these are</td><td align="center">那些是 <br />those are</td></tr></tbody></table><p>大部分复数名词后面通常要加上<strong>s</strong>或者<strong>es</strong>，显示出数目有两个及以上，不过有些名词有特殊规则，例如词尾已经是<strong>s</strong>,必须再加上<strong>es</strong>，词尾是<strong>y</strong>就要去y改成<strong>ies</strong>，词尾是<strong>f</strong>或<strong>fe</strong>，就要去f或者fe改成<strong>ves</strong>.</p><p>注意：另外有少数名词的复数写法，不是按照上面规则来的，要特别注意！</p><blockquote><p>可数名词，以元音字母+y 结尾时，复数直接加-s, boy-boys, toy- toys, monkey- monkeys<br>如果以辅音字母+ y 结尾，变复数时先变y为 i +es,<br>family - families story - stories</p></blockquote><table><thead><tr><th align="center">boy 男孩</th><th align="center">monkey 猴子</th><th align="center">you 你</th><th align="center">man 男人</th></tr></thead><tbody><tr><td align="center">boys 男孩们</td><td align="center">monkeys 猴子们</td><td align="center">you 你们</td><td align="center">men 男人们</td></tr></tbody></table><p><img src="https://s2.ax1x.com/2019/09/16/nRfShQ.jpg" alt="复数名词.jpg"></p><p><strong>简单练习：</strong></p><ol><li>我们是女孩<br><u>We are girls.</u></li><li>我们是医生<br><u>We are doctors.</u></li><li>你们是男孩<br><u>You are boys.</u></li><li>你们是农夫<br><u>You are farmers.</u></li><li>他们是学生<br><u>They are students.</u></li><li>他们是小偷<br><u>They are thieves.</u></li><li>这些是狗<br><u>These are dogs.</u></li><li>这些是猫<br><u>These are cats.</u></li><li>那些是公交车<br><u>Those are buses.</u></li><li>那些是小刀<br><u>Those are knives.</u></li></ol><h3 id="Lesson3-形容词用法"><a href="#Lesson3-形容词用法" class="headerlink" title="Lesson3 形容词用法"></a>Lesson3 形容词用法</h3><p>short是“矮”的意思，在这里用来形容身高，short在英文里被称作是形容词，形容词功能，主要用来形容人或事物外观或状态，让人更清楚句子表达什么意思。</p><p>注意：形容词通常放在名词的前面，用来描述“名词”的外观或状态。</p><p>重点：形容词的功能主要来形容人或事物的外观或者状态，中文常用“什么什么的”来表示。</p><p>例如：tall(高的)，short(矮的)，fat（胖的）,thin（瘦的）,big（大的）,small（小的）等。</p><p><strong>简单练习：</strong></p><ol><li><p>你是一个矮的男孩</p><p><u>You are a short boy.</u></p></li><li><p>我是一位高的老师<br><u>I am a tall teacher.</u></p></li><li><p>他是一个胖的学生<br><u>He is a fat student.</u></p></li><li><p>她是一位瘦的医生<br><u>She is a thin doctor.</u></p></li><li><p>它是一本好书<br><u>It is a good book.</u></p></li><li><p>它是一只聪明的狗<br><u>It is a smart dog.</u></p></li><li><p>这个是一把新的椅子<br><u>This is a new chair.</u></p></li><li><p>那个是一辆大的车<br><u>That is a big car.</u></p></li><li><p>它是一个苹果<br><u>It is an apple.</u></p></li><li><p>这个是一个小的苹果<br><u>This is a small apple.</u>  （注意 an apple中间放了开头不是元音的small，an就必须变成a）</p></li><li><p>那个是一个大的苹果<br><u>That is a big apple.</u></p></li><li><p>它是一架飞机<br><u>It is an air plane.</u></p></li><li><p>这个是一架蓝色的飞机<br><u>This is a blue air plane.</u></p></li><li><p>那个是一架漂亮的飞机<br><u>That is a beautiful air plane.</u></p></li><li><p>我们是快乐的女孩<br><u>We are happy girls.</u></p></li><li><p>我们是忙碌的医生<br><u>We are busy doctors.</u></p></li><li><p>你们是强壮的男孩<br><u>You are strong boys.</u></p></li><li><p>你们是懒惰的农夫<br><u>You are lazy farmers.</u></p></li><li><p>他们是愚笨的学生<br><u>They are stupid students.</u></p></li><li><p>这些是肮脏的狗<br><u>These are  dirty dogs.</u></p></li><li><p>这些是干净的猫<br><u>These are clean cats.</u></p></li><li><p>那些是白色的公交车<br><u>Those are white buses.</u></p></li><li><p>那些是旧的小刀<br><u>Those are old knives.</u></p></li></ol><p>注意：<strong>this,that,these,those</strong>除了本身作代词之外，也可以有以下形容词的用法。</p><p>说明 矮个子的男孩 = short boy</p><p>这个男孩 = this boy（this的形容词用法）</p><p>那个男孩 = that boy（that的形容词用法）</p><p>这些男孩 = these boys（these的形容词用法）</p><p>那些男孩 = those boys（those的形容词用法）</p><p><strong>简单练习：</strong></p><ol><li><p>这个女孩是快乐的。<br><u>This girl is happy.</u></p></li><li><p>这个医生是忙碌的。<br><u>This doctor is busy.</u></p></li><li><p>那只狗是干净的。<br><u>That dog is clean.</u></p></li><li><p>那只猫是脏的。<br><u>That cat is dirty.</u></p></li><li><p>这些书是好的。<br><u>These books are good</u></p></li><li><p>这些椅子是坏的。<br><u>These chairs are bad.</u></p></li><li><p>那些公交车是白色的。<br><u>Those buses are white.</u></p></li><li><p>那些树是绿色的。<br><u>Those trees are green.</u></p></li></ol><h3 id="Lesson4-一般疑问句的用法"><a href="#Lesson4-一般疑问句的用法" class="headerlink" title="Lesson4 一般疑问句的用法"></a>Lesson4 一般疑问句的用法</h3><blockquote><p>疑问句主要是用来表示疑问的语气，而形成疑问句的方法，只要将be动词的am/are/is从句中移至到首部即可。</p></blockquote><p><strong>简单练习：</strong></p><ol><li>你是忙碌的。<br><u>You are busy。</u></li><li>你是忙碌的吗？<br><u>Are you busy?</u></li><li>她是矮的。<br><u>She is short.</u></li><li>她是矮的吗？<br><u>Is she short?</u></li><li>我是高的。<br><u>I am tall.</u></li><li>我是高的吗？<br><u>Am I tall?</u>   （注意 I 在任何位置都要大写）</li><li>这是一本书。<br><u>This is a book.</u></li><li>这是一本书吗？<br><u>Is this a book?</u></li><li>他是一个高个子男孩。<br><u>He is a tall boy.</u></li><li>他是一个高个子男孩吗？<br><u>Is he a tall boy?</u></li><li>他是一位聪明的老师。<br><u>He is a smart teacher.</u></li><li>他是一位聪明的老师吗？<br><u>Is he a smart teacher？</u></li><li>那是一只好狗。<br><u>That is a good dog.</u></li><li>那是一只好狗吗？<br><u>Is that a good dog?</u></li><li>这只狗是聪明的。<br><u>This dog is smart</u></li><li>这只狗是聪明的吗？<br><u>Is this smart dog?</u></li></ol><h3 id="Lesson5-Yes的用法"><a href="#Lesson5-Yes的用法" class="headerlink" title="Lesson5 Yes的用法"></a>Lesson5 Yes的用法</h3><blockquote><p>Yes常放在句首，用于回答表示“同意或肯定”，<strong>Yes后面要加逗号</strong>。</p></blockquote><p>用Yes回答问题的方法</p><ol><li>把is搬到主语的后面。<br>Is -&gt; She is a good doctor?</li><li>把问号改成句号。<br>she is a good doctor.</li><li>在签名加上Yes。<br>Yes,she is a good doctor.</li></ol><p><strong>简单练习：</strong></p><ol><li><p>这是一本好书。<br><u>This is a good book.</u></p></li><li><p>这是一本好书吗？<br><u>Is this a good book?</u></p></li><li><p>是的，它是。<br><u>Yes,it is.</u></p></li><li><p>是的，它是一本好书<br><u>Yes,it is a good book.</u></p></li><li><p>那只狗是聪明的。</p><p><u>That dog is smart.</u></p></li><li><p>那只狗是聪明的吗？<br><u>Is that dog smart?</u></p></li><li><p>是的，它是。<br><u>Yes,it is.</u></p></li><li><p>是的，它是聪明的。<br><u>Yes,it is smart</u>.</p></li><li><p>她是一位好医生。<br><u>She is a good doctor.</u></p></li><li><p>她是一位好医生吗？<br><u>Is she  a good doctor?</u></p></li><li><p>是的，她是。<br><u>Yes,she is.</u></p></li><li><p>是的，她是一位好医生。<br><u>Yes,She is a good teacher.</u></p></li><li><p>那位医生是忙碌的。<br><u>That doctor is busy.</u></p></li><li><p>那位医生是忙碌的吗？<br><u>Is that doctor is busy?</u></p></li><li><p>是的，他是。<br><u>Yes,he is.</u></p></li><li><p>是的，他是忙碌的。<br><u>Yes,he is busy.</u></p></li><li><p>那位高的老师是胖的。<br><u>That tall teacher is fat.</u></p></li><li><p>那位高的老师是胖的吗？<br><u>Is that tall teacher fat?</u></p></li><li><p>是的，他是。<br><u>Yes,he is.</u></p></li><li><p>是的，他是胖的<br><u>Yes,he is fat.</u></p></li></ol><h3 id="Lesson6-NO的用法"><a href="#Lesson6-NO的用法" class="headerlink" title="Lesson6 NO的用法"></a>Lesson6 NO的用法</h3><blockquote><p>No的意思是”不”，主要放在句首，用来回答他人的提问，表示否定的意思。而在句子中的”不”要用”not”来表示。不过要特别注意的是，中文会讲”不是”，单英文却要讲成”是不”，用”be动词 + not”表示</p></blockquote><ol><li><p>把Is搬到主语后面</p><p>She is good doctor？</p></li><li><p>把问号改成句号。</p><p>She is a good doctor.</p></li><li><p>在is后面加上not。</p><p>She is not a good doctor.</p></li><li><p>在前面加上No。</p><p>No，she is not a good doctor.</p></li></ol><table><thead><tr><th align="center">代词与be动词，形成”不是”的写法</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center">我 不是<br />我 “是不”</td><td align="center">你 不是<br />你 “是不”</td><td align="center">他 不是<br />他 “是不”</td><td align="center">它 不是<br />它 “是不”</td></tr><tr><td align="center"></td><td align="center">I<br />am not</td><td align="center">you<br />are not</td><td align="center">he <br />is not</td><td align="center">it <br />is not</td></tr><tr><td align="center"></td><td align="center">这个 不是<br />这个 “是不”</td><td align="center">那个 不是<br />那个 “是不”</td><td align="center">这些 不是<br />这些 “是不”</td><td align="center">那些 不是<br />那些 “是不”</td></tr><tr><td align="center"></td><td align="center">this <br />is not</td><td align="center">that <br />is not</td><td align="center">these <br />are not</td><td align="center">those <br />are not</td></tr></tbody></table><p><strong>简单练习：</strong></p><ol><li>你是快乐的。<br><u>You are happy.</u></li><li>你不是快乐的。<br><u>You are not happy.</u></li><li>那张书桌是小的。<br><u>That desk is small.</u></li><li>那张书桌不是小的。<br><u>That desk is not small.</u></li><li>你是胖的。<br><u>You are fat.</u></li><li>你是胖的吗？<br><u>Are you fat?</u></li><li>不，我不是胖的。<br><u>No,I am not fat.</u></li><li>这只狗是脏的。<br><u>This dog is dirty.</u></li><li>这只狗是脏的吗?<br><u>Is this dog dirty?</u></li><li>不，它不是脏的。<br><u>No,it is not dirty.</u></li><li>那个妈妈是瘦的。<br><u>That mother is thin.</u></li><li>那个妈妈是瘦的吗？<br><u>Is that mother thin?</u></li><li>不，那个妈妈不是瘦的。<br><u>No,that mother is not thin.</u></li><li>这些书是新的。<br><u>These books are new.</u></li><li>这些书是新的吗？<br><u>Are these books new?</u></li><li>不，这些书不是新的。<br><u>No,these books are not new.</u></li><li>那些学生是聪明的。<br><u>Those students are smart.</u></li><li>那些学生是聪明的吗？<br><u>Are those students smart?</u></li><li>不，那些学生不是聪明的。<br><u>No,those students are not smart.</u></li></ol><h3 id="Lesson7-人称代词的所有格用法"><a href="#Lesson7-人称代词的所有格用法" class="headerlink" title="Lesson7 人称代词的所有格用法"></a>Lesson7 人称代词的所有格用法</h3><blockquote><p>My的意思是”我的”，后面会加上名词 = “My + 名词”，来明确表示该名词是属于 “我的”，在英文里这样的写法称作是所有格，用来表示名词的归属。</p></blockquote><p><strong>人称代词的所有格写法 = 人称代词 + 名词</strong></p><table><thead><tr><th>人称代词的所有格的写法对照表</th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td></td><td align="center">我的</td><td align="center">你的</td><td align="center">他的</td><td align="center">她的</td><td align="center">它的</td></tr><tr><td></td><td align="center">my</td><td align="center">your</td><td align="center">his</td><td align="center">her</td><td align="center">its</td></tr><tr><td></td><td align="center">我们的</td><td align="center">你们的</td><td align="center">他们的</td><td align="center"></td><td align="center"></td></tr><tr><td></td><td align="center">our</td><td align="center">your</td><td align="center">their</td><td align="center"></td><td align="center"></td></tr></tbody></table><p><strong>注意不要用a，另外注意人称是使用is，或者are</strong></p><p><strong>its是物主代词，指的是它的，it‘s是it is的缩写，指的是它是</strong></p><p><strong>简单练习：</strong></p><ol><li><p>它是我的餐桌。</p><p><u>It is  my table.</u></p></li><li><p>它是我的餐桌吗？<br><u>Is it my table?</u></p></li><li><p>是的，它是我的餐桌。<br><u>Yes,It is my table.</u></p></li><li><p>我是你的老师。<br><u>I’m  your teacher.</u></p></li><li><p>我是你的老师吗？<br><u>Am  I your teacher?</u></p></li><li><p>不，你不是我的老师。</p><p><u>No,your are not my teacher.</u></p></li><li><p>那是他的房子。<br><u>That is his house.</u></p></li><li><p>那是他的房子吗？<br><u>Is that his house?</u></p></li><li><p>是的，那是他的房子。<br><u>Yes,that is his house.</u></p></li><li><p>那是她的书桌。<br><u>That is her desk.</u></p></li><li><p>那是她的书桌吗？<br><u>Is that her desk?</u></p></li><li><p>不，那不是她的书桌。<br><u>No,that is not her desk.</u></p></li><li><p>那是我们的书桌。<br><u>That is our desk.</u></p></li><li><p>那是我们的书桌吗？<br><u>Is that our desk?</u></p></li><li><p>是的，那是我们的书桌。<br><u>Yes,that is our desk.</u></p></li><li><p>这是他们的狗。<br><u>This is their dog.</u></p></li><li><p>这是他们的狗吗？<br><u>Is this their dog.</u></p></li><li><p>不，这个不是他们的狗。<br><u>No,this is not their dog.</u></p></li><li><p>这些是你们的椅子。<br><u>These are your chairs.</u>   （复数记得名词加s）</p></li><li><p>这些是你们的椅子吗？<br><u>Are these your chairs?</u></p></li><li><p>不，这些不是我们的椅子。<br><u>No,these are not our chairs.</u></p></li><li><p>那些是我们的朋友。<br><u>Those are our friends.</u></p></li><li><p>那些是我们的朋友吗？<br><u>Are those our friends?</u></p></li><li><p>是的，那些是我们的朋友。<br><u>Yes,those are our friends.</u></p></li><li><p>我的学生是高的。<br><u>My student is tall.</u></p></li><li><p>我的学生是高的吗？<br><u>Is my student tall?</u></p></li><li><p>你的老师是矮的。<br><u>Your teacher is short.</u></p></li><li><p>你的老师是矮的吗？<br><u>Is your teacher short.</u></p></li><li><p>他的爸爸是快乐的。<br><u>His father is happy.</u></p></li><li><p>他的爸爸是快乐的吗？<br><u>Is his father happy?</u></p></li><li><p>她的妹妹们是伤心的。<br><u>Her sister are sad.</u></p></li><li><p>她的妹妹们是伤心的吗？<br><u>Are her sister sad?</u></p></li><li><p>它的耳朵是红色的。<br><u>Its ear is red.</u></p></li><li><p>它的耳朵是红色的吗？<br><u>Is its ear is red?</u></p></li><li><p>我们的医生是忙碌的。<br><u>Our doctor is busy.</u></p></li><li><p>我们的医生是忙碌的吗？<br><u>Is our doctor busy?</u></p></li><li><p>你们的钢琴是白色的。<br><u>Your piano is white.</u></p></li><li><p>你们的钢琴是白色的吗？<br><u>Is your piano white?</u></p></li><li><p>他们的司机是懒惰的。<br><u>Their driver is lazy.</u></p></li><li><p>他们的司机是懒惰的吗？</p><p><u>Is their driver lazy?</u></p></li></ol><h3 id="Lesson8-What-疑问句与专有名词"><a href="#Lesson8-What-疑问句与专有名词" class="headerlink" title="Lesson8 What 疑问句与专有名词"></a>Lesson8 What 疑问句与专有名词</h3><blockquote><p>“what” 要放在句首形成疑问句，句尾语调要下降。what是疑问词 = “什么” 的意思，what本身兼具疑问词和代词的特性 = 疑问词（形成疑问语气）+  代词 （代词要问的东西）。之前的一般疑问句只要把am，are，is放在句首就可以了，但有疑问词What的疑问句，必须要把what放到is，am，are之前句首的位置，形成疑问语气。</p></blockquote><p><strong>what + be动词</strong></p><p><strong>简单练习：</strong></p><ol><li><p>这个是什么？<br><u>What is this?</u></p></li><li><p>这个是一本书。<br><u>This is a book.</u></p></li><li><p>那个是什么？<br><u>What is that?</u></p></li><li><p>那个是一支笔。<br><u>That is a pen.</u></p></li><li><p>这是你的名字。<br><u>This is your name.</u></p></li><li><p>这是你的名字吗？<br><u>Is this your name?</u></p></li><li><p>你的名字是什么？<br><u>What is your name?</u></p></li><li><p>那是他的名字。<br><u>That is his name.</u></p></li><li><p>那是他的名字吗？<br>Is that his name?</u></p></li><li><p>他的名字是什么？</p><p><u>What is his name?</u></p></li></ol><blockquote><p>专有名词，是独一无二的名词，第一个字母永远要大写。</p></blockquote><p><strong>注意：专有名词无论在句子什么位置，第一个字母要大写，并且是独一无二的，所以前面不需要加a来表示数量。</strong></p><table><thead><tr><th align="center">常见以下几种：</th><th align="center"></th><th align="center"></th></tr></thead><tbody><tr><td align="center"></td><td align="center">人名</td><td align="center">John 约翰</td></tr><tr><td align="center"></td><td align="center">地名</td><td align="center">Taipei 台北</td></tr><tr><td align="center"></td><td align="center">国家</td><td align="center">America 美国</td></tr><tr><td align="center"></td><td align="center">语言</td><td align="center">English 英文</td></tr></tbody></table><p><strong>简单练习：</strong></p><ol><li>什么是你的名字。<br><u>What is your name.</u></li><li>我的名字是约翰。<br><u>My name is John.</u></li><li>什么是她的名字？<br><u>What is her name.</u></li><li>她的名字是玛丽。<br><u>Her name is Mary.</u></li><li>什么是他的名字？<br><u>What is his name？</u></li><li>他的名字是比利<br><u>His name is Billy</u></li></ol><h3 id="Lesson9-Why疑问句的用法"><a href="#Lesson9-Why疑问句的用法" class="headerlink" title="Lesson9 Why疑问句的用法"></a>Lesson9 Why疑问句的用法</h3><blockquote><p>“why” 要放在句首形成疑问句，是用来询问对方原因的问句，句尾的语调要下降。</p></blockquote><p><strong>简单例句：</strong></p><p>Step 1 先想肯定句</p><p>中文：约翰是伤心的。</p><p>英文：John is sad.</p><p>Step 2 再改成疑问句</p><p>中文： 约翰是伤心的吗？</p><p>英文：Is John sad？</p><p>Step3 再改成有why的疑问句</p><p>中文：为什么约翰是伤心的？</p><p>英文：Why is John sad？</p><p><strong>疑问词基本条件是将be动词 am、is、are放到句首，单是遇到what/why时，必须把what/why放到 am，are，is更前面的句首的位置，来形成疑问语气！</strong></p><p><strong>简单练习：</strong></p><ol><li><p>他的猫是脏的。<br><u>His cat is dirtty.</u></p></li><li><p>他的猫是脏的吗？</p><p><u>Is his cat dirty.</u></p></li><li><p>为什么他的猫是脏的？<br><u>Why is his cat  dirty?</u></p></li><li><p>那张餐桌是小的。<br><u>That tableis small.</u></p></li><li><p>那张餐桌是小的吗？<br><u>Is that tabke small?</u></p></li><li><p>为什么那张餐桌是小的？<br><u>Why is that desk small?</u></p></li><li><p>你哥哥是生病的。<br><u>Your brother is sick.</u></p></li><li><p>你哥哥是生病的吗？<br><u>Is your brother sick.</u></p></li><li><p>为什么你哥哥是生病的？<br><u>Why is your brother sick?</u></p></li><li><p>那个学生是笨的？<br><u>That student is stupid.</u></p></li><li><p>那个学生是笨的吗？<br><u>Is that student stupid?</u></p></li><li><p>为什么那个学生是笨的？<br><u>Why is that student stupid.</u></p></li><li><p>你叔叔是自私的（selfish）。<br><u>Your uncle is selfish.</u></p></li><li><p>你叔叔是自私的吗？<br><u>Is your uncle  selfish</u></p></li><li><p>为什么你叔叔是自私的？<br><u>Why is your uncle selfish?</u></p></li><li><p>那个有差（postman）是诚实的（honest）。<br><u>That postman is honest.</u></p></li><li><p>那个邮差是诚实的吗？<br><u>Is that postman honset?</u></p></li><li><p>为什么那个邮差是诚实的？<br><u>Why is that postman honest</u> ?</p></li></ol><h3 id="Lesson10-Every的用法"><a href="#Lesson10-Every的用法" class="headerlink" title="Lesson10 Every的用法"></a>Lesson10 Every的用法</h3><blockquote><p>every的用法： “every” = “每一个”，属于形容词，”每一个”算是单数，必须和单数名词配合，所以be动词要用is.</p></blockquote><p>每个学生 = every student</p><p><strong>简单例子：</strong></p><ol><li><p>每一栋房子是绿色的。<br><u>Every house is green.</u></p></li><li><p>每一栋房子是绿色的吗？<br><u>Is every house green?</u></p></li><li><p>为什么每一栋房子是绿色的？<br><u>Why is every house green?</u></p></li><li><p>每一位邮差是忙碌的。<br><u>Every postman is busy.</u></p></li><li><p>每一位邮差是忙碌的吗？<br><u>Is every postman busy?</u></p></li><li><p>为什么每一位邮差是忙碌的？<br><u>Why is every postman busy?</u></p></li><li><p>每一只猫是干净的。<br><u>Every cat is clean?</u></p></li><li><p>每一只猫是干净的吗？<br><u>Is every cat clean?</u></p></li><li><p>为什么每一只猫是干净的？<br><u>Why is every cat clean?</u></p></li></ol><h3 id="Lesson11-连词because的用法"><a href="#Lesson11-连词because的用法" class="headerlink" title="Lesson11 连词because的用法"></a>Lesson11 连词because的用法</h3><blockquote><p>beacuse的用法： 句子1 + because + 句2</p></blockquote><p><strong>简单练习：</strong></p><ol><li><p>那个农夫是瘦的。<br><u>That farmer is thin</u></p></li><li><p>那个农夫是瘦的吗？<br><u>Is that farmer thin?</u></p></li><li><p>为什么那个农夫是瘦的？<br><u>Why is that farmer thin?</u></p></li><li><p>那个农夫是瘦的因为他是生病的。<br><u>That farmer is thin beacuse he is sick.</u></p></li><li><p>你是虚弱的。<br><u>You are weak.</u></p></li><li><p>你是虚弱的吗？<br><u>Are you weak?</u></p></li><li><p>为什么你是虚弱的？<br><u>Why are you weak?</u></p></li><li><p>我是虚弱的因为我是生病的。<br><u>I am weak because I am sick.</u></p></li><li><p>这个名字是好的。<br><u>This name is good.</u></p></li><li><p>这个名字是好的嘛？<br><u>Is this name good?</u></p></li><li><p>为什么这个名字是好的？<br><u>Why is this name good?</u></p></li><li><p>这个名字是好的是因为它是我的名字。<br><u>This name is good because  it is my name.</u></p></li><li><p>戴维是一个好学生。<br><u>David is a good student</u></p></li><li><p>戴维是一个好学生吗？<br><u>Is David  a good student?</u></p></li><li><p>为什么戴维是一个好学生？<br><u>Why is David  a good studnet.</u></p></li><li><p>戴维是一个好学生因为他是诚实的。<br><u>David is a good student because he is honest.</u></p></li><li><p>他是一位好医生。<br><u>He is a good doctor.</u></p></li><li><p>他是一位好医生吗？<br><u>Is he a good doctor?</u></p></li><li><p>为什么他是一位好医生？<br><u>Why is he a good doctor?</u></p></li><li><p>他是一位好医生是因为他是仁慈的（Kind）。<br><u>He is a good doctor because he is kind.</u></p></li></ol><blockquote><p>because也可放在句首 = Because + 句子1 ， + 句子2。</p></blockquote><p><strong>注意，中文讲因为所以，而英文没有，所以because放在句首时，句子2的的逗号 “,” 可以当成所以不能省略。</strong></p><p><strong>简单练习：</strong></p><ol><li>我们学生是聪明的。<br><u>Our students are  smart.</u></li><li>我的学生们是聪明的吗？<br><u>Are my students smart?</u></li><li>为什么我的学生们是聪明的？<br><u>Why are my students smart?</u></li><li>因为你是聪明的，你的学生们是聪明的。<br><u>Beacuse you are smart,your students are smart.</u></li><li>这张书桌是好的。<br><u>This desk is good.</u></li><li>这张书桌是好的嘛？<br><u>Is this desk good?</u></li><li>为什么这张书桌是好的？<br><u>Why is this desk good?</u></li><li>因为这张书桌是干净的，它是好的。<br><u>Because this desk is clean,it is good.</u></li><li>我哥哥是伤心的。<br><u>My brother is sad.</u></li><li>我哥哥是伤心的吗？<br><u>Is my brother sad?</u></li><li>为什么我哥哥是伤心的？<br><u>Why is my brother sad?</u></li><li>因为你哥哥是生病的，他是伤心的。<br><u>Because your brother is sick,he is sad.</u></li></ol><h3 id="Lesson12-Who的用法"><a href="#Lesson12-Who的用法" class="headerlink" title="Lesson12 Who的用法"></a>Lesson12 Who的用法</h3><blockquote><p>跟what和why相同相同，放在句首形成疑问句。am,are,is之前。</p></blockquote><p><strong>简单练习：</strong></p><ol><li>那个邮差是谁？<br><u>Who is that postman?</u></li><li>那个邮差是我父亲。<br><u>That postman is my father</u></li><li>那个司机是谁？<br><u>Who is that driver?</u></li><li>那个司机是我叔叔。<br><u>That driver is my uncle.</u></li><li>那个学生是谁？<br><u>Who is that student?</u></li><li>那个学生是约翰。<br><u>That student is John.</u></li><li>这个女孩是谁？<br><u>Who is this girl?</u></li><li>这个女孩是我的朋友。<br><u>This girl is my friend.</u></li><li>你的护士是谁？<br><u>Who is your nurse?</u></li><li>我的护士是那个女孩。<br><u>My nurse is that girl.</u></li><li>那个男服务生（waiter）是谁？<br><u>Who is that waiter ?</u></li><li>那个男服务生是我的哥哥。<br><u>That waiter is my elder brother.</u><br>   (如果没指出来大哥 或者 大姐 通常都是brother或sister ,如果不是要加 elder代表年长的，弟弟可以用younger brother)</li><li>那个女服务生（waiteress）是谁？<br><u>Who is that waiteress?</u></li><li>那个女服务生是我的姐姐。<br><u>That waiteress is my sister.</u></li><li>你的弟弟是谁？<br><u>Who is your brother?</u></li><li>我的弟弟是比利。<br><u>My brother is Billy.</u></li><li>你的朋友是谁？<br><u>Who is your friend?</u></li><li>我的朋友是林先生（Mr.Lin）.<br><u>My friend is Mr.Lin.</u></li><li>他的祖母是谁？<br><u>Who is he grandmother?</u></li><li>他的祖母是林太太（Mrs.Lin）<br><u>His grandmother is Mrs.Lin.</u></li></ol><h3 id="Lesson13-How-疑问句与-fine-的用法"><a href="#Lesson13-How-疑问句与-fine-的用法" class="headerlink" title="Lesson13 How 疑问句与  fine 的用法"></a>Lesson13 How 疑问句与  fine 的用法</h3><blockquote><p>“How” 是疑问词，是”如何”的意思。比如相互问候，用法也和what、why、who一样，在am、is、are之前，回答时候通常会用”fine”这个形容词，代表 “身体安好”的意思。</p></blockquote><p><strong>注意：询问对象如果是 “你” 要用are,其他都是is</strong></p><p><strong>简单练习：</strong></p><ol><li>那个邮差（身体）好吗？<br><u>How is that postman?</u></li><li>那个邮差很好。<br><u>That postman is fine.</u></li><li>那个婴儿好吗？<br><u>How is that baby?</u></li><li>那个婴儿很好。<br><u>That baby is fine.</u></li><li>你的朋友好吗？<br><u>How is your friend?</u></li><li>我的朋友很好。<br><u>My friend is fine.</u></li><li>那个司机好吗？<br><u>How is that driver?</u></li><li>他很好。<br><u>He is fine.</u></li><li>她的叔叔好吗？<br><u>How is her uncle?</u></li><li>他很好。<br><u>He is fine.</u></li><li>玛丽好吗？<br><u>How is Mary?</u></li><li>她很好。<br><u>She is fine.</u></li></ol><blockquote><p>How + 形容词  = 形成不同意思的问法。</p></blockquote><p>例如：How + old  = 如何老 = 多老 = 几岁的意思，而 How + new = 如何新 = 多新的意思！</p><p><strong>注意：How + 形容词 也要放到 am is are 之前，形成疑问语气。</strong></p><p><strong>简单练习：</strong></p><ol><li><p>你是多高呢？（tall高形容人）</p><p><u>How tall are you?</u></p></li><li><p>我妈妈是多生气呢？<br><u>How angry is my mother?</u></p></li><li><p>他的祖母是多大年纪呢？<br><u>How old is his grandmother?</u></p></li><li><p>你的学生是多诚实呢？<br><u>How honest  are(is) your stundets(不加s)？</u></p></li><li><p>那个邮差是多忙碌呢？<br><u>How busy is that postman?</u></p></li><li><p>我们的老师是多伤心呢？<br><u>How sad is our teacher?</u></p></li><li><p>那只狗是多大呢？<br><u>How big is that dog?</u></p></li><li><p>那架飞机是多漂亮呢？<br><u>How beautiful is that air plane?</u></p></li><li><p>我儿子（son）是多笨呢？<br><u>How stupid is my son?</u></p></li><li><p>你女儿（daughter）是多懒惰呢？<br><u>How lazy is your daughter?</u></p></li></ol><h3 id="Lesson14-Where疑问句用法"><a href="#Lesson14-Where疑问句用法" class="headerlink" title="Lesson14 Where疑问句用法"></a>Lesson14 Where疑问句用法</h3><blockquote><p>where和what,who,why，用法基本相同，放在句首且在am,are,is之前，主要表示在哪里的意思。</p></blockquote><p><strong>注意人称，如果是指你要用are,其他用is</strong></p><p><strong>简单练习：</strong></p><ol><li>玛丽（是）在哪里？<br><u>Where is Mary?</u></li><li>你在哪里？<br><u>Where are you?</u></li><li>他们是在哪里？<br><u>Where are they?</u></li><li>那个医生在哪里？<br><u>Where is that doctor?</u></li><li>那个男服务生在哪里？<br><u>Where is that waiter?</u></li><li>她的父母在哪里？<br><u>Where is(are) her parent(加s)?</u></li><li>我的朋友们在哪里？<br><u>Where are my friends?</u></li><li>你的时钟（clock）在哪里？<br><u>Where is your clock?</u></li><li>我的杯子（cup）在哪里？<br><u>Where is my cup?</u></li><li>她的沙发（sofa）在哪里？<br><u>Where is her sofa?</u></li><li>那架商店（store）在哪里？<br><u>Where is that store?</u></li><li>那架书店（bookstore）在哪里？<br><u>Where is that bookstore?</u></li><li>我的脚踏车（bicycle）在哪里？<br><u>Where is my bicycle?</u></li><li>我们的学校在哪里？<br><u>Where is our school?</u></li><li>他们的教室（classroom）在哪里？<br><u>Where is their classroom?</u></li></ol><h3 id="Lesson15-介词-in的用法（在…里面）"><a href="#Lesson15-介词-in的用法（在…里面）" class="headerlink" title="Lesson15 介词 in的用法（在…里面）"></a>Lesson15 介词 in的用法（在…里面）</h3><blockquote><p>中文里要表示 东西之间的相对位置，会用 里/外/上/下等说法让人理解，英文也一样也会用 里/外/上/下的词性来说明，而具有这样词性的单词就被称为介词。</p></blockquote><p><strong>in（介词） = 在 ….里面的意思</strong></p><p><strong>in的后面常搭配空间（盒子/房屋）</strong></p><p>例句：</p><ol><li><p>那只猫在我的房间里。</p><p>那只猫 + 是 + 在我的房间里<br>That cat is in my room.</p></li></ol><p><strong>注意不要省略动词。英文句子必须要有动词，不能省略is</strong></p><p><strong>简单练习：</strong></p><ol><li><p>你妹妹在哪里？<br><u>Where is your sister</u></p></li><li><p>我妹妹（是）在她的房间里。<br><u>My sister is in her room</u></p></li><li><p>你妹妹是在她的房间里吗？<br><u>Is your sister in her room?</u></p></li><li><p>是的，她在。</p><p><u>Yes,she is.</u></p></li><li><p>为什么你妹妹在她房间里。<br><u>Why is your sister in her room?</u></p></li><li><p>她是在她（自己）的房间里面因为她是疲倦的（tired）。<br><u>She is in her room because she is tired.</u></p></li><li><p>那个人在哪里？<br><u>Where is that person?</u></p></li><li><p>那个人在我的房子里.<br><u>That person is in my house.</u></p></li><li><p>那个人在你的房间里吗？<br><u>Is that person in your house?</u></p></li><li><p>是的，他在。<br><u>Yes,he is.</u></p></li><li><p>为什么那个人在你的房间里？<br><u>Why is that person in your house?</u></p></li><li><p>那个人在我的房间里因为他是我的丈夫（husband）。<br><u>That person is in my house because he is my husband.</u></p></li><li><p>你父亲在哪里？<br><u>Where is your father?</u></p></li><li><p>我父亲在他的办公室里（office）里。<br><u>My father is in his office.</u></p></li><li><p>你父亲在他的办公室里吗？<br><u>Is your father in his office?</u></p></li><li><p>是的，他在。<br><u>Yes,he is.</u></p></li><li><p>为什么你父亲在他的办公室里？<br><u>Why is your father in his office.</u></p></li><li><p>他在他的办公室里因为他是忙碌的。<br><u>He is in his office because he is busy.</u></p></li><li><p>那位友善的（friendly）女服务生在哪里？<br><u>Where is that friendly waitress ?</u></p></li><li><p>那位友善的女服务生在那家书店里。<br><u>That friendly waitress is  in that bookstore. </u></p></li><li><p>那位友善的女服务生在那家书店里吗？<br><u>Is that friendly waitress in that bookstore?</u></p></li><li><p>是的，她在。<br><u>Yes,she is.</u></p></li><li><p>为什么那位友善的女服务生在那家书店里？<br><u>Why is that  friendly waitress in that bookstore? </u></p></li><li><p>她在那家书店里因为她儿子在那家书店里。<br><u>She is in that bookstore because her son is in that bookstore.</u></p></li><li><p>那个健康的（healthy）婴儿在哪里？<br><u>Where is that healthy baby?</u></p></li><li><p>那个健康的婴儿在她的汽车里。<br><u>That healthy baby is in her car.</u></p></li><li><p>那个健康的婴儿在她的汽车里吗？<br><u>Is that healthy baby in her car?</u></p></li><li><p>是的，他在。<br><u>Yes,he is.</u></p></li><li><p>为什么那个健康的婴儿在她的汽车里。<br><u>Why is that healthy baby  in her car?</u></p></li><li><p>那个健康婴儿在她的汽车里因为她是他的母亲。<br><u>That healthy baby is in her car because she is his mother.</u></p></li><li><p>那只猴子在哪里？<br><u>Where is that monkey.</u></p></li><li><p>那只猴子在我的教室里。<br><u>That moneky is in my classroom.</u></p></li><li><p>那只猴子在你的教室里吗？<br><u>Is that monkey in your classroom?</u></p></li><li><p>是的，它在。<br><u>Yes,it is.</u></p></li><li><p>为什么那只猴子在你的教室里？<br><u>Why is that monkey  in your classroom?</u></p></li><li><p>它在我的教室里因为它是我的宠物（pet）。<br><u>It is in my classroom because it is my pet.</u></p></li></ol><h3 id="Lesson16-介词on的用法（在…上面）"><a href="#Lesson16-介词on的用法（在…上面）" class="headerlink" title="Lesson16 介词on的用法（在…上面）"></a>Lesson16 介词on的用法（在…上面）</h3><blockquote><p>介词on 在….上面，两者之间的相对位置</p></blockquote><p><strong>on（介词） =  在….上面的意思</strong></p><p><strong>例句</strong></p><ul><li><p>那个中国在你的椅子上</p><p>That apple is on your chair.（不要省略be动词）</p></li></ul><p><strong>简单练习</strong></p><ol><li><p>那本书（是）在你的书桌上。<br><u>That book is on your desk.</u></p></li><li><p>那本书（是）在我的书桌上吗？<br><u>Is that book on my book?</u></p></li><li><p>是的，它在。<br><u>Yes,it is.</u></p></li><li><p>为什么那本书（是）在我的书桌上？<br><u>Why is that book on my desk?</u></p></li><li><p>那本书在你的书桌上因为它是你的书。<br><u>That book is on your desk because it is your book.</u></p></li><li><p>那只狗在她的餐桌上。<br><u>That dog is on her table.</u></p></li><li><p>那只狗是在她的餐桌上吗？<br><u>Is that dog on her table?</u></p></li><li><p>是的，它在。<br><u>Yes,it is.</u></p></li><li><p>为什么那只狗在她的餐桌上？</p><p><u>Why is that dog  on her table?</u></p></li><li><p>那只狗在她的餐桌上因为它是饥饿的（hungry）。</p><p><u>That dog  is on her table because it is hungry</u></p></li></ol><p><strong>注意：”在树上”有两种写法，如果是树自己的东西 果子、叶子用on，其他比如鸟、猴子要用in。</strong></p><h3 id="Lesson17-其他常用介词短语"><a href="#Lesson17-其他常用介词短语" class="headerlink" title="Lesson17 其他常用介词短语"></a>Lesson17 其他常用介词短语</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    C&#123;其他介词&#125; --&gt; D[at]</span><br><span class="line">    D --&gt; E&#123;在...地点&#125;</span><br><span class="line">    C --&gt; F&#123;beside&#125;</span><br><span class="line">    F --&gt; G&#123;在...旁边&#125;</span><br><span class="line">    C --&gt; H&#123;near&#125;</span><br><span class="line">    H --&gt; I&#123;在...附近&#125;</span><br><span class="line">    C --&gt; J&#123;under&#125;</span><br><span class="line">    J --&gt; K&#123;在...正下方&#125;</span><br><span class="line">    C --&gt; L&#123;over&#125;</span><br><span class="line">    L --&gt; M&#123;在...正上方&#125;</span><br><span class="line">    C --&gt; N&#123;below&#125;</span><br><span class="line">    N --&gt; A&#123;在...下方&#125;</span><br><span class="line">    C --&gt; B&#123;above&#125;</span><br><span class="line">    B --&gt; V&#123;在...上方&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><blockquote><p>at（介词） = “在….地点旁边”的意思。</p><p>例如： 在车站  = at + station</p><p>例句：他在那个车站。</p><p>He is at that station.</p><p><strong>注意不要忽略动词！</strong></p></blockquote><hr><blockquote><p>beside（介词） = “在…东西旁边” 的意思（靠的很近）。</p><p>例如：靠在约翰旁边 = beside + John</p><p>例句：那只猫在你的婴儿旁边。</p><p>That cat is beside your baby.</p><p><strong>注意不要忽略动词！</strong></p></blockquote><hr><blockquote><p>near（介词） = “在…东西附近”（距离较远）</p><p>例如：你爸爸在车站附近 = 你爸爸 + near + 车站</p><p>例句：我的房子在那个公园附近。</p><p>My house is near that park.</p><p><strong>注意不要忽略动词！</strong></p></blockquote><hr><blockquote><p>under/below（介词） = “在什么东西下面的意思”</p><p>注意二者不同：</p><ol><li><p>under 是强调 “在….正下方”。</p></li><li><p>below 只是说 “在…下方”</p></li></ol><p>例句①：那只狗在树下。</p><p>That dog is below tree.</p><p>例句②：那只狗正在树的下方。</p><p>That dog is under tree.</p></blockquote><hr><blockquote><p>over/above（介词） = “在…东西上方”</p><p>注意二者不同：</p><ol><li><p>over是强调 “在…正上方”。</p></li><li><p>above是说  “在…上方”</p></li></ol><p>例句①：那个气球在你的房子上方。</p><p>That balloon is above your house.</p><p>例句②：那个气球在你的房子正上方。</p><p>That balloon is over your house.</p></blockquote><p><strong>简单例句：</strong></p><ol><li><p>那把钥匙（是）在那个盒子里（in）。</p><p><u>That key is in that box.</u></p></li><li><p>那把钥匙在那个盒子里吗？<br><u>Is that key in that box?</u></p></li><li><p>不，它不在。<br><u>No,it is not.</u></p></li><li><p>那把钥匙在你的桌上。<br><u>That key is on your table.</u></p></li><li><p>她的狗是在那个商店旁边。<br><u>Her dog is at that store.</u></p></li><li><p>她的狗在那个商店旁边吗？<br><u>Is her dog at that store.</u></p></li><li><p>不，它不在。<br><u>No,it is not.</u></p></li><li><p>她的狗在你丈夫旁边。<br><u>Her dog is beside your husband.</u></p></li><li><p>你的房子在这个公园旁边。<br><u>Your house is beside that park.</u></p></li><li><p>你的房子在这个公园旁边吗？<br><u>Is your house beside this park?</u></p></li><li><p>不，我的房子不在这个公园旁边。<br><u>No,my house is not beside this park.</u></p></li><li><p>我的房子在这个公园附近。<br><u>My house is near that park.</u></p></li><li><p>那个气球在这颗树下。<br><u>That balloon is below this tree.</u></p></li><li><p>那个气球在这颗树下吗？<br><u>It that balloon below this tree?</u></p></li><li><p>不，它不在。<br><u>No,it is not.</u></p></li><li><p>那个气球在这颗树的上方。<br><u>That balloon is above this tree.</u></p></li><li><p>那只蝴蝶在他的头正上方。<br><u>That butterfly is over his head.</u></p></li><li><p>那只蝴蝶是在他的头正上方吗？<br><u>Is that butterfly over his head?</u></p></li><li><p>不，它不在。<br><u>No,it is not.</u></p></li><li><p>那只蝴蝶在那张桌子的正下方。<br><u>That butterfly is under that table.</u></p></li><li><p>那只鸟在那棵树上。<br><u>That bird is in that tree.</u></p></li><li><p>那只鸟是在那棵树上吗？<br><u>Is that bird in that tree?</u></p></li><li><p>不，它不在。<br><u>No,it is not.</u></p></li><li><p>那只鸟在那个窗户旁。<br><u>That bird is beside that window.</u></p></li></ol><h3 id="Lesson18-Whose疑问句的用法"><a href="#Lesson18-Whose疑问句的用法" class="headerlink" title="Lesson18 Whose疑问句的用法"></a>Lesson18 Whose疑问句的用法</h3><blockquote><p>whose代表谁的，用法跟what，why相同，需放在am，are，is之前。</p><p>句型：谁的什么东西 + 是 + 这个</p><p>（Whose ….  什么什么 在这里是形容词用法 = 谁的什么东西，this、 that 等代表这只 或者那个）</p></blockquote><p><strong>简单练习：</strong></p><ol><li><p>那本书是谁的？<br><u>Whose book is that?</u></p></li><li><p>这本书是谁的？<br><u>Whose book is this?</u></p></li><li><p>你是谁的老师？<br><u>Whose teacher are you?</u></p></li><li><p>这些鸟是谁的？<br><u>Whose birds is these?</u>  （注意复数名词加s）</p></li><li><p>那些鸡是谁的？<br><u>Whose chickens is thoese?</u></p></li><li><p>他是谁的父亲？</p><p><u>Whose father is he?</u></p></li></ol><h3 id="Lesson19-单、复数名词的所有格表达"><a href="#Lesson19-单、复数名词的所有格表达" class="headerlink" title="Lesson19 单、复数名词的所有格表达"></a>Lesson19 单、复数名词的所有格表达</h3><blockquote><p>我们常讲你的、我的、妈妈的等，英文后面也也有相同的讲法，中文要加上 “的”，英文要求在名词后面加上’s’来表示，这样的写法称为 “所有格”，用来说明东西的所有权归属。</p></blockquote><p><strong>注意：名词的所有格只限有生命的”人”或者”动物”</strong></p><p>实例:</p><p>约翰的 = John’s</p><p>那只狗的 = that dog’s</p><p>我父亲的 = my father’s</p><p>他的学生的 = his student’s</p><p>那个男人的 = that man’s</p><p><strong>简单练习：</strong></p><ol><li>约翰的房间是小的。<br><u>John’s room is small.</u></li><li>你学生的狗是大的。<br><u>Your student’s dog is big.</u></li><li>那只猫的尾巴（tail）是短的。<br><u>That cat’s tail is short.</u></li><li>他是我妹妹的朋友。<br><u>He is my sister’s friend.</u></li><li>这个人是玛丽的司机。<br><u>This person  is Mary’s driver.</u></li></ol><blockquote><p>复数名词 词尾有s的，要写成s’</p></blockquote><table><thead><tr><th align="center">复数名词</th><th align="center">词尾有s的所有格</th></tr></thead><tbody><tr><td align="center">猫儿们（cats）</td><td align="center">cats’</td></tr><tr><td align="center">女孩们（girls）</td><td align="center">girls’</td></tr><tr><td align="center">父母们（parents）</td><td align="center">parents’</td></tr></tbody></table><blockquote><p>复数名词词尾没有s的，要写成’s</p></blockquote><table><thead><tr><th align="center">复数名词</th><th align="center">词尾没有s的所有格</th></tr></thead><tbody><tr><td align="center">男人们（men）</td><td align="center">men‘s</td></tr><tr><td align="center">女人（women）</td><td align="center">women’s</td></tr><tr><td align="center">小孩们（children）</td><td align="center">children’s</td></tr></tbody></table><p><strong>简单练习：</strong></p><ol><li><p>那些猫的尾巴是白色的。<br><u>Thoese cats’ tails are white.</u></p></li><li><p>这些是我的老师的书。<br><u>These are my teachers’ books.</u></p></li><li><p>那些是我的弟弟们的房间。<br><u>Thoese are my brothers’ room.</u></p></li><li><p>这些小孩们的手是干净的。<br><u>These children’s hands are clean.</u></p></li><li><p>那些女人们的帽子是漂亮的。<br><u>Thoese women’s cap are beautiful.</u></p></li><li><p>那些男人们车是脏的。<br><u>Thoese men’s car is dirty.</u></p></li></ol><blockquote><p>所有格代词是为了避免重复叙述的写法。</p></blockquote><p>如果我们说“这本书是我的书”，就重复说了一次 “书”，这样就有些多余，因此在英文中，就会使用所有格代词来避免不断重复地叙述。</p><table><thead><tr><th align="center">mine</th><th align="center">yours</th><th align="center">his</th><th align="center">hers</th><th align="center">its</th></tr></thead><tbody><tr><td align="center">my + 名词</td><td align="center">yours + 名词</td><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">my book</td><td align="center">your book</td><td align="center">…</td><td align="center">…</td><td align="center">…</td></tr><tr><td align="center">ours</td><td align="center">theirs</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">…</td><td align="center">….</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">….</td><td align="center">….</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><p><strong>注意：只有his和its，和它们自己的所有格写法一样。</strong></p><p><strong>简单练习</strong></p><ol><li>那本书是谁的？<br><u>Whose book is that？</u></li><li>那本书是她的。<br><u>That book is hers.</u></li><li>这本书是谁的？<br><u>Whose book is this?</u></li><li>这本书是我的。<br><u>This book is mine.</u></li><li>这只狗是谁的？<br><u>Whose dog is this?</u></li><li>这只狗是你的。<br><u>This dog are yours.</u></li><li>那只猫是谁的？<br><u>Whose cat is that?</u></li><li>那只猫是他们的。<br><u>That cat is theirs.</u></li><li>这些鸡是谁的？<br><u>Whose chickens are these?</u></li><li>这些鸡是他的。<br><u>These chickens are his.</u></li><li>那些书是谁的？<br><u>Whose books are thoese?</u></li><li>那些书是我们的。<br><u>Thoese books are ours.</u></li><li>这些花是谁的？<br><u>Whose flowers  is these?</u></li><li>这些花是你们的。<br><u>These flowers are yours.</u></li></ol><h3 id="Lesson20-Which疑问句的用法"><a href="#Lesson20-Which疑问句的用法" class="headerlink" title="Lesson20 Which疑问句的用法"></a>Lesson20 Which疑问句的用法</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;高频词汇&quot;&gt;&lt;a href=&quot;#高频词汇&quot; class=&quot;headerlink&quot; title=&quot;高频词汇&quot;&gt;&lt;/a&gt;高频词汇&lt;/h2&gt;

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;http://miaochen.mcweblog.com</summary>
      
    
    
    
    
    <category term="英语" scheme="http://example.com/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>软考复习</title>
    <link href="http://example.com/2019/08/22/%E8%BD%AF%E8%80%83%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2019/08/22/%E8%BD%AF%E8%80%83%E5%A4%8D%E4%B9%A0/</id>
    <published>2019-08-22T04:35:47.000Z</published>
    <updated>2019-09-04T05:27:31.139Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2019年11月全国计算机技术与软件专业技术资格（水平）考试《电子商务设计师（中级）》复习全书【核心讲义＋历年真题详解】"><a href="#2019年11月全国计算机技术与软件专业技术资格（水平）考试《电子商务设计师（中级）》复习全书【核心讲义＋历年真题详解】" class="headerlink" title="2019年11月全国计算机技术与软件专业技术资格（水平）考试《电子商务设计师（中级）》复习全书【核心讲义＋历年真题详解】"></a>2019年11月全国计算机技术与软件专业技术资格（水平）考试《电子商务设计师（中级）》复习全书【核心讲义＋历年真题详解】</h2><div class="row">    <embed src="http://miaochen.mcweblog.com/2019%E5%B9%B411%E6%9C%88%E5%85%A8%E5%9B%BD%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF%E4%B8%8E%E8%BD%AF%E4%BB%B6%E4%B8%93%E4%B8%9A%E6%8A%80%E6%9C%AF%E8%B5%84%E6%A0%BC%EF%BC%88%E6%B0%B4%E5%B9%B3%EF%BC%89%E8%80%83%E8%AF%95%E3%80%8A%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%B8%88%EF%BC%88%E4%B8%AD%E7%BA%A7%EF%BC%89%E3%80%8B%E5%A4%8D%E4%B9%A0%E5%85%A8%E4%B9%A6%E3%80%90%E6%A0%B8%E5%BF%83%E8%AE%B2%E4%B9%89%EF%BC%8B%E5%8E%86%E5%B9%B4%E7%9C%9F%E9%A2%98%E8%AF%A6%E8%A7%A3%E3%80%91.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="《电子商务设计师考试案例梳理、真题详解与闯关新题-最新版》"><a href="#《电子商务设计师考试案例梳理、真题详解与闯关新题-最新版》" class="headerlink" title="《电子商务设计师考试案例梳理、真题详解与闯关新题  最新版》"></a>《电子商务设计师考试案例梳理、真题详解与闯关新题  最新版》</h2><div class="row">    <embed src="http://miaochen.mcweblog.com/%E3%80%8A%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%B8%88%E8%80%83%E8%AF%95%E6%A1%88%E4%BE%8B%E6%A2%B3%E7%90%86%E3%80%81%E7%9C%9F%E9%A2%98%E8%AF%A6%E8%A7%A3%E4%B8%8E%E9%97%AF%E5%85%B3%E6%96%B0%E9%A2%98%20%20%E6%9C%80%E6%96%B0%E7%89%88%E3%80%8B.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="《软考《电子商务设计师》最完整复习资料》"><a href="#《软考《电子商务设计师》最完整复习资料》" class="headerlink" title="《软考《电子商务设计师》最完整复习资料》"></a>《软考《电子商务设计师》最完整复习资料》</h2><div class="row">    <embed src="http://miaochen.mcweblog.com/%E8%BD%AF%E8%80%83%E3%80%8A%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1%E8%AE%BE%E8%AE%A1%E5%B8%88%E3%80%8B%E6%9C%80%E5%AE%8C%E6%95%B4%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99.pdf" width="100%" height="550" type="application/pdf"></div><h2 id="2018年—软考试卷笔记"><a href="#2018年—软考试卷笔记" class="headerlink" title="2018年—软考试卷笔记"></a>2018年—软考试卷笔记</h2><ol><li>Excel中输入公式”=Round(14.9,0)”单元格的值为（ <strong>15</strong>）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">四舍五入函数，第一个是要保留的数值，第二个代表保留几位，0代表不保留</span><br></pre></td></tr></table></figure><ol start="2"><li><p>计算机系统中，CPU对主存的访问方式属于（<strong>随机存储</strong>）</p></li><li><p>关于磁盘碎片整理程序描述正确的是（<strong>用磁盘碎片整理程序对磁盘进行碎片整理，以提高磁盘访问速度</strong>）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">磁盘碎片通常是文件碎片，是因为文件被分散保存到整个磁盘的不同地方，而不是连续地被保存在磁盘连续的簇中形成的。硬盘在使用一段时间后，由于反复写入和删除文件，磁盘中的空闲扇区会分散到整个磁盘中不连续的物理位置上，从而使文件不能存在连续的扇区里。这样，再读写文件时就需要到不同的地方去读取，增加了磁头的来回移动，降低了磁盘的访问速度。通过碎片整理程序对磁盘进行碎片整理，以提高磁盘访问速度。</span><br></pre></td></tr></table></figure><ol start="4"><li>数字表示的声音在时间上是离散的，而模拟声音在时间上是连续的。要把模拟声音转换为数字声音，就需在某些特定的时刻获取模拟声音，该过程称为（<strong>采样</strong>）</li><li>以下说法中，错误的是(<strong>D</strong>)。<br>A.张某和王某合作完成一款软件，他们可以约定申请专利的权利只属于张某<br>B.张某和王某共同完成了 一项发明创造，在没有约定的情况下，如果张某要 对其单独申请专利就必须征得王某的同意<br>C.张某临时借调到某软件公司工作，在执行该公司交付的任务的过程中，张某完成的发明创造属于职务发明<br>D.甲委托乙开发了一款软件，在没有约定的情况下，由于甲提供了全部的资金和设备，因此该软件著作权属于甲</li><li>VLAN的主要作用<strong>不包括</strong>（<strong>查杀病毒</strong>）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">VLAN的好处主要有：</span><br><span class="line">（1）端口的分隔。即便在同一个交换机上，处于不同VLAN的端口也是不能通信的。这样一个物理的交换机可以当做多个逻辑的交换机使用。</span><br><span class="line">（2）网络的安全。不同VLAN不能直接通信，杜绝了广播信息的不安全性。</span><br><span class="line">（3）灵活的管理。更改用户所属的网络不必换端口和连线，只要更改软件配置就可以了。</span><br><span class="line">注意：不能查杀病毒。</span><br></pre></td></tr></table></figure><ol start="7"><li><p>以用户为中心的软件设计原则不包括(<strong>A</strong>).<br>A.因为客户是上帝，所以客户的需求是天然合理的<br>B.用户不仅需要软件功能，还需要良好的使用体验<br>C.要求用户输入信息时尽量提供选项<br>D.用户最常用的按钮应放在 最明显处</p></li><li><p>以下关于人工智能 (AI)的叙述中,(<strong>B</strong>)并不正确。<br>A.AI不仅是基于大数据的系统，更是具有学习能力的系统<br>B.现在流行的人脸识别和语音识别是典型的人工智能应用<br>C.AI 技术的重点是让计算机系统更简单</p><p>D.AI 有助于企业更好地进行管理和决策</p></li><li><p><u>云计算的基础是虚拟化。以下关于虚拟化的叙述中，(<strong>C</strong>)并不正确。</u><br>A.虚拟化平台旨在提高系统利用率，并通过动态调度实现弹性计算<br>B.将一台服务器虚拟成多台(分割式虚拟化)，旨在提高资源利用率<br>C.将多台服务器虚拟成一台的集群技术，旨在解决计算机能力不足问题<br>D.构件、对象、数据和应用的虚拟化旨在解决诸多信息孤岛的整合问题</p></li><li><p>曾有人将圆周率π小数点后的百万位数字依次排列编成刊物出版作为随机数表使用，每页100行，每行100位,共100页。那么，π小数点后第12345位数字应在该书的(<strong>第2页24行</strong>)</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">100行 * 100位 = 10000</span><br><span class="line">12345 - 10000 = 2345</span><br><span class="line">2345 / 100行 = 23.45</span><br><span class="line">第2页第24行</span><br></pre></td></tr></table></figure><ol start="11"><li>某航空公司拟开发一个机票预订系统。旅客使用信用卡付款预订机票，付款通过信用卡公司的信用卡管理系统提供的接口实现。现拟用数据流图建立需求模型，则信用卡管理系统是（<strong>外部实体</strong>）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部实体指系统以外，又和系统有联系的人或事物，它说明了数据的外部来源和去处，属于系统的外部和系统的界面。外部实体支持系统数据输入的实体称为源点，支持系统数据输出的实体称为终点。 通常外部实体在数据流程图中用正方形框表示，框中写上外部实体名称，为了区分不同的外部实体，可以在正方形的左上角用一个字符表示，同一外部实体可在一张数据流程图中出现多次，这时在该外部实体符号的右下角画上小斜线表示重复。</span><br><span class="line">外部实体定义包括：外部实体编号、名称、简述、及有关数据流的输入和输出。</span><br></pre></td></tr></table></figure><ol start="12"><li>以下叙述中，(<strong>B</strong>)不是一个风险。<br>A.由另一个小组开发的子系统可能推迟交付，导致系统不能按时交付<br>B.客户不清楚想要开发什么样的软件，因此开发小组开发原型帮助其确定需求<br>C.开发团队可能没有正确理解客户的需求<br>D.开发团队核心成员可能在系统开发过程中离职</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本题考查的是风险的概念。一般认为风险保护两个特性：不确定性和损失。不确定性是指风险可能发生也可能不发生；损失是指如果风险发生，就会产生恶性后果。“客户不清楚想要开发什么样的软件”是已经发生的事件，没有不确定性，因此不是一个风险。</span><br></pre></td></tr></table></figure><ol start="13"><li>某计算机系统中互斥资源R的可用数为8,系统中有3个进程P1、P2和P3竞争R,且每个进程都需要i个R,该系统可能会发生死锁的最小i值为(4)。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本题对于R资源可用数为8，分配到3个进程中，为了让最后的i值最小，所以每个进程尽量平均分配，可以得到3 、3、2的分配情况，此时如果假设i的取值为3，则必定不会形成死锁。当i&gt;3时系统会形成死锁，此时取整，即最小i值为4.</span><br></pre></td></tr></table></figure><ol start="14"><li><u>某企业拟开发-一个企业信息管理系统，系统功能与多个部门的业务相关。现希望该系统能够尽快投入使用，系统功能可以在使用过程中不断改善。则最适宜采用的软件过程模型为(<strong>C</strong>)。</u></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">演化模型主要针对事先不能完整定义需求的软件开发。用户可以给出待开发系统的核心需求，并且当看到核心需求实现后，能够有效地提出反馈，以支持系统的最终设计和实现。软件开发人员根据用户的需求，首先开发核心系统。当该核心系统投入运行后，用户试用之，完成他们的工作，并提出精化系统、增强系统能力的需求。软件开发人员根据用户的反馈，实施开发的迭代过程。第一迭代过程均由需求、设计、编码、测试、集成等阶段组成，为整个系统增加一个可定义的、可管理的子集。在开发模式上采取分批循环开发的办法，每循环开发一部分的功能，它们成为这个产品的原型的新增功能。</span><br></pre></td></tr></table></figure><ol start="15"><li>第1空)在某销售系统中，客户采用扫描二维码进行支付。若采用面向对象方法开发该销售系统，则客户类属于(<strong>实体</strong>)类，二维码类属于(<strong>接口</strong>)类。<br>A.接口<br>B.实体<br>C.控制<br>D.状态</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实体类、接口类(边界类)和控制类。实体类的对象表示现实世界中真实的实体，如人、物等。接口类(边界类)的对象为用户提供一种与系统合作交互的方式，分为人和系统两大类，其中人的接口可以是显示屏、窗口、Web窗体、对话框、菜单、列表框、其他显示控制、条形码、二维码或者用户与系统交互的其他方法。系统接口涉及到把数据发送到其他系统，或者从其他系统接收数据。控制类的对象用来控制活动流，充当协调者。</span><br></pre></td></tr></table></figure><ol start="16"><li><u>数据库系统中的视图、存储文件和基本表分别对应数据库系统结构中的（<strong>外模式、内模式和模式</strong>）</u></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">外模式对应数据库系统中的视图</span><br><span class="line">模式就是基本表</span><br><span class="line">内模式是存储文件。</span><br></pre></td></tr></table></figure><ol start="18"><li>一个网络节点数是100，假设网络价值系数为2，根据麦特卡夫定律，该网络价值是（<strong>10000</strong>）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">以太网的发明人鲍勃·麦特卡夫告诉我们：网络价值同网络用户数量的平方成正比，即 N 个联结能创造 N 的2次方效益。如果将机器联成一个网络，在网络上，每一个人都可以看到所有其他人的内容，100人每人能看到100人的内容，所以效率是 10的4次方 。10 的4次方人的效率就是 10的8次方 。</span><br></pre></td></tr></table></figure><ol start="19"><li>EDI的工作内容包含以下几项：<br>①生成平面文件<br>②信息编辑<br>③传送给对方用户<br>④生成EDI标准格式文件正确的工作流程是（<strong>2-1-4-3</strong>）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EDI工作内容：</span><br><span class="line">1、发送方计算机应用系统生成原始用户数据，信息编辑阶段;</span><br><span class="line">2、发生保温的数据映射与翻译（映射程序将用户格式的原始数据报文展开成平面文件，以便使翻译程序能够识别;翻译程序将平面文件翻译成EDI格式文件;平面文件是用户原始资料与EDI标准格式之间的对照性文件）;</span><br><span class="line">3、发生标准的EDI文件;</span><br><span class="line">4、接受方获取标准的EDI文件，并将EDI文件翻译成平面文件;</span><br><span class="line">5、接收方将平面文件转换并送到接收方信息系统中进行处理，最后成为接受信息系统能够接受的文件格式。</span><br></pre></td></tr></table></figure><ol start="20"><li>下列（<strong>网上购物</strong>）属于电子商务的系统架构中电子商务应用层的内容</li></ol><p><u>21.网络商务信息处理分为信息存储、信息整理和信息加工三个阶段，（<strong>信息形式变换</strong>）不属于信息整理的内容。</u></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本题考查网络商务信息处理的基本概念。网络商务信息处理分为信息存储、信息整理和信息加工处理三个阶段。信息的存储是把已经获取的信息用科学的方法保存起来，以便于进一步的加工、处理和使用。收集信息后，便要对所得到的信息进行相关整理，常做的信息整理工作包括明确信息来源、添加文件名、信息鉴别、信息筛选、信息分类。信息整理后，进行信息的加工处理。信息加工包括信息形式变换和信息内容处理。信息形式变换是指在信息传输的过程中，通过变换载体，使信息准确地传输给接收者。信息内容处理是指对原始信息进行加工整理，深入揭示信息的内容</span><br></pre></td></tr></table></figure><p>22.<u>《关于积极推进“互联网+”行动的指导意见》中，“互联网+”电子商务的主要内容不包括(<strong>发展智能创造</strong>)</u></p><ol start="23"><li><u>BI(Business Intelligence)是通过运用基于事实的支持系统来辅助制定商业决策，BI的主要功能不包括(<strong>数据使用方法论创建</strong>)。</u></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BI(Business Intelligence)即商务智能，它是一套完整的解决方案，用来将企业中现有的数据进行有效的整合，快速准确地提供报表并提出决策依据，帮助企业做出明智的业务经营决策。一个典型的BI系统应具有以下四个主要功能：</span><br><span class="line">1、读取数据功能：读取多种格式的文件，同时可读取关系型数据库中的数据。</span><br><span class="line">2、关联/限定分析功能：关联分析主要用于发现不同事件之间的关联性，即一个事件发生的同时，另一个事件也经常发生。关联分析的重点在于快速发现那些有实用价值的关联发生的事件。</span><br><span class="line">3、数据输出功能：打印统计列表和图表画面等，可将统计分析好的数据输出给其他的应用程序使用，或者以HTML格式保存。 </span><br><span class="line">4、定型处理功能：所需要的输出被显示出来时，进行定型登录，可以自动生成定型处理按钮。以后，只需按此按钮，即使很复杂的操作，也都可以将所要的列表、视图和图表显示出来。</span><br></pre></td></tr></table></figure><ol start="24"><li>设职工关系模型Emp（工号、姓名、性别、部门）的主码是工号，<br>工资关系模型SL（工号，月份，工资）的主码为（工号，月份），若关系模型R（工号，姓名，性别，部门，月份，工资）的主码为（工号，月份），则R满足（<strong>1NF</strong>）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/liushuijinger/article/details/12832017参考</span><br><span class="line">https://blog.csdn.net/wyh7280/article/details/83350722参考</span><br><span class="line">当前该例子 工号-&gt;姓名 以及 性别 即该关系模式不可再分解即为1NF</span><br></pre></td></tr></table></figure><ol start="25"><li>TCP协议工资在OS1参考模型中的（<strong>传输层</strong>）</li></ol><p><img src="https://s2.ax1x.com/2019/08/28/mT5ROI.jpg" alt="mT5ROI.jpg"></p><ol start="26"><li><u>中继器的主要作用是（<strong>延长网络传输距离</strong>）</u></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中继器基于烽火台机制原理，对信号进行放大再生，以延长网络传输距离。</span><br></pre></td></tr></table></figure><ol start="27"><li>以下不属于数据链路层功能的是（<strong>路由选择</strong>）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、帧同步</span><br><span class="line">2、差错控制</span><br><span class="line">3、流量控制</span><br><span class="line">4、链路管理</span><br></pre></td></tr></table></figure><ol start="28"><li>在一个C类网络中，有一台主机的IP地址为192.168.1.204已知该主机所在网络是将一个C类IP划分成了4个子网，则该IP的网络号为（），主机号为（）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一个C类地址划分为4个子网，其子网掩码为255.255.255.192;</span><br><span class="line">其网络号为该IP地址与子网掩码进行与运算的结果为192.168.1.192;</span><br><span class="line">其主机号为,204 - 192 = 12</span><br></pre></td></tr></table></figure><ol start="30"><li><p><u>电子商务安全体系中不包括（<strong>信息发布与传输层</strong>）</u></p></li><li><p>（<strong>数字证书</strong>）是标识网络用户身份的电子文档，该文档中包含了用户的基本数据信息及公钥信息、颁发证书的CA的相关信息。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数字证书是一个经证书授权中心数字签名的包含公开秘钥拥有者信息以及公开秘钥的文件。</span><br><span class="line">最简单的证书包含一个公开秘钥、名称以及证书授权中心的数字签名。</span><br></pre></td></tr></table></figure><ol start="32"><li>在DES算法中，加密和解密使用（<strong>相同</strong>）的秘钥。</li><li>在数字信封技术中，发放方用（接收方的公钥）对对称秘钥加密。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">数字信封是实现信息完整性的验证的技术，通常通过使用接收方的公钥对对称秘钥来进行加密，以保证对称秘钥的安全性。</span><br></pre></td></tr></table></figure><ol start="34"><li>在ATM机上使用银行卡交易时，采用（<strong>双因素</strong>）身份认证方式。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">简单来说，双因素身份认证就是通过你所知道再加上你所能拥有的这二个要素组合到一起才能发挥作用的身份认证系统。例如，在ATM上取款的银行卡就是一个双因素认证机制的例子，需要知道取款密码和银行卡这二个要素结合才能使用。</span><br></pre></td></tr></table></figure><ol start="35"><li>著名的”黑色星期五”病毒在每月固定的时间才发作，这体现了计算机病毒的（<strong>潜伏性</strong>）特征。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算机病毒潜伏性是指计算机病毒可以依附于其他媒体寄生的能力，侵入后的病毒潜伏到条件成熟才发作。</span><br></pre></td></tr></table></figure><ol start="36"><li>数据备份时，需要关闭数据库才能进行文件备份的方式属于（<strong>冷备份</strong>）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">冷备份也被称为离线备份，是指在关闭数据库并且数据库不能更新的状况下进行的数据库完整备份。并可对数据进行指定恢复。</span><br></pre></td></tr></table></figure><ol start="37"><li><p>以下<strong>不属于</strong>防火墙的功能（<strong>防反病毒</strong>）</p></li><li><p>以下关于电子现金描述错误的（<strong>电子现金可以由支付者直接控制和使用</strong>）</p></li><li><p>信用卡的支付方式不包括（<strong>IMAP协议方式</strong>）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">信用卡支付方式包括账号直接传输方式、专用账号方式及专用协议方式</span><br></pre></td></tr></table></figure><ol start="40"><li><p><u>在电子现金支付方式中，银行通过（<strong>数字签名</strong>）来确认该现金身份的合法性。</u></p></li><li><p><u>以下对POS系统下的银行支付描述错误的是(<strong>C</strong>).</u><br>A.POS机的工作方式主要包含直接转账、脱机授权和联机授权<br>B.POS 机设备由主控设备、客户密码键盘、票据打印机三部分组成<br>C.在POS系绕中，POS机主要负责交易信息的采集<br>D.POS机的联机方式中，直联POS方式直接连接到发卡中心</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POS系统即销售时点信息系统，是指通过自动读取设备(如收银机)在销售商品时直接读取商品销售信息(如商品名、单价、销售数量、销售时间、销售店铺、购买顾客等)，并通过通讯网络和计算机系统传送至有关部门进行分析加工以提高经营效率的系统。</span><br></pre></td></tr></table></figure><ol start="43"><li>在B2C交易过程中，对第三方支付平台描述错误的是(<strong>D</strong>)。<br>A.第三方支付平台收到货款后，通知商家按时发货<br>B.消费者确认收到货物后，第三方支付平台将货款转入商家账户<br>C.交易过程中，第三方支付平台要记录双方交易的具体内容<br>D.第三方支付平台收到商家退货确认信息后，将退款划回消费者账户</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">第三方支付是指具备一定实力和信誉保障的独立机构，通过与网联对接而促成交易双方进行交易的网络支付模式。在第三方支付模式，买方选购商品后，使用第三方平台提供的账户进行货款支付(支付给第三方)，并由第三方通知卖家货款到账、要求发货；买方收到货物，检验货物，并且进行确认后，再通知第三方付款；第三方再将款项转至卖家账户。</span><br></pre></td></tr></table></figure><ol start="44"><li><p>企业建立物流信息系统的最终目的是（<strong>提高企业的核心竞争力</strong>）</p></li><li><p><u>供应链管理框架由三个相互紧密联系的要素构成，其中（<strong>供应链的业务流程</strong>）是为客户产生价值输出的活动。</u></p></li><li><p>配送是以（<strong>用户要求</strong>）为依据，在物流中心进行分货、配货工作，并将配好的货物送交收贷人的过程。</p></li></ol><p>46.射频标识技术现已成为数据采集、标识和分析的主要工具，它具有非接触、抗干扰能力强、（<strong>精度高</strong>）、阅读速度快等优点。</p><p>47.网站设计中，以下（<strong>标题中包含有效的关键词</strong>）属于常见的对搜索引擎友好的表现。</p><p>48.在服务营销中，服务广品质量难以实施标准化源于服务特性中的（<strong>差异性</strong>）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">服务具有四个基本特征：</span><br><span class="line">1、无形性。同有形产品不同，服务在很大程度上是无形的和抽象的;</span><br><span class="line">2、差异性。差异性是指服务不像有形产品那样有固定的质量标准，具有较大的差异性;</span><br><span class="line">3、不可分离性。该特征是指服务的生产过程与消费过程同时进行，顾客只有加入到服务的生产过程才能最终消费到服务;</span><br><span class="line">4、可贮存性。由于服务的无形性和不可分离性，使得服务不可能象有形产品一样贮存。</span><br></pre></td></tr></table></figure><ol start="49"><li>企业管理信息系统是具有网络营销功能的电子商务系統的基础，在企业管理信息系统内部不同组织层次中，(<strong>A</strong>)系统负责支持日常管理人员对基本活动和交易进行跟踪和记录。<br>A.操作层<br>B.知识层<br>C.管理层<br>D.策略层</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">根据组织内部不同组织层次，企业管理信息系统可划分为四种信息系统：操作层、知识层、管理层、策略层系统。1、操作层管理系统支持日常管理人员对基本活动和交易进行跟踪和记录。2、知识层系统用来支持知识和数据工作人员进行工作，帮助公司整理和提炼有用信息和知识，供上级进行管理和决策使用，解决的主要是结构化问题。3、管理层系统设计用来为中层经理的监督、控制、决策以及管理活动提供服务，主要解决半结构化问题。4、策略管理层，主要是根据外部环境和企业内部制订和规划长期发展方向。</span><br></pre></td></tr></table></figure><ol start="50"><li>以下<strong>不属于</strong>网络营销职能的是（<strong>物流配送</strong>）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">网络营销的职能包括网站推广、网络品牌、信息发布、在线调研、顾客关系、顾客服务、销售渠道、销售促进等。</span><br></pre></td></tr></table></figure><ol start="51"><li><p>以下属于网络品牌运用策略的是（<strong>创建网上用户社区</strong>）。</p></li><li><p>在互联网上利用用户口碑快速传播信息方式成为（<strong>病毒性营销</strong>）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">病毒性营销是利用公众的积极性和人际网络，让营销信息像病毒一样传播和扩散，营销信息被快速复制传向数以万计、数以百万计的观众，它能够像病毒一样深入人脑，快速复制，迅速传播，将信息短时间内传向更多的受众。</span><br></pre></td></tr></table></figure><ol start="53"><li><p>企业开展搜搜引擎营销的最高层次目标是（<strong>将浏览者化为顾客</strong>）</p></li><li><p>企业实施微博营销首先应（<strong>规划微博营销</strong>）</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">微博营销的实施：</span><br><span class="line">（1）规划微博营销;</span><br><span class="line">（2）注册专属的企业微博;</span><br><span class="line">（3）寻找消费者，建立粉丝群;</span><br><span class="line">（4）投放广告和搜索工具;</span><br><span class="line">（5）开展有奖、打折等促销活动;</span><br><span class="line">（6）利用微博开展售后服务，帮助用户解决问题，增进与用户的情感，提高用户的忠诚度;其次，实现和用户的互动和沟通:</span><br><span class="line">（1）信息发布;</span><br><span class="line">（2）反馈与交流</span><br></pre></td></tr></table></figure><ol start="55"><li><p>设计E-mail营销内容时，（<strong>邮件主题</strong>）直接影响到E-mail营销的开信率，同时也体现了E-mail营销的专业水平。</p></li><li><p>一般采用（<strong>XML</strong>）语言编写.NET项目的配置文件。</p></li><li><p>常见的JavaEE框架中，不包括（<strong>MVC</strong>）</p></li><li><p>要将div的外边距设置为:“上边距: 10px、 下边距: 10px. 左边距: 40px、 右边距: 40px”, 正确的CSS语句是(<strong>C</strong>)。<br>A.margin：10px 10px 40px 10px<br>B.padding：10px 40px 10px 40px<br>C.margin：10px 40px<br>D.margin- top：20px 30px 40px 50px</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">设置外边距的最简单的方法就是使用 margin 属性；h1 &#123;margin : 10px 40px 10px 40px;&#125; 这些值的顺序是从上外边距 (top) 开始围着元素顺时针旋转的。可简写为h1&#123; margin : 10px 40px; &#125;代表上外边距和下外边距为10px，右外边距和左外边距为40px。</span><br></pre></td></tr></table></figure><ol start="59"><li>创建一个图像链接</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;www.baidu.com&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="60"><li>引入外部样式表且文件与网页在相同目录</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="61"><li><p>在Javascript中要改变页面文档的背景色，需要修改document对象的（<strong>BgColor</strong>）属性</p></li><li><p>实现图片隐藏代码</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;img&#x27;</span>).<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br></pre></td></tr></table></figure><p>63.常见电子商务网站构建中，可以将网站信息发布给用户的是（<strong>网站服务器</strong>）。</p><ol start="64"><li>共享单车是一个典型的“物联网+云计算+互联网”应用，应用中的数据主要包括单车数据和用户数据，这些数据属于(<strong>A</strong>)。<br>A.laaS<br>B.Paas<br>C.SaaS<br>D.SOA</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IaaS即基础设施即服务。消费者通过Internet 可以从完善的计算机基础设施获得服务。这类服务称为基础设施即服务。像基于 Internet 的服务(如存储和数据库)是IaaS的一部分。PaaS提供了用户可以访问的完整或部分的应用程序开发；SaaS则提供了完整的可直接使用的应用程序，比如通过Internet管理企业资源。</span><br></pre></td></tr></table></figure><ol start="65"><li><p>智慧交通是一种典型的大数据技术应用，实时道路交通查看情况查看功能最能体现大数据（<strong>时效性高</strong>）特征。</p></li><li><p>电子商务主题有权决定是否交易、和谁交易以及如何交易，任何单位和个人利用强迫、利诱等手段进行违背当事人真实意愿的交易活动都是无效的，这体现了电子商务立法遵循的（<strong>交易自治原则</strong>）</p></li><li><p><u>根据《电子签名法》对数据电文接收时间、地点的规定、<strong>不正确的是</strong>（<strong>数据电文最后一次进入收件人任何系统的时间为接收时间</strong>）</u></p></li><li><p>设计电子商务网站第一步要完成的工作是（<strong>网站需求分析</strong>）。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">考察电子商务网站设计的基本概念。在设计网站之前，必须先清除建网站的目的是什么，即首先要对网站设计的需求进行分析。通过需求分析确定对目标系统的综合要求，并提出这些需求的实现条件，以及需求应达到的标准，也就是解决要求所设计的网站做什么，做到什么程度。其次才是对功能、内容、页面等进行设计。</span><br></pre></td></tr></table></figure><ol start="69"><li><u>在采用结构化方法进行系统分析时，根据分解与抽象的原则，按照系统中数据处理的过程，用（<strong>数据流程图</strong>）来建立系统的逻辑模型，从而完成分析工作。</u></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">考察结构化分析方法中图形工具的作用。数据流图摆脱系统的物理内容，在逻辑上的描述系统的功能、输入、输出和数据存储等，是系统逻辑模型的重要组成部分。</span><br></pre></td></tr></table></figure><ol start="70"><li><u>关键成功因素法（CSF）包含4个步骤：</u><br>①识别关键成功因素<br>②了解企业目标<br>③识别测量性能的数据<br>④识别性能指标和标准<br>其正确的顺序为（<strong>2143</strong>）。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">考察电子商务系统规划方法中关键成功因素法的基础知识。关键成功因素法源自企业目标，通过目标分解和识别、关键成功因素识别、性能指标识别，一直到产生数据字典。</span><br><span class="line">关键成功因素法包含了以下四个步骤：</span><br><span class="line">①了解企业目标</span><br><span class="line">②识别关键成功因素</span><br><span class="line">③识别性能的指标和标准</span><br><span class="line">④识别测量性能的数据</span><br></pre></td></tr></table></figure><ol start="71"><li>Many people view the term “electronic commerce” (or e-commerce) as shopping on the part of the Internet called the (71).However, electronic commerce also covers many other activities, such as businesses trading with other business and internal processes that companies use to support the buying, selling, hiring, planning and other activities. Some people use the term electronic business (or e-business) when they are talking about electronic commerce in this broader sense. For example, IBM defines electronic business as *the transformation of key business process through the use of Internet technologies.” Most people use the terms “electronic commerce” and“(72)” interchangeably. Herein, the term electronic commerce is used in its broadest sense and includes all business activities using (73)<br>Some people categorize electronic commerce by types of entities participating in the transactions or business processes. The five general electronic commerce categories are business -to-consumer, business-to-business, business processes, consumer-to-consumer, and business-to-government, among which the following three are most commonly used:<br>(1)Consumer shopping on the Web, often called business-to-consumer (or B2C)<br>(2)Transactions conducted between businesses on the Web, often called business-to-business (or B2B)<br>(3)Transactions and (74) in which companies, governments, and other organizations use Internet technologies to support selling and purchasing activities.<br>To understand these categories better, consider a company that manufactures stereo speakers. The company might sell its finished product to consumers on the Web, which would be B2C electronic commerce. It might also purchase the materials it uses to make the speakers from other companies on the Web, which would be B2B electronic commerce. Businesses often have entire departments devoted to negotiating purchase transactions with their suppliers. These departments are usually named supply management or procurement. Thus, B2B electronic commerce is sometimes called (75).<br>71  A.<strong>World Wide Web</strong><br>B.Web page<br>C.Internet<br>D.Intranet</li></ol><pre><code>72  A.electronic walletB.e-procurementC.**electronic business**D.e-shopping73  A.**Internet technologies**B.GPSC.Online bankingD.EDI74 A.business-to-businessB.**business processes**C.consumer-to-consumerD.business-to-government75 A.e-cashB.**e-procurement**C.e-businessD.e-commerce</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">许多人将“电子商务”这一术语视为互联网上称为万维网，但电子商务还涵盖许多其他活动，例如与其他企业进行交易的企业和内部流程。 公司用于支持购买，销售，招聘，计划和其他活动。有些人在广义上谈论电子商务时会使用电子商务一词。 例如，IBM将电子商务定义为“通过使用互联网技术转变关键业务流程”。大多数人会互换使用术语“电子商务”和“电子商务”。 由此，术语电子商务以其最广泛的意义使用，并包括使用互联网技术的所有商业活动。</span><br><span class="line">有些人按参与交易或业务流程的实体类型对电子商务进行分类。五种通用电子商务类别是企业对消费者，企业对企业，业务流程，消费者对消费者和企业对政府，其中以下三种最常用：</span><br><span class="line">(1)消费者在网上购物，通常被称为企业对消费者(或B2C)</span><br><span class="line">(2)万维网上的企业之间进行的交易，通常称为企业对企业(或B2B)</span><br><span class="line">(3)交易和业务流程公司，政府和其他组织使用互联网技术支持销售和采购活动。为了更好地了解这些类别，研究一家制造立体声扬声器的公司。这家公司可能会将其成品销售给网络上的消费者，这是一种B2C的电子商务。 也可能购买用于制作来自网络上其他公司的扬声器的材料，这是一种B2B的电子商务。 企业通常有整个部门致力于与供应商谈判采购交易。 这些部门通常被称为供应管理或采购。 因此，有时企业对企业的电子商务也叫电子采购。</span><br></pre></td></tr></table></figure><p>简答题</p><p> （一）某房产中介连锁企业欲开发-一个基于Web的房屋中介信息系统,以有效管理房源和客户，提高成交率。该系统的主要功能是:</p><ol><li>房源采集与管理。系统自动采集外部网站的潜在房源信息，保存为潜在房源。由经纪人联系确认的潜在房源变为房源，并添加出售/出租房源的客户。由经纪人或客户登记的出售/出租房源，系统将其保存为房源。房源信息包括基本情况、配套设施、交易类型、委托方式和业主等。经纪人可以对房源进行更新等管理操作。</li><li>客户管理。求租/求购客户进行注册、更新，推送客户需求给经纪人，或由经纪人对求租/求购客户进行登记、更新。客户信息包括身份证号、姓名、手机号、需求情况、委托方式等。</li><li>房源推荐。根据客户的需求情况(求购/求租需求情况以及出售/出租房源信息),向已登录的客户推荐房源。</li><li>交易管理。经纪人对租售客户双方进行交易信息管理，包括订单提交和取消，设置收取中介费比例。财务人员收取中介费之后，表示该订单已完成，系统更新订单状态和房源状态，向客户和经纪人发送交易反馈。</li><li>信息查询。客户根据自身查询需求查询房屋供需信息。现采用结构化方法对房屋中介信息系统进行分析与设计，获得如图1-1所示的上下文数据流图和图1-2所示的0层数据流图。</li></ol><p>（二）某公司要开发一套网络共享(租用)平台，主要包括移动端APP和管理员服务端程序，其中管理员服务端程序采用<img src="file:///C:\Users\Administrator\AppData\Roaming\Tencent\QQTempSys%W@GJ$ACOF(TYDYECOKVDYB.png" alt="img">ASP.NET+SQL Server 技术，前端页面采用HTML+CSS+JavaScript技术,主要包括管理员登录、租借记录管理、用户管理、物品管理、用户计费管理、异常情况处理等功能。项目团队某成员被分配设计实现管理员登录及异常情况查看功能部分。<br>问题：2.1 (5分) 为了防止人为对网站的恶意攻击(程序暴力破解方式进行不断的登录、灌水等),可采用JavaScript验证码技术，验证码是将一 串随机产生的数字或符号生成一个不能复制的网页元素(图片、按钮等)，并加入一些干扰因素防止OCR。假设在页面加载时就要生成验证码，且验证码长度为4位，验证码由数字及字母组成，生成验证码的网页元素是一个ID为“myCheck”的Button.根据题目描述，完成以下程序。 </p><p>问题：2.2 (4分)<br>在<img src="file:///C:\Users\Administrator\AppData\Roaming\Tencent\QQTempSys%W@GJ$ACOF(TYDYECOKVDYB.png" alt="img">ASP.NET连接SQLServer数据库时，一般是要将连接字符串写到项目的Web.config文件中。假设要连接的SQL Server数据库服务器IP地址为“<img src="file:///C:\Users\Administrator\AppData\Roaming\Tencent\QQTempSys%W@GJ$ACOF(TYDYECOKVDYB.png" alt="img">192.168.2.41”,服务器的身份认证采用SQL Server与Windows混合验证模式，数据库名为“RentDB”，数据库的登录用户名为“sa”, 密码为“@11233”,在Web.config 文件的标记中设置数据库连接程序。根据题目描述，完成以下程序。</p><p>问题：2.3 (6分)<br>以下程序实现用户异常情况查看，通过问题2的配置文件获取连接字符串，数据库中用户表(users)、租用记录表(rents)结构如表2-1、表2-2所示。用户异常情况查看页面中包括用户名文本框(ID为txtusername)、数据绑定控件GridView (ID为gvRents)等。为了显示效果：直观,给每个字段设置对应的中文别名,通过users和rents表联合查询(根据userid字段关联)，查询的用户名由页面文本框输入，异常情况指rents表中rentStatus属性值为“异常” 的记录，采用SQL参数化方式实现数据库查询。 根据题目描述，完成以下程序。  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2019年11月全国计算机技术与软件专业技术资格（水平）考试《电子商务设计师（中级）》复习全书【核心讲义＋历年真题详解】&quot;&gt;&lt;a href=&quot;#2019年11月全国计算机技术与软件专业技术资格（水平）考试《电子商务设计师（中级）》复习全书【核心讲义＋历年真题详解】</summary>
      
    
    
    
    
    <category term="软考复习资料和笔记" scheme="http://example.com/tags/%E8%BD%AF%E8%80%83%E5%A4%8D%E4%B9%A0%E8%B5%84%E6%96%99%E5%92%8C%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>简易画板</title>
    <link href="http://example.com/2019/07/22/%E7%AE%80%E6%98%93%E7%94%BB%E6%9D%BF/"/>
    <id>http://example.com/2019/07/22/%E7%AE%80%E6%98%93%E7%94%BB%E6%9D%BF/</id>
    <published>2019-07-21T19:43:38.000Z</published>
    <updated>2020-05-07T02:31:16.405Z</updated>
    
    <content type="html"><![CDATA[<p class="codepen" data-height="400" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="rXOVVp" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="rXOVVp">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/rXOVVp/">  rXOVVp</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&quot;codepen&quot; data-height=&quot;400&quot; data-theme-id=&quot;0&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;MiaoChen123&quot; data-slug-hash=&quot;rXOVVp&quot; style=</summary>
      
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="canvas" scheme="http://example.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>网站收录</title>
    <link href="http://example.com/2019/07/07/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/"/>
    <id>http://example.com/2019/07/07/%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99/</id>
    <published>2019-07-07T14:22:44.000Z</published>
    <updated>2022-03-15T13:30:55.539Z</updated>
    
    <content type="html"><![CDATA[<p>测试pc端</p><h2 id="常用工具网站"><a href="#常用工具网站" class="headerlink" title="常用工具网站"></a>常用工具网站</h2><ul><li><a href="https://imgchr.com/">路过图床</a></li><li><a href="https://smallpdf.com/cn">在线转pdf文档</a></li><li><a href="https://www.bootcdn.cn/">BootCdn</a></li><li><a href="https://www.mspeed19.com/">喵MSS翻墙</a></li><li><a href="https://www.toolfk.com/">toolfk在线转换工具以及相关文档</a></li><li><a href="http://mackxin.com/nav.html#xin13">馨客栈</a></li><li><a href="https://www.cnblogs.com/pengchenggang/p/10349622.html">vscode打开新文件不替换旧文件</a></li><li><a href="http://tools.jb51.net/#home">脚本之家和相关技术文档</a></li><li><a href="https://www.itjc8.com/">IT教程吧</a></li><li><a href="https://w3techs.com/technologies/overview/javascript_library/all">相关框架库技术统计</a></li><li><a href="https://www.emojicopy.com/#emojicodes">emoji表情</a></li><li><a href="http://haojen.github.io/2016/09/03/Emoji-Demo/">emoji表情包使用方法</a></li><li><a href="https://blog.csdn.net/qq_22551385/article/details/82287502">vscode预览模式问题</a></li><li><a href="https://blog.51cto.com/zlong37/1975418">集成终端改成cmd</a></li><li><a href="https://codesandbox.io/">开发沙盒工具</a></li></ul><h2 id="前端学习文档"><a href="#前端学习文档" class="headerlink" title="前端学习文档"></a>前端学习文档</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/">MDN</a></li><li><a href="https://wangdoc.com/">网道</a></li><li><a href="https://humanwhocodes.com/">国外技术博客</a></li><li><a href="http://www.ecma-international.org/ecma-262/5.1/index.html#sec-11.2.5">ES5学习规范</a></li><li><a href="http://www.html5plus.org/doc/zh_cn/webview.html">H5+官网</a></li><li><a href="https://github.com/JacksonTian/fks">前端路线</a></li><li><a href="http://nav.web-hub.cn/">前端网站大全</a></li><li><a href="https://www.zhangxinxu.com/">张鑫旭博客</a></li><li><a href="https://www.html.cn/">HTML学习网</a></li><li><a href="http://www.pianshen.com/">程序员大本营</a></li><li><a href="https://www.jqhtml.com/category/article/framework">hello girl</a></li><li><a href="http://www.html5plus.org/doc/zh_cn/camera.html">H5+</a></li><li><a href="https://www.jianshu.com/p/288963680642">postcss学习</a></li><li><a href="https://www.omyleon.com/">web学习博客</a></li><li><a href="https://www.jianshu.com/u/cb593334c8bc">it老马</a></li><li><a href="http://komavideo.com/">小马视频</a></li><li><a href="https://stackoverflow.com/">国外问题技术论坛</a></li><li><a href="https://www.jianshu.com/p/97ba64888894">Postman教程大全 - 简书</a></li><li><a href="https://github.com/fouber/blog/issues/10">前端工程——基础篇 · Issue #10 · fouber/blog · GitHub</a></li></ul><h2 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h2><ul><li><a href="https://www.jianshu.com/p/c06fa1e1282a">Nodejs配置环境变量</a></li><li><a href="https://www.cnblogs.com/benpaodexiaopangzi/p/5856642.html">热部署</a></li></ul><h2 id="JavaScript技术文档"><a href="#JavaScript技术文档" class="headerlink" title="JavaScript技术文档"></a>JavaScript技术文档</h2><ul><li><a href="https://www.cnblogs.com/diligenceday/p/4175721.html">DOM几级事件文档</a></li><li><a href="https://www.jianshu.com/p/8c41a302bb17">DOM事件级别</a></li><li><a href="https://blog.csdn.net/qq_35087256/article/details/82669618">JS中的super和this</a></li><li><a href="https://juejin.im/post/5c52da9ee51d45221f242804#heading-5">前端路由跳转原理</a></li><li><a href="https://blog.csdn.net/u010176097/article/details/80348447">call、apply、bind区别</a></li><li><a href="https://www.cnblogs.com/blogs-8888/p/6518683.html">js中操作数组一些方法</a></li><li><a href="https://segmentfault.com/a/1190000016068235">es6学习笔记</a></li><li><a href="https://www.jianshu.com/p/e375ba1cfc47">js reduce使用</a></li><li><a href="https://tomotoes.com/blog/simplified-chinese-and-traditional-chinese-switching/">繁简切换字体</a></li><li><a href="https://www.cnblogs.com/mengfangui/p/9150458.html">es6动态计算属性名</a></li></ul><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><ul><li><a href="https://www.jianshu.com/p/81078efbef47">Ajax请求PHP接口</a></li><li><a href="https://www.cnblogs.com/lauhp/p/8979393.html">HTTP简介</a></li><li><a href="https://www.cnblogs.com/Brose/p/cors_ajax_withCredentials_firefox.html">ajax withCredentials在firefox下问题的解释</a></li><li><a href="https://www.cnblogs.com/twoeggg/p/8046183.html">跨域三种解决方式</a></li><li><a href="https://www.cnblogs.com/52fhy/p/5436673.html">http相关</a></li><li><a href="https://blog.csdn.net/fxbin123/article/details/80428216">postman相关</a></li></ul><h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><ul><li><a href="https://www.jqhtml.com/6750.html">viewer图片插件</a></li><li><a href="https://api.jquery.com/category/attributes/">jQuery文档</a></li><li><a href="https://www.cnblogs.com/cqlb/p/9118186.html">jQuery获取当前屏幕各种高度</a></li></ul><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><ul><li><a href="https://ustbhuangyi.github.io/vue-analysis/">vue.js技术揭秘</a></li><li><a href="https://cli.vuejs.org/zh/">VUE-CLI构建工具</a></li><li><a href="https://segmentfault.com/a/1190000011007043">vue-cli本地环境API代理设置和解决跨域</a></li><li><a href="https://blog.csdn.net/qq_33295794/article/details/79024915">vue全家桶介绍</a></li><li><a href="https://blog.csdn.net/weixin_33908217/article/details/86025085">vue获取自定义属性的值</a></li><li><a href="https://www.zhihu.com/question/51907207">Vue2.0 中，“渐进式框架”和“自底向上增量开发的设计”这两个概念是什么？</a></li><li><a href="https://www.cnblogs.com/lemoncool/p/9645587.html">解决Vuex持久化插件-在F5刷新页面后数据不见的问题</a></li><li><a href="https://blog.csdn.net/sayoko06/article/details/85321802">hash和history区别</a></li><li><a href="https://www.cnblogs.com/lulianlian/p/7682790.html"> vue 路由传参 params 与 query两种方式的区别</a></li><li><a href="https://www.cnblogs.com/snowhite/p/7872503.html">vue中使用axios跨域</a></li><li><a href="https://www.jianshu.com/p/6262772bdc9c">vue首次加载缓慢解决办法</a></li><li><a href="https://www.cnblogs.com/ajuan/p/10070908.html">VUE浏览器关闭时清空localstrorge</a></li><li><a href="https://blog.csdn.net/dkr380205984/article/details/82185740">state,mapState,…mapState对象展开符详解</a></li><li><a href="https://www.cnblogs.com/hity-tt/p/7169307.html">基于vue的SPA单页面开发—性能篇</a></li><li><a href="https://blog.csdn.net/sone_yoonyul/article/details/78421717">使用vue默认选中单选框</a></li><li><a href="https://www.cnblogs.com/LoveAndPeace/p/7273648.html">vue组件中传值</a></li><li><a href="https://www.cnblogs.com/xiaotanke/p/7427636.html">vue中兄弟组件传值</a></li><li><a href="https://blog.csdn.net/wang_meiwei/article/details/75948844">vue2.0子同级之间组件交互</a></li><li><a href="https://blog.csdn.net/wxl1555/article/details/84646832">vue – 非父子组件传值，事件总线（eventbus）的使用方式</a></li><li><a href="https://blog.csdn.net/qq_36575992/article/details/80338538">axios使用学习</a></li><li><a href="https://segmentfault.com/a/1190000015684864">vue和微信小程序区别</a></li><li><a href="https://blog.csdn.net/zmkyf1993/article/details/80320802">vue中子组件methods获取props中的值</a></li><li><a href="https://www.cnblogs.com/beka/p/8583924.html">v-router路由传参</a></li><li><a href="https://blog.csdn.net/meng_suiga/article/details/77840890">vue实现双向绑定原理</a></li><li><a href="https://blog.csdn.net/huangxiaoguo1/article/details/80163585">vue实现Mint-ui实现下拉刷新</a></li><li><a href="https://www.cnblogs.com/liaoanran/p/8042893.html">用cli搭个项目</a></li><li><a href="https://www.jianshu.com/p/22f214bb4294?tdsourcetag=s_pcqq_aiomsg">vue在自定义组件中使用v-model</a></li><li><a href="https://www.cnblogs.com/shiningly/p/9471067.html">vue中watch详细用法</a></li><li><a href="https://www.jianshu.com/p/cc4253745b0f">vue.js做国际化</a></li><li><a href="https://www.jianshu.com/p/0d78ff9fe6ed">vue3.0使用</a></li><li><a href="https://www.jianshu.com/p/6c6cc02a9001">关于 The template root requires exactly one element 报错的解决方案</a></li></ul><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><ul><li><a href="http://react.shengxinjing.cn/">蜗牛老师</a></li></ul><h2 id="angular"><a href="#angular" class="headerlink" title="angular"></a>angular</h2><ul><li><a href="https://angular.io/cli">官网</a></li></ul><h2 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h2><ul><li><a href="https://blog.csdn.net/cris_zz/article/details/82911393#_5">史上最完美的 markdown 配置全流程</a></li><li><a href="https://blog.csdn.net/cris_zz/article/details/82911393#_5">Markdown基本语法</a></li><li><a href="https://blog.csdn.net/cris_zz/article/details/82919401">typora用法</a></li><li><a href="https://blog.csdn.net/testcs_dn/article/details/45719357/#comments">Markdown编辑器语法</a></li><li><a href="https://www.jianshu.com/p/b421cc723da5">画流程图</a></li><li><a href="https://blog.csdn.net/lis_12/article/details/80693975">画图</a></li></ul><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ul><li><a href="https://dev.mysql.com/doc/refman/8.0/en/">官网</a></li></ul><h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/resizable.html">官网</a></li><li><a href="https://blog.csdn.net/u011973968/article/details/80367921">微信小程序开发问题汇总</a></li><li><a href="https://segmentfault.com/a/1190000017288987">记录使用微信小程序的开发过程中遇到的各种难点及教程（不定时更新）</a></li><li><a href="https://segmentfault.com/a/1190000017288987">webview详解</a></li><li><a href="https://www.jianshu.com/p/d3edf5fa51cb?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation">webview使用</a></li><li><a href="https://blog.csdn.net/kingrome2017/article/details/80499184">微信小程序开发者文档 API 面试问答宝典</a></li><li><a href="https://blog.csdn.net/kingrome2017/article/details/80499184">微信小程序面试相关</a></li><li><a href="https://blog.csdn.net/sophie_u/article/details/71745125">微信小程序Tab选项卡：左右相互切换</a></li><li><a href="https://www.jianshu.com/p/04bf1103e40a">小程序自定义tabbar</a></li></ul><h2 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h2><p><a href="https://uniapp.dcloud.io/api/router?id=animation">官网</a></p><h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><ul><li><a href="https://www.cnblogs.com/qingqinglanlan/p/8334481.html">echarts配置相关</a></li></ul><h2 id="面试相关"><a href="#面试相关" class="headerlink" title="面试相关"></a>面试相关</h2><ul><li><a href="https://blog.csdn.net/valada/article/details/89472483?utm_source=feed1904231">前端面试</a></li><li><a href="https://www.cnblogs.com/ahao68/p/5431250.html">对css兼容性问题认识和解决</a></li><li><a href="https://www.cnblogs.com/haoyijing/p/5789348.html">前端面试题整理</a></li><li><a href="https://www.cnblogs.com/haoyijing/p/5815394.html#css1">css常见布局问题整理</a></li></ul><h2 id="适配"><a href="#适配" class="headerlink" title="适配"></a>适配</h2><ul><li><a href="https://blog.csdn.net/valada/article/details/89472483?utm_source=feed1904231">移动端H5适配</a></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul><li><a href="https://www.cnblogs.com/5201351/p/4208277.html">Linux清屏几种方式</a></li><li><a href="https://mirrors.ustc.edu.cn/">Another infinity系统下载站</a></li><li><a href="https://jingyan.baidu.com/article/cbf0e50091dd362eaa2893e3.html">vm报错</a></li><li><a href="https://zhidao.baidu.com/question/1578182316614871500.html">linux怎么通过shell查找到某一个文件的绝对路径</a></li></ul><h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><ul><li><a href="https://blog.csdn.net/weixin_42420703/article/details/81384901">js实现Base64编码以及解码</a></li><li><a href="https://blog.csdn.net/weixin_42420703/article/details/88422441">js中的btoa和atob函数</a></li></ul><h2 id="手机底层"><a href="#手机底层" class="headerlink" title="手机底层"></a>手机底层</h2><ul><li><a href="https://blog.csdn.net/qq_36538012/article/details/79805673">H5调用底层知识</a></li><li><a href="https://blog.csdn.net/super_DuoLa/article/details/90207965">网页中实现安卓手机在线预览PDF文件</a></li></ul><h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><ul><li><a href="http://106.14.196.85:8888/cbe837e2/">宝塔面板</a></li><li><a href="https://blog.csdn.net/qq_38378384/article/details/79876344">用GitHub搭建一个自己网站</a></li><li><a href="https://juejin.im/entry/59ba97216fb9a00a6b6e50bf">hexo主题开发详谈</a></li><li><a href="https://github.com/hakimel/reveal.js/">把markdown变成PPT</a></li><li><a href="https://valine.js.org/#/configuration">valine评论</a></li><li><a href="http://106.14.196.85:8888/">宝塔地址</a></li><li><a href="https://segmentfault.com/a/1190000015131514?utm_source=tag-newest">用vue搭建博客</a></li><li><a href="https://www.jianshu.com/p/e1ccd49b4e5d">部署阿里云</a></li><li><a href="https://qiming.info/%E9%98%BF%E9%87%8C%E4%BA%91CentOS%E4%B8%8BHexo+Nginx%E5%BB%BA%E7%AB%99%E8%BF%87%E7%A8%8B/">阿里云CentOS下Hexo+Nginx建站过程</a></li><li><a href="https://www.jianshu.com/p/0f9dfa9c141b">阿里云Centos7+Nginx部署Hexo静态博客</a></li><li><a href="https://juejin.im/post/5c7f66bff265da2db4144ba2">在 CentOS 系统服务器上利用 Hexo 和 Nginx 搭建个人博客</a></li><li><a href="https://www.cnblogs.com/fly_dragon/p/8718614.html"><a href="https://www.cnblogs.com/fly_dragon/p/8718614.html">CentOS搭建Git服务器及权限管理</a></a></li><li><a href="https://www.jianshu.com/p/70bf58c48010">HEXO 部署到云服务器详细指南</a></li><li><a href="https://www.jianshu.com/p/93b63852f0b3">Hexo博客之速度优化</a></li><li><a href="https://jerryc.me/">butterfly主题博客详细设置</a></li><li><a href="http://106.14.196.85:8888/">宝塔面板后台</a></li></ul><h2 id="Pets3"><a href="#Pets3" class="headerlink" title="Pets3"></a>Pets3</h2><ul><li><a href="http://tiku.ek100.cn/Learn/Index/433?Token=$Token$">未来教育刷题库</a></li></ul><h2 id="nas"><a href="#nas" class="headerlink" title="nas"></a>nas</h2><ul><li><a href="https://jingyan.baidu.com/article/ce43664932610f3773afd32f.html">怎么用群晖webdav实现外网映射网络驱动器</a></li><li><a href="http://littleroach110.net/2018/05/30/Personal-NAS-Server.html">基于Gen10和黑群晖的个人NAS服务器构建</a></li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><a href="http://miaosu.ys168.com/">miaoss翻墙下载地址</a></li><li><a href="https://www.processon.com/">在线作流程图网站</a></li><li><a href="https://www.typingclub.com/">打字俱乐部（练习打字速度）</a></li><li><a href="https://www.cnblogs.com/beli/p/6297741.html">十大排序算法</a></li><li><a href="https://segmentfault.com/q/1010000011384017">网站多语言实现</a></li><li><a href="https://www.cnblogs.com/ywffoo/p/5984590.html">F12防止扒代码</a></li><li><a href="https://segmentfault.com/a/1190000008168184">Iview作者自述</a></li><li><a href="https://www.xiaokesoso.com/s/search?q=es6&currentPage=1">小可搜搜技术文档相关</a></li><li><a href="https://www.jianshu.com/p/d0472c608d2f">开发环境和生产环境区别</a></li><li><a href="http://code.tarena.com.cn/WEBCode/wfd1810/">笔记下载</a></li><li><a href="http://jxjygl.bjut.edu.cn/entity/student/main_frame.jsp">工大网址</a></li><li><a href="https://doc.apipost.cn/4a77c87f97fb686b">APIpost使用文档</a></li><li><a href="https://blog.csdn.net/qq_33745501/article/details/80271129">npm安装时–save 和 –dev区别</a></li><li><a href="https://blog.csdn.net/xiaomobeila/article/details/54945844">Hbuilder使用文档</a></li><li><a href="http://niuini.com/">NUUINI3D模型网</a></li><li><a href="http://bm.ruankao.org.cn/sign/welcome">计算机软考</a></li><li><a href="https://github.com/bytebook/blog">总结的项目库</a></li><li><a href="https://segmentfault.com/a/1190000015646531">解决npm ERR! Unexpected end of JSON input while parsing near的方法汇总</a></li><li><a href="https://www.jianshu.com/p/caa1801213ee">gulp4降低版本</a></li><li><a href="https://squoosh.app/">图片瘦身</a></li><li><a href="https://www.snipaste.com/">截屏工具</a></li><li><a href="http://www.net.cn/static/customercare/yourip.asp">万网获取本地公网ip地址</a></li><li><a href="https://www.bootcss.com/p/git-guide/">git操作简易指南</a></li><li><a href="https://blog.csdn.net/xvshu/article/details/80571897">二维码登录概要设计</a></li><li><a href="https://www.cnblogs.com/meishandehaizi/p/5863241.html">使用sentry集中管理</a></li><li><a href="https://yeasy.gitbooks.io/docker_practice/">docker学习</a></li><li><a href="https://blog.csdn.net/weixin_42703239/article/details/81638325">超链打开QQ对话框</a></li><li><a href="https://www.html.cn/doc/webpack2/">webpack学习文档</a></li><li><a href="https://blog.csdn.net/sma2mmm/article/details/83827813">webpack学习</a></li><li><a href="https://cloud.tencent.com/document/product/382/9557">腾讯云短信学习</a></li><li><a href="https://www.w3cplus.com/mobile/vw-layout-in-vue.html">移动端适配</a></li><li><a href="https://github.com/whxaxes/node-test">实例资料</a></li><li><a href="https://www.myperfectresume.com/">简历制作</a></li><li><a href="https://blog.csdn.net/qq_38698753/article/details/93190356">vscode使用技巧</a></li><li><a href="http://miaosu.ys168.com/">秒速翻墙</a></li></ul><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><ul><li><a href="https://www.bilibili.com/video/av27791861">零基础快速入门自学48个国际音标元音辅音发音读法_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li><li><a href="https://www.bilibili.com/video/av69564237">不死记硬背如何快速掌握英语入门日常1500基础词汇量的背单词方法_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li><li><a href="https://www.bilibili.com/video/av51510495">2019英语零基础语法入门班,系列自学课程之初高中英语语法_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li></ul><h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><ul><li><a href="http://bbs.itzmx.com/thread-19539-1-1.html"><strong>SSTAP游戏加速器搭建一个自己的服务端教程</strong></a></li><li><a href="https://www.993dy.com/">LOL电影天堂</a></li><li><a href="https://www.hdchina.net/">HDCHINA</a></li><li><a href="http://www.4kjia.com/4kuhd">4k家园</a></li><li><a href="http://www.4btbtt.com/">bt之家</a></li><li><a href="https://wallhaven.cc/">国外壁纸站</a></li><li><a href="https://wallhere.com/zh/login">国外壁纸站</a></li><li><a href="https://unsplash.com/">Unsplash 图库</a></li><li><a href="https://pics.alphacoders.com/,https://wall.alphacoders.com/">img深渊</a></li><li><a href="http://www.mangabz.com/">Mangbz漫画网</a></li><li><a href="http://www.yinfans.me/">4K电影网</a></li></ul><h2 id="偷个懒"><a href="#偷个懒" class="headerlink" title="偷个懒"></a>偷个懒</h2><ul><li><p><a href="http://code.tarena.com.cn/">code.tarena.com.cn</a></p><p><a href="https://blog.csdn.net/Li_dengke/article/details/101385345">Vue项目打包成移动端APP_JavaScript_追梦&amp;天空的博客-CSDN博客</a></p><p><a href="https://www.cnblogs.com/ljy-/articles/12131510.html">uni-app引入官方uni.css样式库 - 本溢 - 博客园</a></p><p><a href="https://daneden.github.io/animate.css/">Animate.css</a></p><p><a href="https://www.cnblogs.com/putao1/p/10141875.html">uni-app的专属强大自适应单位upx，但是这个这是一个大坑，不能动态赋值解决办法 - 蒲涛- - 博客园</a></p><p><a href="https://www.cnblogs.com/wuyuchao/p/8483919.html">大型vue单页面项目优化总结 - 卢沟晓月 - 博客园</a></p><p><a href="https://192.168.0.101:5001/">苗宸</a></p><p><a href="http://www.itmk8.com/forum.php?mod=forumdisplay&fid=37&page=1">web前端IT慕课吧 -</a></p><p><a href="https://blog.csdn.net/xr510002594/article/details/82683693">(3条消息)关于Invalid prop: type check failed for prop row. Expected String, got Object.的问题及审查办法_JavaScript_Dreamer_xr的博客-CSDN博客</a></p><p><a href="https://tool.lu/">在线工具 - 程序员的工具箱</a></p><p><a href="https://xoyozo.net/Blog/Details/dcloud-uni-app-debug">使用 DCloud 工具 HBuilder X 开发 uni-app 项目踩过的一些坑 - XOYOZO</a></p><p><a href="https://www.pinterest.com.mx/pin/807692514405845761/?nic_v1=1aYW2AJ38IlmV4VEa4FE/r92b95PbMvG/cYpoXNkKLVdQ90D8sJvJbPYLmUDIZCAsi">(58) Pinterest</a></p><p><a href="https://caniuse.com/#home">Can I use… Support tables for HTML5, CSS3, etc</a></p><p><a href="https://www.pexels.com/video/waves-rushing-to-the-shore-1128104/">Waves Rushing To The Shore · Free Stock Video</a></p><p><a href="https://developer.aliyun.com/mirror/NPM?from=tnpm">NPM镜像-NPM下载地址-NPM安装教程-阿里巴巴开源镜像站</a></p><p><a href="https://developer.aliyun.com/learning/roadmap/frontend?spm=a2c6h.12883283.1362935.3.200e201cKC05sh">前端开发学习路线（学+测） - 阿里云开发者社区</a></p><p><a href="https://developer.aliyun.com/?spm=a2c6h.14029880.1364563.1.735975d7rdYalA">阿里云开发者社区-阿里云官网开发者社区_云计算社区</a></p><p><a href="https://www.bilibili.com/video/BV1hW411i7wK?from=search&seid=3646154184767855781">毕业论文格式设置方法（Microsoft word）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p><a href="https://www.jianshu.com/p/0c1c288ee8fc">marquee 标签参数详细说明 - 简书</a></p><p><a href="https://ask.dcloud.net.cn/docs/">文档 - DCloud问答</a></p><p><a href="http://127.0.0.1:5500/page.html">消息</a></p><p><a href="https://blog.csdn.net/qq_34926773/article/details/77861832">(3条消息)大三期末前端页面开发论文_JavaScript_qq_34926773的博客-CSDN博客</a></p><p><a href="https://baijiahao.baidu.com/s?id=1635111761268888039&wfr=spider&for=pc">直接拿来用！前端如何快速实现跨平台开发？</a></p><p><a href="https://www.cnblogs.com/suihang/p/10998997.html">uni-app中onLoad不起作用 - 一只菜鸟攻城狮啊 - 博客园</a></p><p><a href="https://www.jb51.net/article/72680.htm">Navicat for MySQL(mysql图形化管理工具)是什么？_Mysql_脚本之家</a></p><p><a href="https://www.jianshu.com/p/7125360f3d2a">uni-app开发app之一uni-app优缺点 - 简书</a></p><p><a href="https://cli.im/">草料二维码生成器</a></p><p><a href="http://www.ruanyifeng.com/blog/2020/01/deno-intro.html">Deno 运行时入门教程：Node.js 的替代品 - 阮一峰的网络日志</a></p><p><a href="https://www.52pojie.cn/thread-1063977-1-1.html">求uni-app实战仿微信app开发全套 - 『悬赏问答区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p><a href="https://learnku.com/articles/34942">uni-App 仿微信 App 即时通讯|vue+uniapp 聊天 | Vue.js 技术论坛</a></p><p><a href="https://github.com/YuPeng1115/uni-app-miliao">YuPeng1115/uni-app-miliao: 基于uni-app开发的与机器人聊天界面，跨平台多端开发H5/微信小程序/APP等的单应用程序。</a></p><p><a href="https://www.zhihu.com/question/27024197?sort=created">简洁的界面怎么样让用户觉得很有细节？ - 知乎</a></p><p><a href="https://wenku.baidu.com/view/83899998f705cc17552709ba.html">软件开发基本原则 - 百度文库</a></p><p><a href="http://www.360doc.com/content/15/0310/10/15989917_453992159.shtml">软件开发基本原则</a></p><p>[VideoSrt - 自动识别,为视频生成中英字幕<a href="https://www.appinn.com/videosrt-for-windows/">Win 开源] - 小众软件</a></p><p><a href="https://zhidao.baidu.com/question/377513684.html">linux 下目录的含义，比如lib是放什么文件的，还有dev什么的，有好几个文件名称，都分别是什么意思_百度知道</a></p><p><a href="https://www.php.cn/php-weizijiaocheng-416401.html">如何在Windows上安装PHP7？-php教程-PHP中文网</a></p><p><a href="https://blog.csdn.net/weixin_44542598/article/details/86504818">vscode 打开新文件覆盖窗口，始终显示一个窗口_开发工具_weixin_44542598的博客-CSDN博客</a></p><p><a href="https://www.xiwnn.com/">茜文的博客</a></p><p><a href="http://www.1ppt.com/tags/2556/">论文答辩PPT - 第一PPT</a></p><p><a href="https://zhidao.baidu.com/question/200567393.html">JAVA中protected的作用_百度知道</a></p><p><a href="https://www.bt.cn/bbs/thread-21690-1-1.html">SSH连接失败的解决办法 - Linux面板 - 宝塔面板论坛</a></p><p>[使用composer提示<a href="https://www.tuhongwei.com/web/414">ErrorException]proc_get_status() has been disabled for security reasons的解决方法 | 涂红伟</a></p><p><a href="https://blog.csdn.net/weixin_41326021/article/details/81004981">微信小程序开发聊天室——实时聊天，支持图片预览_网络_weixin_41326021的博客-CSDN博客</a></p><p><a href="http://106.14.196.85:8888/">宝塔Linux面板</a></p><p><a href="https://blog.csdn.net/fengtao0821/article/details/106355066">✍Hexo博客搭建✍搭建个人博客Hexo框架出现hexo:无法加载文件脚本文件解决方案_fengtao0821的博客-CSDN博客_hexo:无法加载文件c:\users\覃海冰\appdata\roaming\npm\hex</a></p><p><a href="http://xh.5156edu.com/page/z1015m9220j18754.html">颜色表及html代码</a></p><p><a href="https://www.jianshu.com/p/84568e364ee8">深入理解什么是RESTful API ？ - 简书</a></p><p><a href="https://blog.csdn.net/jiezhang656/article/details/102573935">关于前后端分离的几点学习_jiezhang656的专栏-CSDN博客</a></p><p><a href="https://www.zhihu.com/question/304700221/answer/549267236">为什么苹果允许用户安装未受信任的企业级开发者所开发的软件？ - 知乎</a></p><p><a href="https://uniapp.dcloud.io/frame?id=%E5%B0%BA%E5%AF%B8%E5%8D%95%E4%BD%8D">框架简介 - uni-app官网</a></p></li></ul><p><a href="https://www.yujianxinliu.com/ecy/826.html">《Wallpaper Engine》动态壁纸推荐：静守时光，以待流年_ACG资源「遇见心流」</a></p><p><a href="https://segmentfault.com/a/1190000017342116">Vue学习路线图 - 个人文章 - SegmentFault 思否</a></p><p><a href="http://www.kaoshi5.com/">2020年考试时间表 - 各种证书考证日历安排</a></p><p><a href="https://petschko.org/tools/mv_decrypter/#restore-images">Petschko的RPG-Maker-MV解密器</a></p><p><a href="https://blog.csdn.net/llwy1428/article/details/92834705">谷歌浏览器截取长屏幕（全屏截图）_一花一世界-CSDN博客_谷歌浏览器长截图</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;测试pc端&lt;/p&gt;
&lt;h2 id=&quot;常用工具网站&quot;&gt;&lt;a href=&quot;#常用工具网站&quot; class=&quot;headerlink&quot; title=&quot;常用工具网站&quot;&gt;&lt;/a&gt;常用工具网站&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://imgchr.com/&quot;&gt;路过图床&lt;</summary>
      
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="工具网站" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript（下）</title>
    <link href="http://example.com/2019/07/05/JavaScript%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <id>http://example.com/2019/07/05/JavaScript%EF%BC%88%E4%B8%8B%EF%BC%89/</id>
    <published>2019-07-05T06:16:52.000Z</published>
    <updated>2019-07-05T06:17:58.570Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RegEXP对象"><a href="#RegEXP对象" class="headerlink" title="RegEXP对象"></a>RegEXP对象</h2><ul><li><p>什么是: 专门保存一条正则表达式，并提供用<strong>正则表达式执行验证</strong>和<strong>查找功能的API</strong> 的对象</p></li><li><p>何时: 只要在程序中保存一条正则表达式或使用正则表达式<strong>执行验证</strong>和<strong>查找</strong>时</p><p><strong>两种创建方式</strong></p></li><li><p><code>用//: var reg=/正则/ig</code><br>问题: 正则是写死的，无法再运行时动态生成正则表达式</p></li><li><p><code>用new: var reg=new RegExp(“正则”,”ig”)</code><br>好处: 参数是一个字符串格式的正则表达式，所以可以用任何程序的手段先动态生成字符串，再传给new RegExp变为正则表达式对象——动态生成正则<br><strong>API:</strong> </p><ol><li><p>验证: 验证一个字符串的格式是否符合正则表达式的要求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool=reg.<span class="title function_">test</span>(str)</span><br><span class="line">验证str是否符合reg的格式要求</span><br><span class="line">问题: test其实是只要找到符合规则的，就返回<span class="literal">true</span>，不要求从头到尾完整匹配</span><br><span class="line">比如: <span class="regexp">/\d&#123;6&#125;/</span>.<span class="title function_">test</span>(“123456a”) -&gt; <span class="literal">true</span></span><br><span class="line">解决: 今后只要验证，必须前加^，后加$，表示必须从头到尾完全匹配才行</span><br><span class="line">比如: <span class="regexp">/^\d&#123;6&#125;$/</span>.<span class="title function_">test</span>(“123456a”) -&gt; <span class="literal">false</span></span><br><span class="line">   其实: reg.<span class="title function_">test</span>()也可判断一句话中是否包含敏感词，且更简单。</span><br><span class="line">比如: <span class="keyword">if</span>(reg.<span class="title function_">test</span>(msg)) 如果msg中包含符合eg的敏感词</span><br></pre></td></tr></table></figure></li><li><p>查找: 既查找每个关键词的内容，又查找每个关键词的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=reg.<span class="title function_">exec</span>(str)</span><br><span class="line"> 让reg去str中找下一个符合规则的关键词的内容和位置</span><br><span class="line"> 返回值: 和str.<span class="title function_">match</span>()不加g的情况是一样的</span><br><span class="line">arr[“<span class="number">0</span>”: 关键词, “index”: i ]</span><br><span class="line">如果找不到了，返回<span class="literal">null</span></span><br><span class="line"> vs str.<span class="title function_">match</span>() :</span><br><span class="line">str.<span class="title function_">match</span>()始终只能找第一个关键词</span><br><span class="line">reg.<span class="title function_">exec</span>()反复调用时，可自动向后找下一个</span><br></pre></td></tr></table></figure></li></ol></li></ul><p><strong>总结: 查找关键词: 5种</strong></p><ol><li><p>只判断是否包含: <code>var bool=reg.test(str)</code></p></li><li><p>查找一个固定关键词的位置:<code> var i=str.indexOf(“关键词”)</code></p></li><li><p>查找一个可变关键词的位置:<code> var i=str.search(/正则/i)</code></p></li><li><p>查找第一个关键词的内容和位置:<br><code>var arr=str.match(/正则/i)</code><br><code> arr[“0”:关键词, “index”: i ]</code></p></li><li><p>查找所有关键词的内容: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=str.<span class="title function_">match</span>(<span class="regexp">/正则/ig</span>)</span><br><span class="line">arr[关键词<span class="number">1</span>, 关键词<span class="number">2</span>, … ]</span><br><span class="line">\<span class="number">6.</span> 查找所有关键词的内容和位置: </span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr=reg.<span class="title function_">exec</span>(str);</span><br><span class="line">    <span class="keyword">if</span>(arr!=<span class="literal">null</span>)</span><br><span class="line">        arr[“<span class="number">0</span>”:关键词, “index”: i ]</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><ul><li><p>什么是: 保存一段可重用的代码段的程序结构，再起一个名字</p></li><li><p>何时: 如果一段代码可能被反复使用</p></li><li><p>程序的重要设计原则之一: DRY Don’t Repeat Yourself</p><p><strong>创建: 3种:</strong> </p></li></ul><ol><li><strong>用声明方式</strong> </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名(形参列表)&#123; 函数体; <span class="keyword">return</span> 返回值 &#125;</span><br></pre></td></tr></table></figure><p>​      <code>问题: 会被声明提前(hoist)</code></p><p>​       回顾: 声明提前: 当程序开始执行前，先将var声明的变量和function声明的函数提前到当前作用域的顶部，集中创建。<strong>赋值留在原地</strong>。</p><p>​      习惯: 所有声明都集中放在当前作用域的顶部。</p><ol start="2"><li><strong>用赋值方式</strong>: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>函数名=<span class="keyword">function</span> (<span class="params">形参列表</span>)&#123; 函数体; <span class="keyword">return</span> 返回值 &#125;</span><br></pre></td></tr></table></figure><p>揭露了js中函数的本质: 函数其实是一个保存代码片段的对象，函数名其实就是一个普通的变量。</p><p><code>不会被声明提前！</code></p><ol start="3"><li><strong>用new:</strong> </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="keyword">new</span> <span class="title class_">Function</span>(“形参<span class="number">1</span>”,…,”函数体; <span class="keyword">return</span> 返回值”)</span><br></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a><strong>匿名函数</strong></h3><ul><li>什么是: 定义函数时不指定函数名的函数</li><li>为什么: 节约内存</li><li>匿名函数用完后，不再被任何变量引用着，就被垃圾回收！</li><li>何时: 如果一个函数只用一次时</li></ul><p><strong>两个场景:</strong> </p><ol><li><strong>回调函数</strong>: </li></ol><p><code>什么是: 自己定义函数，却给别人去调用</code></p><ol start="2"><li><strong>自调函数</strong>:</li></ol><ul><li>自调：函数定义后，立刻自己调用自己执行一次</li><li>为什么: 避免使用全局变量，避免全局污染</li><li>何时: 用匿名函数划分临时作用域，避免使用全局变量</li><li>如何: (function(){ … })()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//function是创建一个函数的意思——动作</span></span><br><span class="line"><span class="comment">//返回函数地址，比如0x1234</span></span><br><span class="line"><span class="comment">//0x1234() 调用匿名函数</span></span><br></pre></td></tr></table></figure><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><ul><li>作用域英文原文为<strong>scope</strong>，本意就是”<strong>范围</strong>“的意思</li><li>作用域是指一个数据的可用范围</li><li>定义作用域是为了<strong>避免内外不同范围的数据之间不互相干扰</strong></li><li><strong>JavaScript</strong>程序中，也包含<strong>两级作用域</strong>：<ul><li>全局作用域：指的是从任何范围都可访问</li><li>函数作用域：指仅限于函数内才可访问的范围</li></ul></li><li>定义在不同范围的变量也有不同的名称。<ul><li>全局变量：是指保存在全局作用域中的变量。全局变量可在程序中的任何位置都可访问。</li><li>局部变量：是指保存在某一个函数内的变量。局部变量只能在函数内部使用。</li></ul></li><li>函数执行时，也有两级范围的数据可用，分别是：<ul><li>自己的函数作用域：其中包含自家的数据</li><li>全局作用域：整个全局的数据</li></ul></li></ul><p><code>使用时，按照就近原则，优先使用自己函数作用域中的变量，自己没有，才使用全局范围内的。</code></p><blockquote><p>作用域链，就是由多级作用域组成的链式结构</p></blockquote><ul><li><p>当调用函数时，函数将自己能用到的所有作用域都用”锁链”串联（引用）起来。</p><p><strong>作用链：</strong></p><ol><li>串联着当前函数所使用的所有作用域范围，保存着当前函数可用的所有变量</li><li>控制着变量的使用顺序：先局部，后全局，只要局部有就不会去全局查找数据。</li></ol></li></ul><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul><li>为一个函数保护一个专属的变量：<ul><li>使用闭包原因：变量在函数外部很容易会造成全局污染，函数在调用后不会保留内部数据，即调用一次便会重新定义一次就是不可重用的意思，闭包，是既重用变量又保护变量不会被篡改的一种编程方法。</li></ul></li><li>闭包：<ul><li>在函数的外部包裹一个函数把要保护的变量包裹起来。</li><li>想用获取到内层被包裹的函数就要用到外层函数的返回值return</li><li>调用外层函数：获得内层函数，保存到全局变量中：由此返回的东西变成了变量的值，变成了函数名：由于内层函数变成了外层函数的孩子，他们之间有total链接，所以外层函数的变量 不会被重置。</li></ul></li></ul><p><code>只要希望既重用变量，又保护变量不会被篡改时，就要用闭包为一个函数保管专属的变量。</code></p><ul><li><strong>步骤：</strong><ul><li>外层函数包裹内层函数和要保护的变量</li><li>外层函数返回内层函数对象到外部</li><li>外部使用者调用外层函数，获得内层函数对象，并保存在外部变量中反复使用。</li></ul></li></ul><p><code>创建内层函数时，内层函数[[scope]]属性，始终拴着自己可用的外层函数作用域</code></p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><ul><li>什么是: 程序都是用对象结构来描述现实中一个具体事物的属性和功能</li><li>为什么: 便于大量数据的管理和维护</li><li>如何: 三大特点: <strong>封装，继承，多态</strong></li></ul><h4 id="封装"><a href="#封装" class="headerlink" title="封装:"></a><strong>封装:</strong></h4><ul><li>什么是: 用对象结构集中存储一个事物的所有属性和功能</li><li><code>为什么: 便于大量数据的管理和维护</code></li><li>何时: 今后，只要使用面向对象思想，都要先将零散的数据封装为对象</li></ul><p><strong>三种创建方式</strong>： </p><ol><li><strong>用{}创建对象:</strong> </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=&#123;</span><br><span class="line">  属性名:值,</span><br><span class="line">     … : …,</span><br><span class="line">  方法名:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    … <span class="variable language_">this</span>.属性名 …</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>访问对象成员(属性+方法): 对象.成员名</li><li><code>问题: 对象自己的方法内，要使用当前对象自己的属性，不能直接写属性名——报错！未定义</code></li><li>原因: 对象不是作用域！所以不在方法的作用域链上，所以，即使自己的方法，也不能直接访问自己对象的属性</li></ul><p>解决: </p><ul><li>不好的解决: 写死“对象名.属性名”</li><li>问题: 如果对象名发生改变，被迫同时修改方法内的语句</li><li>好的解决: “this.属性名”</li><li>this: 自动引用正在调用当前方法的.前的对象</li><li>何时: 只要对象自己的方法，要访问自己的属性时，必须加this.</li></ul><p><code>常犯错误: 以定义方法的位置来判断this的指向。</code></p><ul><li>正确: this与定义的位置无关，只与调用时.前的对象有关。2种:<ul><li>obj.fun() this-&gt;obj</li><li>fun()  this默认-&gt;window</li></ul></li></ul><ol start="2"><li><strong>用new的方式创建:</strong> </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">      obj.属性名=值</span><br><span class="line">  obj.方法名=<span class="keyword">function</span>(<span class="params"></span>)&#123; … &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>js中对象的本质: js中一切对象底层都是关联数组</li><li><strong>访问对象的成员: 2种:</strong><ul><li>obj[“属性名”]=obj.属性名</li></ul></li><li>如果属性名是动态变化的，必须用<code>obj[表达式] !!!!!</code></li><li>访问对象中不存在的属性: 不报错！返回<code>undefined</code></li><li>随时可给对象添加任何新属性: 不报错！而是自动创建</li><li>前两种方式: 一次只能创建一个对象</li><li>如果反复创建多个相同结构的对象时，代码大量冗余——不便于维护</li></ul><ol start="3"><li><strong>用构造函数创建对象</strong> </li></ol><ul><li>什么是构造函数: 描述一类对象相同结构的函数</li><li>为什么**: 代码重用**</li><li>何时: 反复创建多个相同结构的对象时</li></ul><p>创建方式:</p><ol><li><strong>定义构造函数:</strong> </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 类型名()&#123;</span><br><span class="line">  <span class="variable language_">this</span>.属性名=值;</span><br><span class="line">  <span class="variable language_">this</span>.方法名=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     … <span class="variable language_">this</span>.属性名 …</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><strong>用构造函数反复创建多个相同结构的对象</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj=<span class="keyword">new</span> 类型名();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>new: 4件事:</strong> </p><ol><li>创建一个空对象</li><li>自动设置继承关系</li><li>调用构造函数，并将构造函数中的所有this，自动替换为新的空对象通过强行给新对象赋值的方式，向新对象中添加新属性</li><li>返回新对象地址</li></ol><p>  <strong>构造函数的问题：如果将方法定义放在构造函数中，会导致每次创建新对象时，都重复创建方法的副本——浪费内存</strong></p><p><code>  解决: 保存在一处，共用！</code></p><h4 id="继承"><a href="#继承" class="headerlink" title="继承:"></a>继承:</h4><ul><li>什么是: 父对象的成员，子对象无需重复创建，就可直接使用</li><li>为什么: 代码重用，节约内存</li><li>何时: 所有子对象，需要相同的方法或属性时，只要在父对象中添加一次，所有子对象就可共用</li><li>如何: js中继承，都是继承原型对象(prototype)</li></ul><blockquote><p>创建原型对象: 不用创建，买一增一</p></blockquote><ul><li><p>每创建一个构造函数，都附赠一个空的原型对象</p></li><li><p>构造函数.prototype=自己的原型对象</p><p><strong>何时继承:</strong> </p></li></ul><ol><li><p><strong>new的第2步，自动设置继承关系</strong></p></li><li><p><strong>子对象. _<em>proto</em>_ = 构造函数.prototytpe</strong></p><p><strong>如何向原型对象中添加共有成员: 强行赋值:</strong> </p></li></ol><p>​     <code>构造函数.prototype.共有成员=值</code></p><p>  <strong>11种内置类型，也都有原型对象:</strong> </p><ul><li><p>将来只要能new的都是一种类型</p></li><li><p>只要是一种类型，都包含2部分组成: </p><ul><li>构造函数: 专门用于创建该类型的子对象</li><li>原型对象:专门用于保存该类型的子对象共有的成员</li></ul><p> <strong>比如: Array, Date, RegExp, Function, …</strong></p><p><strong>原型链:</strong> </p></li><li><p>什么是: 由多级父元素逐级继承形成的链式结构</p></li><li><p>保存着: 所有对象可访问的属性和方法</p></li><li><p>控制着属性和方法的使用顺序: 先用自己的，自己没有才延原型链向上找</p></li></ul><h4 id="多态"><a href="#多态" class="headerlink" title="多态:"></a>多态:</h4><ul><li><p>什么是: 一个函数在不同情况下表现出不同的状态</p><p><strong>包括: 2种:</strong> </p></li></ul><ol><li><strong>重载:</strong></li></ol><ul><li><p>什么是: 多个相同名称不同参数列表的函数，调用时可自动根据传入参数的不同，选择对应的函数执行。</p></li><li><p>为什么: 减少API的个数，减轻调用者的负担</p></li><li><p>何时: 1件事，可能根据传入参数不同，执行不同的处理过程时</p><p><code>问题: js语法默认不支持重载效果</code></p></li><li><p>为什么: js中不允许多个同名函数同时存在</p><ul><li>如果同时存在，最后一个同名函数会覆盖之前所有</li></ul></li></ul><p><code>解决: 变通实现</code></p><ol><li>只定义一个函数，不定义参数列表</li><li>调用函数时，按需传入参数</li><li>所有参数都会被函数中的内置对象arguments自动接收。</li><li>arguments: 每个函数中自动创建的可接受所有实参列表的类数组对象(长的像数组的对象) 与数组相比<ol><li>数组: 相同: 1. 下标, 2. .length, 3. 遍历</li></ol></li></ol><p>​          不同: 不是数组类型，API不通用！</p><ol start="5"><li>函数中根据参数列表的个数和内容，动态选择执行一种处理逻辑</li><li><strong>重写(override)</strong></li></ol><ul><li>什么是重写: 子对象觉得父对象的成员不好用，可在本地定义自有同名成员，覆盖父对象的成员</li><li>何时: 只要觉得父对象的成员不好用，都可重写一个新的</li><li>如何: 只要在子对象本地定义同名成员即可</li></ul><h2 id="静态方法与实例方法"><a href="#静态方法与实例方法" class="headerlink" title="静态方法与实例方法"></a>静态方法与实例方法</h2><ul><li>什么是实例方法: 给某个类型的子对象调用的方法</li><li>何时: 如果要求，方法执行时，必须先有一个具体的子对象，才能用。</li><li>如何: 要么直接定义在对象上，要么定义在对象的原型对象上</li><li>什么是静态方法: 不需要具体对象，也可直接执行的方法<ul><li>何时: 如果不需要任何具体对象，也想调用函数时</li><li>如何: 将函数定义在构造函数对象上<ul><li>构造函数.静态方法=function(){ … }</li><li>调用时: 构造函数.静态方法();</li></ul></li></ul></li></ul><h2 id="自定义继承关系"><a href="#自定义继承关系" class="headerlink" title="自定义继承关系"></a><strong>自定义继承关系</strong></h2><ol><li>只修改一个对象的父对象: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">child.<span class="property">__proto__</span>=father</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(child,father)</span><br><span class="line">设置set  child 的<span class="keyword">of</span>  爹prototype 为 father</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>问题: 一次只能改一个子对象的父类</code></p><ol start="2"><li>同时修改所有子对象的原型对象</li></ol><ul><li>其实就是修改构造函数的prototype属性</li><li>构造函数.prototype = father</li><li>时机: 必须在定义完构造函数后，开始创建子对象之前，就要更换。</li></ul><ol start="3"><li>正式的两种类型间的继承: </li></ol><p><code> 问题: 两种类型间包含了部分相同的属性结构和方法定义</code></p><p> <code>解决: 抽象父类型: </code></p><p>  <strong>步骤:</strong> </p><ul><li><p>定义抽象父类型: </p><ul><li>在父类型构造函数中包含相同的属性定义</li><li>在父类型的原型对象中包含相同的方法定义</li><li>删除子类型中相同的内容</li></ul></li><li><p>让子类型继承抽象父类型: </p><ul><li><p>让子类型构造函数继承父类型构造函数</p></li><li><p>```js<br>Object.setPrototypeOf(<br> 子类型.prototype, 父类型.prototype<br>)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 让子类型构造函数借用父类型构造函数</span><br><span class="line"></span><br><span class="line">**错误: 直接调用父类型构造:** </span><br><span class="line"></span><br><span class="line"> 父类型(参数值)</span><br><span class="line"></span><br><span class="line">后果: 父类型构造函数中的this-&gt;window</span><br><span class="line"></span><br><span class="line">`解决: 函数内的this不是想要的，都可用.call()的方式，将正确的this注射进函数内，替换其中错误的this`</span><br><span class="line"></span><br><span class="line">**正确的方法:**</span><br><span class="line"></span><br><span class="line"> 父类型构造.call(正确的this,参数值..)</span><br><span class="line"></span><br><span class="line">结果: 执行时，父类型构造中的this，被外部正确的this给替换了！</span><br><span class="line"></span><br><span class="line">## ES5</span><br><span class="line"></span><br><span class="line">### 严格模式</span><br><span class="line"></span><br><span class="line">- 比普通js运行机制要求跟严格的执行模式</span><br><span class="line">- 何时: 今后，所有项目代码，都必须运行在严格模式下！</span><br><span class="line">- 如何: 在当前作用域顶部: “**use strict**”;</span><br><span class="line">  - 如果加载&lt; script &gt;元素或js文件顶部，则整段js代码都启用严格模式</span><br><span class="line">  - 如果只加在函数内的顶部，则仅函数内启用严格模式</span><br><span class="line"></span><br><span class="line">**要求:** </span><br><span class="line"></span><br><span class="line">1. 禁止给未声明的变量赋值: </span><br><span class="line"></span><br><span class="line">普通js中，可以给未声明的变量赋值</span><br><span class="line"></span><br><span class="line">结果: 会自动在全局创建该变量</span><br><span class="line"></span><br><span class="line">2. 静默失败升级为错误: </span><br><span class="line"></span><br><span class="line">静默失败: 执行不成功，也不报错！</span><br><span class="line"></span><br><span class="line">3. 普通函数调用/匿名函数自调中的this，不再指向window，而是undefined</span><br><span class="line">4. 屏蔽了arguments.callee</span><br><span class="line"></span><br><span class="line">- 什么是arguments.callee: 函数内自动创建的，引用当前函数本身的关键字。</span><br><span class="line">- 何时: 在使用递归算法时，可在函数内避免写死当前函数名。</span><br><span class="line">- 屏蔽arguments.callee是在屏蔽递归算法</span><br><span class="line">- 为什么: 递归算法效率极低，重复计算量太大！</span><br><span class="line"></span><br><span class="line">### **保护对象**</span><br><span class="line"></span><br><span class="line">1. 保护单个属性:</span><br><span class="line"></span><br><span class="line">**ES5将对象属性划分为两大类:**</span><br><span class="line"></span><br><span class="line">- **命名属性: 凡是可用.直接访问到的属性**</span><br><span class="line">  - 又被分为两大类: </span><br><span class="line">    - 数据属性: 直接存储属性值的属性</span><br><span class="line">    - 访问器属性: 不直接存储属性值，专门提供对另一个数据属性的保护</span><br><span class="line">- **内部属性: 不能用.直接访问的属性**</span><br><span class="line"></span><br><span class="line">**ES5将每个数据属性，都变成一个缩微的小对象：**</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">  &#123; //四大特性: </span><br><span class="line">    value: //实际存储属性值,</span><br><span class="line">    writable: true/false, //控制是否可修改</span><br><span class="line">    enumerable: true/false, //控制是否可被for in遍历</span><br><span class="line">    //但是，用.依然可强行访问该属性</span><br><span class="line">    configurable: true/false, //控制是否可删除该属性</span><br><span class="line">    //控制是否可修改另外两个特性</span><br><span class="line">    //一旦改为false不可逆</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>四大特性: value, writable, enumerable, configurable</strong></p><p><code>获取: var 属性对象=Object.getOwnPropertyDescriptor(obj,”属性名”)</code></p><p><strong>修改四大特性:</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,”属性名”,&#123;</span><br><span class="line">   开关: <span class="literal">true</span>/<span class="literal">false</span>,</span><br><span class="line">     … : …</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>问题: 一次只能修改一个属性的四大特性</code></p><p><strong>解决：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj,&#123;</span><br><span class="line">  属性名:&#123;</span><br><span class="line">    开关: <span class="literal">true</span>/<span class="literal">false</span>,</span><br><span class="line">     … : … </span><br><span class="line">&#125;,</span><br><span class="line">  属性名:&#123;</span><br><span class="line">    开关: <span class="literal">true</span>/<span class="literal">false</span>,</span><br><span class="line">     … : … </span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>问题: 无法使用自定义的规则保护属性</code></p><p> <strong>解决：</strong></p><ul><li>访问器属性: 访问器属性是不保存属性值，仅提供对另一个数据属性的保护</li><li>何时: 使用自定义规则保护属性时</li><li>前提: 先有一个实际存储数据的隐藏的数据属性</li></ul><p><strong>定义访问器:</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj,&#123;</span><br><span class="line">        _数据属性:&#123; <span class="attr">enumerable</span>:<span class="literal">false</span>,<span class="attr">configurable</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">        访问器属性:&#123;</span><br><span class="line">          <span class="attr">get</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_</span>数据属性&#125;,</span><br><span class="line">          <span class="attr">set</span>:<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(value符合规则)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">_</span>数据属性=value;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(“自定义错误信息”)</span><br><span class="line">&#125;,</span><br><span class="line">        <span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configurable</span>:<span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>保护对象的结构: 3个层次:</strong> </p><ol><li>防扩展: 禁止给对象添加新属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">`Object.preventExtensions(obj)`</span></span><br><span class="line">          阻止    扩展</span><br><span class="line">设置obj对象，禁止扩展新属性</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>密封: 在防扩展基础上，再禁止删除所有属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="title class_">Object</span>.<span class="title function_">seal</span>(obj)</span><br><span class="line">本质: 在设置防扩展同时，自动设置所有属性的configurable为<span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>冻结: 在密封基础上禁止修改属性值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj)</span><br><span class="line">本质: 在密封基础上，自动将所有属性的writable设置为<span class="literal">false</span>！</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>补充：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(): 没有构造函数，也想创建子对象</span><br><span class="line"><span class="keyword">var</span> child=<span class="title class_">Object</span>.<span class="title function_">create</span>(father,&#123;</span><br><span class="line">         <span class="comment">//defineProperties的语法</span></span><br><span class="line">         属性:&#123; 四大特性 &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//创建新对象child，然后让child继承father，并为新对象添加自有属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="替换this"><a href="#替换this" class="headerlink" title="替换this"></a>替换this</h3><p>  <strong>.call/apply/bind</strong></p><ul><li>调用一次函数，并<strong>临时替换</strong>函数中的this为指定对象：.call或者apply<ul><li>fun.call(obj,实参…)<ul><li>调用一次函数执行</li><li>在执行时临时替换其中的this为obj</li></ul></li></ul></li><li>.apply可打散数组为单个参数值后，分别传入函数:<ul><li>如果函数需要多个参数值，但给的参数值却集中保存在一个数组中。</li><li>fun.apply(obj,[ ])</li></ul></li><li>.bind基于原函数创建一个完全相同的新函数，并永久绑定this为指定对象<ul><li>var newFun=fun.bind(obj,实参…)</li><li>创建一个和fun完全相同的新函数newFun</li><li>永久将newFun中的this绑定为obj</li><li>永久将newFun中的部分参数绑定为实参…</li><li>固定用法:<code> 如果替换回调函数中的this，必须用.bind()</code><ul><li>因为回调函数不是立刻执行！且不止执行一次！</li></ul></li></ul></li></ul><h3 id="数组API"><a href="#数组API" class="headerlink" title="数组API"></a><strong>数组API</strong></h3><ol><li>查找: 查找一个指定的元素在数组中的位置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">同字符串操作: <span class="keyword">var</span> i=arr.<span class="title function_">indexOf</span>(元素, starti)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>判断: 判断数组中的元素是否符合要求<ol><li>判断是否所有元素都符合要求：</li></ol></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool=arr.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">elem,i,arr</span>)&#123;</span><br><span class="line">  <span class="comment">//elem: 当前元素值</span></span><br><span class="line">  <span class="comment">//i: 当前位置</span></span><br><span class="line">  <span class="comment">//arr: 当前数组</span></span><br><span class="line">  <span class="keyword">return</span> 判断条件;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//every会拿着回调函数去每个元素上执行一次</span></span><br><span class="line"><span class="comment">//每次执行时，都会将当前元素值，当前所在位置，当前数组对象，传入函数中</span></span><br><span class="line"><span class="comment">//函数内用提供的参数值，判断当前元素是否符合条件，并返回判断结果</span></span><br><span class="line"><span class="comment">//必须回调函数在每个元素上执行时，都返回true，整体判断结果才返回true！</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>判断是否包含符合要求的元素:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bool=arr.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">elem,i,arr</span>)&#123;</span><br><span class="line">  <span class="comment">//elem: 当前元素值</span></span><br><span class="line">  <span class="comment">//i: 当前位置</span></span><br><span class="line">  <span class="comment">//arr: 当前数组</span></span><br><span class="line">  <span class="keyword">return</span> 判断条件;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>遍历: 对每个元素都执行相同的操作</p><ol><li><p>直接修改原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">elem,i,arr</span>)&#123;</span><br><span class="line">  elem…</span><br><span class="line">  arr[i]…</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//forEach会拿着回调函数去每个元素上执行一次</span></span><br><span class="line"><span class="comment">//每次执行时，回调函数内都可用arr[i]修改原数组中的每个元素值。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>不直接修改原数组，而是返回新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newArr=arr.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">elem,i,arr</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> 新值</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//map先创建一个新的空数组</span></span><br><span class="line"><span class="comment">//然后拿着回调函数去每个元素上执行一次</span></span><br><span class="line"><span class="comment">//每次执行时，都将回调函数返回的新值，放入新数组中相同位置</span></span><br><span class="line"><span class="comment">//最后，将保存新值的新数组返回，原数组保持不变</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>过滤: 复制出原数组中符合条件的元素，组成新数组</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> subArr=arr.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">elem,i,arr</span>)&#123;</span><br><span class="line">     <span class="keyword">return</span> 条件</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//filter先创建一个新的空数组</span></span><br><span class="line"><span class="comment">//会拿着回调函数去每个元素上执行一次</span></span><br><span class="line"><span class="comment">//每次执行时，都获得当前元素的判断结果</span></span><br><span class="line"><span class="comment">//只有返回结果为true的元素，才被放入新数组中返回</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>汇总: 对数组中的元素进行各种统计，得出最终结论</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result=arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev,elem,i,arr</span>)&#123;</span><br><span class="line">     <span class="comment">//prev: 截至到当前元素之前的临时汇总值</span></span><br><span class="line">     <span class="keyword">return</span> prev+elem;</span><br><span class="line">&#125;,base) <span class="comment">//开始初始值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;RegEXP对象&quot;&gt;&lt;a href=&quot;#RegEXP对象&quot; class=&quot;headerlink&quot; title=&quot;RegEXP对象&quot;&gt;&lt;/a&gt;RegEXP对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是: 专门保存一条正则表达式，并提供用&lt;strong&gt;正则表达式执行验</summary>
      
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>五子棋小游戏</title>
    <link href="http://example.com/2019/07/05/%E4%BA%94%E5%AD%90%E6%A3%8B%E5%B0%8F%E6%B8%B8%E6%88%8F/"/>
    <id>http://example.com/2019/07/05/%E4%BA%94%E5%AD%90%E6%A3%8B%E5%B0%8F%E6%B8%B8%E6%88%8F/</id>
    <published>2019-07-05T06:04:18.000Z</published>
    <updated>2019-07-17T19:06:37.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="五子棋"><a href="#五子棋" class="headerlink" title="五子棋"></a>五子棋</h2><p class="codepen"  data-height="800" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="PrBLNM" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="PrBLNM">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/PrBLNM/">  PrBLNM</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;五子棋&quot;&gt;&lt;a href=&quot;#五子棋&quot; class=&quot;headerlink&quot; title=&quot;五子棋&quot;&gt;&lt;/a&gt;五子棋&lt;/h2&gt;&lt;p class=&quot;codepen&quot;  data-height=&quot;800&quot; data-theme-id=&quot;0&quot; data-default-</summary>
      
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="canvas" scheme="http://example.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>BOM&amp;DOM</title>
    <link href="http://example.com/2019/07/02/BOM-DOM/"/>
    <id>http://example.com/2019/07/02/BOM-DOM/</id>
    <published>2019-07-02T01:52:31.000Z</published>
    <updated>2019-07-17T19:09:19.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是DOM-Document-Object-Model"><a href="#什么是DOM-Document-Object-Model" class="headerlink" title="什么是DOM: Document Object Model"></a>什么是DOM: Document Object Model</h2><ol><li>DOM就是专门操作网页内容的API标准——W3C</li><li>何时: 只要用js操作网页的内容</li><li>包括: 增删改查+事件绑定</li></ol><span id="more"></span><h2 id="DOM-Tree"><a href="#DOM-Tree" class="headerlink" title="DOM Tree"></a>DOM Tree</h2><ul><li>什么是: 在内存中存储一个网页中所有内容的树形结构</li><li>为什么: 只有树形结构才能灵活保存上下级包含关系</li><li>何时: 浏览器每加载一个网页，就会读取网页内容，并在内存中创建DOM数。</li><li>网页中每项内容，都是DOM树上的节点对象: <ul><li>整个DOM树只有唯一一个根节点: <strong>document对象</strong></li></ul></li><li>每个节点对象上，都有三个属性: <ul><li>.nodeType: 节点类型, 值为数字<ul><li>何时: <strong>当获得一个节点对象，需要判断节点的类型时</strong></li></ul></li><li>包括: document   9  根节点<ul><li>element     1  元素节点</li><li>attribute     2  属性节点</li><li>text             3   文本节点</li><li><code>问题: 只能判断类型，不能进一步判断元素名</code></li></ul></li><li>.nodeName: 节点名称<ul><li>何时: 希望进一步判断节点/元素的名称时</li></ul></li><li>包括: document  #document<ul><li>element   全大写的标签名</li><li>attribute   属性名</li><li>text       #text</li></ul></li><li>.nodeValue: 节点值<ul><li>何时: 几乎不用</li></ul></li><li>包括: document   null<ul><li>element     null</li><li>attribute    属性值</li><li>text        文本的内容</li></ul></li></ul></li></ul><h2 id="查找的几种方式"><a href="#查找的几种方式" class="headerlink" title="查找的几种方式"></a>查找的几种方式</h2><ul><li><p>何时: 修改/删除元素前都要先找到要操作的元素</p></li><li><p><strong>不需要查找就可直接获得</strong>的重要元素: </p><ul><li><strong>html   document.documentElement</strong></li><li><strong>head   document.head</strong></li><li><strong>body   document.body</strong></li><li><strong>form   document.forms[i/id]</strong></li></ul></li><li><p>按节点间关系查找</p></li><li><p>节点树: 包含所有网页内容（元素，文本，属性）的树结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> <span class="variable constant_">HTML</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>DOM Tree<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;s1&quot;</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题一<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//当 window 加载后——事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//希望等网页加载后，再执行以下代码，以确保所有网页中的内容都已经可用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//获得body元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> body=<span class="variable language_">document</span>.<span class="property">body</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(body.<span class="property">nodeName</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//获得body下所有直接子元素，应该只有三个</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> children=body.<span class="property">children</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(children);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//获得body下第一个直接子元素span</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> span=body.<span class="property">firstElementChild</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(span);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//获得body下最后一个直接子元素script</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> script=body.<span class="property">lastElementChild</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(script);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//获得h1元素，可以是: </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> h1=<span class="comment">//span.nextElementSibling;//span的弟弟</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//script.previousElementSibling;//script的哥哥</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">children[<span class="number">1</span>]<span class="comment">//body的第二个孩子</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(h1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>两大类关系:</strong> </p></li></ul><ol><li><strong>父子:</strong> </li></ol><ul><li>elem.parentNode  找elem的父节点</li><li>elem.childNodes   找elem的所有直接子节点</li><li>elem.firstChild     找elem的第一个直接子节点</li><li>elem.lastChild     找elem的最后一个直接子节点</li></ul><ol start="2"><li><strong>兄弟:</strong> </li></ol><ul><li><p>elem.nextSibling   找elem的下一个兄弟</p></li><li><p>elem.previousSibling 找elem的前一个兄弟</p><p><code>问题: 受看不见的空字符的影</code></p><p><strong>解决: 元素树: 仅包含元素节点的树结构</strong></p></li><li><p>元素树不是一棵新树，而是节点树中的一个子集</p></li><li><p>优点: 不受看不见的空字符的干扰！</p></li></ul><p><strong>两大类关系:</strong> </p><ol><li><strong>父子:</strong> </li></ol><ul><li>elem.parentElement          找elem的父元素</li><li>elem.children                      找elem的所有直接子元素</li><li>elem.firstElementChild    找elem的第一个直接子元素</li><li>elem.lastElementChild     找elem的最后一个直接子元素</li></ul><ol start="2"><li><strong>兄弟:</strong> </li></ol><ul><li><p>elem.nextElementSibling   找elem的下一个兄弟元素</p></li><li><p>elem.previousElementSibling 找elem的前一个兄弟元素</p><p><strong>递归遍历一个父元素下所有后代元素:</strong></p><p> <strong>两个步骤:</strong> </p></li></ul><ol><li>定义函数，仅遍历直接子元素</li><li>在遍历直接子元素时，对每个直接子元素调用和父元素完全相同的操作</li></ol><p><code> 问题: 必须先获得一个元素，才能按节点间关系查找</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> <span class="variable constant_">HTML</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>遍历节点树<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello World !<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;uname&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>综艺</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>跑男<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;uname&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>极限<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>剧集<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//定义一个函数，用于遍历任意给定父元素parent下的所有后代元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">getChildren</span>(<span class="params">parent</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//1. 先仅遍历当前父元素的直接子元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//1.1获得指定的父元素parent的直接子元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> children=parent.<span class="property">children</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//1.2遍历当前父元素的所有直接子元素并输出元素名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">for</span>(<span class="keyword">var</span> child <span class="keyword">of</span> children)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//console.log(child.nodeName);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">if</span>(child.<span class="property">innerHTML</span>===<span class="string">&quot;&#123;&#123;uname&#125;&#125;&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">child.<span class="property">innerHTML</span>=uname;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//2. 对每个直接子元素调用和父元素完全相同的操作</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">arguments</span>.<span class="title function_">callee</span>(child);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> uname=<span class="string">&quot;dingding&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//当 window 加载完 才自动执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//遍历body元素下的所有后代元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">getChildren</span>(<span class="variable language_">document</span>.<span class="property">body</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code> 解决: 用HTML特征查找</code></p><p><strong>按HTML特征查找:</strong></p><p>  何时: 在没有获得任何元素情况下，可作为首次查找之用</p><p>  包括: 4种</p><ol><li>按id查找一个元素: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elem=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>);</span><br></pre></td></tr></table></figure><p> 强调:</p><ol><li>按id查找，必须用document调用</li><li>只能找到一个元素</li></ol><p><strong>按标签名查找:</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elems=任意父元素.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;标签名&quot;</span>);</span><br></pre></td></tr></table></figure><p>强调: </p><ul><li>可用任意父元素调用: <ul><li>比如: 在ul下找li; 在table下找td; 在select下找option</li></ul></li><li>可找到多个，所以返回多个元素组成的类数组对象</li><li>按标签名查找不仅查找直接子元素，且在所有后代中查找符合条件的</li></ul><p><strong>按name属性查找:</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elems=<span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&quot;name&quot;</span>)</span><br></pre></td></tr></table></figure><p>强调: </p><ul><li>只能用document调用</li><li>返回多个元素组成的类数组对象</li></ul><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="jjzPjZ" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="jjzPjZ">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/jjzPjZ/">  jjzPjZ</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="bPvdXr" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="bPvdXr">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/bPvdXr/">  bPvdXr</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p><strong>按class查找:</strong> </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var elems=任意父元素.getElementsByClassName(<span class="string">&quot;class&quot;</span>)</span><br></pre></td></tr></table></figure><p>强调: </p><ol><li>可用任意父元素调用</li><li>返回多个元素组成的类数组对象</li><li>不仅查找直接子元素，且在所有后代中查找。</li><li>如果一个元素同时被多个class修饰，那么只要用其中一个class，就可找到该元素。</li></ol><p> <strong>按选择器查找: 2种情况:</strong> </p><ol><li>只查找一个符合条件的元素: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elem=任意父元素.<span class="title function_">querySelector</span>(<span class="string">&quot;选择器&quot;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>查找多个符合条件的元素: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elems=任意父元素.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;选择器&quot;</span>)</span><br></pre></td></tr></table></figure><p>优化: 按HTML查找 vs 按选择器查找</p><ol><li>返回值: </li></ol><ul><li>按HTML查找返回动态集合: 不实际存储属性值，每次访问集合内容，都重新查找DOM树</li><li>按选择器查找返回非动态集合: 实际存储所有属性值，每次访问集合内容，不需要重新查找DOM树</li></ul><ol start="2"><li>首次查找效率: </li></ol><ul><li>按HTML查找快</li><li>按选择器查找慢</li></ul><ol start="3"><li>易用性: </li></ol><ul><li><p>按选择器查找，简单又强大</p></li><li><p>按HTML查找，相对繁琐</p><p><strong>总结:</strong></p></li></ul><ol><li><p>当仅靠一个条件就可找到元素时，首选按HTML查找</p></li><li><p>当查找条件复杂时，首选按选择器查找，简单易用</p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="gNeaYg" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="gNeaYg">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/gNeaYg/">  gNeaYg</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></li></ol><h2 id="修改的几种方式"><a href="#修改的几种方式" class="headerlink" title="修改的几种方式"></a>修改的几种方式</h2><p> <strong>内容: 获取或修改元素的内容3种:</strong> </p><ul><li>获取或修改元素的原始HTML片段内容: <code>elem.innerHTML</code></li><li>获取或修改元素的纯文本内容: </li><li>elem.textContent 对比 innerHTML: <ul><li>将特殊符号翻译为正文</li><li>去掉了内嵌标签</li></ul></li><li>获取或修改表单元素的内容: elem.value</li></ul><p><strong>属性: 3种:</strong> </p><p><strong>HTML标准属性: HTML标准中规定的元素具有的属性，两种：</strong></p><ul><li>核心DOM API: 最初DOM标准中指定的，可以访问所有结构化文档的API<ul><li>四种方式: <ul><li>获取属性值: elem.getAttribute(“属性名”)</li><li>修改属性值: elem.setAttribute(“属性名”,”新属性值”)</li><li>判断是否包含指定属性: elem.hasAttribute(“属性名”)</li><li>移除属性: elem.removeAttribute(“属性名”)</li></ul></li><li>HTML DOM API: 对常用DOM API提供了简化版本<ul><li>对于标准属性: HTML DOM已经将所有标准属性都提前内置在了元素对象中，可用.直接访问。如果没有出现在页面上的标准属性值，默认为””</li><li>elem.标准属性名</li><li>特例: html元素的class属性:</li><li>应该换成: elem.className =&gt; &lt; elem class=”” &gt;</li><li>因为class是ES中的保留字</li></ul></li></ul></li><li><strong>四大状态属性:</strong> <ul><li><code>enabled    disabled     checked     selected</code></li><li>值都不是字符串，而是bool类型</li><li>不能用核心DOM 4个API修改</li><li>只能用**.**直接访问</li><li>CSS3: 状态伪类选择器: </li><li><code>:selected  :checked  :disabled   :enabled</code><ul><li>选中处于某种状态的元素</li></ul></li></ul></li><li><strong>自定义扩展属性:</strong> <ul><li>什么是: HTML标准中没有规定的，程序员自行添加的属性</li><li>何时:<ul><li>在客户端临时缓存业务数据，减少向服务器端发送请求的次数</li><li>代替其他选择器(id,class,元素)，为元素绑定行为</li></ul></li><li>理由：<ul><li>id 只能选一个元素</li><li>元素 限制太死板</li><li>class 是样式专用，不稳定</li><li>解决: 今后只要为元素添加行为，都应该用自定义扩展属性</li></ul></li></ul></li></ul><p><strong>bootstrap:</strong> </p><ol><li>为想要添加行为的元素，指定自定义扩展属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a data-toggle=<span class="string">&quot;dropdown&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>用属性选择器找到有自定义扩展属性的元素绑定行为: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> elems=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;[data-toggle=dropdown]&quot;</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> elem <span class="keyword">of</span> elems)</span><br><span class="line">    elem.<span class="property">on</span>事件名=<span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如何:</p><ol><li>定义时: &lt;ANY 自定义属性名=”值”</li><li>获取或设置自定义属性的值:</li></ol><p>不能用**.<strong>修改，因为</strong>内存中的元素对象中不包含自定义扩展属性**</p><p>用核心DOM API可以访问自定义扩展属性: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">elem.<span class="title function_">getAttribute</span>(<span class="string">&quot;属性名&quot;</span>)</span><br><span class="line"></span><br><span class="line">elem.<span class="title function_">setAttribute</span>(<span class="string">&quot;属性名&quot;</span>,<span class="string">&quot;新值&quot;</span>)</span><br><span class="line"></span><br><span class="line">elem.<span class="title function_">hasAttribute</span>(<span class="string">&quot;属性名&quot;</span>)</span><br><span class="line"></span><br><span class="line">elem.<span class="title function_">removeAttribute</span>(<span class="string">&quot;属性名&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>HTML5:</strong> </p><ol><li>如果在定义自定义扩展属性时加了data-前缀</li><li>在程序中: elem.dataset.属性名</li></ol><p>其中: <code>dataset可自动收集data-*开头的属性</code></p><p>样式: </p><ol><li>修改一个css样式: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elem.<span class="property">style</span>.<span class="property">css</span>属性名=<span class="string">&quot;新值&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中: style代表元素开始标签中的内联样式style属性</p><p>强调: 所有css属性名都要去-，变驼峰命名</p><ol start="2"><li>获取一个css样式: </li></ol><p>错误: elem.style 只能获得内联样式</p><p>解决: 今后只要获取css属性值，都用计算后的样式</p><p>什么是计算后的样式: 最终应用到元素上的所有css属性的集合。</p><p>还将相对单位的属性值计算为绝对单位(px)</p><p>​     如何: </p><ol><li>先获得计算后的完整样式对象</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> style=<span class="title function_">getComputedStyle</span>(elem)</span><br></pre></td></tr></table></figure><ol start="2"><li>从style中获得想要的css属性值</li></ol><p>​       style.css属性名</p><p>强调: 计算后的所有样式，只读。因为计算后的样式来源不确定，不知道多少地方正在同时使用。</p><p>总结: 今后只要修改css属性，都用elem.style.css属性=值</p><p>今后只要获取css属性，都用getComputedStyle</p><p>问题: elem.style，一次只能修改一个css属性</p><p>如果批量修改多个css属性时，代码繁琐</p><p>解决: 今后只要批量应用样式，都用class</p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="wLmKvq" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="wLmKvq">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/wLmKvq/">  wLmKvq</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="JQLYdP" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="JQLYdP">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/JQLYdP/">  JQLYdP</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="WqzQQM" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="WqzQQM">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/WqzQQM/">  WqzQQM</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="添加-删除"><a href="#添加-删除" class="headerlink" title="添加/删除"></a>添加/删除</h2><p> <strong>添加 :</strong> </p><ol><li>先创建一个空元素对象: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    相当于:  &lt; a &gt;&lt; /a&gt;</p><ol start="2"><li>设置关键属性: </li></ol><p>​    a.innerHTML=”go to tmooc”;  =&gt; <a> go to tmooc </a></p><p>​    a.href=”<a href="http://tmooc.cn&quot;/">http://tmooc.cn&quot;</a> </p><p>​    =&gt; &lt; a href=”<a href="http://tmooc.cn/">http://tmooc.cn</a> “&gt; go to tmooc &lt; /a&gt;</p><ol start="3"><li>将新元素添加到DOM树上指定位置</li><li>父元素.appendChild(a) 将a追加到父元素下最后一个孩子之后</li><li>父元素.insertBefore(a, child) 将a插入在父元素下一个现有child元素之前</li><li>父元素.replaceChild(a, child) 用a代替父元素下现有的child子元素</li></ol><p> <code>优化: 尽量减少操作DOM树的次数: </code></p><p><code>为什么: 每修改一次DOM树，就会导致重排重绘，降低页面加载的效率。</code></p><p>   原理: </p><p>​    html-&gt;DOM Tree ←修改</p><p>​            ↓</p><p>​          Render Tree -&gt; 重排-&gt;重绘paint</p><p>​            ↑</p><p>​    css -&gt; CSS Model</p><p>解决: 2种: </p><ol><li>当同时添加父元素和子元素时，应该先在内存中将所有字元素加入父元素下，最后再一次性将父元素添加到DOM树</li><li>如果父元素已经在页面上了，要同时添加多个平级子元素时，应该找一个临时的父元素，先将所有子元素加入临时的父元素中，最后，再将临时的父元素添加到DOM树</li></ol><p>临时的父元素: 文档片段 <strong>document fragment</strong></p><p>=什么: 内存中，临时存储多个子元素的虚拟父元素</p><p>何时: 要同时添加多个平级子元素到DOM树时</p><p>如何: 3步: </p><ol><li>创建文档片段对象: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> frag=<span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>将子元素添加到文档片段中: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">frag.<span class="title function_">appendChild</span>(child)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>将frag整体一次性添加到DOM树</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父元素.<span class="title function_">appendChild</span>(frag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 删除: </p><p><strong>父元素.removeChild(child)</strong></p><p><strong>child.parentNode.removeChild(child)</strong></p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="RzMWoK" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="RzMWoK">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/RzMWoK/">  RzMWoK</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="qzoOvq" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="qzoOvq">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/qzoOvq/">  qzoOvq</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="HTML-DOM-常用对象"><a href="#HTML-DOM-常用对象" class="headerlink" title="HTML DOM 常用对象"></a>HTML DOM 常用对象</h2><p> Image: 唯一的简化: var img=new Image();</p><p> Select/Option</p><p><strong>Select属性:</strong></p><ul><li>.selectedIndex 自动获得当前选中的option的下标i</li><li>.options 快速获得当前select下所有option的集合</li><li>.options.length 表示select下option的个数</li><li>.length 简化.options.length</li><li>方法: .add(opt) 简化.appendChild(opt)</li><li>问题: 不支持文档片段</li><li>.remove(i) 移除i位置的一个option</li></ul><p> <strong>Option:</strong> </p><p>最大的简化: var opt=new Option(text, value)</p><p>新建一个option元素，同时设置其内容和值</p><p><strong>Table/…:</strong></p><p>逐级管理: </p><p>table管着行分组:</p><p>创建(行分组): 创建行分组，同时将行分组立刻就添加到table中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thead=table.<span class="title function_">createTHead</span>()</span><br><span class="line"><span class="comment">//createElement(thead);table.appendChild(thead)</span></span><br><span class="line"><span class="keyword">var</span> tfoot=table.<span class="title function_">createTFoot</span>()</span><br><span class="line"><span class="keyword">var</span> tbody=table.<span class="title function_">createTBody</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除(行分组):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">table.<span class="title function_">deleteTHead</span>();</span><br><span class="line">table.<span class="title function_">deleteTFoot</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>获得(行分组):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">table.<span class="property">tHead</span>      </span><br><span class="line">table.<span class="property">tFoot</span></span><br><span class="line">table.<span class="property">tBodies</span>[i]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>行分组管着行:</p><p>创建一个新行:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tr=行分组.<span class="title function_">insertRow</span>(i);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>在行分组的第i行位置前插入一个新行，并返回新行对象。原i位置的行及其之后的行被向后挤压顺移一位</code></p><p>固定套路: </p><ol><li>在行分组末尾追加一个新行: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tr=行分组.<span class="title function_">insertRow</span>()</span><br><span class="line"><span class="comment">//createElement(tr) 行分组.appendChild(tr)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>在行分组第一行之前插入一个新行:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tr=行分组.<span class="title function_">insertRow</span>(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除现有行: </p><p>不好: 行分组.deleteRow(i)</p><p><strong>问题: 因为.前的主语是行分组，所以i要求是行在行分组内的相对下标位置。而tr有一个rowIndex属性，虽然可获得行的下标位置，但是是相对于整个表格的位置。</strong></p><p>好的: table.deleteRow(tr.rowIndex)</p><p>获取某一个行: 行分组.rows[i]</p><p>行管着格:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">添加: <span class="keyword">var</span> td=tr.<span class="title function_">insertCell</span>(i) <span class="comment">//省略i，默认在末尾追加</span></span><br><span class="line"></span><br><span class="line">局限: 只能添加td，不能添加th</span><br><span class="line"></span><br><span class="line">删除: tr.<span class="title function_">deleteCell</span>(i)</span><br><span class="line"></span><br><span class="line">获取: tr.<span class="property">cells</span>[i]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>Form:</strong> </p><p>获取: var form=document.forms[i/id]</p><p>属性: </p><ul><li>.elements 获得表单中所有表单元素(input, button, textarea, select)的集合</li><li>.elements.length 获得表单中表单元素的个数</li><li>.length =&gt; .elements.length</li></ul><p>方法: form.submit() 代替提交按钮手动提交表单</p><p>自定义表单提交: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span></span><br><span class="line">    .<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//先验证所有表单元素的值是否符合要求</span></span><br><span class="line">    <span class="comment">//只有所有表单都符合要求</span></span><br><span class="line">    <span class="comment">//才手动调用form.submit()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  表单元素对象: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取表单元素: var elem=form.elements[i/name/id]</span><br><span class="line"></span><br><span class="line">如果表单元素有name属性: form.name</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    方法: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elem.<span class="title function_">focus</span>()</span><br><span class="line">elem.<span class="title function_">blur</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="WqzQWL" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="WqzQWL">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/WqzQWL/">  WqzQWL</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><h2 id="什么是BOM-Browser-Object-Model"><a href="#什么是BOM-Browser-Object-Model" class="headerlink" title="什么是BOM: Browser Object Model"></a>什么是BOM: Browser Object Model</h2><p> BOM是专门操作浏览器窗口或软件的API——没有标准</p><p>何时: 操作浏览器窗口，或访问浏览器软件的信息时包含: </p><p>  <strong>window:</strong> </p><ol><li>history</li><li>location</li><li>navigator</li><li>document</li><li>screen</li><li>event</li></ol><p><strong>window对象:</strong> </p><ol><li><p>代替ES标准中的global充当全局作用域对象</p></li><li><p>封装所有原生API的大的对象，包括:</p><p><code>ES+DOM+BOM</code></p></li></ol><p> <strong>属性:</strong> </p><p>  <strong>窗口大小:</strong> </p><ol><li>完整窗口大小: <strong>[window.]outerWidth/outerHeight</strong></li><li>文档显示区大小: <strong>[window.]innerWidth/innerHeight</strong></li></ol><p>打开和关闭窗口</p><ol><li>打开一个新窗口：**[window.]open()** </li><li>关闭当前窗口：<strong>close()</strong> </li></ol><h3 id="history"><a href="#history" class="headerlink" title="history:"></a><strong>history:</strong></h3><p>什么是: 当前窗口中，保存当前窗口打开后成功访问过的url的<strong>历史记录栈</strong></p><p>何时: 用程序实现前进和后退时</p><p> 如何:</p><ul><li>history.go(i)</li><li>前进一步: history.go(1)</li><li>后退一步: history.go(-1)</li><li>后退两步: history.go(-2)</li><li>刷新: history.go(0)</li></ul><h3 id="location"><a href="#location" class="headerlink" title="location:"></a><strong>location:</strong></h3><p>什么是: 保存地址栏中正在打开的url的信息的对象</p><p>还提供了操作页面跳转的API</p><p> 何时:</p><ol><li>获得当前url相关的信息</li><li>页面跳转</li></ol><p>如何: </p><p>属性:</p><ul><li><p>.href  获得当前完整的url信息</p></li><li><p>.protocol  获得url中的协议部分</p></li><li><p>.host      获得url中的主机名+端口号部分</p></li><li><p>.hostname  获得url中的主机名</p></li><li><p>.port      获得url中的端口号部分</p></li><li><p>.pathname 获得url中的相对路径部分</p></li><li><p>.hash      获得url中的#锚点地址部分</p></li><li><p>.search     获得url中的?查询字符串部分</p><p>方法: </p></li></ul><ol><li>在当前窗口打开，可后退: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">open</span>(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;_self&quot;</span>)</span><br><span class="line">location.<span class="property">href</span>=<span class="function"><span class="params">url</span> =&gt;</span> location.<span class="title function_">assign</span>(<span class="string">&quot;url&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>在当前窗口打开，进制后退:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="title function_">replace</span>(<span class="string">&quot;新url&quot;</span>)</span><br><span class="line">用<span class="string">&quot;新url&quot;</span>代替history数组中当前旧的url，以此来阻止后退。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>刷新的2种方式: </li><li>普通刷新: 优先从本地浏览器缓存中获取资源，除非本地缓存没有或过期，才被迫从服务器重新下载</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="title function_">go</span>(<span class="number">0</span>)</span><br><span class="line"><span class="variable constant_">F5</span></span><br><span class="line">location.<span class="title function_">reload</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>强制刷新: 强制浏览器跳过本地缓存，总是直接从服务器下载新资源。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="title function_">reload</span>(<span class="literal">true</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>打开新链接方式总结<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*打开新链接方式总结：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">1. 在当前窗口打开，可后退</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">html:&lt;a href=&quot;url&quot; target=&quot;_self&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">js:open(&quot;url&quot;,&quot;_self&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">2. 在当前窗口打开，不可后退</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">js: location.replace(&quot;新url&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">3. 在新窗口打开，可打开多个</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">html:&lt;a href=&quot;url&quot; target=&quot;_blank&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">js:open(&quot;url&quot;,&quot;_blank&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">4. 在新窗口打开，只能打开一个</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">html: &lt;a href=&quot;url&quot; target=&quot;自定义窗口名&quot;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">js: open(&quot;url&quot;,&quot;自定义窗口名&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">其实每个窗口在浏览器内存中都有一个唯一的窗口名</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">浏览器规定，同名的窗口只能打开一个</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">窗口名一般在打开新链接时，临时定义: </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">如何: 2种: </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">1. &lt;a href=&quot;url&quot; target=&quot;自定义窗口名&quot;&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">2. open(&quot;url&quot;,&quot;自定义窗口名&quot;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">预定义窗口名: </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">_self: 表示自动获得原窗口的名字作为新窗口名</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">_blank: 表示不定义窗口名，浏览器会自动随机分配窗口名</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">open1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//open(&quot;http://tmooc.cn&quot;,&quot;_self&quot;);</span></span></span><br><span class="line"><span class="language-javascript">location.<span class="property">href</span>=<span class="string">&quot;http://tmooc.cn&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">open2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">location.<span class="title function_">replace</span>(<span class="string">&quot;http://tmooc.cn&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">open3</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">open</span>(<span class="string">&quot;http://tmooc.cn&quot;</span>,<span class="string">&quot;_blank&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">open4</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">open</span>(<span class="string">&quot;http://tmooc.cn&quot;</span>,<span class="string">&quot;tmooc&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tmooc.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_self&quot;</span>&gt;</span>在当前窗口打开，可后退<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:open1()&quot;</span>&gt;</span>在当前窗口打开，可后退(js)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:open2()&quot;</span>&gt;</span>在当前窗口打开，不可后退(js)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tmooc.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>在新窗口打开，可打开多个<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:open3()&quot;</span>&gt;</span>在新窗口打开，可打开多个(js)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://tmooc.cn&quot;</span> <span class="attr">target</span>=<span class="string">&quot;tmooc&quot;</span>&gt;</span>在新窗口打开，只能打开一个<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:open4()&quot;</span>&gt;</span>在新窗口打开，只能打开一个(js)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="navigator"><a href="#navigator" class="headerlink" title="navigator:"></a>navigator:</h3><p>什么是: 封装浏览器配置信息的对象</p><p>何时: 只要获取浏览器的配置信息</p><p>包括: </p><ul><li>.cookieEnabled 判断当前浏览器是否启用cookie!</li><li>什么是cookie: 在客户端本地硬盘持久保存一个数据的小文件</li><li>.plugins 封装浏览器安装的插件信息的集合</li><li>什么是插件: 为浏览器添加新功能的小程序</li><li>何时: 判断浏览器是否安装了指定的插件: </li><li>navigator.plugins[“完整插件名”]!==undefined 说明安装了</li><li>.userAgent 保存浏览器名称和版本号的字符串</li><li>何时: 只要精确判断浏览器的名称和版本号时</li></ul><h3 id="定时器"><a href="#定时器" class="headerlink" title="**定时器: **"></a>**定时器: **</h3><p>周期性定时器: </p><p>什么是: 让程序每隔一段时间间隔，反复执行一项任务</p><p>如何: 3件事: </p><ol><li>先定义一个任务函数</li><li>启动定时器: 将任务函数放入定时器中反复执行: </li><li>var n=setInterval(任务函数, 间隔ms)</li></ol><p>强调: </p><ol><li>如果定时器可能被停止，则必须在启动是获得定时器的需要n。</li><li>任务函数后，不要加()，因为不是立刻执行，且不止执行一次。</li></ol><p>停止定时器: </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clearInterval</span>(n) <span class="comment">//停止n号定时器</span></span><br></pre></td></tr></table></figure><p> 一次性定时器: </p><p>什么是: 让程序先等待一段时间后，再延迟执行一项任务</p><p>如何: 3件事</p><ol><li>任务函数</li><li>启动定时器: 开始等待，等待结束后，自动执行一次任务。任务执行后，自动停止。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n=<span class="built_in">setTimeout</span>(任务函数, 等待ms)</span><br></pre></td></tr></table></figure><ol start="3"><li>关闭定时器: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">clearTimeout</span>(n)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt;倒计时&lt;/title&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .pause&#123;</span><br><span class="line">      width:12px; height:25px; background:#fff;</span><br><span class="line">      border:0;</span><br><span class="line">      border-left:2px solid #000;</span><br><span class="line">      border-right:2px solid #000;</span><br><span class="line">    &#125;</span><br><span class="line">    .play&#123;</span><br><span class="line">      width:0; padding:0; height:25px; background:#fff;</span><br><span class="line">      border:12px solid #fff;</span><br><span class="line">      border-left:12px solid #000;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"></span><br><span class="line"> &lt;body&gt;</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    距离下一个假期还有: &lt;span id=&quot;time&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;button id=&quot;btn&quot; class=&quot;pause&quot;&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">function task()&#123;</span><br><span class="line">  var end=new Date(&quot;2019/01/10 17:36:30&quot;);</span><br><span class="line">  var now=new Date();</span><br><span class="line">  var s=parseInt((end-now)/1000);</span><br><span class="line">  if(s==0)&#123;//如果s等于0说明倒计时结束</span><br><span class="line">    clearInterval(n);//就停止定时器</span><br><span class="line">    var span=document.getElementById(&quot;time&quot;)</span><br><span class="line">    span.innerHTML=&quot;过年啦！&quot;;</span><br><span class="line">  &#125;else&#123;</span><br><span class="line">    var d=parseInt(s/3600/24);</span><br><span class="line">    if(d&lt;10) d=&quot;0&quot;+d;</span><br><span class="line">    //s/3600/24,再下取整</span><br><span class="line">    var h=parseInt(s%(3600*24)/3600);</span><br><span class="line">    if(h&lt;10) h=&quot;0&quot;+h;</span><br><span class="line">    //s/(3600*24)的余数,再/3600,再下去整</span><br><span class="line">    var m=parseInt(s%3600/60);</span><br><span class="line">    if(m&lt;10) m=&quot;0&quot;+m;</span><br><span class="line">    //s/3600的余数,再/60，再下取整</span><br><span class="line">    s%=60;//s/60的余数</span><br><span class="line">    if(s&lt;10) s=&quot;0&quot;+s;</span><br><span class="line">    //距离下一个假期还有: ?天?小时?分?秒</span><br><span class="line">    var span=document.getElementById(&quot;time&quot;)</span><br><span class="line">    span.innerHTML=d+&quot;天&quot;+h+&quot;小时&quot;+m+&quot;分&quot;+s+&quot;秒&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task();</span><br><span class="line">var n=setInterval(task,1000);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>图片移入移出效果<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#slider</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>:<span class="number">200px</span>; <span class="attribute">height</span>:<span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>:relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#555</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#slider</span>&gt;<span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>:absolute; <span class="attribute">top</span>:<span class="number">0</span>; <span class="attribute">left</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">opacity</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>:all .<span class="number">5s</span> linear;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#slider</span>&gt;<span class="selector-tag">img</span><span class="selector-class">.show</span>&#123;  <span class="attribute">opacity</span>:<span class="number">1</span>;  &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;slider&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/1.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;show&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/2.jpg&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/3.jpg&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/4.jpg&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> num=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">timer</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> div=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;slider&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> imgs=div.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;img&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        imgs[num].<span class="property">className</span>=<span class="string">&quot;&quot;</span>;      </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(num==imgs.<span class="property">length</span>-<span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            num=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            imgs[num].<span class="property">className</span>=<span class="string">&quot;show&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            num++;</span></span><br><span class="line"><span class="language-javascript">            imgs[num].<span class="property">className</span>=<span class="string">&quot;show&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(timer,<span class="number">3000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   function task()&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     var img=document.getElementsByClassName(&quot;show&quot;)[0];</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     img.className=&quot;&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     if(img.nextElementSibling!==null)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       img.nextElementSibling.className=&quot;show&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     &#125;else&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       img.parentElement.children[0].className=&quot;show&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   var n=setInterval(task,1000);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   var div=document.getElementById(&quot;slider&quot;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   div.onmouseover=function()&#123;             //鼠标进入div时</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     clearInterval(n);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   div.onmouseout=function()&#123;              //鼠标移出div时</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//       n=setInterval(task,1000);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// function task()&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   var img=document.getElementsByClassName(&quot;show&quot;)[0];</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   if(img.nextElementSibling!==null)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     img.nextElementSibling.className=&quot;show&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   &#125;else&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     img.parentElement.ch=ildren[0].className=&quot;show&quot;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li>什么是事件: 浏览器内容或元素状态的变化</li><li>什么是事件处理函数: 当事件发生时，自动调用的函数</li><li>何时: 如果希望事件发生时，能自动执行一项任务</li><li>如何绑定事件处理函数: 3种: </li></ul><ol><li>在HTML中: &lt;ANY on事件名=”处理函数()”</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">js</span>: <span class="keyword">function</span> 处理函数()&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>  <code> 问题: 不符合内容与行为分离的原则，不便于维护</code></p><ol start="2"><li>在js中绑定，赋值方式:</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elem.<span class="property">on</span>事件名=处理函数;</span><br><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>   <code>问题: 一个事件只能绑定一个处理函数</code></p><ol start="3"><li>在js中绑定，添加事件监听对象的方式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">elem.<span class="title function_">addEventListener</span>(<span class="string">&quot;事件名&quot;</span>,处理函数)</span><br><span class="line"></span><br><span class="line">在elem元素的监听队列中添加一个监听<span class="string">&quot;事件名&quot;</span>的对象，其中包含一个处理函数。</span><br><span class="line"></span><br><span class="line">当elem元素上发生<span class="string">&quot;事件名&quot;</span>时，会遍历监听队列，找到符合条件的处理函数，自动执行处理函数。</span><br><span class="line"></span><br><span class="line">elem.<span class="title function_">removeEventListener</span>(<span class="string">&quot;事件名&quot;</span>,原处理函数)</span><br></pre></td></tr></table></figure><p><code> 强调: 如果一个处理函数有可能被移除时，则绑定时就要用有名称的函数作为处理函数。</code></p><p><code>移除时才能通过函数名找到绑定时使用的原函数</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>...<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnShoot&quot;</span>&gt;</span>shoot<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnAward&quot;</span>&gt;</span>获得跟踪导弹<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnBreak&quot;</span>&gt;</span>失去跟踪导弹<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btnShoot=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btnShoot&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    btnShoot.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发射普通子弹····&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btnAward=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btnAward&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">shoot2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&quot;发射跟踪导弹=&gt;=&gt;=&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    btnAward.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        btnShoot.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,shoot2);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    btnBreak.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;                        <span class="comment">//如果一个元素有可能被移除不要用匿名函数去定义</span></span></span><br><span class="line"><span class="language-javascript">        btnShoot.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>,shoot2);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"> </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> **事件模型: 在发生事件时，浏览器的执行过程 分为3个阶段: ** </p><ol><li><p>捕获: 由外向内，记录各级父元素上绑定的处理函数</p></li><li><p>目标触发: 优先触发目标元素上的处理函数: </p><p>​     <code>目标元素: 事件最初实际发生在的元素</code></p></li><li><p>冒泡: 由内向外，依次触发捕获时记录的各级父元素上的处理函数</p></li></ol><p>事件对象: 事件发生时，自动创建的，保存事件信息，并提供操作事件的API  的对象</p><p>何时: 获取事件信息，或修改事件的默认特性时</p><p>获取: 事件对象总是作为处理函数的第一个参数，默认传入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elem.<span class="property">on</span>事件名=<span class="keyword">function</span>(<span class="params">e</span>)&#123;  e-&gt;event  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>事件处理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/2.css&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d2&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;d3&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">d1.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;d1:789&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">d2.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">e.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;d2:456&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">d3.<span class="property">onclick</span>=<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">e.<span class="title function_">stopPropagation</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;d3:123&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为当事件发生时: elem.on事件名( event )</p><p>API: </p><ol><li>取消冒泡: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e.<span class="title function_">stopPropagation</span>();</span><br><span class="line"><span class="comment">//停止 蔓</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>利用冒泡: </li></ol><p>优化: 尽量减少事件监听对象的个数</p><p>为什么: 浏览器触发事件是采用遍历的方式找到的监听对象。监听对象多，遍历就慢。</p><p>如何: 如果多个子元素需要绑定相同的事件处理函数时，其实只要在父元素上绑定一次即可。所有子元素共用。</p><p>两个难题: </p><ol><li>获得目标元素: </li></ol><p>​            错误: this -&gt; 父元素</p><p>​            正确: e.target 代替this</p><ol start="2"><li>判断目标元素是否想要的！</li></ol><p>阻止默认行为: e.preventDefault()</p><ol><li>a当按钮用时: 如果href=”#xxx”, 会擅自修改地址栏中的url</li><li>提交按钮: 也能实现自定义提交。</li></ol><p>自定义提交: 2种: </p><ol><li>```js<br>input type=button<br>btn.onclick=function(){ <pre><code>//先验证//如果都验证通过//才form.submit()</code></pre>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```js</span><br><span class="line">   input type=submit</span><br><span class="line">   //表单提交过程: </span><br><span class="line">   //点submit按钮-&gt;触发form.onsubmit()-&gt;正式提交</span><br><span class="line">   //先验证</span><br><span class="line">   //如果有一项验证未通过</span><br><span class="line">   //就阻止提交</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ol><p><strong>鼠标坐标:</strong> </p><ol><li><p>相对于屏幕左上角: <strong>e.screenX  e.screenY</strong></p></li><li><p>相对于文档显示区左上角: <strong>e.clientX   e.clientY</strong></p></li><li><p>相对于当前事件所在元素左上角的偏移量: <strong>e.offsetX   e.offsetY</strong></p></li><li><p><img src="https://s2.ax1x.com/2019/07/01/Z8zGIx.png" alt="Z8zGIx.png"></p><p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="rEdxJj" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="rEdxJj">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/rEdxJj/">  rEdxJj</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script></li></ol><p><strong>滚动事件:</strong> </p><p>​      //当窗口中的内容发生滚动时，自动执行</p><p>​      window.onscroll=function(){</p><p>​        //获得页面滚动过的距离: 页面顶部超出文档显示区的距离。</p><p>​        var scrollTop=document.body.scrollTop</p><p>​                 ||document.documentElement.scrollTop</p><p>​      }</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>根据页面滚动位置显示浮动框<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span>&#123;<span class="attribute">height</span>:<span class="number">2000px</span>;&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#toTop</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>:fixed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toTop&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onscroll</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> scrollTop=<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> || <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(scrollTop);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span>(scrollTop&gt;=<span class="number">500</span>&amp;&amp;scrollTop&lt;=<span class="number">1000</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      toTop.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      toTop.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&quot;none&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是DOM-Document-Object-Model&quot;&gt;&lt;a href=&quot;#什么是DOM-Document-Object-Model&quot; class=&quot;headerlink&quot; title=&quot;什么是DOM: Document Object Model&quot;&gt;&lt;/a&gt;什么是DOM: Document Object Model&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;DOM就是专门操作网页内容的API标准——W3C&lt;/li&gt;
&lt;li&gt;何时: 只要用js操作网页的内容&lt;/li&gt;
&lt;li&gt;包括: 增删改查+事件绑定&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>ES7</title>
    <link href="http://example.com/2019/06/28/ES7/"/>
    <id>http://example.com/2019/06/28/ES7/</id>
    <published>2019-06-28T07:31:29.000Z</published>
    <updated>2019-07-17T19:19:46.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ES7-预览"><a href="#ES7-预览" class="headerlink" title="ES7 预览"></a>ES7 预览</h2><ul><li>数组<ul><li><code>arr.includes()</code> 数组是否包含某个东西</li><li>数组的 arr.keys(), arr,entries()</li><li>for … in 遍历数组 下标 key</li><li>for … of 遍历数组 值 value, 不能用于json</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 循环的时下标 key</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 循环的是值 value</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&#x27;</span>+i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> arr.<span class="title function_">entries</span>()) &#123;<span class="comment">//结构赋值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&#x27;</span> + key + value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = &#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="number">7</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> json) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数字<ul><li>求幂  3**8   代表：3的8次方</li></ul></li><li>字符串<ul><li>padStart()/padEnd() 指定宽度，不够就补空格或指定字符</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=&#x27;</span> + <span class="string">&#x27;abcd&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="string">&#x27;=&#x27;</span>)<span class="comment">//补几位  第二个参数补什么东西</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=&#x27;</span> + <span class="string">&#x27;abcd&#x27;</span>.<span class="title function_">padEnd</span>(<span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">=00abcd=</span><br><span class="line">=abcd00=</span><br></pre></td></tr></table></figure><ul><li>容忍度<ul><li>[1, 2, 3,] 老版数组最后不能有逗号，新的可以有</li><li>函数参数最后多的逗号也可以</li></ul></li><li>async await<ul><li>和 generator yield 类似</li><li>generator 不可以写成箭头函数， async 可以</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ES7-预览&quot;&gt;&lt;a href=&quot;#ES7-预览&quot; class=&quot;headerlink&quot; title=&quot;ES7 预览&quot;&gt;&lt;/a&gt;ES7 预览&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;数组&lt;ul&gt;
&lt;li&gt;&lt;code&gt;arr.includes()&lt;/code&gt; 数组是否包含某个东</summary>
      
    
    
    
    
    <category term="JavaScript新语法" scheme="http://example.com/tags/JavaScript%E6%96%B0%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="http://example.com/2019/06/28/ES6/"/>
    <id>http://example.com/2019/06/28/ES6/</id>
    <published>2019-06-28T07:21:50.000Z</published>
    <updated>2019-07-04T16:46:20.495Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript的ES6怎么来的"><a href="#JavaScript的ES6怎么来的" class="headerlink" title="JavaScript的ES6怎么来的"></a>JavaScript的ES6怎么来的</h2><ul><li><p>ECMAScript 和 JavaScript</p><ul><li>ECMA 是标准，JS 是实现</li><li>ECMAScript 简称 ECMA 或 ES</li></ul></li><li><p>历史版本</p><ul><li><p>1996, ES1.0 Netscape 将 JS 提交给 ECMA 组织，ES 正式出现</p></li><li><p>1999, ES3.0 被广泛支持</p></li><li><p>2011, ES5.1 成为 ISO 国际标准</p></li><li><p>2015, ES6.0 正式发布</p><span id="more"></span></li></ul></li></ul><h2 id="ES6兼容性"><a href="#ES6兼容性" class="headerlink" title="ES6兼容性"></a>ES6兼容性</h2><ul><li><p>ES6(ES2015) 支持的环境 IE10+, Chrome, FireFox, 移动端, NodeJS</p></li><li><p>解决不兼容办法，编译、转换</p><ul><li>在线转换</li><li>或者提前编译</li></ul></li><li><p><a href="https://www.babeljs.cn/">Babel 中文网</a></p><ul><li><p><a href="http://www.ruanyifeng.com/blog/2016/01/babel.html">Babel 入门教程 阮一峰</a></p></li><li><p>Babel 是一个 JavaScript 编译器</p></li><li><p>SystemJS是一个体积小的打包工具</p></li><li><p>一个广泛使用的转码器，可以将ES6代码转为ES5代码，从而在现有环境执行</p></li><li><p>现在就用 ES6 编写程序，而不用担心现有环境是否支持</p><ul><li>```html<script src="browser.js"></script><script text/babel>es6等语句</script><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## let和const以及var声明区别</span><br><span class="line"></span><br><span class="line">**变量提升：使用`var`声明变量，变量的创建并不在声明变量的地方，而是会在当前作用域的顶部。**</span><br><span class="line"></span><br><span class="line">如果声明在函数内，则变量的创建则会在函数作用域的顶部；如果声明不在函数内，则会提升到全局作用域的顶部。</span><br><span class="line"></span><br><span class="line">&gt; 示例</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">function getValue(condition)&#123;</span><br><span class="line">if(condition)&#123;</span><br><span class="line">var value = &quot;yes&quot;;</span><br><span class="line">return value;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">//value 在此处可访问，值为 undefined</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">//value 在此处可访问，值为 undefined</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><p>等价于（var变量提升到当前函数作用域的顶部）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">condition</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> value;</span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">value = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//value 在此处可访问，值为 undefined</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//value 在此处可访问，值为 undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>由变量提升会带来循环变量过度共享的问题</p></blockquote><h3 id="let声明"><a href="#let声明" class="headerlink" title="let声明"></a>let声明</h3><p>与var声明变量语法一致，但是let声明变量不会<strong>变量提升</strong>，变量的作用域只会限制在当前代码块中。由于let变量并不会提升到代码块的顶部，因此，要想让整个代码块能给访问到let变量，需要将let声明指定到代码块的顶部。</p><blockquote><p>示例</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">condition</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line"><span class="keyword">let</span> value = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//value 在此处不可访问</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//value 在此处不可访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>let变量禁止重复声明：如果一个标识符已经在代码块内部中被定义，那么使用let以同样的标识符声明变量则会报错</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">43</span>；</span><br><span class="line"><span class="keyword">let</span> count; <span class="comment">//重复声明，报错</span></span><br></pre></td></tr></table></figure><h3 id="const声明"><a href="#const声明" class="headerlink" title="const声明"></a>const声明</h3><blockquote><p>const声明基本变量</p></blockquote><p><strong>const声明：使用const声明一个常量，一旦设置之后就不能再被修改，否则会报错。也就是说，使用const声明变量后要立即初始化</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> type;</span><br><span class="line">type=<span class="string">&#x27;TEST&#x27;</span>; <span class="comment">//Uncaught SyntaxError: Missing initializer in const declaration</span></span><br><span class="line"></span><br><span class="line">正确的为：</span><br><span class="line"><span class="keyword">const</span> type=<span class="string">&#x27;TEST&#x27;</span></span><br><span class="line">-----------------------------</span><br><span class="line"><span class="keyword">const</span> type=<span class="string">&#x27;TEST&#x27;</span></span><br><span class="line">type = <span class="string">&#x27;DEBUG&#x27;</span> <span class="comment">//ObjectMethod.html:244 Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><blockquote><p>const声明对象</p></blockquote><p><strong>const只会阻止变量绑定以及变量的修改，但是不会阻止对象成员变量的修改。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;nancy&#x27;</span>&#125;;</span><br><span class="line">person.<span class="property">name</span>= <span class="string">&#x27;nike&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">//nike</span></span><br><span class="line">person = &#123;&#125;; <span class="comment">//Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><h3 id="let与const的比较"><a href="#let与const的比较" class="headerlink" title="let与const的比较"></a>let与const的比较</h3><blockquote><p>相同点</p></blockquote><ol><li><p><strong>不存在变量提升</strong>：let与const声明变量都不会存在<strong>变量提升</strong>，都只在块级作用域内，如果试图在代码块外访问let或者const变量都会报错；</p></li><li><p><strong>禁止重复声明</strong>：如果在同一作用域内，禁止let或者const使用以被定义的标识符声明变量；</p></li><li><p><strong>都具有暂时性死区（temporal dead zone，TDZ ）</strong>：使用let或者const声明变量，如果在声明处之前访问变量会报错。在变量当前作用域的块内，变量声明处之前被称之为TDZ。</p></li><li><p><strong>不会覆盖全局对象上的属性</strong>：let变量或者const变量会在全局作用域上创建新的变量，但是不会绑定到全局对象上（浏览器则是window对象），而var变量在全局作用域上会绑定到全局对象，也就是说，var全局变量可能会无意覆盖掉全局对象上的一些属性。</p><p>var RegExp = ‘hello’;</p><pre><code>console.log(window.RegExp);        //hello</code></pre><h2 id="console-log-window-RegExp-RegExp-RegExp覆盖掉window对象中的RegExp属性"><a href="#console-log-window-RegExp-RegExp-RegExp覆盖掉window对象中的RegExp属性" class="headerlink" title="console.log(window.RegExp===RegExp); //RegExp覆盖掉window对象中的RegExp属性"></a>console.log(window.RegExp===RegExp); //RegExp覆盖掉window对象中的RegExp属性</h2><p>​    let RegExp = ‘hello’;<br>​    console.log(window.RegExp);<br>​    console.log(window.RegExp===RegExp); //false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">condition</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line"><span class="comment">//value的TDZ</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>不同点</p></blockquote><ol><li><p>const不能再赋值，let声明的变量可以重复赋值;</p><p>​    </p></li></ol><h3 id="块级绑定的使用场景"><a href="#块级绑定的使用场景" class="headerlink" title="块级绑定的使用场景"></a>块级绑定的使用场景</h3><ol><li><p>循环内的let声明</p><p>在循环中使用var变量，由于var变量存在变量提升，每次迭代共享同一个var变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">//输出5</span></span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">//输出5</span></span><br></pre></td></tr></table></figure><blockquote><p>解决方法：将var变量改为let变量</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将var改成let之后</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 0,1,2,3,4</span></span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)<span class="comment">//Uncaught ReferenceError: i is not defined i无法污染外部函数</span></span><br></pre></td></tr></table></figure><p>let变量不会变量提升，let变量作用域不会逃离出for循环外，因此不会污染外部函数。而在for循环中也不会每次迭代都共享同一变量，而是会分别使用let变量副本。</p></li><li><p>循环内const声明</p><p>在普通的for循环中使用const变量，由于const变量不可修改，因此会报错。而在for-in或者for-of循环中可以使用const变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3,4];</span><br><span class="line">for(const item of arr)&#123;</span><br><span class="line">console.log(item); //输出1,2,3,4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.var变量提升</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params">condition</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line"><span class="comment">//value的TDZ</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="string">&quot;yes&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getValue</span>(<span class="literal">false</span>));</span><br><span class="line"><span class="keyword">const</span> type=<span class="string">&#x27;TEST&#x27;</span></span><br><span class="line">type = <span class="string">&#x27;DEBUG&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(type);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.const声明对象，可以修改成员</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;<span class="attr">name</span>:<span class="string">&#x27;nancy&#x27;</span>&#125;;</span><br><span class="line">person.<span class="property">name</span>= <span class="string">&#x27;nike&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line">person = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.const变量可以用于for-in和for-of循环</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> item <span class="keyword">of</span> arr)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//let和const变量不会覆盖全局对象上的属性</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RegExp</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">RegExp</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">RegExp</span>===<span class="title class_">RegExp</span>);</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>let和const变量都不会进行提升，并且只会在声明它们的代码块内部存在。由于变量能够在必要位置被准确声明，其表现更加接近其他语言；</li><li>块级绑定存在暂时性死区（TDZ ） ，试图在声明位置之前访问它就会导致错误；</li><li>let 与 const 的表现在很多情况下都相似于 var ，然而在循环中就不是这样。在 for-in<br>与 for-of 循环中， let 与 const 都能在每一次迭代时创建一个新的绑定，这意味着在循环体内创建的函数可以使用当前迭代所绑定的循环变量值（而不是像使用 var 那样，共享同一变量值）。同时在基础的for循环中，使用const变量会出错。</li></ol><p><strong>最佳实践</strong>：在默认情况下使用 const ，而只在你知道变量值需要被更改的情况下才使用 let 。</p><h2 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="字符串处理方法"></a>字符串处理方法</h2><blockquote><p>codePointAt()方法</p></blockquote><p>ES6 为全面支持 UTF-16 而新增的方法之一是 <code>codePointAt(</code>) ，它可以在给定字符串中按位<br>置提取 <code>Unicode</code> 代码点。该方法接受的是码元位置而非字符位置，并返回一个整数值。</p><blockquote><p>String.fromCodePoint()方法</p></blockquote><p>可以使用<code>codePointAt()</code> 来提取字符串内中某个字符的代码点，也可以借助 <code>String.fromCodePoint()</code>用给定的代码点来产生包含单个字符的字符串</p><blockquote><p>normalize()方法</p></blockquote><p>Unicode 另一个有趣之处是，不同的字符在排序或其它一些比较操作中可能会被认为是相同<br>的。有两种方式可以定义这种关联性：第一种是<strong>规范相等性</strong>（canonical equivalence ） ，<br>意味着两个代码点序列在所有方面都被认为是可互换的。例如，两个字符的组合可以按规范<br>等同于另一个字符。第二种<strong>关联性是兼容性</strong>（compatibility ） ，两个兼容的代码点序列看起<br>来有差别，但在特定条件下可互换使用。</p><p>ES6 给字符串提供了** normalize()** 方法，以支持 Unicode 标准形式。因此，在比较字符时，可以先将字符用同一种标准化方法，让它们标准化，再进行比较，例如，比较字符数组中的大小：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> compare = <span class="keyword">function</span>(<span class="params">values=[]</span>)&#123;</span><br><span class="line">values.<span class="title function_">sort</span>(<span class="function">(<span class="params">first,second</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="keyword">let</span> firstNormalized = first.<span class="title function_">normalize</span>();</span><br><span class="line"><span class="keyword">let</span> secondNormalized = second.<span class="title function_">normalize</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (firstNormalized &lt; secondNormalized) &#123;</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstNormalized === secondNormalized) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;g&#x27;</span>];</span><br><span class="line"><span class="title function_">compare</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);<span class="comment">//[&quot;a&quot;, &quot;c&quot;, &quot;g&quot;, &quot;z&quot;]</span></span><br></pre></td></tr></table></figure><blockquote><p>识别子字符串的方法</p></blockquote><p>为了识别字符串是否存在于其他字符串中，ES6提供了相应的方法来满足这类需求：</p><ul><li>includes()方法：在给定文本存在于字符串中的任意位置时会返回 <code>true</code>，否则会返回 <code>false</code>；</li><li>startsWith() 方法：在给定文本出现在字符串起始处时返回 <code>true</code> ，否则返回 <code>false</code> ；</li><li>endsWith() 方法：在给定文本出现在字符串结尾处时返回 <code>true</code> ，否则返回 <code>false</code> 。</li></ul><p>每个方法都接受两个参数：需要搜索的文本，以及可选的搜索起始位置索引。当提供了第二<br>个参数时， <code>includes()</code> 与 <code>startsWith() </code>方法会从该索引位置开始尝试匹配；当第二个参数未提供时， <code>includes()</code> 与 <code>startsWith(</code>) 方法会从字符串起始处开始查找，而 <code>endsWith() </code>方法则从尾部减去第二个参数后的位置作为起始位置。</p><blockquote><p>repeat()方法</p></blockquote><p>ES6 还为字符串添加了一个 repeat() 方法，它接受一个参数作为字符串的重复次数，返回一个将初始字符串重复指定次数的新字符串。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//repeat()方法</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;x&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>)); <span class="comment">//xxx</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>.<span class="title function_">repeat</span>(<span class="number">2</span>)); <span class="comment">//hello worldhello world</span></span><br></pre></td></tr></table></figure><h3 id="模板字面量"><a href="#模板字面量" class="headerlink" title="模板字面量"></a>模板字面量</h3><blockquote><p>基本语法</p></blockquote><p>模板字面量的最简单语法，是使用反引号<code>（ </code> ）` 来包裹普通字符串，而不是用双引号或单引号，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模板字面量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>  message = <span class="string">`hello world`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">//hello world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> message); <span class="comment">//string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="property">length</span>); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>若想字符串中包含反引号，可以使用反斜杠<code>（\）</code>进行转义即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  message = <span class="string">`\`hello world\``</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">//`hello world`</span></span><br></pre></td></tr></table></figure><blockquote><p>多行字符串</p></blockquote><p>使用模板字面量可以轻松创建多行字符串，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message = <span class="string">`hello</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">world`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">输出：</span><br><span class="line">hello</span><br><span class="line"></span><br><span class="line">world</span><br></pre></td></tr></table></figure><blockquote><p>替换位</p></blockquote><p><strong>替换位可以嵌入到模板字面量中，替换位最终可以转换为字符串的一部分输出。替换位可以是任意的js表达式。</strong>替换位的语法采用 <code>$&#123;&#125;</code> 表示。</p><p>例如，替换位为变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> msg = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> message = <span class="string">`<span class="subst">$&#123;msg&#125;</span> world`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message); <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><p><strong>替换位不仅仅可以是简单的变量，还可以嵌入计算表达式、函数调用等，甚至还可以将模板字面量作为替换位嵌入到另一个模板字面量中。</strong></p><h3 id="模板标签"><a href="#模板标签" class="headerlink" title="模板标签"></a>模板标签</h3><p>一个<strong>模板标签</strong>（template tag ） 能对模板字面量进行转换并返回最终的字符串值，标签在模板的起始处被指定，即在第一个 ` 之前。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let message = tag`Hello world`;</span><br></pre></td></tr></table></figure><p> <code>tag</code> 就是会被应用到 <code>Hello world</code> 模板字面量上的模板标签。</p><blockquote><p>定义标签</p></blockquote><p>一个标签（tag ） 仅是一个函数，它被调用时接收需要处理的模板字面量数据。标签所接收的数据被划分为独立片段，并且必须将它们组合起来以创建结果。第一个参数是个数组，包含被 JS 解释过的字面量字符串，随后的参数是每个替换位的解释值。</p><p>标签函数的参数一般定义为剩余参数形式，以便更容易处理数据，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tag</span>(<span class="params">literals, ...substitutions</span>) &#123;</span><br><span class="line"><span class="comment">// 返回一个字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用模板字面量中的原始值</p></blockquote><p><strong>模板标签也能访问字符串的原始信息，主要指的是可以访问字符在转义之前的形</strong>式。获取原始字符串值的最简单方式是使用内置的 <code>String.raw()</code> 标签。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message1 = <span class="string">`Multiline\nstring`</span>,</span><br><span class="line">message2 = <span class="title class_">String</span>.<span class="property">raw</span><span class="string">`Multiline\nstring`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message1); <span class="comment">// &quot;Multiline</span></span><br><span class="line">   <span class="comment">// string&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(message2); <span class="comment">// &quot;Multiline\nstring&quot;</span></span><br></pre></td></tr></table></figure><h3 id="正则表达式的改动"><a href="#正则表达式的改动" class="headerlink" title="正则表达式的改动"></a>正则表达式的改动</h3><ol><li><p>正则表达式<code>u</code>标识：你可以使用正则表达式来完成字符串的很多通用操作。但要记住，正则表达式假定单个字符使用一个 16 位的码元来表示。为了解决这个问题， ES6 为正则表达式定义了用于处理Unicode 的 <code>u</code> 标志。当一个正则表达式设置了 <code>u </code>标志时，它的工作模式将切换到针对字符，而不是针对码元。</p></li><li><p>正则表达的<code>y</code>标志： <code>y</code> 标志影响正则表达式搜索时的粘连（ <code>sticky</code> ） 属性，它表示从正则表达式的 lastIndex 属性值的位置开始检索字符串中的匹配字符。如果在该位置没有匹配成功，那么正则表达式将停止检索；</p></li><li><p>复制正则表达式：使用RegExp构造器时允许使用第二个参数，并且让它覆盖第一个参数中的标志；</p></li><li><p>flag属性：ES6 新增了 flags 属性用于配合 source 属性，让标志的获取变得更容易。例如：</p><p>var re = /ab/g;</p><pre><code>console.log(re.source); // abconsole.log(re.flags); // g</code></pre><p>本例查找了 re 的所有标志并将其打印到控制台，所用的代码量要比 <code>toString()</code> 方式少得多。同时使用 <code>source</code> 和 <code>flags</code> 允许你直接提取正则表达式的组成部分，而不必将正则表达式转换为字符串。</p></li></ol><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//codePointAt()</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var text = &quot;a&quot; ;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(text.charCodeAt(0)); // 55362</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(text.charCodeAt(1)); // 57271</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(text.charCodeAt(2)); // 97</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(text.codePointAt(0)); // 134071</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(text.codePointAt(1)); // 57271</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(text.codePointAt(2)); // 97</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//normalize()方法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let compare = function(values=[])&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// values.sort((first,second)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let firstNormalized = first.normalize();</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let secondNormalized = second.normalize();</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// if (firstNormalized &lt; secondNormalized) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// return -1;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125; else if (firstNormalized === secondNormalized) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// return 0;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125; else &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// return 1;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let arr = [&#x27;a&#x27;,&#x27;z&#x27;,&#x27;c&#x27;,&#x27;g&#x27;];</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// compare(arr);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(arr);//[&quot;a&quot;, &quot;c&quot;, &quot;g&quot;, &quot;z&quot;]</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// //repeat()方法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(&#x27;x&#x27;.repeat(3)); //xxx</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(&#x27;hello world&#x27;.repeat(2)); //hello worldhello world</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//模板字面量</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let  message = `\`hello world\``;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(message); //`hello world`</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(typeof message); //string</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(message.length); //1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let message = `hello</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// world`;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(message);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//模板字面量</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let msg = &#x27;hello&#x27;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let message = `$&#123;msg&#125; world`;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(message); //hello world</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// let message1 = `Multiline\nstring`,</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// message2 = String.raw`Multiline\nstring`;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(message1); // &quot;Multiline</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//    // string&quot;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(message2); // &quot;Multiline\nstring&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> re = <span class="regexp">/ab/g</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">source</span>); <span class="comment">// ab</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(re.<span class="property">flags</span>); <span class="comment">// g</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="函数相关"><a href="#函数相关" class="headerlink" title="函数相关"></a>函数相关</h2><ol><li><p>函数参数默认值</p><p>let defaultFunc = function(url,tomeout=2000,callback={}){};</p><pre><code>    //使用默认的timeout和callback    defaultFunc(&#39;/url&#39;);    //使用默认的callback    defaultFunc(&#39;/url&#39;,100);    //使用指定的timeout和callback    defaultFunc(&#39;/url&#39;,100,function(body)&#123;        doSomething(body);    &#125;)</code></pre><blockquote><p>函数参数默认值的指定顺序可以随意</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//需要指定默认参数的可选参数timeout，排在callback</span><br><span class="line">let defaultFunc = function(url,tomeout=2000,callback)&#123;&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>只有在未传递参数，或者参数为undefined时，才会使用默认参数，null值被认为是有效的</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//null被认为是有效的，不会使用timeout的默认值</span><br><span class="line">defaultFunc(&#x27;/url&#x27;,null,function(body)&#123;</span><br><span class="line">doSomething(body);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>函数参数默认值表达式</p><p>除了直接使用具体值赋给函数参数默认值外，函数参数默认值还可以有表达式构成。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function getValue()&#123;return 5&#125;;</span><br><span class="line">function test(a,b=getValue())&#123;</span><br><span class="line">return a+b;</span><br><span class="line">&#125;</span><br><span class="line">//调用getValue</span><br><span class="line">console.log(test(1)); //6</span><br><span class="line">//不使用b的默认值s</span><br><span class="line">console.log(test(1,2)); //3</span><br></pre></td></tr></table></figure><blockquote><p><strong>可以使用前面的参数，来作为后面参数的默认值。前面的参数默认值不能引用后面的参数值</strong></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function add(a,b=1)&#123;return a+b&#125;;  </span><br><span class="line">console.log(add(1,1));  //2</span><br><span class="line">function addition(a=b,b)&#123;return a+b&#125;;</span><br><span class="line">console.log(addition(undefined,1)); //Uncaught ReferenceError: b is not defined</span><br></pre></td></tr></table></figure><blockquote><p>函数参数默认值存在暂时性死区（TDZ），在函数参数默认值表达式中，还未初始化赋值的参数值无法作为其他参数的默认值 </p></blockquote></li><li><p>函数参数默认值对arguments对象的影响</p><ul><li><p>ES5中，在非严格模式下，arguments对象能够反映出具名参数的变化，当具名参数值更新的时候，arguments对象中相应的元素值也会更新。在严格模式下不能反映出具名参数的变化</p><p>function testArgs(a,b){</p><pre><code>    console.log(a===arguments[0]); //true    console.log(b===arguments[1]); //true    a=&#39;c&#39;;    b=&#39;d&#39;;    console.log(a===arguments[0]); //true    console.log(b===arguments[1]); //true&#125;testArgs(&#39;a&#39;,&#39;b&#39;);</code></pre></li><li><p>在ES6中，参数默认值与arguments对象分离，即被赋予参数默认值的参数无法从arguments对象中获取。另外，无论是非严格模式下，还是在严格模式下，具名参数的更改都不会在arguments对象中更新。  </p></li></ul></li></ol><h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>ES6中，当参数个数无法确定时，可以使用剩余参数（rest parameter）来表示，剩余参数就相当于一个容器，调用函数时传入几个参数值，这个容器就装载几个参数值。剩余参数能够将多个独立的参数合并到一个数组中去，剩余参数表示为<code>...keys</code>,有三个点加上一个具名参数标识符组成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">rp</span>(<span class="params">...keys</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(keys.<span class="property">length</span>)&#125;</span><br><span class="line"><span class="title function_">rp</span>(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><blockquote><p>具名参数只能放在参数组最后面，并且只能有且仅有一个剩余参数。剩余参数不能作为对象字面量的setter属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">...names</span>); <span class="comment">//Setter function argument must not be a rest parameter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在Function构造器中能够将函数体以字符串的形式作为函数的参数，并且支持参数默认值以及剩余参数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;first&quot;</span>,<span class="string">&quot;second&quot;</span>,<span class="string">&quot;return first+second&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">1</span>)); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>扩展运算符能够将数组分离，将分割后单独的参数值传递给函数，能够替代apply()方法的使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">0</span>,...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]));  <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h3 id="new-target属性"><a href="#new-target属性" class="headerlink" title="new.target属性"></a>new.target属性</h3><p>能够使用<code>new.target</code>属性来判断函数是否利用<code>new</code>来进行调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">target</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">new</span>.<span class="property">target</span>!==<span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通过new来调用&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不是通过new来调用&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="块级函数"><a href="#块级函数" class="headerlink" title="块级函数"></a>块级函数</h3><p>在代码块中能够声明函数，函数也被称之为<strong>块级函数</strong>，在严格模式下，块级函数会提升到当前所处代码块的顶部，在整个代码块中都能够被访问，在代码块外的地方就不能被访问。而在非严格模式下，块级函数会被提升到全局作用域。</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>箭头函数提供了一种更加简洁的函数书写方式，并且与传统函数有很多不同的地方。箭头函数基本的语法为：<code>参数 =&gt; 函数体</code>。</p><p>根据参数的个数以及函数体的行数有多种变形：</p><ol><li>无参数时，可以使用圆括号()表示；当只有一个参数时可以省略圆括号()；当有多个参数时可以使用圆括号包裹，并参数之间用逗号进行分隔；</li><li>当函数体有多行语句时，使用大括号{}包裹起来，就像写正常的函数一样；当只有一行语句时，并需要返回结果时，可以省去大括号{}，结果会自动返回。</li><li>如果需要返回对象的话，需要使用圆括号()将对象包裹起来，为了防止对象字面量被认为是函数体语句。</li></ol><p>箭头函数的特性：</p><ol><li><p>没有this、super、arguments，new.target绑定：this、super、arguments以及内部函数的new.target的值由所在的最近的外部非箭头函数来决定；</p></li><li><p>没有arguments对象绑定，但是能够访问包含它的外部函数的arguments对象；</p><p>let outer = function(arg){</p><pre><code>    return ()=&gt;arguments[0];&#125;let inner = outer(7);console.log(inner()) //7</code></pre></li><li><p>不能使用new来调用：箭头函数没有[[Construct]]方法，因此不能被用为构造函数，使用new调用函数会抛出错误；</p></li><li><p>没有原型：没有使用new，因此没有prototype属性；</p></li><li><p>不能修改this：不能通过call(),apply()以及bind()方法修改this；</p></li><li><p>不允许使用重复的具名参数：箭头函数不允许拥有重复的具名参数，无论是否在严格模式下；而传统函数只有在严格模式下才禁止使用重复的具名参数；</p></li></ol><h3 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h3><p>尾调用是指在一个函数内最后的语句调用了另外一个函数，这个函数会重新创建新的栈帧并置于调用栈之上，如果调用次数过多，会导致内存过大。当满足以下条件时，执行引擎会针对尾调用进行优化，不再重新创建新的栈帧，而是会复用当前栈帧：</p><ol><li><p>尾调用不能引用当前栈帧中的变量；</p></li><li><p>进行尾调用的函数在尾调用返回结果后不能做额外任何操作；</p></li><li><p>尾调用的结果作为当前函数的返回值；</p><p>//尾递归优化</p><pre><code>&#39;use strict&#39;</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//满足尾调用优化条件</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">doElse</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> tmp = <span class="title function_">doElse</span>();</span><br><span class="line"><span class="comment">//尾调用函数结果没有直接返回，因此不满足</span></span><br><span class="line"><span class="comment">//尾调用优化条件</span></span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//尾调用函数后有其他额外操作，结果没有</span></span><br><span class="line"><span class="comment">//立即返回，因此不满足尾调用优化条件</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>+<span class="title function_">doElse</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>由于闭包会持有外部函数的变量，因此对闭包的尾调用优化很难处理，但是，在递归操作中，可以利用到尾调用优化，减少栈帧个数，降低内存。</p><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//函数参数默认值</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> defaultFunc = <span class="keyword">function</span>(<span class="params">url,tomeout=<span class="number">2000</span>,callback=&#123;&#125;</span>)&#123;&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defaultFunc</span>(<span class="string">&#x27;/url&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defaultFunc</span>(<span class="string">&#x27;/url&#x27;</span>,<span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defaultFunc</span>(<span class="string">&#x27;/url&#x27;</span>,<span class="number">100</span>,<span class="keyword">function</span>(<span class="params">body</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">doSomething</span>(body);</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//ES5非严格模式下具名参数对arguments对象的影响</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">testArgs</span>(<span class="params">a,b</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(b===<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span></span><br><span class="line"><span class="language-javascript">a=<span class="string">&#x27;c&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">b=<span class="string">&#x27;d&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===<span class="variable language_">arguments</span>[<span class="number">0</span>]);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(b===<span class="variable language_">arguments</span>[<span class="number">1</span>]);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">testArgs</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//函数参数默认值表达式</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">getValue</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> <span class="number">5</span>&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a,b=getValue()</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> a+b;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>(<span class="number">1</span>));</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>(<span class="number">1</span>,<span class="number">2</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b=<span class="number">1</span></span>)&#123;<span class="keyword">return</span> a+b&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">1</span>));</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addition</span>(<span class="params">a=b,b</span>)&#123;<span class="keyword">return</span> a+b&#125;;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">addition</span>(<span class="literal">undefined</span>,<span class="number">1</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">rp</span>(<span class="params">...keys</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(keys.<span class="property">length</span>)&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">rp</span>(<span class="number">1</span>,<span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person =&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">...names</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> add = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;first&quot;</span>,<span class="string">&quot;second&quot;</span>,<span class="string">&quot;return first+second&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">1</span>));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//扩展运算符</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">0</span>,...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]));</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//new.target属性</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">target</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(<span class="keyword">new</span>.<span class="property">target</span>!==<span class="string">&#x27;undefined&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通过new来调用&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不是通过new来调用&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> test = <span class="keyword">new</span> <span class="title function_">target</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//箭头函数没有arguments对象绑定</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> outer = <span class="keyword">function</span>(<span class="params">arg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="function">()=&gt;</span><span class="variable language_">arguments</span>[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> inner = <span class="title function_">outer</span>(<span class="number">7</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">inner</span>());</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//尾递归优化</span></span></span><br><span class="line"><span class="language-javascript"><span class="string">&#x27;use strict&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//满足尾调用优化条件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="title function_">doElse</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> tmp = <span class="title function_">doElse</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//尾调用函数结果没有直接返回，因此不满足</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//尾调用优化条件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> tmp;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//尾调用函数后有其他额外操作，结果没有</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//立即返回，因此不满足尾调用优化条件</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="number">1</span>+<span class="title function_">doElse</span>();</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="对象类别"><a href="#对象类别" class="headerlink" title="对象类别"></a>对象类别</h2><p>对象有以下几种类别：</p><ul><li>普通对象：拥有JS对象所有默认的内部行为；</li><li>奇异对象：其内部行为在某些方面有别于默认行为；</li><li>标准对象：在ES6中被定义的对象，例如Array,Date等；</li><li>内置对象：在脚本开始运行的时候由JS运行环境提供的对象，所有的标准对象都是内置对象</li></ul><h3 id="对象字面量语法的扩展"><a href="#对象字面量语法的扩展" class="headerlink" title="对象字面量语法的扩展"></a>对象字面量语法的扩展</h3><blockquote><p>属性初始化的速记法</p></blockquote><p>属性初始化器的速记法可以用来消除属性名和本地变量的重复情况，可以使用作用域内的变量值赋值给同名属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">name</span>:name,</span><br><span class="line"><span class="attr">age</span>:age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//由于属性名和本地变量名相同，可以采用</span></span><br><span class="line"><span class="comment">//属性初始化器的速记法，等价于</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">name,</span><br><span class="line">age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法简写</p></blockquote><p>在对象字面量的写法中，为一个对象添加一个方法，需要指定对象的属性以及具体的函数声明。ES6提供了一种方法简写语法，通过省略function关键字，能够让为对象添加方法的语法更加简洁。有一个重要的区别是：**方法简写能够使用<code>super</code>，而非简写的方法不能使用<code>super</code>**。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法简写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">sayName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>需计算属性名</p></blockquote><p>需计算属性名规则允许对象字面量中属性名是变量、字符串字面量或者由变量计算而得的，具体写法是通过方括号[]包含属性名。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需计算属性名</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> firstName = <span class="string">&#x27;first name&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> suffix = <span class="string">&#x27;@github.com&#x27;</span></span><br><span class="line"><span class="keyword">let</span> email = <span class="string">&#x27;email&#x27;</span>;</span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line">person[firstName] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">//字符串字面量</span></span><br><span class="line">person[<span class="string">&#x27;last name&#x27;</span>]= <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="comment">//变量计算而得到的</span></span><br><span class="line">person[email+suffix] = <span class="string">&#x27;example@github.com&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>Object.is()</p></blockquote><p>JS中比较两个值是否相同的时候会使用严格等于运算符<code>===</code>，但是，使用严格运算符式，+0和-0会认为这两者是相等的，而<code>NaN===NaN</code>是不相等的，使用Object.is()方法来判断这两者情况与使用严格相等符会有所不同，其他情况和使用严格相等运算符基本一致；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span>==-<span class="number">0</span>);  <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span>===-<span class="number">0</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>,-<span class="number">0</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>==<span class="title class_">NaN</span>); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>===<span class="title class_">NaN</span>); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>==<span class="string">&#x27;5&#x27;</span>); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>===<span class="string">&#x27;5&#x27;</span>); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">5</span>,<span class="string">&#x27;5&#x27;</span>)) <span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p>Object.assign()</p></blockquote><p>一个对象从另外一个对象获取属性和方法，这是典型的混入（Mixin）模式，Object.assign()方法可以更简洁的实现对象混入，该方法需要一个接受者对象和若干个供应者对象。接收者会按照供应者在参数中的顺序来依次接收它们的属性，这意味着，第二个供应者可能会覆盖第一个供应者相同的属性；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person=&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> car =&#123;</span><br><span class="line"><span class="attr">brand</span>:<span class="string">&#x27;BWM&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj,person,car);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">//&#123;name: &quot;hello&quot;, age: 5, brand: &quot;BWM&quot;&#125;</span></span><br></pre></td></tr></table></figure><p>Object.assign()方法并未在接受者上创建访问器属性，即使供应者拥有访问器属性，由于Object.assign()方法使用赋值运算符，供应者的访问器属性会转换成接受者的数据属性；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> receiver = &#123;&#125;,</span><br><span class="line">supplier = &#123;</span><br><span class="line"><span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;file.js&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(receiver, supplier);</span><br><span class="line"><span class="keyword">let</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(receiver, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">value</span>); <span class="comment">// &quot;file.js&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">get</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>允许重复的属性</p></blockquote><p>在ES5严格模式下，为对象字面量中属性会检查是否重复，如果重复的话就会抛出一个错误。而在ES6中，无论是在严格模式下还是非严格模式下，都不再检查属性是否重复，当属性重复的时候，后面的属性会覆盖前面的属性；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重复的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">//world</span></span><br></pre></td></tr></table></figure><p>​        </p><blockquote><p>自有属性的枚举顺序</p></blockquote><p>ES6规定了自有属性的枚举顺序，会依次按照数字类型键-&gt;字符串类型键-&gt;符号类型键的枚举顺序：</p><ol><li>所有的数字类型键，按升序排列；</li><li>所有的字符串类型键，按被添加到对象的顺序排列；</li><li>所有的符号类型，也按添加顺序排列</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自有属性的枚举顺序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">c</span>: <span class="number">1</span>,</span><br><span class="line"><span class="number">2</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">d</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));<span class="comment">//012acbd</span></span><br></pre></td></tr></table></figure><h3 id="更强大的原型"><a href="#更强大的原型" class="headerlink" title="更强大的原型"></a>更强大的原型</h3><blockquote><p>修改对象原型</p></blockquote><p>在ES6中可以通过Object.setPrototypeOF()方法修改对象的原型，该方法包含了两个参数：一个是被修改原型的对象，一个是将被指定的原型；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog =&#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> friend = <span class="title class_">Object</span>.<span class="title function_">create</span>(person); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(friend.<span class="title function_">getName</span>()); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(friend)===person); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(friend,dog); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(friend.<span class="title function_">getName</span>()); <span class="comment">//world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(friend)===dog); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>使用super引用</p></blockquote><p>能够使用<code>super</code>引用，来访问原型中的方法，假如需要覆盖对象中的同名方法可以这样做：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog =&#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">getName</span>()+<span class="string">&#x27; world;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">​</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(dog,person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="title function_">getName</span>()); <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><p><strong>如果使用super引用的话，只能在方法简写中才能使用，否则就会报错：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dog =&#123;</span><br><span class="line"><span class="attr">getNanem</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">getName</span>()+<span class="string">&#x27; world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">报错：<span class="title class_">Uncaught</span> <span class="title class_">SyntaxError</span>: <span class="string">&#x27;super&#x27;</span> keyword unexpected here</span><br></pre></td></tr></table></figure><blockquote><p>方法定义</p></blockquote><p>在ES6之前，方法的概念从未被正式定义，而在ES6中做出了正式定义：方法是拥有一个[[HomeObject]]内部属性的函数，此内部属性指向该方法所属的对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不是方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>ES6通过对对象功能的扩展，让ES6更加简单易用和更加强大，在对象功能上具体有这样一些改进：</p><p><strong>针对对象字面量：</strong></p><ol><li>速记法属性能够更加轻易的将作用域内的变量值赋值给同名属性；</li><li>需计算属性名规则能够更方便的将，变量、字符串字面量以及通过变量计算的结果作为属性；</li><li>方法简写法能够省略function关键字以及冒号：，让方法的定义更加简洁；</li><li>舍弃了重复属性的检查，让后面的属性覆盖掉前面同名属性的属性值；</li><li>指定了数字类型键-&gt;字符串类型键-&gt;符号类型键的对象自有属性的枚举顺序。</li></ol><p><strong>针对对象原型：</strong></p><ol><li>Object.assign()方法能够将多个提供者对象的属性整合到接受者对象中，能够方便实现对象的混入模式；</li><li>Object.is()方法在处理特殊值时比严格比较符更加安全；</li><li>Object.setPrototypeOf()方法能够更加方便更改一个对象的原型；</li><li>提供super关键字，访问原型上的方法。</li></ol><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//属性构造器的速记法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">name,</span><br><span class="line">age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">createPerson</span>(<span class="string">&#x27;hello&#x27;</span>,<span class="number">18</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法简写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">sayName</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">需计算属性名</span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> firstName = <span class="string">&#x27;first name&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> suffix = <span class="string">&#x27;@github.com&#x27;</span></span><br><span class="line"><span class="keyword">let</span> email = <span class="string">&#x27;email&#x27;</span>;</span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line">person[firstName] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">//字符串字面量</span></span><br><span class="line">person[<span class="string">&#x27;last name&#x27;</span>]= <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="comment">//变量计算而得到的</span></span><br><span class="line">person[email+suffix] = <span class="string">&#x27;example@github.com&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>()方法</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span>==-<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+<span class="number">0</span>===-<span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>,-<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>==<span class="title class_">NaN</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span>===<span class="title class_">NaN</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>,<span class="title class_">NaN</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>==<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>===<span class="string">&#x27;5&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">5</span>,<span class="string">&#x27;5&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>()</span><br><span class="line"><span class="keyword">let</span> person=&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> car =&#123;</span><br><span class="line"><span class="attr">brand</span>:<span class="string">&#x27;BWM&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj,person,car);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> receiver = &#123;&#125;,</span><br><span class="line">supplier = &#123;</span><br><span class="line"><span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;file.js&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(receiver, supplier);</span><br><span class="line"><span class="keyword">let</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(receiver, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">value</span>); <span class="comment">// &quot;file.js&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(descriptor.<span class="property">get</span>); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重复的属性</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">//自有属性的枚举顺序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">c</span>: <span class="number">1</span>,</span><br><span class="line"><span class="number">2</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: <span class="number">1</span>,</span><br><span class="line"><span class="number">1</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.<span class="property">d</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj).<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>));<span class="comment">//012acbd</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property">setPrototypeOf</span>方法</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dog =&#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> friend = <span class="title class_">Object</span>.<span class="title function_">create</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(friend.<span class="title function_">getName</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(friend)===person);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(friend,dog);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(friend.<span class="title function_">getName</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(friend)===dog);</span><br><span class="line"></span><br><span class="line"><span class="comment">//方法</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line"><span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不是方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dog =&#123;</span><br><span class="line"><span class="attr">getNanem</span>:<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">getName</span>()+<span class="string">&#x27; world&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(dog,person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dog.<span class="title function_">getName</span>()); <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><blockquote><p>对象解构语法</p></blockquote><p>对象解构语法在赋值语句的左侧使用了对象字面量，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125;=person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//18</span></span><br></pre></td></tr></table></figure><p>在声明变量name,age的时候，利用对象解构的方式，将person对象中name,age属性分别赋值给变量name和age，类似于简写的属性初始化器；</p><blockquote><p>解构赋值</p></blockquote><p><strong>对象解构不仅可以用于变量声明，还可以用于变量赋值</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">age= <span class="number">20</span>;</span><br><span class="line">(&#123;name,age&#125;=person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//18</span></span><br></pre></td></tr></table></figure><p>name,age变量在声明变量的时候就已经完成了变量初始化操作，之后利用对象解构的方式实现变量赋值。<strong>注意：必须使用圆括号来包裹解构赋值语句，否则暴露的花括号会被解析成代码块语句，而代码块语句不允许在赋值（=）语句左侧出现。圆括号标示了里面的花括号并不是块语句，而是被解释成表达式，从而完成了赋值操作</strong>；</p><p>对象解构不仅可以用于变量赋值，任何期望赋值的地方都可以使用对象解构方式赋值，如传递给函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">age= <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">is</span>(value,person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">test</span>(&#123;name,age&#125;=person));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//18</span></span><br></pre></td></tr></table></figure><p>调用函数test的时候就是使用解构赋值的方式来传递入参；</p><blockquote><p>默认值</p></blockquote><p>如果在使用对象解构赋值的时候，没有在对象中找到同名属性的话，那么本地变量就会赋值为<code>undefined</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">age= <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">is</span>(value,person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(&#123;name,age,value&#125;=person);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>为了不让变量值为<code>undefined</code>，可以为变量设置默认值。设置变量默认值使用等号“=”，等号右侧为需要设置的默认值，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">age= <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">is</span>(value,person);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(&#123;name,age,value=<span class="literal">true</span>&#125;=person);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age); <span class="comment">//18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>利用等号为value设置默认值true。</p><blockquote><p>设置不同名本地变量</p></blockquote><p>使用解构赋值，也可以为不同名的变量赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">age= <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(&#123;<span class="attr">name</span>:localName,<span class="attr">age</span>:localAge&#125;=person);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localName); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localAge); <span class="comment">//18</span></span><br></pre></td></tr></table></figure><p>使用冒号“：”可以为不同名的变量完成赋值，冒号左边为对象的属性名，冒号的右边为另外的变量名。</p><p>同样的可以为非同名的变量设置默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person =&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">name = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">age= <span class="number">20</span>;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&#123;<span class="attr">name</span>:localName,<span class="attr">age</span>:localAge,value=<span class="literal">true</span>&#125;=person);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localName); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localAge); <span class="comment">//18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>嵌套的对象解构</p></blockquote><p>对象解构不仅可以处理属性值为基本类型值的对象的解构，还可以被用于嵌套的对象解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line"><span class="attr">loc</span>: &#123;</span><br><span class="line"><span class="attr">start</span>: &#123;</span><br><span class="line"><span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">column</span>: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">end</span>: &#123;</span><br><span class="line"><span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">column</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span>&#123;<span class="attr">loc</span>:&#123;start&#125;&#125;=node;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(start.<span class="property">line</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(start.<span class="property">column</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>同样的，在嵌套的对象解构中依然也可以为不同名的变量赋值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line"><span class="attr">loc</span>: &#123;</span><br><span class="line"><span class="attr">start</span>: &#123;</span><br><span class="line"><span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">column</span>: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">end</span>: &#123;</span><br><span class="line"><span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">column</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>&#123;<span class="attr">loc</span>:&#123;<span class="attr">start</span>:localStart&#125;&#125;=node;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localStart.<span class="property">line</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(localStart.<span class="property">column</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><h3 id="数组结构"><a href="#数组结构" class="headerlink" title="数组结构"></a>数组结构</h3><blockquote><p>数组解构的语法</p></blockquote><p>数组解构与对象结构十分相似，对象解构是通过对象的<strong>属性名</strong>去查找对象中的属性值，然后进行赋值给变量，而数组解构则是通过数组的<strong>索引</strong>去找到具体值，再去赋值给变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> [first,second]=arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>将数组arr中第一个元素和第二个元素分别赋值给first和second。如果只想要数组中第三个元素值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> [,,third]=arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(third);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>两个逗号”,”相当于占位符，前两个元素值不直接赋值给变量，仅仅将数组中的第3个元素值，赋值给变量third。    </p><blockquote><p>解构赋值</p></blockquote><p>可以在赋值表达式中使用数组解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> first = <span class="number">5</span>,second = <span class="number">6</span>;</span><br><span class="line">[first,second] = arr;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p><strong>与对象解构赋值和数组解构赋值相比起来，不需要使用圆括号”()”将赋值表达式包裹起来。</strong></p><p>使用数组解构，可以十分方便的完成变量值交换：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">[first,second] = arr;</span><br><span class="line">[first,second]=[second,first];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//1</span></span><br></pre></td></tr></table></figure><blockquote><p>默认值</p></blockquote><p>与对象解构赋值一样，数组解构赋值同样可以使用默认值，<strong>当指定位置的项不存在或者其值为undefined</strong>，那么该默认值就会被使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">[first,second,third=<span class="number">3</span>] = arr;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(third);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><blockquote><p>嵌套的解构</p></blockquote><p>与嵌套对象解构一样，嵌套的数组也可以解构：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> [first,[second]]=array;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><blockquote><p>剩余项</p></blockquote><p>数组解构中有一个类似于剩余参数的概念，可以使用<code>...</code>语法来将剩余项目给一个指定的变量，这种语法称之为剩余项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//剩余项</span></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> [first,...subArr]=array;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subArr.<span class="property">length</span>);<span class="comment">//4</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subArr[<span class="number">0</span>]);<span class="number">2</span></span><br></pre></td></tr></table></figure><p>将数组array中除了第一项外的其他项都赋给了变量<code>subArr</code>，剩余项<code>subArr</code>的长度为4，并且第一个元素为2；</p><p><strong>使用剩余项，可以很方便的完成数组复制：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组复制</span></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> [...clonedArr]=array;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clonedArr);<span class="comment">//[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><blockquote><p>混合解构</p></blockquote><p>对象解构和数组解构可以混合在一起使用，这样就可以创建更加复杂的解构表达式，提取我们想要的内容:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> node = &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&quot;Identifier&quot;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line"><span class="attr">loc</span>: &#123;</span><br><span class="line"><span class="attr">start</span>: &#123;</span><br><span class="line"><span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">column</span>: <span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">end</span>: &#123;</span><br><span class="line"><span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">column</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">range</span>: [<span class="number">0</span>, <span class="number">3</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">loc</span>:&#123;start&#125;,<span class="attr">range</span>:[rangeArr]&#125;=node;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(start.<span class="property">line</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rangeArr); <span class="comment">//0</span></span><br></pre></td></tr></table></figure><h3 id="参数解构"><a href="#参数解构" class="headerlink" title="参数解构"></a>参数解构</h3><p>当一个函数的入参既有必选参数，又有可选参数的时候，可选参数的部分可以利用解构的方式来定义，同时，如果利用到解构，需要为其设置默认值，否则会报错。因此，参数解构的规范形式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">name, value,</span></span><br><span class="line"><span class="params">&#123;</span></span><br><span class="line"><span class="params">secure = <span class="literal">false</span>,</span></span><br><span class="line"><span class="params">path = <span class="string">&quot;/&quot;</span>,</span></span><br><span class="line"><span class="params">domain = <span class="string">&quot;example.com&quot;</span>,</span></span><br><span class="line"><span class="params">expires = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.now() + <span class="number">360000000</span>)</span></span><br><span class="line"><span class="params">&#125; = &#123;&#125;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此代码中参数解构给每个属性都提供了默认值，所以你可以避免检查指定属性是否已被传入<br>（以便在未传入时使用正确的值） 。而整个解构的参数同样有一个默认值，即一个空对象，<br>令该参数成为可选参数。这么做使得函数声明看起来比平时要复杂一些，但却是为了确保每<br>个参数都有可用的值而付出的微小代价。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ol><li>解构使得在 JS 中操作对象与数组变得更容易。使用熟悉的对象字面量与数组字面量语法，可以将数据结构分离并只获取你感兴趣的信息。对象解构模式允许你从对象中进行提取，而数组模式则能用于数组。</li><li>对象与数组解构都能在属性或项未定义时为其提供默认值；在赋值表达式右侧的值为 null<br>或 undefined 时，两种模式都会抛出错误。你也可以在深层嵌套的数据结构中使用对象与数<br>组解构，下行到该结构的任意深度。</li><li>使用 var 、 let 或 const 的解构声明来创建变量，就必须提供初始化器。解构赋值能替代其他赋值，并且允许你把值解构到对象属性或已存在的变量上。</li><li>参数解构使用解构语法作为函数的参数，让“选项”（options ） 对象更加透明。你实际感兴趣的数据可以与具名参数一并列出。解构的参数可以是对象模式、数组模式或混合模式，并且你能使用它们的所有特性。</li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 对象解构赋值</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> person =&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">name = <span class="string">&#x27;world&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">age= <span class="number">20</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">(&#123;<span class="attr">name</span>:localName,<span class="attr">age</span>:localAge,value=<span class="literal">true</span>&#125;=person);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(localName); <span class="comment">//hello</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(localAge); <span class="comment">//18</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//true</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//嵌套的对象解构</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> node = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="string">&quot;Identifier&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">loc</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">start</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">line</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">column</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">end</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">line</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">column</span>: <span class="number">4</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span>&#123;<span class="attr">loc</span>:&#123;<span class="attr">start</span>:localStart&#125;&#125;=node;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(localStart.<span class="property">line</span>); <span class="comment">// 1</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(localStart.<span class="property">column</span>);<span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 数组解构</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">[first,second,third=<span class="number">3</span>] = arr;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(third);<span class="comment">//3</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 嵌套解构</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> array = [<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],<span class="number">4</span>]</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> [first,[second]]=array;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(second);<span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 剩余项</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> [first,...subArr]=array;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(first);<span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(subArr.<span class="property">length</span>);<span class="comment">//4</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(subArr[<span class="number">0</span>]);<span class="number">2</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//数组复制</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> [...clonedArr]=array;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(clonedArr);<span class="comment">//[1,2,3,4,5]</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 混合解构</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> node = &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">type</span>: <span class="string">&quot;Identifier&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">loc</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">start</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">line</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">column</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">end</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">line</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">column</span>: <span class="number">4</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">range</span>: [<span class="number">0</span>, <span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> &#123;<span class="attr">loc</span>:&#123;start&#125;,<span class="attr">range</span>:[rangeArr]&#125;=node;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(start.<span class="property">line</span>); <span class="comment">//1</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(rangeArr); <span class="comment">//0</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 参数解构</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">setCookie</span>(<span class="params">name, value,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">&#123;</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">secure = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">path = <span class="string">&quot;/&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">domain = <span class="string">&quot;example.com&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">expires = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.now() + <span class="number">360000000</span>)</span></span></span><br><span class="line"><span class="params"><span class="language-javascript">&#125; = &#123;&#125;</span></span></span><br><span class="line"><span class="params"><span class="language-javascript"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// ...</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Symbol基础"><a href="#Symbol基础" class="headerlink" title="Symbol基础"></a>Symbol基础</h2><h3 id="创建符号值"><a href="#创建符号值" class="headerlink" title="创建符号值"></a><strong>创建符号值</strong></h3><p>在 JS 已有的基本类型（字符串、数值、布尔类型、 <code>null</code> 与 <code>undefined</code> ） 之外， ES6 引入了一种新的基本类型：符号（<code>Symbol</code> ） 。 符号起初被设计用于创建对象私有成员，而这也是 JS 开发者期待已久的特性。在符号诞生之前，将字符串作为属性名称导致属性可以被轻易访问，无论命名规则如何。而“私有名称”意味着开发者可以创建非字符串类型的属性名称，由此可以防止使用常规手段来探查这些名称。</p><blockquote><p>创建符号值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="title class_">Symbol</span>(<span class="string">&#x27;first Name&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">person[firstName] = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person[firstName]); <span class="comment">//hello world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(firstName); <span class="comment">//Symbol(first Name)</span></span><br></pre></td></tr></table></figure><p>此代码创建了一个符号类型的 <code>firstName</code> 变量，并将它作为 <code>person</code> 对象的一个属性，而每次访问该属性都要使用这个符号值。<code>Symbol</code> 函数还可以接受一个额外的参数用于描述符号值，该描述并不能用来访问对应属性，但它能用于调试。符号的描述信息被存储在内部属性 <code>[[Description]]</code> 中，当符号的 <code>toString() </code>方法被显式<br>或隐式调用时，该属性都会被读取。在本例中， <code>console.log()</code> 隐式调用了 <code>firstName</code> 变量的 <code>toString()</code> 方法，于是描述信息就被输出到日志。此外没有任何办法可以从代码中直接访问 <code>[[Description]]</code> 属性。</p><h3 id="使用符号值"><a href="#使用符号值" class="headerlink" title="使用符号值"></a>使用符号值</h3><p><strong>可以在任意使用 需计算属性名 的场合中使用符号值，比如在对象字面量中可以使用符号值来作为对象属性，另外还可以在<code>Object.defineProperty()</code>方法或<code>Object.defineProperties()</code>方法中使用。</strong></p><p>共享符号值</p><p>如果想在不同的代码中共享同一个符号值的话，应使用 <code>Symbol.for()</code> 方法而不是 <code>Symbol()</code> 方法。 <code>Symbol.for()</code>方法仅接受单个字符串类型的参数，作为目标符号值的标识符，同时此参数也会成为该符号的描述信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//共享符号值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uid = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;uid&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">person[uid] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> id = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;uid&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> car = &#123;&#125;;</span><br><span class="line">car[id] = <span class="string">&#x27;88888888&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uid===id); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><code>Symbol.for()</code> 方法首先会搜索全局符号注册表，看是否存在一个键值为 <code>&quot;uid</code>“ 的符号值。<br>若是，该方法会返回这个已存在的符号值；否则，会创建一个新的符号值，并使用该键值将<br>其记录到全局符号注册表中，然后返回这个新的符号值。这就意味着此后使用同一个键值去调用 <code>Symbol.for() </code>方法都将会返回同一个符号值。</p><p>还可以使用 <code>Symbol.keyFor()</code> 方法在全局符号注册表中根据<strong>符号值</strong>检索出对应的<strong>键值</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(uid)); <span class="comment">//uid</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(id)); <span class="comment">//uid</span></span><br></pre></td></tr></table></figure><h3 id="符号值的转换"><a href="#符号值的转换" class="headerlink" title="符号值的转换"></a>符号值的转换</h3><p>类型转换是 JS 语言重要的一部分，能够非常灵活地将一种数据类型转换为另一种。然而符号类型在进行转换时非常不灵活，因为其他类型缺乏与符号值的合理等价，尤其是符号值<strong>无法被转换为字符串值或数值</strong>，在逻辑运算符中会被认为等价于 <code>true</code>。</p><p>例如，可使用String()方法获取符号值的描述信息，但是如果使用符号值在字符串中拼接，则会报错：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(uid));<span class="comment">//Symbol(uid)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(uid+<span class="string">&quot;&quot;</span>); <span class="comment">//Uncaught TypeError: Cannot convert a Symbol value to a string</span></span><br></pre></td></tr></table></figure><h3 id="检索符号属性"><a href="#检索符号属性" class="headerlink" title="检索符号属性"></a>检索符号属性</h3><p><code>Object.keys()</code> 与 <code>Object.getOwnPropertyNames() </code>方法可以检索对象的所有属性名称，前者<br>返回所有的<strong>可枚举属性名</strong>称，而后者则返回<strong>所有属性名称</strong>，无论是否可以可枚举，然而<strong>两者都不能返回符号类型的属性</strong>。因此，在ES6中新增了<br><code>Object.getOwnPropertySymbols()</code> 方法，以便让你可以检索对象的符号类型属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uid = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;uid&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person = &#123;&#125;;</span><br><span class="line">person[uid] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> symbols = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbols.<span class="property">length</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(symbols[<span class="number">0</span>]); <span class="comment">//Symbol(uid)</span></span><br></pre></td></tr></table></figure><h2 id="知名符号"><a href="#知名符号" class="headerlink" title="知名符号"></a>知名符号</h2><p>ES6 定义了“知名符号”来代表 JS 中一些公共行为，而这些行为此前被认为只能是内部操作，但在ES6中使用了知名符号来暴露了内部方法，提供了更加方便的调用这种公用方法的一种方式。每一个知名符号都对应全局 <code>Symbol</code> 对象的一个属性，例如 <code>Symbol.create </code>。</p><p>知名符号有：</p><ul><li><strong>Symbol.hasInstance</strong> ：供 instanceof 运算符使用的一个方法，用于判断对象继承关系；</li><li><strong>Symbol.isConcatSpreadable</strong> ：一个布尔类型值，在集合对象作为参数传递给<br>Array.prototype.concat() 方法时，指示是否要将该集合的元素扁平化；</li><li><strong>Symbol.iterator</strong> ：返回迭代器的一个方法；</li><li><strong>Symbol.match</strong> ：供 String.prototype.match() 函数使用的一个方法，用于比较字符串；</li><li><strong>Symbol.replace</strong> ：供 String.prototype.replace() 函数使用的一个方法，用于替换子字符串；</li><li><strong>Symbol.search</strong> ：供 String.prototype.search() 函数使用的一个方法，用于定位子字符；</li><li><strong>Symbol.species</strong> ：用于产生派生对象的构造器；</li><li><strong>Symbol.split</strong> ：供 String.prototype.split() 函数使用的一个方法，用于分割字符串；</li><li><strong>Symbol.toPrimitive</strong> ：返回对象所对应的基本类型值的一个方法；</li><li><strong>Symbol.toStringTag</strong> ：供 String.prototype.toString() 函数使用的一个方法，用于创建对象的描述信息；</li><li><strong>Symbol.unscopables</strong> ：一个对象，该对象的属性指示了哪些属性名不允许被包含在with 语句中；</li></ul><h3 id="Symbol-hasInstance属性"><a href="#Symbol-hasInstance属性" class="headerlink" title="Symbol.hasInstance属性"></a>Symbol.hasInstance属性</h3><p>每个函数都具有一个 <code>Symbol.hasInstance</code> 属性，用于判断指定对象是否为本函数的一个实例。这个方法定义在 <code>Function.prototype</code> 上，因此所有函数都继承了面对 <code>instanceof</code> 运算符时的默认行为。 <code>Symbol.hasInstance</code> 属性自身是不可写入、不可配置、不可枚举的，从而保证它不会被错误地重写。</p><p><code>Symbol.hasInstance</code> 方法只接受单个参数，即需要检测的值。如果该值是本函数的一个实例，则方法会返回 <code>true</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj <span class="keyword">instanceof</span> <span class="title class_">Array</span></span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="title class_">Array</span>[<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](obj)</span><br></pre></td></tr></table></figure><h3 id="Symbol-isConcatSpreadable属性"><a href="#Symbol-isConcatSpreadable属性" class="headerlink" title="Symbol.isConcatSpreadable属性"></a>Symbol.isConcatSpreadable属性</h3><p><code>Symbol.isConcatSpreadable </code>属性是一个布尔类型的属性，它表示拥有长度<code>length</code>属性与数值类型的键的类数组的对象，在调用 <code>concat()</code> 方法时，会将数值键对应的值分离为单独项，添加在数组的后部，完成数组拼接。</p><p>它只出现在特定类型的对象上，用来标示该对象在作为<code> concat()</code> 参数时应如何工作，从而有效改变该对象的默认行为。你可以用它来定义任意类型的对象，让该对象在参与 <code>concat()</code> 调用时能够表现得像数组一样。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Symbol.isConcatSpreadable属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> collection = &#123;</span><br><span class="line"><span class="number">0</span>:<span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line"><span class="number">1</span>:<span class="string">&#x27;world&#x27;</span>,</span><br><span class="line"><span class="attr">length</span>:<span class="number">2</span>,</span><br><span class="line">[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>]:<span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;es6&#x27;</span>].<span class="title function_">concat</span>(collection);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//[&quot;es6&quot;, &quot;hello&quot;, &quot;world&quot;]</span></span><br></pre></td></tr></table></figure><p> Symbol.match 、 Symbol.replace 、 Symbol.search与Symbol.split</p><p>在 JS 中，字符串与正则表达式有着密切的联系，尤其是字符串具有几个可以接受正则表达式作为参数的方法：</p><ul><li>match(regex) ：判断指定字符串是否与一个正则表达式相匹配；</li><li>replace(regex, replacement) ：对正则表达式的匹配结果进行替换；</li><li>search(regex) ：在字符串内对正则表达式的匹配结果进行定位；</li><li>split(regex) ：使用正则表达式将字符串分割为数组</li></ul><p>ES6 定义了 4 个符号以及对应的方法，可以将正则表达式作为字符串对应方法的第一个参数传入， <code>Symbol.match</code> 对应 <code>match()</code> 方法， <code>Symbol.replace</code> 对应 <code>replace()</code> ，<code>Symbol.search</code>对应 <code>search()</code>， <code>Symbol.split</code> 则对应 <code>split()</code> 。这些符号属性被定义在 <code>RegExp.prototype </code>上作为默认实现，以供对应的字符串方法使用。</p><h3 id="Symbol-toPrimitive"><a href="#Symbol-toPrimitive" class="headerlink" title="Symbol.toPrimitive"></a>Symbol.toPrimitive</h3><p>JS 经常在使用特定运算符的时候试图进行隐式转换，以便将对象转换为基本类型值。例如，当你使用相等（<code>==</code> ） 运算符来对字符串与对象进行比较的时候，该对象会在比较之前被转换为一个基本类型值。到底转换为什么基本类型值，在此前属于内部操作，而 ES6 则通过<code>Symbol.toPrimitive</code> 属性将其暴露出来，以便让对应方法可以被修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Temperature</span>(<span class="params">degrees</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">degrees</span> = degrees;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title class_">Temperature</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>] = <span class="keyword">function</span>(<span class="params">hint</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (hint) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;string&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">degrees</span> + <span class="string">&quot;\u00b0&quot;</span>; <span class="comment">// 温度符号</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;number&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">degrees</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;default&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">degrees</span> + <span class="string">&quot; degrees&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> freezing = <span class="keyword">new</span> <span class="title class_">Temperature</span>(<span class="number">32</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(freezing + <span class="string">&quot;!&quot;</span>); <span class="comment">// &quot;32 degrees!&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(freezing / <span class="number">2</span>); <span class="comment">// 16</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>(freezing)); <span class="comment">// &quot;32°&quot;</span></span><br></pre></td></tr></table></figure><p>这段脚本定义了一个 Temperature 构造器，并重写了其原型上的<code>Symbol.toPrimitive</code> 方法。返回值会依据方法的提示性参数而有所不同，可以使用字符串模式、数值模式或是默认模式，而该提示性参数会在调用时由 JS 引擎自动填写。字符串模式中， Temperature 函数返回的温度会附带着 Unicode 温度符号；数值模式只会返回温度数值；而默认模式中，返回的温度会附带着字符串 “degrees” 。</p><h3 id="Symbol-toStringTag"><a href="#Symbol-toStringTag" class="headerlink" title="Symbol.toStringTag"></a>Symbol.toStringTag</h3><p>ES6 通过 <code>Symbol.toStringTag</code> 重定义了相关行为，该符号代表了所有对象的一个属性，定义了 <code>Object.prototype.toString.call()</code> 被调用时应当返回什么值。对于数组来说，在<code>Symbol.toStringTag</code> 属性中存储了 “Array” 值，于是该函数的返回值也就是 “Array” 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">toStringTag</span>] = <span class="string">&#x27;person&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">toString</span>()); <span class="comment">//[object person]</span></span><br></pre></td></tr></table></figure><h3 id="Symbol-unscopables"><a href="#Symbol-unscopables" class="headerlink" title="Symbol.unscopables"></a>Symbol.unscopables</h3><p><code>Symbol.unscopables</code> 符号在 <code>Array.prototype</code> 上使用，以指定哪些属性不允许在 <code>with</code> 语句内被绑定。 <code>Symbol.unscopables</code> 属性是一个对象，当提供该属性时，它的键就是用于忽略<code>with</code> 语句绑定的标识符，键值为 <code>true</code> 代表屏蔽绑定。以下是数组的 <code>Symbol.unscopables</code>属性的默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认内置在 ES6 中</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">unscopables</span>] = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>), &#123;</span><br><span class="line"><span class="attr">copyWithin</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">entries</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">fill</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">find</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">findIndex</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">keys</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">values</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><ol><li>虽然符号类型的属性不是真正的私有属性，但它们难以被无意修改，因此在需要提供保护以防止开发者改动的场合中，它们非常合适；</li><li>为符号提供描述信息以便更容易地辨识它们的值。当需要在不同代码片段中共享符号，可以是用S<code>ymbol.for()</code>在全局符号注册表中共享符号；</li><li><code>Object.keys()</code> 或 <code>Object.getOwnPropertyNames()</code> 不会返回符号值，因此 ES6 新增了一个<code>Object.getOwnPropertySymbols() </code>方法，允许检索符号类型的对象属性。同时依然可以使用<code>Object.defineProperty()</code> 与 <code>Object.defineProperties()</code> 方法对符号类型的属性进行修改；</li><li>“知名符号”使用了全局符号常量（例如 <code>Symbol.hasInstance</code> ） ，为常规对象定义了一些功能，而这些功能原先仅限内部使用。这些符号按规范使用 <code>Symbol.</code> 的前缀，允许开发者通过多种方式去修改常规对象的行为。</li></ol><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let firstName = Symbol(&#x27;first Name&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// person[firstName] = &#x27;hello world&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(person[firstName]); //hello world</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(firstName); //Symbol(first Name)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//共享符号值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let uid = Symbol.for(&#x27;uid&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// person[uid] = &#x27;hello&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let symbols = Object.getOwnPropertySymbols(person);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(symbols.length); //1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(symbols[0]); //Symbol(uid)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let id = Symbol.for(&#x27;uid&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let car = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// car[id] = &#x27;88888888&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(uid===id); //true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Symbol.keyFor(uid)); //uid</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Symbol.keyFor(id)); //uid</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(String(uid));//Symbol(uid)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(uid+&quot;&quot;); //Uncaught TypeError: Cannot convert a Symbol value to a string</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //Symbol.isConcatSpreadable属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let collection = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 0:&#x27;hello&#x27;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 1:&#x27;world&#x27;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// length:2,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// [Symbol.isConcatSpreadable]:true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let arr = [&#x27;es6&#x27;].concat(collection);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(arr); //[&quot;es6&quot;, &quot;hello&quot;, &quot;world&quot;]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// function Temperature(degrees) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.degrees = degrees;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Temperature.prototype[Symbol.toPrimitive] = function(hint) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// switch (hint) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// case &quot;string&quot;:</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return this.degrees + &quot;\u00b0&quot;; // 温度符号</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// case &quot;number&quot;:</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return this.degrees;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// case &quot;default&quot;:</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return this.degrees + &quot; degrees&quot;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let freezing = new Temperature(32);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(freezing + &quot;!&quot;); // &quot;32 degrees!&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(freezing / 2); // 16</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(String(freezing)); // &quot;32°&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// function Person(name)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.name = name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Person.prototype[Symbol.toStringTag] = &#x27;person&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = new Person(&#x27;hello world&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(person.toString()); //[object person]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 默认内置在 ES6 中</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">unscopables</span>] = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>), &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">copyWithin</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">entries</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">fill</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">find</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">findIndex</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">keys</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">values</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="ES6中的Set"><a href="#ES6中的Set" class="headerlink" title="ES6中的Set"></a>ES6中的Set</h2><p>ES6中提供了Set数据容器，这是一个能够<strong>存储无重复值</strong>的有序列表。</p><blockquote><p>创建Set</p></blockquote><p>通过<code>new Set()</code>可以创建Set，然后通过<code>add</code>方法能够向Set中添加数据项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Set</span></span><br><span class="line"><span class="keyword">let</span> set= <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">set.<span class="title function_">add</span>(<span class="number">1</span>);</span><br><span class="line">set.<span class="title function_">add</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p><strong>Set内部使用Object.is()方法来判断两个数据项是否相等，唯一不同的是+0和-0在Set中被判断为是相等的。</strong></p><p>同时可以使用数组来构造Set，或者说具有迭代器的对象都可以用来构造Set，并且Set构造器会确保不会存在重复的数据项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>);<span class="comment">//3</span></span><br></pre></td></tr></table></figure><blockquote><p>检查某个值是否存在于Set中</p></blockquote><p>可以使用<code>has()</code>方法来判断某个值是否存在于Set中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">5</span>)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p>删除值</p></blockquote><p>使用delete()方法从Set中删除某个值，或者使用clear()方法从Set中删除所有值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>);<span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">5</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">set.<span class="title function_">delete</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(<span class="number">1</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><blockquote><p>forEach()方法</p></blockquote><p>可以使用<code>forEach</code>方法来遍历Set中的数据项，该方法传入一个回调函数<code>callback</code>，还可以传入一个<code>this</code>，用于回调函数之中：</p><p>回调函数callback中有三个参数：</p><ol><li><p>元素值；</p></li><li><p>元素索引；</p></li><li><p>将要遍历的对象；</p><p>let set = new Set([1,2,3,3,3,3]);</p><pre><code>    set.forEach(function (value,key,ownerSet) &#123;        console.log(value);        console.log(key);                &#125;)</code></pre></li></ol><p>Set中的value和key是相同的，这是为了让Set的forEach方法和数组以及Map的forEach方法保持一致，都具有三个参数。</p><p>在forEach方法中传入<code>this</code>，给回调函数使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> operation =&#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">iterate</span>(<span class="params">set=[]</span>)&#123;</span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">value,key,ownerSet</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">print</span>(value);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">print</span>(key);</span><br><span class="line">&#125;,<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">operation.<span class="title function_">iterate</span>(set);</span><br><span class="line"></span><br><span class="line">输出：<span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>如果回调函数使用箭头函数的话，就可以省略<code>this</code>的入参，这是因为箭头函数会通过作用域链找到当前this对象，将上面的示例代码使用箭头函数来写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">let</span> operation =&#123;</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="title function_">iterate</span>(<span class="params">set=[]</span>)&#123;</span><br><span class="line">set.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value,key</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">print</span>(value);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">print</span>(key);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">operation.<span class="title function_">iterate</span>(set);</span><br></pre></td></tr></table></figure><blockquote><p>将Set转换成数组</p></blockquote><p>将数组转换成Set十分容易，可以将数组传入Set构造器即可；而将Set转换成数组，需要使用扩展运算符。扩展运算符能将数组中的数据项切分开，作为独立项传入到函数，如果将扩展运算符用于可迭代对象的话，就可以将可迭代对象转换成数组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [...arr]=set;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure><blockquote><p>Weak Set</p></blockquote><p>Set在存放对象时，实际上是存放的是对象的引用，即Set也被称之为Strong Set。如果所存储的对象被置为null，但是Set实例仍然存在的话，对象依然无法被垃圾回收器回收，从而无法释放内存：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="keyword">let</span> key=&#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> key2 = &#123;&#125;;</span><br><span class="line">set.<span class="title function_">add</span>(key);</span><br><span class="line">set.<span class="title function_">add</span>(key2);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">key=<span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>可以看出就算对象key置为null，但是由于是强引用的方式，Set实例还存在，对象key依然不会被回收。</p><p>如果想让对象key正常释放的话，可以使用Weak Set，此时，<strong>存放的是对象的弱引用，当对象只被Set弱引用的话，并不会阻止对象实例被回收</strong>。Weka Set同Set的用法几乎一致。可以使用add()方法增加数据项，使用has()方法检查Weak Set中是否包含某项，以及使用delete()方法删除某一项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">WeakSet</span>();</span><br><span class="line"><span class="keyword">let</span> key = &#123;&#125;;</span><br><span class="line">set.<span class="title function_">add</span>(key);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(key)); <span class="comment">//true</span></span><br><span class="line">set.<span class="title function_">delete</span>(key);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(key)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>但需要注意的是：Weak Set构造器不接受基本类型数据，只接受对象。同样的可以使用可迭代的对象如数组，来作为构造器参数，来创建Weak Set。</p><blockquote><p>Weak Set和Set之间的差异</p></blockquote><p>对于Weak Set和Set之间的重要差异：</p><ol><li>对于Weak Set实例，若调用了add()方法时传入了非对象的参数，则会抛出错误。如果在has()或者delete()方法中传入了非对象的参数则会返回false；</li><li>Weak Set不可迭代，因此不能用于for-of循环；</li><li>Weak Set 无法暴露出任何迭代器（例如 keys() 与 values() 方法） ，因此没有任何编程手段可用于判断 Weak Set 的内容；</li><li>Weak Set没有forEach()方法；</li><li>Weak Set没有size属性；</li></ol><h2 id="ES6中的Map"><a href="#ES6中的Map" class="headerlink" title="ES6中的Map"></a>ES6中的Map</h2><p>ES6中提供了Map数据结构，能够存放键值对，其中，键的去重是通过Object.is()方法进行比较，键的数据类型可以是基本类型数据也可以是对象，而值也可以是任意类型数据。</p><blockquote><p>对Map的操作</p></blockquote><ol><li><p>使用<code>set()</code>方法可以给Map添加键值对</p><p>let map = new Map();</p><pre><code>    map.set(&#39;title&#39;,&#39;hello world&#39;);    map.set(&#39;year&#39;,&#39;2018&#39;);    </code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure></li></ol><p>通过<code>set()</code>方法往Map中增加了两个键值对后，可以看到Map的大小就为2；</p><ol start="2"><li><p>通过get()方法可以从Map中提取值</p><p>let map = new Map();</p><pre><code>    map.set(&#39;title&#39;,&#39;hello world&#39;);    map.set(&#39;year&#39;,&#39;2018&#39;);    </code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&#x27;title&#x27;</span>)); <span class="comment">// hello world</span></span><br></pre></td></tr></table></figure></li><li><p>has(),delete()以及clear()方法</p></li></ol><p>为了和Set的操作保持一致，Map中同样有has()方法，用来检查某个数据项是否存在于Map中，使用delete方法可以从Map中删除一个数据项，使用clear方法可以删除Map中所有的数据项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;2018&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;year&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line">map.<span class="title function_">delete</span>(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;title&#x27;</span>)); <span class="comment">//false</span></span><br><span class="line">map.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">//0</span></span><br></pre></td></tr></table></figure><blockquote><p>Map的初始化</p></blockquote><p>与Set的初始化一样，Map也可以用数组来初始化Map，该数组中的每一个数据项也是数组，数组的第一个数据项代表键值对的键，第二个数据项是键值对的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组来创建Map</span></span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;hello world&#x27;</span>],[<span class="string">&#x27;year&#x27;</span>,<span class="string">&#x27;2018&#x27;</span>]]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;title&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(<span class="string">&#x27;year&#x27;</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="property">size</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><blockquote><p>Map的forEach方法</p></blockquote><p>与Set一样，Map也拥有<code>forEach</code>方法，该方法也接收一个回调函数，该回调函数有三个参数：</p><ol><li><p>键值对的键；</p></li><li><p>键值对的值；</p></li><li><p>当前Map对象引用；</p><p>let map = new Map([[‘title’,’hello world’],[‘year’,’2018’]]);</p><pre><code>    map.forEach((value,key,ownerMap)=&gt;&#123;        console.log(value);        console.log(key);    &#125;);    </code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">title</span><br><span class="line">2018</span><br><span class="line">year</span><br></pre></td></tr></table></figure></li></ol><p>与Set的forEach一样，可以在回调函数中传入<code>this引用</code>。</p><blockquote><p>Weak Map</p></blockquote><p>Weak Map对Map而言，就像是Weak Set相对于Set一样：<strong>Weak Map(或者Weak Set)都是存储对象弱引用的方式，在Weak Map（或者Weak Set）中，所有的键都必须是对象（尝试使用非对象的键会抛出错误），而且这些对象都是弱引用，不会干扰到垃圾回收。当Weak Map中的键在Weak Map之外不存在引用时，该键值对会被移除。</strong></p><blockquote><p>Weak Map的操作</p></blockquote><ol><li>Weak Map的初始化</li></ol><p> Weak Map的键必须是对象，值可以是任意类型，初始化同Map一样，也可是使用数组来创建一个 Weak Map ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用数组来创建一个Weak Map</span></span><br><span class="line"><span class="keyword">let</span> key = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> key2 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([[key,<span class="string">&#x27;hello&#x27;</span>],[key2,<span class="string">&#x27;world&#x27;</span>]]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(key)); <span class="comment">//hello</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(key2)); <span class="comment">//world</span></span><br></pre></td></tr></table></figure><ol start="2"><li>has方法以及delete方法</li></ol><p>与Map一样，可以使用has()方法来检查Weak Map中是否存在某一个键值对，使用delete()方法可以删除一个键值对。clear() 方法不存在，这是因为没必要对键进行枚举，并且枚举 Weak Map 也是不可能的，这与 Weak Set 相同：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> key = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> key2 = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([[key,<span class="string">&#x27;hello&#x27;</span>],[key2,<span class="string">&#x27;world&#x27;</span>]]);</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">delete</span>(key);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(key)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><blockquote><p>Weak Map 的用法与局限性</p></blockquote><p>当决定是要使用 Weak Map 还是使用正规 Map 时，首要考虑因素在于你是否只想使用对象类型的键。如果你打算这么做，那么最好的选择就是 Weak Map 。因为它能确保额外数据在不再可用后被销毁，从而能优化内存使用并规避内存泄漏。</p><p>要记住 Weak Map 只为它们的内容提供了很小的可见度，因此你<strong>不能使用 forEach() 方法、size 属性或 clear() 方法来管理其中的项</strong>。如果你确实需要一些检测功能，那么正规 Map会是更好的选择，只是一定要确保留意内存的使用。</p><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><ol><li>Set 是无重复值的有序列表。根据 <code>Object.is() </code>方法来判断其中的值不相等，以保证无重复。 Set 会自动移除重复的值，因此你可以使用它来过滤数组中的重复值并返回结果。 Set并不是数组的子类型，所以你无法随机访问其中的值。但你可以使用<code> has()</code> 方法来判断某个值是否存在于 Set 中，或通过 <code>size</code> 属性来查看其中有多少个值。 Set 类型还拥有<code>forEach() </code>方法，用于处理每个值。</li><li>Weak Set 是只能包含对象的特殊 Set 。其中的对象使用弱引用来存储，意味着当 Weak Set中的项是某个对象的仅存引用时，它不会屏蔽垃圾回收。由于内存管理的复杂性， Weak Set的内容不能被检查，因此最好将 Weak Set 仅用于追踪需要被归组在一起的对象。</li><li>Map 是有序的键值对，其中的键允许是任何类型。与 Set 相似，通过调用 <code>Object.is() </code>方法来判断重复的键，这意味着能将数值 5 与字符串 “5” 作为两个相对独立的键。使用<code>set()</code> 方法能将任何类型的值关联到某个键上，并且该值此后能用 <code>get()</code> 方法提取出来。Map 也拥有一个 <code>size</code> 属性与一个 <code>forEach()</code> 方法，让项目访问更容易。</li><li>Weak Map 是只能包含对象类型的键的特殊 Map 。与 Weak Set 相似，键的对象引用是弱引用，因此当它是某个对象的仅存引用时，也不会屏蔽垃圾回收。当键被回收之后，所关联的值也同时从 Weak Map 中被移除。</li></ol><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//Set</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let set= new Set();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set.add(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set.add(&#x27;1&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.size);//2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let set = new Set([1,2,3,3,3,3]);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.size);//3</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.has(5)); //false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set.delete(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.has(1)); //false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.size); //2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let set = new Set([1,2,3,3,3,3]);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let operation =&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// print(value)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// iterate(set=[])&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set.forEach((value,key)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.print(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.print(key);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// operation.iterate(set);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let [...arr]=set;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(arr);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//强引用</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let set = new WeakSet();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let key = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set.add(key);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.has(key)); //true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set.delete(key);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(set.has(key)); //false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//Map的基本操作</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let map = new Map();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// map.set(&#x27;title&#x27;,&#x27;hello world&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// map.set(&#x27;year&#x27;,&#x27;2018&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.has(&#x27;year&#x27;)); //true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// map.delete(&#x27;title&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.has(&#x27;title&#x27;)); //false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// map.clear();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.size); //0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.get(&#x27;title&#x27;));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.size); //2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//使用数组来创建Map</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let map = new Map([[&#x27;title&#x27;,&#x27;hello world&#x27;],[&#x27;year&#x27;,&#x27;2018&#x27;]]);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// map.forEach((value,key,ownerMap)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(key);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.has(&#x27;title&#x27;)); //true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.has(&#x27;year&#x27;)); //true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(map.size); //2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//使用数组来创建一个Weak Map</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> key = &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> key2 = &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>([[key,<span class="string">&#x27;hello&#x27;</span>],[key2,<span class="string">&#x27;world&#x27;</span>]]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(key)); <span class="comment">//hello</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(key2)); <span class="comment">//world</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">map.<span class="title function_">delete</span>(key);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(key));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="迭代器和迭代器"><a href="#迭代器和迭代器" class="headerlink" title="迭代器和迭代器"></a>迭代器和迭代器</h2><blockquote><p>何为迭代器？</p></blockquote><p>迭代器是被设计专用于迭代的对象，带有特定接口。所有的迭代器对象都拥有 next() 方<br>法，会返回一个结果对象。该结果对象有两个属性：对应下一个值的 value ，以及一个布尔<br>类型的 done ，其值为 true 时表示没有更多值可供使用。迭代器持有一个指向集合位置的<br>内部指针，每当调用了 next() 方法，迭代器就会返回相应的下一个值。</p><h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><blockquote><p>何为生成器？</p></blockquote><p><strong>生成器（generator ） 是能返回一个迭代器的函数</strong>。生成器函数由放在 function 关键字之后的一个星号（ * ） 来表示，并能使用新的 <code>yield</code> 关键字。将星号紧跟在 function 关键字之后，或是在中间留出空格，都是没问题的。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>*<span class="title function_">generator</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">generator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>);<span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>生成器函数最有意思的地方是它们会在每一个<code>yield</code>语句后停止，例如在上面的代码中执行<code>yield 1</code>后，该函数不会在继续往下执行。等待下一次调用<code>next()</code>后，才会继续往下执行<code>yield 2 </code>。</p><p><strong>除了使用函数声明的方式创建一个生成器外，还可以使用函数表达式来创建一个生成器。由于生成器就是一个函数，同样可以使用对象字面量的方式，将对象的属性赋值为一个生成器函数。</strong></p><h3 id="可迭代对象与for-of循环"><a href="#可迭代对象与for-of循环" class="headerlink" title="可迭代对象与for-of循环"></a>可迭代对象与for-of循环</h3><p>可迭代对象是包含<code>Symbol.iterator</code>属性的对象，这个<code>Symbol.iterator</code>属性对应着能够返回该对象的迭代器的函数。在ES6中，所有的集合对象（数组、Set和Map）以及字符串都是可迭代对象，因此它们都被指定了默认的迭代器。可迭代对象可以与ES6中新增的<code>for-of</code>循环配合使用。</p><p>迭代器解决了<code>for</code>循环中追踪索引的问题，而<code>for-of</code>循环，则是完全删除追踪集合索引的需要，更能专注于操作集合内容。<code>for-of</code>循环在循环每次执行时会调用可迭代对象的<code>next()</code>方法，并将结果对象的<code>value</code>值存储在一个变量上，循环过程直到结果对象<code>done</code>属性变成<code>true</code>为止：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> arr)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line">输出结果为：<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span></span><br></pre></td></tr></table></figure><p><code>for-of</code>循环首先会调用arr数组中<code>Symbol.iterator</code>属性对象的函数，就会获取到该数组对应的迭代器，接下来<code>iterator.next()</code>被调用，迭代器结果对象的<code>value</code>属性会被放入到变量<code>num</code>中。数组中的数据项会依次存入到变量<code>num</code>中，直到迭代器结果对象中的<code>done</code>属性变成<code>true</code>为止，循环就结束。</p><blockquote><p>访问可迭代对象的默认迭代器</p></blockquote><p>可以使用可迭代对象的Symbol.iterator来访问对象上可返回迭代器的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">//访问默认迭代器</span></span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p><strong>通过Symbol.iterator属性获取到该对象的可返回迭代器的函数，然后执行该函数得到对象的可迭代器。</strong>同样的，可是使用<code>Symbol.iterato</code>r属性来检查对象是否是可迭代对象。</p><blockquote><p>创建可迭代对象</p></blockquote><p>数组，Set等集合对象是默认的迭代器，当然也可以为对象创建自定义的迭代器，使其成为可迭代对象。那么迭代器如何生成？我们已经知道，生成器就是一个可以返回迭代器的函数，因此自定义迭代器，就是写一个生成器函数。同时，可迭代对象必须具有<code>Symbol.iterator</code>属性，并且该属性对应着一个能够返回迭代器的函数，因此只需要将这个生成器函数赋值给<code>Symbol.iterator</code>属性即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建可迭代对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line"><span class="attr">items</span>:[],</span><br><span class="line"></span><br><span class="line">*[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">items</span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> item;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">items</span>.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">obj.<span class="property">items</span>.<span class="title function_">push</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> num <span class="keyword">of</span> obj)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出：<span class="number">1</span>，<span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="内置的迭代器"><a href="#内置的迭代器" class="headerlink" title="内置的迭代器"></a>内置的迭代器</h3><p>ES6中许多内置类型已经包含了默认的迭代器，只有当默认迭代器满足不了时，才会创建自定义的迭代器。如果新建对象时，要想把该对象转换成可迭代对象的话，一般才会需要自定义迭代器。</p><blockquote><p>集合迭代器 </p></blockquote><p>ES6中有三种集合对象：数组、Map和Set，这三种类型都拥有默认的迭代器：</p><ul><li>entries()：返回一个包含键值对的迭代器；</li><li>values()：返回一个包含集合中的值的迭代器；</li><li>keys()：返回一个包含集合中的键的迭代器；</li></ul><ol><li>调用entries()迭代器会在每次调用next()方法返回一个双项数组，此数组代表集合数据项中的键和值：对于数组来说，第一项是数组索引；对于Set来说，第一项是值（因为Set的键和值相同），对于Map来说，就是键值对的值；</li><li>values()迭代器能够返回集合中的每一个值；</li><li>keys()迭代器能够返回集合中的每一个键；</li></ol><blockquote><p>集合的默认迭代器 </p></blockquote><p>当for-of循环没有显式指定迭代器时，集合对象会有默认的迭代器。values()方法是数组和Set默认的迭代器，而entries()方法是Map默认迭代器。</p><blockquote><p>字符串的迭代器 </p></blockquote><p>ES6旨在为Unicode提供了完全支持，字符串的默认迭代器就是解决字符串迭代问题的一种尝试，这样一来，借助字符串默认迭代器就能处理字符而非码元：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//字符串默认迭代器</span><br><span class="line">let str =&#x27;A   B&#x27;;</span><br><span class="line">for(let s of str)&#123;</span><br><span class="line">console.log(s); //A  B</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>扩展运算符与非数组的可迭代对象</p></blockquote><p>扩展运算符能作用于所有可迭代对象，并且会使用默认迭代器来判断需要哪些值。在数组字面量中可以使用扩展运算符将可迭代对象填充到数组中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//扩展运算符可作用到所有可迭代对象</span><br><span class="line">let arr = [1,2,3];</span><br><span class="line">let array = [...arr];</span><br><span class="line">console.log(array); [1,2,3]</span><br></pre></td></tr></table></figure><p>并且，可以不限次数在数组字面量中使用扩展运算符，而且可以在任意位置用扩展运算符将可迭代对象填充到数组中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let arr = [1,2,3];</span><br><span class="line">let arr2 = [7,8,9];</span><br><span class="line">let array = [...arr,5,...arr2];</span><br><span class="line">console.log(array); //1,2,3,5,7,8,9</span><br></pre></td></tr></table></figure><h3 id="迭代器高级功能"><a href="#迭代器高级功能" class="headerlink" title="迭代器高级功能"></a>迭代器高级功能</h3><p>能够通过next()方法向迭代器传递参数<strong>，当一个参数传递给next()方法时，该参数就会成为生成器内部yield语句中的变量值。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代器的高级功能</span></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">generator</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> first = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> second = <span class="keyword">yield</span> first+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> third = <span class="keyword">yield</span> second+<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">generator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="number">4</span>)); <span class="comment">//&#123;value: 6, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="number">5</span>)); <span class="comment">//&#123;value: 8, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>示例代码中，当通过next()方法传入参数时，会赋值给yield语句中的变量。</p><blockquote><p>在迭代器中抛出错误</p></blockquote><p>能传递给迭代器的不仅是数据，还可以是错误，迭代器可以选择一个<code>throw()</code>方法，用于指示迭代器应在恢复执行时抛出一个错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//迭代器抛出错误</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">generator</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> first = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> second = <span class="keyword">yield</span> first+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> third = <span class="keyword">yield</span> second+<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">generator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="number">4</span>)); <span class="comment">//&#123;value: 6, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="keyword">throw</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Error!&#x27;</span>))); <span class="comment">//Uncaught Error: Error!</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//不会执行</span></span><br></pre></td></tr></table></figure><p>在生成器中同样可以使用<code>try-catch</code>来捕捉错误：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">generator</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> first = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> second;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">second = <span class="keyword">yield</span> first+<span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">second = <span class="number">6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> third = <span class="keyword">yield</span> second+<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">generator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="number">4</span>)); <span class="comment">//&#123;value: 6, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="keyword">throw</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Error!&#x27;</span>))); <span class="comment">//&#123;value: 9, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>生成器的return语句</p></blockquote><p>由于生成器是函数，你可以在它内部使用 <code>return</code> 语句，既可以让生成器早一点退出执行，也可以指定在 <code>next()</code> 方法最后一次调用时的返回值。大多数情况，迭代器上的<br><code>next()</code> 的最后一次调用都返回了 <code>undefined</code> ，但你还可以像在其他函数中那样，使用<br><code>return</code> 来指定另一个返回值。在生成器内， return 表明所有的处理已完成，因此 done<br>属性会被设为 true ，而如果提供了返回值，就会被用于 value 字段。比如，利用return让生成器更早的退出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gene</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gene</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>由于使用return语句，能够让生成器更早结束，因此在第二次以及第三次调用next()方法时，返回结果对象为：<code>&#123;value: undefined, done: true&#125;</code>。</p><p>还可以使用return语句指定最后返回值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gene</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;finish&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gene</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &quot;finish&quot;, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>当第二次调用next()方法时，返回了设置的返回值：<code>finish</code>。第三次调用 <code>next()</code> 返回了一个对象，其 <code>value</code> 属性再次变回<code>undefined</code> ，你在 <code>return</code> 语句中指定的任意值都只会在结果对象中出现一次，此后 <code>value</code> 字段就会被重置为 <code>undefined</code> 。</p><blockquote><p>生成器委托</p></blockquote><p>生成器委托是指：将生成器组合起来使用，构成一个生成器。组合生成器的语法需要<code>yield</code>和<code>*</code>，<code>*</code>落在<code>yield</code>关键字与生成器函数名之间即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gene1</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;green&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gene2</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">combined</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> * <span class="title function_">gene1</span>();</span><br><span class="line"><span class="keyword">yield</span> * <span class="title function_">gene2</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">combined</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &quot;red&quot;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &quot;green&quot;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: 2, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>此例中将生成器gene1和gene2组合而成生成器combined，每次调用combined的next()方法时，实际上会委托到具体的生成器中，当gene1生成器中所有的yield执行完退出之后，才会继续执行gene2，当gene2执行完退出之后，也就意味着combined生成器执行结束。</p><p>在使用生成器委托组合新的生成器时，前一个执行的生成器返回值可以作为下一个生成器的参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用生成器返回值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gene1</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gene2</span>(<span class="params">count</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="string">&#x27;repeat&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">combined</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">yield</span> * <span class="title function_">gene1</span>();</span><br><span class="line"><span class="keyword">yield</span> result;</span><br><span class="line"><span class="keyword">yield</span>*<span class="title function_">gene2</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">combined</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: 1, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: 2, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &quot;repeat&quot;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: &quot;repeat&quot;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());<span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p>此例中，生成器gene1的返回值，就作为了生成器gene2的参数。</p><h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><blockquote><p>一个简单的任务运行器</p></blockquote><p>生成器函数中yield能暂停运行，当再次调用next()方法时才会重新往下运行。一个简单的任务执行器，就需要传入一个生成器函数，然后每一次调用next()方法就会“一步步”往下执行函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任务执行器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">taskDef</span>) &#123;</span><br><span class="line"><span class="comment">// 创建迭代器，让它在别处可用</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="title function_">taskDef</span>();</span><br><span class="line"><span class="comment">// 启动任务</span></span><br><span class="line"><span class="keyword">let</span> result = task.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// 递归使用函数来保持对 next() 的调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">step</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 如果还有更多要做的</span></span><br><span class="line"><span class="keyword">if</span> (!result.<span class="property">done</span>) &#123;</span><br><span class="line">result = task.<span class="title function_">next</span>();</span><br><span class="line"><span class="title function_">step</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 开始处理过程</span></span><br><span class="line"><span class="title function_">step</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">run</span>(<span class="keyword">function</span>*() &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">yield</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">yield</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>run()</code> 函数接受一个任务定义（即一个生成器函数） 作为参数，它会调用生成器来创建一个<br>迭代器，并将迭代器存放在 <code>task</code> 变量上。第一次对 <code>next()</code> 的调用启动<br>了迭代器，并将结果存储下来以便稍后使用。<code> step()</code> 函数查看<code> result.done</code> 是否为 <code>false</code>，如果是就在递归调用自身之前调用 <code>next()</code> 方法。每次调用 <code>next()</code> 都会把返回的结果保<br>存在 <code>result</code> 变量上，它总是会被最新的信息所重写。对于 <code>step()</code> 的初始调用启动了处理<br>过程，该过程会查看 <code>result.done</code> 来判断是否还有更多要做的工作。</p><blockquote><p>能够传递数据的任务运行器</p></blockquote><p>如果需要传递数据的话，也很容易，也就是将上一次<code>yield</code>的值，传递给下一次<code>next()</code>调用即可，仅仅只需要传送结果对象的<code>value</code>属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任务执行器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">taskDef</span>) &#123;</span><br><span class="line"><span class="comment">// 创建迭代器，让它在别处可用</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="title function_">taskDef</span>();</span><br><span class="line"><span class="comment">// 启动任务</span></span><br><span class="line"><span class="keyword">let</span> result = task.<span class="title function_">next</span>();</span><br><span class="line"><span class="comment">// 递归使用函数来保持对 next() 的调用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">step</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 如果还有更多要做的</span></span><br><span class="line"><span class="keyword">if</span> (!result.<span class="property">done</span>) &#123;</span><br><span class="line">result = task.<span class="title function_">next</span>(result.<span class="property">value</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">value</span>); <span class="comment">//6 undefined</span></span><br><span class="line"><span class="title function_">step</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 开始处理过程</span></span><br><span class="line"><span class="title function_">step</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">run</span>(<span class="keyword">function</span>*() &#123;</span><br><span class="line"><span class="keyword">let</span> value = <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">yield</span> value+<span class="number">5</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>异步任务</p></blockquote><p>上面的例子是简单的任务处理器，甚至还是同步的。实现任务器也主要是迭代器在每一次调用<code>next()</code>方法时彼此间传递静态参数。如果要将上面的任务处理器改装成异步任务处理器的话，就需要<code>yield</code>能够返回一个<strong>能够执行回调函数的函数，并且回调参数为该函数的参数</strong>即可。</p><p><strong>什么是有回调函数的函数？</strong></p><p>有这样的示例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">callback</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line"><span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数<code>fetchData</code>返回的是一个函数，并且所返回的函数能够接受一个函数callback。当执行返回的函数时，实际上是调用回调函数<code>callback</code>。但目前而言，回调函数callback还是同步的，可以改造成异步函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fetchData</span>(<span class="params">callback</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">callback</span>(<span class="literal">null</span>, <span class="string">&quot;Hi!&quot;</span>);</span><br><span class="line">&#125;, <span class="number">50</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单的异步任务处理器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步任务处理器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">taskDef</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行生成器，创建迭代器</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="title function_">taskDef</span>();</span><br><span class="line"><span class="comment">//启动任务</span></span><br><span class="line"><span class="keyword">let</span> result = task.<span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">step</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(!result.<span class="property">done</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_">typeof</span>(result.<span class="property">value</span>)===<span class="string">&#x27;function&#x27;</span> )&#123;</span><br><span class="line">result.<span class="title function_">value</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">result = task.<span class="title function_">next</span>();</span><br><span class="line"><span class="title function_">step</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">step</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<br>​<br>​    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">run</span>(<span class="keyword">function</span> *()&#123;</span><br><span class="line"><span class="comment">//返回一个能够返回执行回调函数的函数，并且回调函数还是该</span></span><br><span class="line"><span class="comment">//函数的参数</span></span><br><span class="line"><span class="keyword">yield</span> <span class="keyword">function</span>(<span class="params">callback</span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(callback,<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面的示例代码就是一个简单的异步任务处理器，有这样几点要点：</p><ol><li>使用生成器构造迭代器，所以在<code>run</code>方法中传入的是生成器函数；</li><li>生成器函数中<code>yield</code>关键字，返回的是<strong>一个能够执行回调函数的函数，并且回调函数是该函数的一个参数</strong>；</li></ol><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><ol><li>使用迭代器可以用来遍历集合对象包含的数据，调用迭代器的<code>next()</code>方法可以返回一个结果对象，其中<code>value</code>属性代表值，<code>done</code>属性用来表示集合对象是否已经到了最后一项，如果集合对象的值全部遍历完后，<code>done</code>属性为<code>true</code>；</li><li><code>Symbol.iterator</code>属性被用于定义对象的默认迭代器，使用该属性可以为对象自定义迭代器。当<code>Symbol.iterator</code>属性存在时，该对象可以被认为是可迭代对象；</li><li>可迭代对象可以使用for-of循环，for-of循环不需要关注集合对象的索引，更能专注于对内容的处理；</li><li>数组、Set、Map以及字符串都具有默认的迭代器；</li><li>扩展运算符可以作用于任何可迭代对象，让可迭代对象转换成数组，并且扩展运算符可以用于数组字面量中任何位置中，让可迭代对象的数据项一次填入到新数组中；</li><li>生成器是一个特殊的函数，语法上使用了<code>*</code>，yield能够返回结果，并能暂停继续往下执行，直到调用next()方法后，才能继续往下执行。使用生成器委托能够将两个生成器合并组合成一个生成器；</li><li>能够使用生成器构造异步任务处理器；</li></ol><h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//生成器</span><br><span class="line"></span><br><span class="line">// function*generator()&#123;</span><br><span class="line"></span><br><span class="line">// yield 1;</span><br><span class="line">// yield 2;</span><br><span class="line">// yield 3;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// let iterator = generator();</span><br><span class="line">// console.log(iterator.next().value);</span><br><span class="line">// console.log(iterator.next().value);</span><br><span class="line"></span><br><span class="line">// let arr = [1,2,3];</span><br><span class="line">// // for(let num of arr)&#123;</span><br><span class="line">// // console.log(num);</span><br><span class="line">// // &#125;</span><br><span class="line"></span><br><span class="line">// //访问默认迭代器</span><br><span class="line"></span><br><span class="line">// let iterator = arr[Symbol.iterator]();</span><br><span class="line">// console.log(iterator.next().value);</span><br><span class="line">// console.log(iterator.next().value);</span><br><span class="line"></span><br><span class="line">//创建可迭代对象</span><br><span class="line"></span><br><span class="line">// let obj = &#123;</span><br><span class="line">// items:[],</span><br><span class="line"></span><br><span class="line">// *[Symbol.iterator]()&#123;</span><br><span class="line">// for(let item of this.items)&#123;</span><br><span class="line">// yield item;</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// obj.items.push(1);</span><br><span class="line">// obj.items.push(2);</span><br><span class="line"></span><br><span class="line">// for(let num of obj)&#123;</span><br><span class="line">// console.log(num);</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">//字符串默认迭代器</span><br><span class="line">// let str =&#x27;A   B&#x27;;</span><br><span class="line">// for(let s of str)&#123;</span><br><span class="line">// console.log(s);</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">//扩展运算符可作用到所有可迭代对象</span><br><span class="line">// let arr = [1,2,3];</span><br><span class="line">// let arr2 = [7,8,9];</span><br><span class="line">// let array = [...arr,5,...arr2];</span><br><span class="line">// console.log(array);</span><br><span class="line"></span><br><span class="line">//迭代器的高级功能,next()方法传递参数</span><br><span class="line">// function * generator()&#123;</span><br><span class="line">// let first = yield 1;</span><br><span class="line">// let second = yield first+2;</span><br><span class="line">// let third = yield second+3;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// let iterator = generator();</span><br><span class="line">// console.log(iterator.next()); //&#123;value: 1, done: false&#125;</span><br><span class="line">// console.log(iterator.next(4)); //&#123;value: 6, done: false&#125;</span><br><span class="line">// console.log(iterator.next(5)); //&#123;value: 8, done: false&#125;</span><br><span class="line">// console.log(iterator.next()); //&#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">//迭代器抛出错误</span><br><span class="line"></span><br><span class="line">// function * generator()&#123;</span><br><span class="line">// let first = yield 1;</span><br><span class="line">// let second;</span><br><span class="line">// try&#123;</span><br><span class="line">// second = yield first+2;</span><br><span class="line">// &#125;catch(ex)&#123;</span><br><span class="line">// second = 6</span><br><span class="line">// &#125;</span><br><span class="line">// let third = yield second+3;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// let iterator = generator();</span><br><span class="line">// console.log(iterator.next()); //&#123;value: 1, done: false&#125;</span><br><span class="line">// console.log(iterator.next(4)); //&#123;value: 6, done: false&#125;</span><br><span class="line">// console.log(iterator.throw(new Error(&#x27;Error!&#x27;))); //&#123;value: 9, done: false&#125;</span><br><span class="line">// console.log(iterator.next()); //&#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">//生成器的return语句</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// function * gene()&#123;</span><br><span class="line">// yield 1;</span><br><span class="line">// return &#x27;finish&#x27;;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// let iterator = gene();</span><br><span class="line">// console.log(iterator.next());//&#123;value: 1, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: &quot;finish&quot;, done: true&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">//生成器委托</span><br><span class="line"></span><br><span class="line">// function * gene1()&#123;</span><br><span class="line">// yield &#x27;red&#x27;;</span><br><span class="line">// yield &#x27;green&#x27;;</span><br><span class="line"></span><br><span class="line">// &#125;</span><br><span class="line">// function * gene2()&#123;</span><br><span class="line">// yield 1;</span><br><span class="line">// yield 2;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// function * combined()&#123;</span><br><span class="line">// yield * gene1();</span><br><span class="line">// yield * gene2();</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// let iterator = combined();</span><br><span class="line">// console.log(iterator.next());//&#123;value: &quot;red&quot;, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: &quot;green&quot;, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: 1, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: 2, done: true&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">// //利用生成器返回值</span><br><span class="line"></span><br><span class="line">// function * gene1()&#123;</span><br><span class="line">// yield 1;</span><br><span class="line">// return 2;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// function * gene2(count)&#123;</span><br><span class="line"></span><br><span class="line">// for(let i=0;i&lt;count;i++)&#123;</span><br><span class="line">// yield &#x27;repeat&#x27;;</span><br><span class="line">// &#125;</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line">// function * combined()&#123;</span><br><span class="line">// let result = yield * gene1();</span><br><span class="line">// yield result;</span><br><span class="line">// yield*gene2(result);</span><br><span class="line">// &#125;</span><br><span class="line">// let iterator = combined();</span><br><span class="line">// console.log(iterator.next());//&#123;value: 1, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: 2, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: &quot;repeat&quot;, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: &quot;repeat&quot;, done: false&#125;</span><br><span class="line">// console.log(iterator.next());//&#123;value: undefined, done: true&#125;</span><br><span class="line"></span><br><span class="line">// //任务执行器</span><br><span class="line">// function run(taskDef) &#123;</span><br><span class="line">// // 创建迭代器，让它在别处可用</span><br><span class="line">// let task = taskDef();</span><br><span class="line">// // 启动任务</span><br><span class="line">// let result = task.next();</span><br><span class="line">// // 递归使用函数来保持对 next() 的调用</span><br><span class="line">// function step() &#123;</span><br><span class="line">// // 如果还有更多要做的</span><br><span class="line">// if (!result.done) &#123;</span><br><span class="line">// result = task.next(result.value);</span><br><span class="line">// console.log(result.value);</span><br><span class="line">// step();</span><br><span class="line">// &#125;</span><br><span class="line">// &#125; </span><br><span class="line">// // 开始处理过程</span><br><span class="line">// step();</span><br><span class="line">// &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// run(function*() &#123;</span><br><span class="line">// let value = yield 1;</span><br><span class="line">// yield value+5;</span><br><span class="line">// &#125;);</span><br><span class="line"></span><br><span class="line">//异步任务处理器</span><br><span class="line"></span><br><span class="line">function run(taskDef)&#123;</span><br><span class="line"></span><br><span class="line">//执行生成器，创建迭代器</span><br><span class="line">let task = taskDef();</span><br><span class="line">//启动任务</span><br><span class="line">let result = task.next();</span><br><span class="line"></span><br><span class="line">function step()&#123;</span><br><span class="line">while(!result.done)&#123;</span><br><span class="line">if(typeof(result.value)===&#x27;function&#x27; )&#123;</span><br><span class="line">result.value(()=&gt;&#123;</span><br><span class="line">console.log(&#x27;hello world&#x27;);</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">result = task.next();</span><br><span class="line">step();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">step();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run(function *()&#123;</span><br><span class="line">//返回一个能够返回执行回调函数的函数，并且回调函数还是该</span><br><span class="line">//函数的参数</span><br><span class="line">yield function(callback)&#123;</span><br><span class="line">setTimeout(callback,3000);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="推荐blue老师的库源码—"><a href="#推荐blue老师的库源码—" class="headerlink" title="推荐blue老师的库源码—"></a>推荐blue老师的库源码—</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>=runner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runner</span>(<span class="params">_gen</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> gen=<span class="title function_">_gen</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">_next</span>();</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">_next</span>(<span class="params">_last_res</span>)&#123;</span><br><span class="line">      <span class="keyword">var</span> res=gen.<span class="title function_">next</span>(_last_res);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(!res.<span class="property">done</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> obj=res.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Promise</span>)&#123;</span><br><span class="line">          obj.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">_next</span>(res);</span><br><span class="line">          &#125;, <span class="function">(<span class="params">err</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">reject</span>(err);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> obj==<span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(obj.<span class="property">constructor</span>.<span class="title function_">toString</span>().<span class="title function_">startsWith</span>(<span class="string">&#x27;function GeneratorFunction()&#x27;</span>))&#123;</span><br><span class="line">            <span class="title function_">runner</span>(obj).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="title function_">_next</span>(res), reject);</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">_next</span>(<span class="title function_">obj</span>());</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="title function_">_next</span>(obj);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res.<span class="property">value</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>简单使用</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> runner=<span class="built_in">require</span>(<span class="string">&#x27;./index&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">var</span> a=<span class="keyword">yield</span> <span class="number">12</span>;</span><br><span class="line">  <span class="keyword">var</span> b=<span class="keyword">yield</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">runner</span>(<span class="keyword">function</span>* ()&#123;</span><br><span class="line">  <span class="keyword">var</span> num=<span class="keyword">yield</span> gen;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num);   <span class="comment">//excepted 17</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h2><blockquote><p>基本的类声明</p></blockquote><p>类声明以<code>class</code>关键字开始，其后是类的名称；类中的方法就像是对象字面量中的方法简写，并且方法之间不需要使用逗号：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonClass</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">PersonClass</span>(<span class="string">&quot;hello class&quot;</span>);</span><br><span class="line">person.<span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure><p>类声明语法允许使用<code>constructor</code>直接定义一个构造器，而不需要先定义一个函数，再把它当做构造器来使用。类中的方法使用的函数简写语法，省略了关键字<code>function</code>。</p><p>使用class关键字来定义一个类型，有这样几个要点：</p><ol><li>类声明不会被提升，这与ES6之前通过函数定义不同。类声明与使用<code>let</code>定义一样，因此也存在暂时性死区；</li><li>类声明中的所有代码会自动运行在严格模式下，并且无法退出严格模式；</li><li>类的所有方法都是不可枚举的；</li><li>类的所有内部方法都没有<code>[[Constructor]]</code>，因此使用<code>new</code>来调用他们会抛出错误；</li><li>调用类构造器时不使用<code>new</code>，会抛出错误；</li><li>试图在类的内部方法中重写类名，会抛出错误；</li></ol><h3 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h3><p>类与函数有相似之处，都有两种形式：声明与表达式。函数声明与类声明都以关键词开始（分别是function和class），之后就是标识符（即函数名或者类名）。如果需要定义匿名函数，则function后面就无需有函数名，类似的，如果采用类表达式，关键是class后也无需有类名；</p><blockquote><p>基本的类表达式</p></blockquote><p>使用类表达式，将上例改成如下形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">PersonClass</span> = <span class="keyword">class</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">PersonClass</span>(<span class="string">&quot;hello class&quot;</span>);</span><br><span class="line">person.<span class="title function_">sayName</span>(); <span class="comment">//hello  class</span></span><br></pre></td></tr></table></figure><p><strong>示例代码中就定义了一个匿名的类表达式，如果需要定义一个具名的类表达式，只需要像定义具名函数一样，在class关键字后面写上类名即可。</strong></p><h3 id="类的重要要点"><a href="#类的重要要点" class="headerlink" title="类的重要要点"></a>类的重要要点</h3><blockquote><p>作为一级公民的类</p></blockquote><p>在编程中，<strong>能够被当作值来使用的就成为一级公民（first-class citizen）</strong>。既然都当作值使用，就说明它能够作为参数传递给函数、能作为函数的返回值也能用来给变量赋值。JS中的函数是一等公民，类也是一等公民。</p><p>例如，将类作为参数传递给函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function createObj(classDef)&#123;</span><br><span class="line">return new classDef();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let obj = createObj(class&#123;</span><br><span class="line">sayName()&#123;</span><br><span class="line">console.log(&#x27;hello&#x27;); //hello</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">obj.sayName();</span><br></pre></td></tr></table></figure><p><strong>类表达式另一个重要用途是实现立即调用类构造器以创建单例。</strong>语法是使用<code>new</code>来配合类表达式使用，并在表达式后面添加括号()：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//立即调用构造器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="keyword">class</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"></span><br><span class="line">person.<span class="title function_">sayName</span>(); <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><blockquote><p>访问器属性</p></blockquote><p>自有属性需要在类构造器中创建，而类还允许创建访问器属性。为了创建一个<code>getter</code>，要使用<code>get</code>关键字，并要与后面的标识符之间留出空格；创建<code>setter</code>使用相同的方式，只需要将关键字换成<code>set</code>即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonClass</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> name; <span class="comment">//不要使用this.name会导致无限递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value</span>)&#123;</span><br><span class="line">name=value; <span class="comment">//不要使用this.value会导致无限递归</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">PersonClass</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// hello</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">//world</span></span><br><span class="line"><span class="keyword">let</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(<span class="title class_">PersonClass</span>.<span class="property"><span class="keyword">prototype</span></span>,<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get&#x27;</span> <span class="keyword">in</span> descriptor); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>需计算属性名</p></blockquote><p>对象字面量和类之间的相似点有很多，类方法与类访问器属性都能使用需计算属性名的方式，语法与对象字面量中需计算属性名一样，都是使用方括号[]来包裹表达式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需计算属性名</span></span><br><span class="line"><span class="keyword">let</span> methodName =<span class="string">&#x27;sayName&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> propertyName = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonClass</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line">get [propertyName]()&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">set [propertyName](value)&#123;</span><br><span class="line">name = value;</span><br><span class="line">&#125;</span><br><span class="line">[methodName]()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">PersonClass</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">person.<span class="title function_">sayName</span>(); <span class="comment">//hello world</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure><blockquote><p>生成器方法</p></blockquote><p>在对象字面量中定义一个生成器：只需要在方法名前附加一个星号<code>*</code>即可，这一语法对类同样有效，允许将类的任意内部方法编程生成器方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成器方法：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GeneClass</span>&#123;</span><br><span class="line"></span><br><span class="line">*<span class="title function_">generator</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">GeneClass</span>();</span><br><span class="line"><span class="keyword">let</span> iterator = obj.<span class="title function_">generator</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>().<span class="property">value</span>); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>可迭代对象用于<code>Symbol.iterator</code>属性，并且该属性指向生成器函数。因此，在类定义中同样可以使用<code>Symbol.iterator</code>属性来定义生成器方法，从而定义出类的默认迭代器。同时也可以通过生成器委托的方式，将数组、Set、Map等迭代器委托给自定义类的迭代器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Collection</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">items</span> = [];</span><br><span class="line">&#125; </span><br><span class="line">*[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">items</span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> item;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> collection = <span class="keyword">new</span> <span class="title class_">Collection</span>();</span><br><span class="line">collection.<span class="property">items</span>.<span class="title function_">push</span>(<span class="number">1</span>);</span><br><span class="line">collection.<span class="property">items</span>.<span class="title function_">push</span>(<span class="number">2</span>);</span><br><span class="line">collection.<span class="property">items</span>.<span class="title function_">push</span>(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> collection) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">输出：<span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><blockquote><p>静态成员</p></blockquote><p>ES6的类简化了静态成员的创建，只要在方法与访问器属性的名称前添加<code>static</code>关键字即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PersonClass</span> &#123;</span><br><span class="line"><span class="comment">// 等价于 PersonType 构造器</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="title function_">create</span>(<span class="params">name</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PersonClass</span>(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="title class_">PersonClass</span>.<span class="title function_">create</span>(<span class="string">&quot;Nicholas&quot;</span>);</span><br></pre></td></tr></table></figure><p>通过在方法前加上<code>static</code>关键字，使其转换成静态方法。能在类中的任何方法与访问器属性上使用 <code>static</code> 关键字，唯一限制是不能将它用于 <code>constructor</code> 方法的定义。<strong>静态成员不能用实例来进行访问，始终需要用类自身才能访问它们。</strong></p><blockquote><p>类继承</p></blockquote><p>使用关键字extends可以完成类继承，同时使用super关键字可以在派生类上访问到基类上的方法，包括构造器方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类继承</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rec</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">width,height</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">width</span> = width;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">height</span> = height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getArea</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span>*<span class="variable language_">this</span>.<span class="property">height</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Rec</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">width,height</span>)&#123;</span><br><span class="line"><span class="variable language_">super</span>(width,height);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(square.<span class="title function_">getArea</span>()); <span class="comment">//10000</span></span><br></pre></td></tr></table></figure><p>关于类继承，还有这样几个要点：</p><ol><li><strong>在派生类中方法会覆盖掉基类中的同名方法，</strong>例如在派生类<code>Square</code>中有<code>getArea()</code>方法的话就会覆盖掉基类<code>Rec</code>中的<code>getArea()</code>方法；</li><li>如果基类中包含了静态成员，那么这些静态成员在派生类中也是可以使用的。注意：<strong>静态成员只能通过类名进行访问，而不是使用对象实例进行访问</strong>；</li></ol><blockquote><p>从表达式中派生类</p></blockquote><p>在ES6中派生类<strong>最大的能力就是能够从表达式中派生类</strong>，只要一个表达式能够返回的对象具有<code>[[Constructor]]</code>属性以及原型，你就可以对该表达式使用<code>extends</code>进行继承。<strong>由于extends后面能够接收任意类型的表达式，这就带来了巨大的可能性，可以动态决定基类，因此一种对象混入的方式：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从表达式中派生类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">SerializableMixin</span> = &#123;</span><br><span class="line"><span class="title function_">serialize</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">AreaMixin</span> = &#123;</span><br><span class="line"><span class="title function_">getArea</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span> * <span class="variable language_">this</span>.<span class="property">width</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mixin</span>(<span class="params">...mixins</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> base = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(base.<span class="property"><span class="keyword">prototype</span></span>, ...mixins);</span><br><span class="line"><span class="keyword">return</span> base;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">mixin</span>(<span class="title class_">AreaMixin</span>, <span class="title class_">SerializableMixin</span>) &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">length</span>) &#123;</span><br><span class="line"><span class="variable language_">super</span>();</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">length</span> = length;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">width</span> = length;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">getArea</span>()); <span class="comment">// 9</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">serialize</span>()); <span class="comment">// &quot;&#123;&quot;length&quot;:3,&quot;width&quot;:3&#125;&quot;</span></span><br></pre></td></tr></table></figure><p><code>mixin() </code>函数接受代表混入对象的任意数量的参数，它创建了一个名为 <code>base</code> 的函数，并将每个混入对象的属性都赋值到新函数的原型上。此函数随后被返回，于是 <code>Square</code> 就能够对其使用 <code>extends</code> 关键字了。注意由于仍然使用了 <code>extends</code> ，你就必须在构造器内调用 <code>super()</code>。若多个混入对象拥有相同的属性，则只有最后添加<br>的属性会被保留。</p><h3 id="继承内置对象"><a href="#继承内置对象" class="headerlink" title="继承内置对象"></a>继承内置对象</h3><p>在E6中能够通过<code>extends</code>继承JS中内置对象，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line"><span class="comment">// 空代码块</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="title class_">MyArray</span>();</span><br><span class="line">colors[<span class="number">0</span>] = <span class="string">&quot;red&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="property">length</span>); <span class="comment">// 1</span></span><br><span class="line">colors.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors[<span class="number">0</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><blockquote><p>Symbol.species</p></blockquote><p>属性<code>Symbol.species</code>被用于<strong>定义静态访问器属性</strong>，该属性值<strong>用来指定类的构造器</strong>。当创建一个新的对象实例时，就需要通过<code>Symbol.species</code>属性获取到构造器，从而新建对象实例。</p><p>下面内置对象都定义了<code>Symbol.species</code>属性：</p><ul><li>Array;</li><li>ArrayBuffer;</li><li>Map;</li><li>Promise;</li><li>RegExp;</li><li>Set;</li><li>类型化数组</li></ul><p>例如在自定义类型中，使用<code>Symbol.species</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">static</span> get [<span class="title class_">Symbol</span>.<span class="property">species</span>]() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">clone</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="variable language_">this</span>.<span class="property">constructor</span>[<span class="title class_">Symbol</span>.<span class="property">species</span>](<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDerivedClass1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MyClass</span> &#123;</span><br><span class="line"><span class="comment">// 空代码块</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDerivedClass2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">MyClass</span> &#123;</span><br><span class="line"><span class="keyword">static</span> get [<span class="title class_">Symbol</span>.<span class="property">species</span>]() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="title class_">MyClass</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> <span class="title class_">MyDerivedClass1</span>(<span class="string">&quot;foo&quot;</span>),</span><br><span class="line">clone1 = instance1.<span class="title function_">clone</span>(),</span><br><span class="line">instance2 = <span class="keyword">new</span> <span class="title class_">MyDerivedClass2</span>(<span class="string">&quot;bar&quot;</span>),</span><br><span class="line">clone2 = instance2.<span class="title function_">clone</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone1 <span class="keyword">instanceof</span> <span class="title class_">MyClass</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone1 <span class="keyword">instanceof</span> <span class="title class_">MyDerivedClass1</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone2 <span class="keyword">instanceof</span> <span class="title class_">MyClass</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(clone2 <span class="keyword">instanceof</span> <span class="title class_">MyDerivedClass2</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>此处, <code>MyDerivedClass1</code> 继承了 <code>MyClass</code> ，并且未修改 <code>Symbol.species</code> 属性。由于<br><code>this.constructor[Symbol.species]</code> 会返回 <code>MyDerivedClass1</code> ，当 <code>clone()</code> 被调用时，它就<br>返回了 <code>MyDerivedClass1</code> 的一个实例。 <code>MyDerivedClass2</code> 类也继承了 <code>MyClass</code> ，但重写了<br><code>Symbol.species </code>，让其返回 <code>MyClass</code> 。当 <code>clone()</code> 在 <code>MyDerivedClass2</code> 的一个实例上被调<br>用时，返回值就变成 <code>MyClass</code> 的一个实例。使用 <code>Symbol.species </code>，任意派生类在调用应当<br>返回实例的方法时，都可以判断出需要返回什么类型的值。</p><blockquote><p>在类构造器中使用new.target</p></blockquote><p>使用<code>new.target</code>属性能够判断当前实例对象是由哪个类构造器进行创建的，简单的情况下，<code>new.target</code>属性就等于该类的构造器函数，同时new.target属性也只能在构造器内被定义。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rec</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span>.<span class="property">target</span>===<span class="title class_">Rec</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Rec</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rec = <span class="keyword">new</span> <span class="title class_">Rec</span>();</span><br><span class="line"><span class="keyword">let</span> square = <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line"></span><br><span class="line">输出：<span class="literal">true</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>当创建<code>Rec</code>对象实例时，<code>new.target</code>指代的是<code>Rec</code>自身的构造器，因此<code>new.target===Rec</code>会返回<code>true</code>，而<code>Rec</code>的派生类<code>Square</code>的<code>new.target</code>会指向它自身的构造器，因此<code>new.target===Rec</code>会返回false;</p><p><strong>可以使用new.target来创建一个抽象基类：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rec</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">new</span>.<span class="property">target</span>===<span class="title class_">Rec</span>)&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;abstract class&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Rec</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rec = <span class="keyword">new</span> <span class="title class_">Rec</span>(); <span class="comment">//Uncaught Error: abstract class</span></span><br><span class="line"><span class="keyword">let</span> square = <span class="keyword">new</span> <span class="title class_">Square</span>(); <span class="comment">//不会报错</span></span><br></pre></td></tr></table></figure><p>当试图创建一个Rec实例对象时，会抛出错误，因此Rec可以当做一个抽象基类。</p><h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><ol><li>ES6中的类使用关键字class进行定义，即可以采用类声明的方式也可以采用类表达式进行定义。 此外，类构造器被调用时不能缺少 new ，确保了不能意外地将类作为函数来调用用。 </li><li>基于类的继承允许你从另一个类、函数或表达式上派生新的类。这种能力意味着你可以调用一个函数来判断需要继承的正确基类，也允许你使用混入或其他不同的组合模式来创建一个新类。新的继承方式让继承内置对象（例如数组） 也变为可能，并且其工作符合预期。</li><li>可以使用<code>new.target</code>来判断创建实例对象时所用的类构造器。利用<code>new.target</code>可以用来创建一个抽象基类；</li></ol><p>总之，类是 JS 的一项新特性，它提供了更简洁的语法与更好的功能，通过安全一致的方式来自定义一个对象类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//类表达式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let PersonClass = class &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(name)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.name = name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// sayName()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(this.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = new PersonClass(&quot;hello class&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// person.sayName();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//类作为参数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// function createObj(classDef)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return new classDef();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let obj = createObj(class&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// sayName()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;hello&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// obj.sayName();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//立即调用构造器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = new class&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(name)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.name = name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// sayName()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(this.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;(&#x27;hello world&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// person.sayName(); //hello world</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//访问器属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class PersonClass&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(name)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.name = name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// get name()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set name(value)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// name=value;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = new PersonClass(&#x27;hello&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(person.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// person.name = &#x27;world&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(person.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let descriptor = Object.getOwnPropertyDescriptor(PersonClass.prototype,&#x27;name&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;get&#x27; in descriptor);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //需计算属性名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let methodName =&#x27;sayName&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let propertyName = &#x27;name&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class PersonClass&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(name)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.name = name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// get [propertyName]()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set [propertyName](value)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// name = value;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// [methodName]()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return console.log(this.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = new PersonClass(&#x27;hello world&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// person.sayName();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(person.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //生成器方法：</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class GeneClass&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// *generator()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// yield 1;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// yield 2;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let obj = new GeneClass();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let iterator = obj.generator();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(iterator.next().value); //1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(iterator.next().value); //2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(iterator.next().value); //undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//自定义类的默认迭代器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class Collection &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.items = [];</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// *[Symbol.iterator]() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// for(let item of this.items)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// yield item;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let collection = new Collection();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// collection.items.push(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// collection.items.push(2);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// collection.items.push(3);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// for (let x of collection) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(x);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//静态成员</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class PersonClass &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 等价于 PersonType 构造器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(name) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.name = name;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// static create(name) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return new PersonClass(name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let person = PersonClass.create(&quot;Nicholas&quot;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //类继承</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class Rec&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(width,height)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.width = width;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.height = height;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// getArea()&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return this.width*this.height;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class Square extends Rec&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(width,height)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// super(width,height);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let square = new Square(100,100);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(square.getArea()); //10000</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //从表达式中派生类</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let SerializableMixin = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// serialize() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return JSON.stringify(this);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let AreaMixin = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// getArea() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return this.length * this.width;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// function mixin(...mixins) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// var base = function() &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Object.assign(base.prototype, ...mixins);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return base;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class Square extends mixin(AreaMixin, SerializableMixin) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(length) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// super();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.length = length;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.width = length;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let x = new Square(3);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(x.getArea()); // 9</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(x.serialize()); // &quot;&#123;&quot;length&quot;:3,&quot;width&quot;:3&#125;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//继承内置对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class MyArray extends Array &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 空代码块</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let colors = new MyArray();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// colors[0] = &quot;red&quot;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(colors.length); // 1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// colors.length = 0;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(colors[0]); // undefined</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Symbol.species</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class MyClass &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// static get [Symbol.species]() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return this;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// constructor(value) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// this.value = value;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// clone() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return new this.constructor[Symbol.species](this.value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class MyDerivedClass1 extends MyClass &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 空代码块</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// class MyDerivedClass2 extends MyClass &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// static get [Symbol.species]() &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return MyClass;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let instance1 = new MyDerivedClass1(&quot;foo&quot;),</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// clone1 = instance1.clone(),</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// instance2 = new MyDerivedClass2(&quot;bar&quot;),</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// clone2 = instance2.clone();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(clone1 instanceof MyClass); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(clone1 instanceof MyDerivedClass1); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(clone2 instanceof MyClass); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(clone2 instanceof MyDerivedClass2); // false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//new.target</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Rec</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">if</span>(<span class="keyword">new</span>.<span class="property">target</span>===<span class="title class_">Rec</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;abstract class&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Rec</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> rec = <span class="keyword">new</span> <span class="title class_">Rec</span>(); <span class="comment">//Uncaught Error: abstract class</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> square = <span class="keyword">new</span> <span class="title class_">Square</span>(); <span class="comment">//不会报错</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="数组新方法"><a href="#数组新方法" class="headerlink" title="数组新方法"></a>数组新方法</h2><p>在 ES6 之前创建数组主要存在两种方式： <code>Array</code> 构造器与数组字面量写法。这两种方式都需要将数组的项分别列出，并且还要受到其他限制。将“类数组对象”（即：拥有数值类型索引与长度属性的对象） 转换为数组也并不自由，经常需要书写额外的代码。为了使数组更易创建，ES6 新增了<code> Array.of()</code> 与 <code>Array.from()</code> 方法。</p><blockquote><p>Array.of()方法</p></blockquote><p>Array.of()方法会将方法的传入参数全部作为数组里的数据内容，而不管参数的数量与类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let items = Array.of(1,&#x27;2&#x27;);</span><br><span class="line">console.log(items); //Array(2)</span><br><span class="line">console.log(items.length); //2</span><br></pre></td></tr></table></figure><blockquote><p>Array.from()方法</p></blockquote><p>可使用Array.from()方法可以将类数组对象和可迭代对象转换成数组。该方法接收三个参数：</p><ol><li>待转换的可迭代对象或者类数组对象（具有数值索引和长度属性的对象）；</li><li>可选的映射函数；</li><li>指定映射函数内部的 <code>this</code> 值；</li></ol><p><strong>映射转换</strong></p><p>如果你想实行进一步的数组转换，你可以向 Array.from() 方法传递一个映射用的函数作为第二个参数。此函数会将类数组对象的每一个值转换为目标形式，并将其存储在目标数组的对应位置上。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function trans(values)&#123;</span><br><span class="line">return Array.from(arguments,item=&gt;item+1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(trans(1,2,3)); //[2, 3, 4]</span><br></pre></td></tr></table></figure><p><strong>可迭代对象上使用</strong></p><p><code>Array.from()</code> 方法不仅可用于类数组对象，也可用于可迭代对象，也就是说可以将任意包含 <code>Symbol.iterator</code> 属性的对象转换成数组，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let obj = &#123;</span><br><span class="line">*[Symbol.iterator]()&#123;</span><br><span class="line">yield 1;</span><br><span class="line">yield 2;</span><br><span class="line">yield 3;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(Array.from(obj)); //[1, 2, 3]</span><br></pre></td></tr></table></figure><h3 id="find-和findIndex-方法"><a href="#find-和findIndex-方法" class="headerlink" title="find()和findIndex()方法"></a>find()和findIndex()方法</h3><p><code> indexOf()</code>和<code>lastIndexOf()</code>方法用于查找特定值在数组中的位置，而如果需要查找在数组中满足特定条件的元素就需要使用<code>find()</code>和<code>findIndex()</code>方法。</p><p><code>find()</code> 方法和 <code>findIndex()</code> 方法均接受两个参数：一个是回调函数、一个是可选的指定回调函数中的 <code>this</code> 值。回调函数中有三个参数：</p><ol><li>数组中的数据项元素；</li><li>元素在数组中的索引位置；</li><li>数组实例对象本身；</li></ol><p>回调函数与 <code>map()</code> 和 <code>forEach()</code> 等方法的回调函数中的参数一致。例如，需要找到在数组中大于5的元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">find</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">5</span>)); <span class="comment">//8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">findIndex</span>(<span class="function"><span class="params">item</span>=&gt;</span>item&gt;<span class="number">5</span>)); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>可以看出，<code>find() </code>方法返回的是满足特定条件的数据项，而 <code>findIndex()</code> 方法返回的是满足特定条件的元素索引。</p><h3 id="fill-方法"><a href="#fill-方法" class="headerlink" title="fill()方法"></a>fill()方法</h3><p><code>fill() </code>方法能使用特定值填充数组中的一个或多个元素。当只使用一个参数的时候，该方法会用该参数的值填充整个数组。若你不想改变数组中的所有元素，而只想改变其中一部分，那么可以使用<strong>可选的起始位置参数与结束位置参数（不包括结束位置的那个元素）</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">fill</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>)); <span class="comment">//[1, 5, 1, 1]</span></span><br></pre></td></tr></table></figure><p>若只给定起始位置，不指定结束位置的话，默认结束位置为数组末尾。</p><h3 id="copyWithin-方法"><a href="#copyWithin-方法" class="headerlink" title="copyWithin()方法"></a>copyWithin()方法</h3><p><code>copyWithin()</code> 方法与 <code>fill()</code> 类似，可以一次性修改数组的多个元素。不过，与 <code>fill()</code> 使用单个值来填充数组不同， <code>copyWithin()</code> 方法允许你在数组内部复制自身元素。为此你需要传递两个参数给 <code>copyWithin()</code> 方法：从什么位置开始进行填充，以及被用来复制的数据的起始位置索引，以及可选的复制结束的位置（不包含该位置）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//copyWithin()</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">copyWithin</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>)); <span class="comment">//[1, 5, 1, 5]</span></span><br></pre></td></tr></table></figure><h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let arr = Array.of(1,5,8,9);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(arr.find(item=&gt;item&gt;5)); //8</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(arr.findIndex(item=&gt;item&gt;5)); //2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//fill()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let arr = Array.of(1,5,8,9);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(arr.fill(1,2,4)); //[1, 5, 1, 1]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //copyWithin()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(arr.copyWithin(2,0,2)); //[1, 5, 1, 5]</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let buffer = new ArrayBuffer(10);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(buffer.byteLength); //10</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let buf = buffer.slice(4,8);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(buf.byteLength); //4</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let buffer = new ArrayBuffer(2),</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// view = new DataView(buffer);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// view.setInt8(0,1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(view.getInt8(0)); //1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">Int8Array</span>(<span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">length</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">arr[<span class="number">3</span>] = <span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">3</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="类型化数组"><a href="#类型化数组" class="headerlink" title="类型化数组"></a>类型化数组</h2><p>ES6 采纳了类型化数组，将其作为语言的一个正式部分，以确保在 JS 引擎之间有更好的兼容性，并确保与 JS 数组有更好的互操作性。</p><h3 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a>数值数据类型</h3><p>JS 数值使用 IEEE 754 标准格式存储，使用 64 位来存储一个数值的浮点数表示形式，该格式在 JS 中被同时用来表示整数与浮点数；当值改变时，可能会频繁发生整数与浮点数之间的格式转换。而类型化数组则允许存储并操作八种不同的数值类型：</p><ol><li>8 位有符号整数（int8）</li><li>8 位无符号整数（uint8）</li><li>16 位有符号整数（int16）</li><li>16 位无符号整数（uint16）</li><li>32 位有符号整数（int32）</li><li>32 位无符号整数（uint32）</li><li>32 位浮点数（float32）</li><li>64 位浮点数（float64）</li></ol><p>所有与类型化数组相关的操作和对象都围绕着这八种数据类型。为了使用它们，要先创建一个数组缓冲区用于存储数据。</p><h3 id="数组缓冲区"><a href="#数组缓冲区" class="headerlink" title="数组缓冲区"></a>数组缓冲区</h3><p>数组缓冲区（array buffer） 是内存中包含一定数量字节的区域，而所有的类型化数组都基于数组缓冲区。创建数组缓冲区使用 ArrayBuffer 构造器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">byteLength</span>); <span class="comment">//10</span></span><br></pre></td></tr></table></figure><p>调用 <code>ArrayBuffer</code> 构造器时，只需要传入单个数值用于指定缓冲区包含的字节数，而本例就创建了一个 10 字节的缓冲区。当数组缓冲区被创建完毕后，你就可以通过检查 <code>byteLength</code>属性来获取缓冲区的字节数。</p><p>还可以使用<code>slice()</code>方法来创建一个包含已有缓冲区部分内容的数组缓冲区，其中<code>slice()</code>方法可以使用起始位置和结束位置（不包含结束位置）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">let</span> buf = buffer.<span class="title function_">slice</span>(<span class="number">4</span>,<span class="number">8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf.<span class="property">byteLength</span>); <span class="comment">//4</span></span><br></pre></td></tr></table></figure><p>仅仅创建一个数组缓冲器不能写入数据，是没有任何意义的。要想写入数据，需要创建视图（view）。</p><h3 id="使用视图操作数组缓冲区"><a href="#使用视图操作数组缓冲区" class="headerlink" title="使用视图操作数组缓冲区"></a>使用视图操作数组缓冲区</h3><p>数组缓冲区代表了一块内存区域，而视图（views） 则是你操作这块区域的接口。视图工作在数组缓冲区或其子集上，可以读写某种数值数据类型的数据。 DataView 类型是数组缓冲区的通用视图，允许你对前述所有八种数值数据类型进行操作。</p><p>创建视图，需要使用 DataView() 构造器，可以指定可选参数-字节偏移量以及所要包含的字节数。如果不指定所要包含的字节数，则默认为从字节偏移量直到数组缓冲区的末尾。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jslet buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">10</span>),</span><br><span class="line">view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer, <span class="number">5</span>, <span class="number">2</span>);js</span><br></pre></td></tr></table></figure><p>此例中的 <code>view</code> 只能使用索引值为 5 与 6 的字节。使用这种方式，你可以在同一个数组缓冲区上创建多个不同的视图，这样有助于将单块内存区域供给整个应用使用，而不必每次在有需要时才动态分配内存。</p><blockquote><p>获取视图信息</p></blockquote><p>可以通过视图的可读属性来获取视图的信息：</p><ul><li>buffer ：该视图所绑定的数组缓冲区；</li><li>byteOffset ：传给 DataView 构造器的第二个参数，如果当时提供了的话（默认值为0）;</li><li>byteLength ：传给 DataView 构造器的第三个参数，如果当时提供了的话（默认值为该缓冲区的 byteLength 属性。</li></ul><blockquote><p>读取或写入数据</p></blockquote><p>对应于 JS 所有八种数值数据类型， <code>DataView</code> 视图的原型分别提供了在数组缓冲区上写入数据的一个方法、以及读取数据的一个方法。所有方法名都以“set”或“get”开始，其后跟随着对应数据类型的缩写。下面列出了能够操作 <code>int8</code> 或 <code>uint8</code> 类型的读取/写入方法：</p><ul><li>getInt8(byteOffset, littleEndian) ：从 byteOffset 处开始读取一个 int8 值；</li><li>setInt8(byteOffset, value, littleEndian) ：从 byteOffset 处开始写入一个 int8 值；</li><li>getUint8(byteOffset, littleEndian) ：从 byteOffset 处开始读取一个无符号 int8 值；</li><li>setUint8(byteOffset, value, littleEndian) ：从 byteOffset 处开始写入一个无符号int8 值。</li></ul><p>get”方法接受两个参数：开始进行读取的字节偏移量、以及一个可选的布尔值，后者用于指定读取的值是否采用低字节优先方式（注：默认值为 false ） 。“set”方法则接受三个参数：开始进行写入的字节偏移量、需要写入的数据值、以及一个可选的布尔值用于指定是否采用低字节优先方式存储数据。</p><p><strong>如果针对的是16位或者32位整数的话，只需要将上面的方法中的8，相应的改变成16或者32，就可以操作16位或者32值。</strong></p><p><strong>操作浮点数，提供了下面这些方法：</strong></p><ul><li>getFloat32(byteOffset, littleEndian) ：从 byteOffset 处开始读取一个 32 位的浮点数；</li><li>setFloat32(byteOffset, value, littleEndian) ：从 byteOffset 处开始写入一个 32 位的浮点数；</li><li>getFloat64(byteOffset, littleEndian) ：从 byteOffset 处开始读取一个 64 位的浮点数；</li><li>setFloat64(byteOffset, value, littleEndian) ：从 byteOffset 处开始写入一个 64 位的浮点数；</li></ul><p>例如使用上述这些视图上的方法来进行操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(<span class="number">2</span>),</span><br><span class="line">view = <span class="keyword">new</span> <span class="title class_">DataView</span>(buffer);</span><br><span class="line"></span><br><span class="line">view.<span class="title function_">setInt8</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(view.<span class="title function_">getInt8</span>(<span class="number">0</span>)); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h3 id="类型化数组就是视图"><a href="#类型化数组就是视图" class="headerlink" title="类型化数组就是视图"></a>类型化数组就是视图</h3><p>ES6 的类型化数组实际上也是针对数组缓冲区的特定类型视图，你可以使用这些数组对象来处理特定的数据类型，而不必使用通用的 DataView 对象。一共存在八种特定类型视图，对应着八种数值数据类型。类型化数组的构造器有：Int8Array、Uint8Array、Uint8ClampedArray、Int16Array、Uint16Array、Int32Array、Uint32Array、Float32Array、Float64Array。</p><blockquote><p>创建特定类型视图</p></blockquote><p>创建特定类型视图有三种方式：</p><ol><li><p>第一种方式是使用与创建 DataView 时相同的参数，即：一个数组缓冲区、一个可选的字节偏移量、以及一个可选的字节数量；</p></li><li><p>第二种方式是传递单个数值给类型化数组的构造器，此数值表示该数组包含的元素数量（而不是分配的字节数） 。构造器将会创建一个新的缓冲区，分配正确的字节数以便容纳指定数量的数组元素，而你也可以使用 length 属性来获取这个元素数量；</p></li><li><p>第三种方式是向构造器传递单个对象参数，可以是下列四种对象之一：</p><ol><li>类型化数组：数组所有元素都会被复制到新的类型化数组中。例如，如果你传递一个 int8类型的数组给 Int16Array 构造器，这些 int8 的值会被复制到 int16 数组中。新的类型化数组与原先的类型化数组会使用不同的数组缓冲区。</li><li>可迭代对象：该对象的迭代器会被调用以便将数据插入到类型化数组中。如果其中包含了不匹配视图类型的值，那么构造器就会抛出错误。</li><li>数组：该数组的元素会被插入到新的类型化数组中。如果其中包含了不匹配视图类型的值，那么构造器就会抛出错误。</li><li>类数组对象：与传入数组的表现一致。</li></ol><p>//第一种方式<br>let buffer = new ArrayBuffer(10),<br>view1 = new Int8Array(buffer),<br>view2 = new Int8Array(buffer, 5, 2);</p><p>//第二种方式<br>let ints = new Int16Array(2),<br>floats = new Float32Array(5);</p><p>//第三种方式<br>let ints1 = new Int16Array([25, 50]),<br>ints2 = new Int32Array(ints1);</p></li></ol><h3 id="类型化数组与常规数组的相似点"><a href="#类型化数组与常规数组的相似点" class="headerlink" title="类型化数组与常规数组的相似点"></a>类型化数组与常规数组的相似点</h3><p>类型化数组在很多场景中都可以像常规数组那样被使用。例如，你可以使用 length 属性来获取类型化数组包含的元素数量，还可以使用数值类型的索引值来直接访问类型化数组的元素。它们二者具有的相似点：</p><blockquote><ol><li>公共方法</li></ol></blockquote><p>类型化数组拥有大量与常规数组等效的方法：</p><ul><li>copyWithin()</li><li>entries()</li><li>fill()</li><li>filter()</li><li>find()</li><li>findIndex()</li><li>forEach()</li><li>indexOf()</li><li>join()</li><li>keys()</li><li>lastIndexOf()</li><li>map()</li><li>reduce()</li><li>reduceRight()</li><li>reverse()</li><li>slice()</li><li>some()</li><li>sort()</li><li>values()</li></ul><blockquote><p>相同的迭代器</p></blockquote><p>与常规数组相同，类型化数组也拥有三个迭代器，它们是 <code>entries()</code> 方法、 <code>keys() </code>方法与<code>values()</code> 方法。这就意味着你可以对类型化数组使用扩展运算符，或者对其使用 <code>for-of</code> 循环，就像对待常规数组。</p><blockquote><p>of()和from()方法</p></blockquote><p>所有的类型化数组都包含静态的<code> of()</code> 与 <code>from()</code> 方法，作用类似于 <code>Array.of()</code> 与<code>Array.from()</code> 方法。其中的区别是类型化数组的版本会返回类型化数组，而不返回常规数组。</p><h3 id="类型化数组与常规数组的差异"><a href="#类型化数组与常规数组的差异" class="headerlink" title="类型化数组与常规数组的差异"></a>类型化数组与常规数组的差异</h3><p>二者最重要的区别就是类型化数组并不是常规数组，类型化数组并不是从 Array 对象派生的，使用 <code>Array.isArray()</code> 去检测会返回 <code>false</code> 。</p><blockquote><p>行为差异</p></blockquote><p>常规数组可以被伸展或是收缩，然而类型化数组却会<strong>始终保持自身大小不变</strong>。你可以对常规数组一个不存在的索引位置进行赋值，但在类型化数组上这么做则会被忽略。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="title class_">Int16Array</span>([<span class="number">25</span>, <span class="number">50</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints[<span class="number">0</span>]); <span class="comment">// 25</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints[<span class="number">1</span>]); <span class="comment">// 50</span></span><br><span class="line">ints[<span class="number">2</span>] = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints[<span class="number">2</span>]); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>在本例中，尽管对索引值 2 的位置进行了赋值为 5 的操作，但 ints 数组却完全没有被伸展，数组的长度属性保持不变，所赋的值也被丢弃了。</p><p><strong>类型化数组也会对数据类型进行检查以保证只使用有效的值，当无效的值被传入时，将会被替换为 0</strong> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="title class_">Int16Array</span>([<span class="string">&quot;hi&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints.<span class="property">length</span>); <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints[<span class="number">0</span>]); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>这段代码试图用字符串值 “hi” 创建一个 Int16Array ，而字符串对于类型化数组来说当然是无效的值，因此该字符串被替换为 0 并插入数组。此数组的长度仅仅是 1 ，而 ints[0]只包含了 0 这个值。</p><p><strong>所有在类型化数组上修改项目值的方法都会受到相同的限制，例如当 map() 方法使用的映射函数返回一个无效值的时候，类型化数组会使用 0 来代替返回值</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="title class_">Int16Array</span>([<span class="number">25</span>, <span class="number">50</span>]),</span><br><span class="line">mapped = ints.<span class="title function_">map</span>(<span class="function"><span class="params">v</span> =&gt;</span> <span class="string">&quot;hi&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped.<span class="property">length</span>); <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped[<span class="number">0</span>]); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped[<span class="number">1</span>]); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped <span class="keyword">instanceof</span> <span class="title class_">Int16Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapped <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>由于字符串值 “hi” 并不是一个 16 位整数，它在结果数组中就被替换成为 0 。</p><blockquote><p>遗漏的方法</p></blockquote><p>尽管类型化数组拥有常规数组的很多同名方法，但仍然缺少了几个数组方法，包括下列这些：</p><ul><li>concat()</li><li>pop()</li><li>push()</li><li>shift()</li><li>splice()</li><li>unshift()</li></ul><blockquote><p>附加的方法</p></blockquote><p>类型化数组还有两个常规数组所不具备的方法： <code>set()</code> 方法与 <code>subarray()</code> 方法。这两个方法作用相反： <code>set()</code> 方法从另一个数组中复制元素到当前的类型化数组，而 <code>subarray()</code> 方法则是将当前类型化数组的一部分提取为新的类型化数组。</p><p>**set() 方法接受一个数组参数（无论是类型化的还是常规的） 、以及一个可选的偏移量参数，后者指示了从什么位置开始插入数据（默认值为 0 ） **。数组参数中的数据会被复制到目标类型化数组中，并会确保数据值有效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="title class_">Int16Array</span>(<span class="number">4</span>);</span><br><span class="line">ints.<span class="title function_">set</span>([<span class="number">25</span>, <span class="number">50</span>]);</span><br><span class="line">ints.<span class="title function_">set</span>([<span class="number">75</span>, <span class="number">100</span>], <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ints.<span class="title function_">toString</span>()); <span class="comment">// 25,50,75,100</span></span><br></pre></td></tr></table></figure><p>这段代码创建了一个包含四个元素的 <code>Int16Array</code> ；第一次调用 <code>set()</code> 复制了两个值到数组起始的两个位置；而第二次调用<code> set()</code> 则使用了一个值为 2 的偏移量参数，指明应当从数组的第三个位置（索引 2 ） 开始放置所复制的数据。</p><p><code>subarray()</code> 方法接受一个可选的开始位置索引参数、以及一个可选的结束位置索引参数（像<code>slice()</code> 方法一样，结束位置的元素不会被包含在结果中） ，并会返回一个新的类型化数组。你可以同时省略这两个参数，从而创建原类型化数组的一个复制品。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ints = <span class="keyword">new</span> <span class="title class_">Int16Array</span>([<span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>]),</span><br><span class="line">subints1 = ints.<span class="title function_">subarray</span>(),</span><br><span class="line">subints2 = ints.<span class="title function_">subarray</span>(<span class="number">2</span>),</span><br><span class="line">subints3 = ints.<span class="title function_">subarray</span>(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subints1.<span class="title function_">toString</span>()); <span class="comment">// 25,50,75,100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subints2.<span class="title function_">toString</span>()); <span class="comment">// 75,100</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(subints3.<span class="title function_">toString</span>()); <span class="comment">// 50,75</span></span><br></pre></td></tr></table></figure><p>本例中利用 <code>ints</code> 数组创建了三个类型化数组。 <code>subints1</code> 数组是 <code>ints</code> 的一个复制品，包含了原数组的所有信息；而 <code>subints2</code> 则从原数组的索引 2 位置开始复制，因此包含了原数组的最末两个元素（即 75 与 100 ） ；最后的 <code>subints3</code> 数组值包含了原数组的中间两个元素，因为调用 <code>subarray()</code> 时同时使用了起始位置与结束位置参数。</p><h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><ol><li>ES6 延续了 ES5 的工作以便让数组更加有用。新增了两种创建数组的方式： Array.of() 方法、以及 Array.from() 方法，其中后者可以将可迭代对象或类数组对象转换为正规数组；</li><li>fill() 方法与 copyWithin() 方法允许你替换数组内的元素。 find() 方法与 findIndex() 方法在数组中查找满足特定条件的元素时会非常有用，其中前者会返回满足条件的第一个元素，而后者会返回该元素的索引位置；</li><li>类型化数组并不是严格的数组，它们并没有继承 Array 对象，但它们的外观和行为都与数组有许多相似点。类型化数组包含的数据类型是八种数值数据类型之一，基于数组缓冲区对象建立，用于表示按位存储的一个数值或一系列数值。类型化数组能够明显提升按位运算的性能，因为它不像 JS 的常规数值类型那样需要频繁进行格式转换。</li></ol><h2 id="Promise基础"><a href="#Promise基础" class="headerlink" title="Promise基础"></a>Promise基础</h2><blockquote><p>什么是回调地狱？</p></blockquote><p>当使用回调函数来进行事件处理的时候，如果嵌套多层回调函数的时候，就会出现回调地狱，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">method1</span>(<span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">method2</span>(<span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">method3</span>(<span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">method4</span>(<span class="keyword">function</span>(<span class="params">err, result</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (err) &#123;</span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">method5</span>(result);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>像本例一样嵌套多个方法调用会创建错综复杂的代码，会难以理解与调试。当想要实现更复<br>杂的功能时，回调函数也会存在问题。要是你想让两个异步操作并行运行，并且在它们都结<br>束后提醒你，那该怎么做？要是你想同时启动两个异步操作，但只采用首个结束的结果，那<br>又该怎么做？而使用Promise就能避免回调地狱的情况。</p><p>Promise可以当做是一个占位符，表示异步操作的执行结果。函数可以返回一个Promise，而不必订阅一个事件或者向函数传递一个回调函数。</p><blockquote><p>Promise的生命周期</p></blockquote><p>每个 Promise 都会经历一个短暂的生命周期，初始为挂起状态（pending state） ，这表示异步操作尚未结束。一个挂起的 Promise 也被认为是未决的（unsettled )。一旦异步操作结束， Promise就会被认为是已决的（settled ） ，并进入两种可能状态之一：</p><ol><li><strong>已完成（fulfilled ）</strong> ： Promise 的异步操作已成功结束；</li><li><strong>已拒绝（rejected ）</strong> ： Promise 的异步操作未成功结束，可能是一个错误，或由其他原因导致。</li></ol><p>内部的<code> [[PromiseState]]</code> 属性会被设置为<code> &quot;pending&quot;</code> 、 <code>&quot;fulfilled&quot;</code> 或 “rejected”<code>，以反映</code>Promise<code> 的状态。该属性并未在 Promise 对象上被暴露出来，</code>因此你无法以编程方式判断 <code>Promise</code> 到底处于哪种状态。不过你可以使用<code>then()</code>方法在 Promise 的状态改变时执行一些特定操作。</p><ol><li><p><strong>then()方法</strong></p><p><code>then() </code>方法在所有的 Promise 上都存在，并且接受两个参数。第一个参数是 Promise 被完成时要调用的函数，异步操作的结果数据都会被传入这个完成函数。第二个参数则是 Promise 被拒绝时要调用的函数，与完成函数相似，拒绝函数会被传入与拒绝相关联的任何附加数据。then()方法的两个参数是可选的，因此可以自由组合监听完成和失败的处理函数；</p></li><li><p><strong>catch()方法</strong></p><p>Promise有catch()方法，等同于只传递拒绝处理函数给then()方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">promise.catch(function(err) &#123;</span><br><span class="line">// 拒绝</span><br><span class="line">console.error(err.message);</span><br><span class="line">&#125;);</span><br><span class="line">// 等同于：</span><br><span class="line">promise.then(null, function(err) &#123;</span><br><span class="line">// 拒绝</span><br><span class="line">console.error(err.message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>创建未决的Promise</p></blockquote><p>使用Promise构造器可以创建一个Promise实例，此构造器接收一个参数：一个被称之为执行器（excutor）的函数，该函数包含了<code>resolve()</code>函数和<code>reject()</code>函数这两个参数。<code>resolve()</code>函数在异步任务执行成功时调用，而<code>reject()</code>函数在异步任务执行失败时调用。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve,reject)&#123;</span><br><span class="line">console.log(&#x27;hi, promise&#x27;);</span><br><span class="line">resolve();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(()=&gt;&#123;</span><br><span class="line">console.log(&#x27;hi, then&#x27;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&#x27;hi&#x27;);</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">hi, promise</span><br><span class="line">hi</span><br><span class="line">hi then</span><br></pre></td></tr></table></figure><p>从输出结果可以看出，Promise构造器中的代码是最先执行的，而<code>then()</code>代码是最后执行的，这是因为只有在Promise中的处理器函数执行结束之后，then()方法中的完成处理函数或者拒绝处理函数才会添加到作业队列的尾部。</p><blockquote><p>创建已决的Promise</p></blockquote><ol><li>使用<code>Promise.resolve()</code></li></ol><p><code>Promise.resolve()</code>方法接收一个参数，并会返回一个处于已完成状态的 <code>Promise</code> ，在<code>then()</code>方法中使用完成处理函数才能提取该完成态的<code>Promise</code>传递的值，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let promise = Promise.resolve(&#x27;hi&#x27;);</span><br><span class="line">promise.then((value)=&gt;&#123;</span><br><span class="line">console.log(value); //hi</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用Promise.reject()</li></ol><p>可以使用<code>Promise.reject()</code>方法来创建一个已拒绝状态的<code>Promise</code>，同样只有在拒绝处理函数中或者<code>catch()</code>方法中才能接受<code>reject()</code>方法传递的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let reject = Promise.reject(&#x27;reject&#x27;);</span><br><span class="line"></span><br><span class="line">reject.catch((value)=&gt;&#123;</span><br><span class="line">console.log(value); //reject</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>非Promise的thenable</p></blockquote><p>当一个对象拥有一个能接受<code>resolve</code>与<code>reject</code>参数的<code>then()</code>方法时，该对象就会被认为是一个非<code>Promise</code>的<code>thenable</code>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let thenable = &#123;</span><br><span class="line"></span><br><span class="line">then:function(resolve,reject)&#123;</span><br><span class="line">resolve(&#x27;hi&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Promise.resolve()</code>与<code>Promise.reject()</code>方法都能够接受非Promise的thenable作为参数，当传入了非Promise的thenable时，这些方法会创建一个新的Promise，并且可以使用then()方法对不同状态进行操作：</p><p>创建一个已完成的Promise</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let thenable = &#123;</span><br><span class="line"></span><br><span class="line">then:function(resolve,reject)&#123;</span><br><span class="line">resolve(&#x27;hi&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let promise = Promise.resolve(thenable);</span><br><span class="line">promise.then((value)=&gt;&#123;</span><br><span class="line">console.log(value); //hi</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>同样利用thenable可以创建一个已拒绝的Promise:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let thenable = &#123;</span><br><span class="line"></span><br><span class="line">then:function(resolve,reject)&#123;</span><br><span class="line">reject(&#x27;hi&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let promise = Promise.resolve(thenable);</span><br><span class="line">promise.then(null,(value)=&gt;&#123;</span><br><span class="line">console.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>执行器错误</p></blockquote><p>当执行器内部抛出错误，那么Promise的拒绝处理函数就会被调用，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let promise = new Promise(function(resolve,reject)&#123;</span><br><span class="line">throw new Error(&#x27;Error!&#x27;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise.catch(function(msg)&#123;</span><br><span class="line">console.log(msg); //error</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise链"><a href="#Promise链" class="headerlink" title="Promise链"></a>Promise链</h3><p>除了使用单个Promise外，多个Promise可以进行级联使用，实际上<code>then()</code>方法或者<code>catch()</code>方法会返回一个新的Promise，仅当前一个Promise被决议之后，后一个Promise才会进行处理。</p><blockquote><p>串联Promise</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Error!&#x27;</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>可以看出当p1的<code>then()</code>方法执行结束后会返回一个Promise，因此，在此基础上可以继续执行<code>catch()</code>方法。同时，<strong>Promise链允许捕获前一个Promise的错误</strong>。</p><blockquote><p>Promise链中传递值</p></blockquote><p><strong>Promise链的另一个重要方面是能从一个Promise传递数据给另一个Promise的能力。</strong>前一个Promise的完成处理函数的返回值，传递到下一个Promise中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise链传递值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>value+<span class="number">1</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>p1的完成处理函数返回了<code>value+1</code>，也就是<code>2</code>，会传入到下一个Promise的完成处理函数，因此，第二个<code>then()</code>方法中的完成处理函数就会输出<code>2</code>。拒绝处理函数同样可以被用于在Promise链中传递数据。</p><blockquote><p>Promise链中传递Promise</p></blockquote><p>在完成或者拒绝处理函数中可以返回基本类型值，从而可以在Promise链中传递。另外，在Promise链中也可以传递对象，如果传递的是Promise对象，就需要额外的处理：</p><p><strong>传递已完成状态的Promise</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line"><span class="keyword">return</span> p2;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line">输出：<span class="number">1</span>  <span class="number">2</span></span><br></pre></td></tr></table></figure><p>p1中返回了Promise对象<code>p2</code>，当<code>p2</code>完成时，才会调用第二个<code>then()</code>方法，将值<code>value</code>传到完成处理函数中。若<code>Promise</code>对象<code>p2</code>被拒绝后，第二个<code>then()</code>方法中的完成处理函数就不会执行，只能通过拒绝处理函数才能接收到p2传递的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">reject</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line"><span class="keyword">return</span> p2;</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="响应多个Promise"><a href="#响应多个Promise" class="headerlink" title="响应多个Promise"></a>响应多个Promise</h3><p>如果想监视多个Promise的状态，从而决定下一步动作，可以使用ES6提供的两个方法：<code>Promise.all()</code>和<code>Promise.race()</code>；</p><blockquote><p>Promise.all()</p></blockquote><p>Promise.all()方法能接受单个可迭代对象（如数组）作为参数，可迭代对象的元素都是Promise。该方法会返回一个Promise，只有传入所有的Promise都已完成，所返回的Promise才会完成，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">js<span class="comment">//Promise.all()</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]);</span><br><span class="line">p4.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//[1,2,3]</span></span><br><span class="line">&#125;)js</span><br></pre></td></tr></table></figure><p>对 <code>Promise.all()</code> 的调用创建了新的<code>Promise p4 </code>，在 <code>p1</code> 、 <code>p2</code> 与 <code>p3</code> 都被完成后， <code>p4</code> 最终会也被完成。传递给 <code>p4</code> 的完成处理函数的结果是一个包含每个决议值（1 、 2 与 3 ） 的数组，这些值的存储顺序保持了待决议的 <code>Promise</code> 的顺序（与完成的先后顺序无关） ，因此你可以将结果匹配到每个<code>Promise</code>。</p><p><strong>若传递给<code> Promise.all()</code> 的某个 Promise 被拒绝了，那么方法所返回的 Promise 就会立刻被拒绝，而不必等待其他的 Promise 结束</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise.all()</span></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">reject</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3]);</span><br><span class="line">p4.<span class="title function_">catch</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)); <span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在此例中， p2 被使用数值 2 进行了拒绝，则 p4 的拒绝处理函数就立刻被调用，而不会<br>等待 p1 或 p3 结束执行（它们仍然会各自结束执行，只是 p4 不等它们） 。</p><p><strong>拒绝处理函数总会接受到单个值，而不是一个数组。该值是被拒绝的Promise所返回的拒绝值。</strong></p><blockquote><p>Promise.race()</p></blockquote><p><code>Promise.race()</code>方法接收一个元素是Promise的可迭代对象，并返回一个新的Promise。一旦传入<code>Promise.race()</code>的可迭代对象中有一个Promise是已决状态，那么返回的Promise对象就会立刻成为已决状态。</p><p>而<code>Promise.all()</code>方法得必须等到所有传入的Promise全部变为已决状态，所返回的Promise才会已决。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">3</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3]);</span><br><span class="line">p4.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(value)); <span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">//1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Promise.race() 方法传入的Promise中哪一个Promise先变成已完成状态，就会将值传递给所返回的Promise对象的完成处理函数中。若哪一个Promise最先变成已拒绝状态，同样的，会将值传递给<code>p4</code>的拒绝处理函数中。</p><h3 id="继承Promise"><a href="#继承Promise" class="headerlink" title="继承Promise"></a>继承Promise</h3><p>可以继承Promise实现自定义的Promise，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Promise</span> &#123;</span><br><span class="line"><span class="comment">// 使用默认构造器</span></span><br><span class="line"><span class="title function_">success</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(resolve, reject);</span><br><span class="line">&#125; </span><br><span class="line"><span class="title function_">failure</span>(<span class="params">reject</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">catch</span>(reject);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line"><span class="title function_">resolve</span>(<span class="number">42</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.<span class="title function_">success</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 42</span></span><br><span class="line">&#125;).<span class="title function_">failure</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在此例中， MyPromise 从 Promise 上派生出来，并拥有两个附加方法。 <code>success()</code> 方法模拟了 <code>resolve()</code> ， <code>failure()</code> 方法则模拟了 <code>reject()</code> 。</p><h3 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3><ol><li>Promise 具有三种状态：挂起、已完成、已拒绝。一个 <code>Promise</code> 起始于挂起态，并在成功时转为完成态，或在失败时转为拒绝态。 <code>then()</code> 方法允许你绑定完成处理函数与拒绝处理函数，而 <code>catch()</code> 方法则只允许你绑定拒绝处理函数；</li><li>能够将多个Promise串联起来组成Promise链，并且能够在中间传递值，甚至是传递Promise对象。 then() 的调用都创建并返回了一个新的 Promise ，只有在前一个 Promise 被决议过，新 Promise 也会被决议。 同时也可以使用Promise.all()和Promise.race()方法来管理多个Promise。</li></ol><h3 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//创建未决的Promise</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let promise = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;hi, promise&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// promise.then(()=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;hi, then&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;hi&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//创建已决的Promise</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let promise = Promise.resolve(&#x27;hi&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// promise.then((value)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let reject = Promise.reject(&#x27;reject&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// reject.catch((value)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//非Promise的thenable</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let thenable = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// then:function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// reject(&#x27;hi&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let promise = Promise.resolve(thenable);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// promise.then(null,(value)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//执行器错误</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let promise = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;Error!&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// promise.catch(function(msg)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(msg);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//串联Promise</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p1 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(&#x27;hi&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// p1.then((value)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;Error!&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;).catch(function(error)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(error);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //Promise链传递值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p1 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// p1.then(value=&gt;value+1)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// .then(value=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//Promise链中传递Promise对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p1 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p2 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// reject(2);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// p1.then(value=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return p2;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;).catch(value=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //Promise.all()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p1 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p2 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// reject(2);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p3 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(3);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p4 = Promise.all([p1,p2,p3]);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// p4.catch(value=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Array.isArray(value)); //true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value); //2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//Promise.race()</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p1 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(1);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p2 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(2);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p3 = new Promise(function(resolve,reject)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// resolve(3);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let p4 = Promise.race([p1,p2,p3]);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// p4.then(value=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Array.isArray(value)); //false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(value); //1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//继承Promise</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">MyPromise</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Promise</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 使用默认构造器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">success</span>(<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(resolve, reject);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">failure</span>(<span class="params">reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">catch</span>(reject);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">resolve</span>(<span class="number">42</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">promise.<span class="title function_">success</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 42</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;).<span class="title function_">failure</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="代理和反射"><a href="#代理和反射" class="headerlink" title="代理和反射"></a>代理和反射</h2><blockquote><p>代理是什么？</p></blockquote><p>通过调用 <code>new Proxy()</code> ，你可以创建一个代理用来替代另一个对象（被称之为目目标对象） ，这个代理对目标对象进行了虚拟，因此该代理与该目标对象表面上可以被当作同一个对象来对待。</p><p>代理允许你拦截目标对象上的底层操作，而这本来是JS引擎的内部能力，拦截行为适用了一个能响应特定操作的函数（被称之为陷阱）；</p><blockquote><p>反射是什么？</p></blockquote><p>被<code>Reflect</code>对象所代表的反射接口，<strong>是给底层操作提供默认行为的方法的集合，这些操作是能够被代理重写的</strong>。每个代理陷阱都有一个对应的反射方法，每个方法都与对应的陷阱函数同名，并且接收的参数也与之一致。</p><blockquote><p>创建一个简单的代理</p></blockquote><p>使用Proxy构建可以创建一个简单的代理对象，需要传递两个参数：<strong>目标对象以及一个处理器，后者是定义一个或多个陷阱函数的对象</strong>。如果不定义陷阱函数，则依然使用目标对象的默认行为。</p><h3 id="常用陷阱函数"><a href="#常用陷阱函数" class="headerlink" title="常用陷阱函数"></a>常用陷阱函数</h3><h3 id="基本陷阱函数"><a href="#基本陷阱函数" class="headerlink" title="基本陷阱函数"></a>基本陷阱函数</h3><p><strong>1.使用Set陷阱函数验证属性值</strong></p><p>假如有这样一个场景，必须要求对象的属性值必须只能是数值，这就意味着该对象每个新增属性时都要被验证，并且在属性不为数值属性时就应该抛出错误。因此就需要使用<code>set</code>陷阱函数来重写<code>set</code>函数的默认行为，<code>set</code>陷阱函数接收四个参数：</p><ol><li>trapTarget：代理的目标对象；</li><li>key：需要写入的属性的键；</li><li>value：被写入属性的值；</li><li>receiver：操作发生的对象（通常是代理对象）</li></ol><p><code>Reflect.set()</code>是<code>set</code>陷阱函数对应的反射方法，同时也是<code>set</code>操作的默认行为，<code>Reflect.set()</code>方法与<code>set</code>陷阱函数一样，能够接受四个参数。</p><p>针对上述场景，示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//set陷阱函数</span><br><span class="line">let target = &#123;</span><br><span class="line">name:&#x27;target&#x27;</span><br><span class="line">&#125;</span><br><span class="line">let proxy = new Proxy(target,&#123;</span><br><span class="line">set(tarpTarget,key,value,receiver)&#123;</span><br><span class="line"></span><br><span class="line">if(!tarpTarget.hasOwnProperty(key))&#123;</span><br><span class="line">if(isNaN(value))&#123;</span><br><span class="line">throw new Error(&#x27;property must be number&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return Reflect.set(tarpTarget,key,value,receiver);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.msg=&#x27;hello proxy&#x27;; //Uncaught Error: property must be number</span><br></pre></td></tr></table></figure><p>通过set陷阱函数就可以检测设置属性时属性值的类型，当属性值不是数字时，就会抛出错误。</p><p><strong>2.使用get陷阱函数进行对象外形验证</strong></p><p><strong>对象外形（Object Shape）指的是对象已有的属性与方法的集合。</strong>能够使用代理很方便进行对象外形验证。由于使用属性验证只需要在读取属性时被触发，因此只需要使用<code>get陷阱函数</code>。该函数接受三个参数：</p><ol><li>trapTarget：代理的目标对象；</li><li>key：需要读取的属性的键；</li><li>receiver：操作发生的对象（通常是代理对象）；</li></ol><p>相应的<code>Reflect.get()</code>方法同样拥有这三个参数。进行对象外形验证的示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//get陷阱函数</span><br><span class="line"></span><br><span class="line">let target=&#123;</span><br><span class="line">name:&#x27;hello world&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let proxy = new Proxy(target,&#123;</span><br><span class="line">get(tarpTarget,key,receiver)&#123;</span><br><span class="line">if(!(key in tarpTarget))&#123;</span><br><span class="line">throw new Error(&#x27;不存在该对象&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">return Reflect.get(tarpTarget,key,receiver);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(proxy.name); //hello world</span><br><span class="line">console.log(proxy.age); // Uncaught Error: 不存在该对象</span><br></pre></td></tr></table></figure><p>使用<code>get陷阱函数</code>进行对象外形验证，由于<code>target</code>对象存在<code>name</code>属性，所以可以正常返回，当获取<code>age</code>属性时，由于该属性并不存在，所以会抛出错误。</p><p><strong>3.使用has陷阱函数隐藏属性</strong></p><p><code>in </code>运算符用于判断指定对象中是否存在某个属性，如果对象的属性名与指定的字符串或符号值相匹配，那么<code>in</code>运算符就会返回<code>true</code>。无论该属性是对象自身的属性还是其原型的属性。</p><p><code>has陷阱函数</code>会在使用<code>in</code>运算符的情况下被调用，控制in运算符返回不同的结果，<code>has陷阱函数</code>会传入两个参数：</p><ol><li>trapTarget：代理的目标对象；</li><li>key：属性键；</li></ol><p><code>Reflect.has()</code>方法接收相同的参数，并向<code>in</code>运算符返回默认的响应结果，用于返回默认响应结果。</p><p>例如想要隐藏value属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//has陷阱函数</span><br><span class="line">let target = &#123;</span><br><span class="line">value:&#x27;hello world&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let proxy = new Proxy(target,&#123;</span><br><span class="line">has(tarpTarget,key)&#123;</span><br><span class="line">if(Object.is(key,&#x27;value&#x27;))&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">Reflect.has(tarpTarget,key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(&#x27;value&#x27; in proxy); //false</span><br></pre></td></tr></table></figure><p>使用<code>has陷阱函数</code>，能够控制<code>in</code>运算符的结果，<code>value</code>属性在<code>target对象</code>中存在，通过代理的<code>has陷阱函数</code>使得在检查<code>value</code>属性时返回<code>false</code>，达到隐藏属性的效果。</p><p><strong>4.使用deleteProperty陷阱函数避免属性被删除</strong></p><p><code>deleteProperty</code> 陷阱函数会在使用<code>delete</code> 运算符删除对象属性时被调用，该方法接收两个参数：</p><ol><li>trapTarget：代理的目标对象；</li><li>key：需要删除的键；</li></ol><p><code>Reflect.deleteProperty()</code> 方法也接受这两个参数，并提供了 <code>deleteProperty</code> 陷阱函数的默认实现。你可以结合 <code>Reflect.deleteProperty() </code>方法以及 <code>deleteProperty</code> 陷阱函数，来修改 <code>delete</code> 运算符的行为。例如，能确保 value 属性不被删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">let target = &#123;</span><br><span class="line">name: &quot;target&quot;,</span><br><span class="line">value: 42</span><br><span class="line">&#125;;</span><br><span class="line">let proxy = new Proxy(target, &#123;</span><br><span class="line">deleteProperty(trapTarget, key) &#123;</span><br><span class="line">if (key === &quot;value&quot;) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return Reflect.deleteProperty(trapTarget, key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">// 尝试删除 proxy.value</span><br><span class="line">console.log(&quot;value&quot; in proxy); // true</span><br><span class="line">let result1 = delete proxy.value;</span><br><span class="line">console.log(result1); // false</span><br></pre></td></tr></table></figure><h3 id="原型代理上的陷阱函数"><a href="#原型代理上的陷阱函数" class="headerlink" title="原型代理上的陷阱函数"></a>原型代理上的陷阱函数</h3><p>在调用Object.setPrototypeOf()和getPrototypeOf()方法时，可以使用<code>setPrototypeOf</code>和<code>getPrototypeOf</code>陷阱函数来影响Object上相应的两个方法的效果。setPrototypeOf陷阱函数接收两个参数：</p><ol><li>trapTarget：代理的目标对象；</li><li>proto：需要被用作原型的对象；</li></ol><p><code>setPrototypeOf()</code>方法与<code>Reflect.setPrototypeOf()</code>传入相同的参数。另外，getPrototypeOf陷阱函数只接收<code>trapTarget</code>参数，<code>Reflect.getPrototype</code>也只接收一个参数。</p><p>例如，通过返回 null 隐藏了代理对象的原型，并且使得该原型不可被修改：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//原型代理上的陷阱函数</span><br><span class="line"></span><br><span class="line">let target = &#123;&#125;;</span><br><span class="line">let proxy = new Proxy(target, &#123;</span><br><span class="line">getPrototypeOf(trapTarget) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;,</span><br><span class="line">setPrototypeOf(trapTarget, proto) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">let targetProto = Object.getPrototypeOf(target);</span><br><span class="line">let proxyProto = Object.getPrototypeOf(proxy);</span><br><span class="line">console.log(targetProto === Object.prototype); // true</span><br><span class="line">console.log(proxyProto === Object.prototype); // false</span><br><span class="line">console.log(proxyProto); // null</span><br><span class="line">// 成功</span><br><span class="line">Object.setPrototypeOf(target, &#123;&#125;);</span><br><span class="line">// 抛出错误</span><br><span class="line">Object.setPrototypeOf(proxy, &#123;&#125;);</span><br></pre></td></tr></table></figure><p>使用 <code>target</code> 对象作为参数调用<code>Object.getPrototypeOf()</code> 会返回一个对象值；而使用 proxy 对象调用该方法则会返回<code>null</code> ，因为 <code>getPrototypeOf</code> 陷阱函数被调用了。类似的，使用 target 去调用<code>Object.setPrototypeOf()</code> 会成功；而由于 <code>setPrototypeOf</code> 陷阱函数的存在，使用 <code>proxy</code>则会引发错误。</p><p>2.3 对象可扩展性的陷阱函数</p><p>ES5 通过<code> Object.preventExtensions()</code> 与 <code>Object.isExtensible()</code> 方法给对象增加了可扩展性。而 ES6 则通过 <code>preventExtensions</code> 与 <code>isExtensible</code> 陷阱函数允许代理拦截对于底层对象的方法调用。这两个陷阱函数都接受名为 <code>trapTarget</code> 的单个参数，此参数代表代理的目标对象。 <code>isExtensible</code> 陷阱函数必须返回一个布尔值用于表明目标对象是否可被扩展，而 <code>preventExtensions</code> 陷阱函数也需要返回一个布尔值，用于表明操作是否已成功。同时也存在<code>Reflect.preventExtensions()</code> 与<code> Reflect.isExtensible()</code> 方法，用于实现默认的行为。这两个方法都返回布尔值，因此它们可以在对应的陷阱函数内直接使用。</p><p>例如，不想让代理对象的<code>Object.preventExtensios()</code>操作成功，可以强制<code>preventExtensions</code>陷阱函数返回<code>false</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//对象可扩展性的陷阱函数</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let target = &#123;&#125;;</span><br><span class="line">let proxy = new Proxy(target, &#123;</span><br><span class="line">isExtensible(trapTarget) &#123;</span><br><span class="line">return Reflect.isExtensible(trapTarget);</span><br><span class="line">&#125;,</span><br><span class="line">preventExtensions(trapTarget) &#123;</span><br><span class="line">return false</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">console.log(Object.isExtensible(target)); // true</span><br><span class="line">console.log(Object.isExtensible(proxy)); // true</span><br><span class="line">Object.preventExtensions(proxy);</span><br><span class="line">console.log(Object.isExtensible(target)); // true</span><br><span class="line">console.log(Object.isExtensible(proxy)); // true</span><br></pre></td></tr></table></figure><h3 id="属性描述符的陷阱函数"><a href="#属性描述符的陷阱函数" class="headerlink" title="属性描述符的陷阱函数"></a>属性描述符的陷阱函数</h3><p>ES5 最重要的特征之一就是引入了<code>Object.defineProperty()</code>方法用于定义属性的特性。在JS 之前的版本中，没有方法可以定义一个访问器属性，也不能让属性变成只读或是不可枚举。而这些特性都能够利用 <code>Object.defineProperty() </code>方法来实现，并且你还可以利用<code>Object.getOwnPropertyDescriptor() </code>方法来检索这些特性。代理允许你使用 <code>defineProperty</code> 与 <code>getOwnPropertyDescriptor</code> 陷阱函数，来分别拦截对于<code>Object.defineProperty()</code> 与 <code>Object.getOwnPropertyDescriptor()</code> 的调用。 <code>defineProperty</code><br>陷阱函数接受下列三个参数：</p><ol><li>trapTarget ：需要被定义属性的对象（即代理的目标对象） ；</li><li>key ：属性的键（字符串类型或符号类型） ；</li><li>descriptor ：为该属性准备的描述符对象。</li></ol><p><code>defineProperty</code> 陷阱函数要求你在操作成功时返回 <code>true</code> ，否则返回 <code>false</code> 。<code>getOwnPropertyDescriptor</code> 陷阱函数则只接受 <code>trapTarget</code> 与 <code>key</code> 这两个参数，并会返回对应的描述符。 <code>Reflect.defineProperty()</code> 与 <code>Reflect.getOwnPropertyDescriptor()</code> 方法作为上述陷阱函数的对应方法，接受与之相同的参数。</p><p><code>defineProperty</code> 陷阱函数要求你返回一个布尔值用于表示操作是否已成功。当它返回 <code>true</code>时， <code>Object.defineProperty()</code> 会正常执行；而如果它返回了 <code>false</code> ，则<code>Object.defineProperty() </code>会抛出错误。 你可以使用该功能来限制哪些属性可以被<code>Object.defineProperty()</code> 方法定义。</p><p><code>etOwnPropertyDescriptor</code> 陷阱函数有一个微小差异，要求返回值必须是 <code>null</code> 、<br><code>undefined</code> ，或者是一个对象。如果返回值是一个对象，则只允许该对象拥有 <code>enumerable</code><br>、 <code>configurable</code> 、 <code>value</code> 、 <code>writable</code> 、 <code>get</code> 或 <code>set</code> 这些自有属性</p><h3 id="ownKeys陷阱函数"><a href="#ownKeys陷阱函数" class="headerlink" title="ownKeys陷阱函数"></a>ownKeys陷阱函数</h3><p><code>ownKeys</code> 代理陷阱拦截了内部方法 <code>[[OwnPropertyKeys]]</code> ，并允许你返回一个数组用于重写该行为。返回的这个数组会被用于四个方法： <code>Object.keys()</code> 方法、<code>Object.getOwnPropertyNames()</code> 方法、<code>Object.getOwnPropertySymbols()</code>方法与<code>Object.assign()</code> 方法，其中 <code>Object.assign()</code> 方法会使用该数组来决定哪些属性会被复制。</p><p><code>ownKeys</code> 陷阱函数接受单个参数，即目标对象，同时必须返回一个数组或者一个类数组对象。你可以使用 <code>ownKeys</code> 陷阱函数去过滤特定的属性，以避免这些属性被<code> Object.keys()</code> 方法、<code> Object.getOwnPropertyNames()</code> 方法、<code>Object.getOwnPropertySymbols()</code> 方法或 <code>Object.assign()</code> 方法使用。</p><h3 id="apply与construct陷阱函数"><a href="#apply与construct陷阱函数" class="headerlink" title="apply与construct陷阱函数"></a>apply与construct陷阱函数</h3><p>只有 <code>apply</code> 与 <code>construct</code> 要求代理目标对象必须是一个函数。函数拥有两个内部方法：<code> [[Call]]</code> 与 <code>[[Construct]]</code> ，前者会在函数被直接调用时执行，而后者会在函数被使用 <code>new</code> 运算符调用时执行。 <code>apply</code> 与 <code>construct</code>陷阱函数对应着这两个内部方法，并允许你对其进行重写。<code>apply</code> 陷阱函数会接收到下列三个参数（ <code>Reflect.apply()</code> 也会接收这些参数） ：</p><ol><li>trapTarget ：被执行的函数（即代理的目标对象） ；</li><li>thisArg ：调用过程中函数内部的 this 值；</li><li>argumentsList ：被传递给函数的参数数组。</li></ol><p>当使用 <code>new</code> 去执行函数时， <code>construct</code> 陷阱函数会被调用并接收到下列两个参数：</p><ol><li>trapTarget ：被执行的函数（即代理的目标对象） ；</li><li>argumentsList ：被传递给函数的参数数组。</li></ol><p><code>Reflect.construct() </code>方法同样会接收到这两个参数，还会收到可选的第三参数 <code>newTarget</code>，如果提供了此参数，则它就指定了函数内部的 <code>new.target</code> 值。</p><p>使用apply和construct陷阱函数有这样一些应用场景：</p><blockquote><p>验证函数的参数</p></blockquote><p>假如需要保证所有参数都是某个特定类型，可使用 <code>apply</code> 陷阱函数进行验证：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//apply和construct陷阱函数</span><br><span class="line"></span><br><span class="line">let sum = function (arr=[]) &#123;</span><br><span class="line">return arr.reduce((previous,current)=&gt;previous+current);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let proxy = new Proxy(sum,&#123;</span><br><span class="line">apply(trapTarget,thisArg,argumentList)&#123;</span><br><span class="line">argumentList[0].forEach((item)=&gt;&#123;</span><br><span class="line">if(typeof item != &#x27;number&#x27;)&#123;</span><br><span class="line">throw new Error(&#x27;不是数字类型&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">return Reflect.apply(trapTarget,thisArg,argumentList);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">construct(trapTarget,argumentList)&#123;</span><br><span class="line">throw new Error(&#x27;不能使用new&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>​    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(proxy([1,2,3,4])); // 10</span><br><span class="line">console.log(proxy([1, &quot;2&quot;, 3, 4]));//Uncaught Error: 不是数字类型Uncaught Error: 不是数字类型</span><br><span class="line">let result = new proxy(); //Uncaught Error: 不能使用new</span><br></pre></td></tr></table></figure><h3 id="可被撤销的代理"><a href="#可被撤销的代理" class="headerlink" title="可被撤销的代理"></a>可被撤销的代理</h3><p>在被创建之后，代理通常就不能再从目标对象上被解绑。有的情况下你可能想撤销一个代理以便让它不能再被使用。当你想通过公共接口向外提供一个安全的对象，并且要求要随时都能切断对某些功能的访问，这种情况下可被撤销的代理就会非常有用。<br>你可以使用<code>Proxy.revocable()</code>方法来创建一个可被撤销的代理，该方法接受的参数与<code>Proxy</code> 构造器的相同：一个目标对象、一个代理处理器，而返回值是包含下列属性的一个对象：</p><ol><li>proxy ：可被撤销的代理对象；</li><li>revoke ：用于撤销代理的函数；</li></ol><p>当 <code>revoke()</code> 函数被调用后，就不能再对该 <code>proxy</code> 对象进行更多操作。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let target = &#123;</span><br><span class="line">name: &quot;target&quot;</span><br><span class="line">&#125;;</span><br><span class="line">let &#123; proxy, revoke &#125; = Proxy.revocable(target, &#123;&#125;);</span><br><span class="line">console.log(proxy.name); // &quot;target&quot;</span><br><span class="line">revoke();</span><br><span class="line">// 抛出错误</span><br><span class="line">console.log(proxy.name);</span><br></pre></td></tr></table></figure><p>这个例子创建了一个可被撤销的代理，它对<code>Proxy.revocable()</code>方法返回的对象进行了解构<br>赋值，把同名属性的值赋给了 <code>proxy</code> 与 <code>revoke</code> 变量。此时 <code>proxy</code> 对象和代理的目标对象一样，于是 <code>proxy.name</code> 属性的值就是 <code>&quot;target&quot;</code> ，因为它直接传递了<br><code>target.name</code> 的值。然而一旦<code> revoke()</code> 函数被调用， 代理对象就和所代理的目标对象就解除“绑定”关系，之后试图访问 <code>proxy.name</code> 会抛出错误。</p><h3 id="将代理对象作为原型使用"><a href="#将代理对象作为原型使用" class="headerlink" title="将代理对象作为原型使用"></a>将代理对象作为原型使用</h3><p><strong>代理对象可以被作为原型使用，在把代理对象作为原型时，仅当操作的默认行为会按惯例追踪原型时，代理陷阱才会被调用。</strong>因此，将代理对象作为原型时，常见的应用场景有：</p><p><strong>1.在原型上使用get陷阱函数</strong></p><p>当内部方法 <code>[[Get]]</code> 被调用以读取属性时，该操作首先会查找对象的自有属性；如果指定名称的属性没有找到，则会继续在对象的原型上进行属性查找；这个流程会一直持续到没有原型可供查找为止。得益于这个流程，若你设置了一个 <code>get</code> 代理陷阱，则只有在对象不存在指定名称的自有属性时，该陷阱函数才会在对象的原型上被调用。当所访问的属性无法保证存在时，你可以使用 <code>get</code> 陷阱函数来阻止预期外的行为。例如，创建了一个对象，当你尝试去访问一个不存在的属性时，它会抛出错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//原型上使用get陷阱函数</span><br><span class="line"></span><br><span class="line">let target = &#123;&#125;;</span><br><span class="line">let newTarget  = Object.create(new Proxy(</span><br><span class="line">target,&#123;</span><br><span class="line">get(trapTarget,key,receiver)&#123;</span><br><span class="line">throw new Error(&#x27;不存在该属性&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">newTarget.name = &#x27;hello world&#x27;;</span><br><span class="line">console.log(newTarget.name); //hello world</span><br><span class="line"></span><br><span class="line">console.log(newTarget.age); //Uncaught Error: 不存在该属性</span><br></pre></td></tr></table></figure><p>由于 <code>name</code> 属性存在，所以不会调用 <code>get</code> 陷阱函数，而 <code>age</code> 属性在对象上并不存在，所以，会从原型上去找该属性，因此，会触发 <code>get</code> 陷阱函数，从而抛出错误。</p><p><strong>2.在原型上使用 <code>set</code> 陷阱函数</strong></p><p>内部方法 <code>[[Set]]</code> 同样会查找对象的自有属性，并在必要时继续对该对象的原型进行查找。当你对一个对象属性进行赋值时，如果指定名称的自有属性存在，值就会被赋在该属性上；而若该自有属性不存在，则会继续检查对象的原型，但默认情况下它会在对象实例（而非原型） 上创建一个新的属性用于赋值，无论同名属性是否存在于原型上。</p><p><strong>3.在原型上使用has陷阱函数</strong></p><p> <code>has</code> 陷阱函数会拦截对象上 <code>in</code> 运算符的使用。 <code>in</code> 运算符首先查找对象上指定名称的自有属性；如果不存在同名自有属性，则会继续查找对象的原型；如果原型上也不存在同名自有属性，那么就会沿着原型链一直查找下去，直到找到该属性、或者没有更<br>多原型可供查找时为止。<code>has</code> 陷阱函数只在原型链查找触及原型对象的时候才会被调用。</p><p><strong>当使用代理作为原型时，这只会在指定名称的自有属性不存在时，才会触发 <code>has</code> 陷阱函数。</strong></p><h3 id="将代理作为类的原型"><a href="#将代理作为类的原型" class="headerlink" title="将代理作为类的原型"></a>将代理作为类的原型</h3><p>代理对象不能直接作为类的原型，因为类的 <code>prototype</code> 属性是不可写入的。但是，可以使用继承来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//代理对象作为类的原型</span><br><span class="line"></span><br><span class="line">function NoSuchProperty() &#123;</span><br><span class="line">// empty</span><br><span class="line">&#125; </span><br><span class="line">NoSuchProperty.prototype = new Proxy(&#123;&#125;, &#123;</span><br><span class="line">get(trapTarget, key, receiver) &#123;</span><br><span class="line">throw new ReferenceError(`$&#123;key&#125; doesn&#x27;t exist`);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">class Square extends NoSuchProperty &#123;</span><br><span class="line">constructor(length, width) &#123;</span><br><span class="line">super();</span><br><span class="line">this.length = length;</span><br><span class="line">this.width = width;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">let shape = new Square(2, 6);</span><br><span class="line">let area1 = shape.length * shape.width;</span><br><span class="line">console.log(area1); // 12</span><br><span class="line">// 由于 &quot;wdth&quot; 不存在而抛出了错误</span><br><span class="line">let area2 = shape.length * shape.wdth;</span><br></pre></td></tr></table></figure><p><code>Square</code> 类继承了 <code>NoSuchProperty</code> 类，因此该代理就被加入了 <code>Square</code> 类的原型链。随后<code>shape</code> 对象被创建为 <code>Square</code> 类的一个实例，让它拥有两个属性： <code>length</code> 与 <code>width</code> 。由于 <code>get</code> 陷阱函数永远不会被调用，因此能够成功读取这两个属性的值。只有访问 <code>shape</code> 上不存在的属性时（例如这里的 <code>shape.wdth</code> 拼写错误） ，才触发了 <code>get</code> 陷阱函数并导致错误被抛出。</p><h3 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h3><ol><li>在 ES6 之前，特定对象（例如数组） 会显示出一些非常规的、无法被开发者复制的行为，而代理的出现改变了这种情况。代理允许你为一些 JS 底层操作自行定义非常规行为，因此你就可以通过代理陷阱来复制 JS 内置对象的所有行为。在各种不同操作发生时（例如对于 <code>in</code>运算符的使用） ，这些代理陷阱会在后台被调用。</li><li>反射接口也是在 ES6 中引入的，允许开发者为每个代理陷阱实现默认的行为。每个代理陷阱在 <code>Reflect</code> 对象（ES6 的另一个新特性） 上都有一个同名的对应方法。将代理陷阱与反射接口方法结合使用，就可以在特定条件下让一些操作有不同的表现，有别于默认的内置行为。</li><li>可被撤销的代理是一种特殊的代理，可以使用 <code>revoke()</code> 函数去有效禁用。 <code>revoke()</code> 函数终结了代理的所有功能，因此在它被调用之后，所有与代理属性交互的意图都会导致抛出错误。</li><li>尽管直接使用代理是最有力的使用方式，但你也可以把代理用作另一个对象的原型。但只有很少的代理陷阱能在作为原型的代理上被有效使用，包括 <code>get</code> 、 <code>set</code> 与 <code>has</code> 这几个，这让这方面的用例变得十分有限</li></ol><h3 id="案例-6"><a href="#案例-6" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //set陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// name:&#x27;target&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(target,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// set(tarpTarget,key,value,receiver)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if(!tarpTarget.hasOwnProperty(key))&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if(isNaN(value))&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;property must be number&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return Reflect.set(tarpTarget,key,value,receiver);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// proxy.msg=&#x27;hello proxy&#x27;; //Uncaught Error: property must be number</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //get陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target=&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// name:&#x27;hello world&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(target,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// get(tarpTarget,key,receiver)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if(!(key in tarpTarget))&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;不存在该对象&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return Reflect.get(tarpTarget,key,receiver);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy.name); //hello world</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy.age); // Uncaught Error: 不存在该对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //has陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// value:&#x27;hello world&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(target,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// has(tarpTarget,key)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if(Object.is(key,&#x27;value&#x27;))&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return false;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Reflect.has(tarpTarget,key);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&#x27;value&#x27; in proxy); //false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//deleteProperty陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// name: &quot;target&quot;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// value: 42</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(target, &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// deleteProperty(trapTarget, key) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if (key === &quot;value&quot;) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return false;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; else &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return Reflect.deleteProperty(trapTarget, key);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 尝试删除 proxy.value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(&quot;value&quot; in proxy); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let result1 = delete proxy.value;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(result1); // false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //原型代理上的陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(target, &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// getPrototypeOf(trapTarget) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return null;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// setPrototypeOf(trapTarget, proto) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return false;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let targetProto = Object.getPrototypeOf(target);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxyProto = Object.getPrototypeOf(proxy);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(targetProto === Object.prototype); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxyProto === Object.prototype); // false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxyProto); // null</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 成功</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Object.setPrototypeOf(target, &#123;&#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 抛出错误</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Object.setPrototypeOf(proxy, &#123;&#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//对象可扩展性的陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(target, &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// isExtensible(trapTarget) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return Reflect.isExtensible(trapTarget);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// preventExtensions(trapTarget) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Object.isExtensible(target)); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Object.isExtensible(proxy)); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Object.preventExtensions(proxy);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Object.isExtensible(target)); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(Object.isExtensible(proxy)); // true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//defineProperty</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(&#123;&#125;, &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// defineProperty(trapTarget, key, descriptor) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if (!isNaN(key)) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return false;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return Reflect.defineProperty(trapTarget, key, descriptor);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Object.defineProperty(proxy,&#x27;name&#x27;,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// value:&#x27;hello world&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy.name); // &quot;proxy&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// Object.defineProperty(proxy,&#x27;age&#x27;,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// value:20</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy.age); // &quot;proxy&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// //apply和construct陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let sum = function (arr=[]) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return arr.reduce((previous,current)=&gt;previous+current);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let proxy = new Proxy(sum,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// apply(trapTarget,thisArg,argumentList)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// argumentList[0].forEach((item)=&gt;&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// if(typeof item != &#x27;number&#x27;)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;不是数字类型&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// return Reflect.apply(trapTarget,thisArg,argumentList);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// construct(trapTarget,argumentList)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;不能使用new&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy([1,2,3,4])); // 10</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy([1, &quot;2&quot;, 3, 4]));//Uncaught Error: 不是数字类型Uncaught Error: 不是数字类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let result = new proxy(); //Uncaught Error: 不能使用new</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//可被插销的代理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// name: &quot;target&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let &#123; proxy, revoke &#125; = Proxy.revocable(target, &#123;&#125;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy.name); // &quot;target&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// revoke();</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// // 抛出错误</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(proxy.name);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//原型上使用get陷阱函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let target = &#123;&#125;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// let newTarget  = Object.create(new Proxy(</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// target,&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// get(trapTarget,key,receiver)&#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// throw new Error(&#x27;不存在该属性&#x27;);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// ));</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// newTarget.name = &#x27;hello world&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(newTarget.name); //hello world</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// console.log(newTarget.age); //Uncaught Error: 不存在该属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//代理对象作为类的原型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">NoSuchProperty</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// empty</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">NoSuchProperty</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">get</span>(<span class="params">trapTarget, key, receiver</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReferenceError</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> doesn&#x27;t exist`</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">NoSuchProperty</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">constructor</span>(<span class="params">length, width</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">super</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">length</span> = length;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">this</span>.<span class="property">width</span> = width;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> shape = <span class="keyword">new</span> <span class="title class_">Square</span>(<span class="number">2</span>, <span class="number">6</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> area1 = shape.<span class="property">length</span> * shape.<span class="property">width</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(area1); <span class="comment">// 12</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 由于 &quot;wdth&quot; 不存在而抛出了错误</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> area2 = shape.<span class="property">length</span> * shape.<span class="property">wdth</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="什么是模块？"><a href="#什么是模块？" class="headerlink" title="什么是模块？"></a>什么是模块？</h2><p>模块（Modules ） 是使用不同方式加载的 JS 文件（与 JS 原先的脚本加载方式相对） 。这种不同模式很有必要，因为它与脚本（script ） 有大大不同的语义：</p><ol><li>模块代码自动<strong>运行在严格模式</strong>下，并且没有任何办法跳出严格模式；</li><li>在模块的顶级作用域创建的变量，<strong>不会被自动添加到共享的全局作用域</strong>，它们只会在<strong>模块顶级作用域</strong>的内部存在；</li><li>模块顶级作用域的 <code>this</code> 值为 <code>undefined</code> ；</li><li>模块不允许在代码中使用 HTML 风格的注释（这是 JS 来自于早期浏览器的历史遗留特性） ；</li><li>对于需要让模块外部代码访问的内容，模块必须导出它们；</li><li>允许模块从其他模块导入绑定；</li></ol><h3 id="基本的导出"><a href="#基本的导出" class="headerlink" title="基本的导出"></a>基本的导出</h3><p>可以使用 <code>export</code> 关键字将已发布代码部分公开给其他模块。最简单方法就是将 <code>export</code>放置在<strong>任意变量、函数或类声明</strong>之前：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 导出数据</span><br><span class="line">export var color = &quot;red&quot;;</span><br><span class="line">export let name = &quot;Nicholas&quot;;</span><br><span class="line">export const magicNumber = 7;</span><br><span class="line">// 导出函数</span><br><span class="line">export function sum(num1, num2) &#123;</span><br><span class="line">return num1 + num1;</span><br><span class="line">&#125; </span><br><span class="line">// 导出类</span><br><span class="line">export class Rectangle &#123;</span><br><span class="line">constructor(length, width) &#123;</span><br><span class="line">this.length = length;</span><br><span class="line">this.width = width;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">// 此函数为模块私有</span><br><span class="line">function subtract(num1, num2) &#123;</span><br><span class="line">return num1 - num2;</span><br><span class="line">&#125; </span><br><span class="line">// 定义一个函数……</span><br><span class="line">function multiply(num1, num2) &#123;</span><br><span class="line">return num1 * num2;</span><br><span class="line">&#125; </span><br><span class="line">// ……导出一个函数引用</span><br><span class="line">export &#123; multiply &#125;;</span><br></pre></td></tr></table></figure><p>此例中有几点需要注意。首先，除了 <code>export</code> 关键字之外，每个声明都与正常形式完全一样。<strong>每个被导出的函数或类都有名称，这是因为导出的函数声明与类声明必须要有名称</strong>。你不能使用这种语法来导出匿名函数或匿名类，除非使用了 <code>default</code> 关键字 。其次，细看一下 <code>multiply()</code> 函数，它并没有在定义时被导出。这是因为你不仅能导出声明，还可以导出引用（即代码最后一行） 。最后请注意，此例并未导出<code>subtract()</code> 函数。此函数在模块外部不可访问，因为任意没有被显式导出的变量、函数或类都会在模块内保持私有。</p><h3 id="基本的导入"><a href="#基本的导入" class="headerlink" title="基本的导入"></a>基本的导入</h3><p>一旦你有了包含导出的模块，就能在其他模块内使用 <code>import</code> 关键字来访问已被导出的功能。 import 语句有两个部分，<strong>一是需要导入的标识符，二是需导入的标识符</strong>的来源模块。此处是导入语句的基本形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; identifier1, identifier2 &#125; from &quot;./example.js&quot;;</span><br></pre></td></tr></table></figure><p>在 <code>import</code> 之后的花括号指明了从给定模块导入对应的绑定， <code>from</code> 关键字则指明了需要导入的模块。模块由一个表示模块路径的字符串（被称为模块说明符， module specifier ） 来指定。</p><p>当从模块导入了一个绑定时，该绑定表现得就像使用了 <code>const</code> 的定义。这意味着你不能再定义另一个同名变量（包括导入另一个同名绑定） ，也不能在对应的 <code>import</code> 语句之前使用此标识符（也就是要受暂时性死区限制） ，更不能修改它的值。</p><blockquote><p>导入单个绑定</p></blockquote><p>实现导入单个绑定时，仅仅只需要使用一个标识符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 单个导入</span><br><span class="line">import &#123; sum &#125; from &quot;./example.js&quot;;</span><br><span class="line">console.log(sum(1, 2)); // 3</span><br><span class="line">sum = 1; // 出错</span><br></pre></td></tr></table></figure><p>对于已导入的绑定再重新赋值，则会导致错误。</p><blockquote><p>导入多个绑定</p></blockquote><p>如果你想从 <code>example</code> 模块导入多个绑定，你可以像下面这样显式的列出它们：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 多个导入</span><br><span class="line">import &#123; sum, multiply, magicNumber &#125; from &quot;./example.js&quot;;</span><br><span class="line">console.log(sum(1, magicNumber)); // 8</span><br><span class="line">console.log(multiply(1, 2)); // 2</span><br></pre></td></tr></table></figure><p>此处从 <code>example</code> 模块导入了三个绑定： <code>sum</code> 、 <code>multiply</code> 与 <code>magicNumber</code> 。</p><blockquote><p>完全导入一个模块</p></blockquote><p>还有一种特殊情况，即允许你将整个模块当作单一对象进行导入，该<strong>模块的所有导出都会作为对象的属性存在</strong>。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 完全导入</span><br><span class="line">import * as example from &quot;./example.js&quot;;</span><br><span class="line">console.log(example.sum(1,</span><br><span class="line">example.magicNumber)); // 8</span><br><span class="line">console.log(example.multiply(1, 2)); // 2</span><br></pre></td></tr></table></figure><p>在此代码中， <code>example.js</code> 中所有导出的绑定都被加载到一个名为 <code>example</code> 的对象中，具名导出（ <code>sum()</code> 函数、 <code>multiple()</code> 函数与 <code>magicNumber</code> ） 都成为 <code>example</code> 的<strong>可用属性</strong>。这种导入格式被称为命名空间导入（namespace import ） ，这是因为该 <code>example</code> 对象并不存在于 <code>example.js</code> 文件中，而是作为一个命名空间对象被创建使用，其中包含了<code>example.js</code> 的所有导出成员。</p><p><strong>需要注意的是：无论对同一个模块使用了多少次 <code>import</code> 语句，该模块都只会被执行一次。在导出模块的代码执行之后，已被实例化的模块就被保留在内存中，并随时都能被其他 <code>import</code> 所引用</strong></p><blockquote><p>导入绑定无法修改原始值</p></blockquote><p>ES6 的 <code>import</code> 语句为变量、函数与类创建了只读绑定，而不像普通变量那样简单引用了原始绑定。<strong>尽管导入绑定的模块无法修改绑定的值，但是可以在导出模块中对原始值做出修改，导入绑定会自动反映出修改的变化</strong>，例如：</p><p>导出模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export var name = &quot;Nicholas&quot;;</span><br><span class="line">export function setName(newName) &#123;</span><br><span class="line">name = newName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; name, setName &#125; from &quot;./example.js&quot;;</span><br><span class="line">console.log(name); // &quot;Nicholas&quot;</span><br><span class="line">setName(&quot;Greg&quot;);</span><br><span class="line">console.log(name); // &quot;Greg&quot;</span><br><span class="line">name = &quot;Nicholas&quot;; // error</span><br></pre></td></tr></table></figure><p>调用 <code>setName(&quot;Greg&quot;</code>) 会回到导出 <code>setName()</code> 的模块内部，并在那里执行，从而将 <code>name</code> 设置为 “<code>Greg</code>“ 。注意这个变化会自动反映到所导入的 <code>name</code> 绑定上。</p><h3 id="重命名的导出与导入"><a href="#重命名的导出与导入" class="headerlink" title="重命名的导出与导入"></a>重命名的导出与导入</h3><blockquote><p>在导出模块中进行重命名</p></blockquote><p>如果想用不同的名称来导出，可以使用 <code>as</code> 关键字来定义新的名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function sum(num1, num2) &#123;</span><br><span class="line">return num1 + num2;</span><br><span class="line">&#125; </span><br><span class="line">export &#123; sum as add &#125;;</span><br></pre></td></tr></table></figure><p>此处的 <code>sum()</code> 函数被作为 <code>add()</code> 导出，前者是<strong>本地名称（local name ）</strong> ，后者则是<strong>导出名称（exported name ）</strong> 。这意味着当另一个模块要导入此函数时，它必须改用 <code>add</code> 这个名称：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;add&#125; from &#x27;./example.js&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>在导入时重命名</p></blockquote><p>在导入时同样可以使用 <code>as</code> 关键字进行重命名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; add as sum &#125; from &#x27;./example.js&#x27;</span><br><span class="line">console.log(typeof add); // &quot;undefined&quot;</span><br><span class="line">console.log(sum(1, 2)); // 3</span><br></pre></td></tr></table></figure><p>此代码导入了<code> add(</code>) 函数，并使用了导入名称（import name ） 将其重命名为 <code>sum()</code>（本地名称） 。这意味着在此模块中并不存在名为 <code>add</code> 的标识符。</p><h3 id="模块的默认值"><a href="#模块的默认值" class="headerlink" title="模块的默认值"></a>模块的默认值</h3><p>模块的默认值（ default value ） 是使用 <code>default</code> 关键字所指定的单个变量、函数或类，而你在每个模块中<strong>只能设置一个默认导出</strong>，将 <code>default</code> 关键字用于多个导出会是语法错误。</p><h4 id="导出默认值"><a href="#导出默认值" class="headerlink" title="导出默认值"></a>导出默认值</h4><p>导出默认值一共有三种形式：</p><blockquote><ol><li>不使用标识符</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export default function(num1,num2)&#123;</span><br><span class="line">return num1+num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此模块将一个函数作为默认值进行了导出， <code>default</code> 关键字标明了这是一个默认导出，此函数并不需要有名称。</p><blockquote><ol start="2"><li>使用标识符</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function sum(num1, num2) &#123;</span><br><span class="line">return num1 + num2;</span><br><span class="line">&#125; </span><br><span class="line">export default sum;</span><br></pre></td></tr></table></figure><blockquote><ol start="3"><li>使用重命名语法</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function sum(num1, num2) &#123;</span><br><span class="line">return num1 + num2;</span><br><span class="line">&#125; </span><br><span class="line">export &#123;sum as default&#125;;</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>既导出了默认值，又导出非默认值</li></ol></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export let color = &#x27;red&#x27;;</span><br><span class="line">export default function(num1,num2)&#123;</span><br><span class="line">return num1+num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入默认值"><a href="#导入默认值" class="headerlink" title="导入默认值"></a>导入默认值</h4><blockquote><p>只导入默认值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import sum from &#x27;./example.js&#x27;;</span><br><span class="line">console.log(sum(1,2));</span><br></pre></td></tr></table></figure><p>这个导入语句从 <code>example.js</code> 模块导入了其默认值。与之前在非默认的导入中看到的不同,注意此处并未使用花括号。本地名称 <code>sum</code> 被用于代表目标模块所默认导出的函数。</p><blockquote><p>既导入默认值，又导入非默认值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import sum, &#123; color &#125; from &#x27;./example.js&#x27;;</span><br><span class="line">console.log(sum(1,2));</span><br><span class="line">console.log(color);</span><br></pre></td></tr></table></figure><p><strong>逗号将默认的本地名称与非默认的名称分隔开，非默认值仍旧被花括号所包裹。要记住在 <code>import</code> 语句中默认名称必须位于非默认名称之前。</strong></p><blockquote><p>对导入默认值重命名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123;default as sum, color&#125; from &#x27;./example.js&#x27;</span><br><span class="line"></span><br><span class="line">console.log(sum(1,2));</span><br><span class="line">console.log(color);</span><br></pre></td></tr></table></figure><p>在此代码中，默认的导出（ <code>default</code> ） 被重命名为 <code>sum</code> ，并且附加的 <code>color</code> 导出也被一并导入了。</p><h4 id="对已导入的内容再导出"><a href="#对已导入的内容再导出" class="headerlink" title="对已导入的内容再导出"></a>对已导入的内容再导出</h4><p>如果在当前模块中对已导入的内容在导出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export &#123;sum&#125; from &#x27;./example.js&#x27;;</span><br></pre></td></tr></table></figure><p>这种形式的 <code>export</code> 会进入指定模块查看 sum 的定义，随后将其导出。在导出时同样也可以进行重命名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export &#123; sum as add &#125; from &#x27;./example.js&#x27;</span><br></pre></td></tr></table></figure><p>如果想将<code>另一个模块</code>中的所有值完全导出，可以使用 <code>*</code> 号模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export * from &#x27;./example.js&#x27;;</span><br></pre></td></tr></table></figure><p>用完全导出，就可以导出目标模块的默认值及其所有具名导出，但这可能影响你从当前模<br>块所能导出的值。例如，假设 example.js 具有一个默认导出，当你使用这种语法时，你就无法为当前模块另外再定义一个默认导出。</p><h4 id="无绑定的导入"><a href="#无绑定的导入" class="headerlink" title="无绑定的导入"></a>无绑定的导入</h4><p>有些模块也许没有进行任何导出，相反只是<strong>修改全局作用域的对象</strong>。尽管这种模块的<strong>顶级变量、函数或类最终并不会自动被加入全局作用域</strong>，但这并不意味着该模块无法访问全局作用域。诸如 <code>Array</code> 与 <code>Object</code> 之类的内置对象的共享定义在模块内部是可访问的，并且对于这些对象的修改会反映到其他模块中。</p><h4 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h4><ol><li>ES6 为 JS 语言添加了模块，作为打包与封装功能的方式。模块的行为异于脚本，它们<strong>不会用自身顶级作用域的变量、函数或类去修改全局作用域</strong>，而模块的 <code>this</code> 值为 <code>undefined</code> ；</li><li>可以在模块中使用 <code>export</code> 关键字<strong>导出，变量、函数与类都可以</strong>，并且每个模块允许存在一个<strong>默认导出</strong>。在导出之后，另一个模块就能导入该模块所导出的一个或多个导出值。这些导入的名称就像是被 <code>const</code> 所定义的，会被当作块级绑定，并且不允在同一模块内重复声明；</li><li>由于模块必须用与脚本不同的方式运行，浏览器就引入了 <code>&lt;script type=&quot;module&quot;&gt;</code> ，以表示资源文件或内联代码需要作为模块来执行。使用 <script type="module"> 加载的模块文件会默认应用 <code>defer</code> 属性。一旦包含模块的页面文档完全被解析，模块就会按照它们在文档中的出现顺序依次执行。</li></ol><h2 id="ES7-预览"><a href="#ES7-预览" class="headerlink" title="ES7 预览"></a>ES7 预览</h2><ul><li>数组<ul><li><code>arr.includes()</code> 数组是否包含某个东西</li><li>数组的 arr.keys(), arr,entries()</li><li>for … in 遍历数组 下标 key</li><li>for … of 遍历数组 值 value, 不能用于json</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 循环的时下标 key</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 循环的是值 value</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr.<span class="title function_">keys</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&#x27;</span>+i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> arr.<span class="title function_">entries</span>()) &#123;<span class="comment">//结构赋值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;&gt;&#x27;</span> + key + value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = &#123; <span class="attr">a</span>: <span class="number">12</span>, <span class="attr">b</span>: <span class="number">5</span>, <span class="attr">c</span>: <span class="number">7</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> json) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>数字<ul><li>求幂  3**8   代表：3的8次方</li></ul></li><li>字符串<ul><li>padStart()/padEnd() 指定宽度，不够就补空格或指定字符</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=&#x27;</span> + <span class="string">&#x27;abcd&#x27;</span>.<span class="title function_">padStart</span>(<span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="string">&#x27;=&#x27;</span>)<span class="comment">//补几位  第二个参数补什么东西</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;=&#x27;</span> + <span class="string">&#x27;abcd&#x27;</span>.<span class="title function_">padEnd</span>(<span class="number">6</span>, <span class="string">&#x27;0&#x27;</span>) + <span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">=00abcd=</span><br><span class="line">=abcd00=</span><br></pre></td></tr></table></figure><ul><li>容忍度<ul><li>[1, 2, 3,] 老版数组最后不能有逗号，新的可以有</li><li>函数参数最后多的逗号也可以</li></ul></li><li>async await<ul><li>和 generator yield 类似</li><li>generator 不可以写成箭头函数， async 可以</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">await</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;JavaScript的ES6怎么来的&quot;&gt;&lt;a href=&quot;#JavaScript的ES6怎么来的&quot; class=&quot;headerlink&quot; title=&quot;JavaScript的ES6怎么来的&quot;&gt;&lt;/a&gt;JavaScript的ES6怎么来的&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ECMAScript 和 JavaScript&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ECMA 是标准，JS 是实现&lt;/li&gt;
&lt;li&gt;ECMAScript 简称 ECMA 或 ES&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;历史版本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1996, ES1.0 Netscape 将 JS 提交给 ECMA 组织，ES 正式出现&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1999, ES3.0 被广泛支持&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2011, ES5.1 成为 ISO 国际标准&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;2015, ES6.0 正式发布&lt;/p&gt;</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript新语法" scheme="http://example.com/tags/JavaScript%E6%96%B0%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>CSS基础</title>
    <link href="http://example.com/2019/06/27/css%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2019/06/27/css%E5%9F%BA%E7%A1%80/</id>
    <published>2019-06-27T02:03:15.000Z</published>
    <updated>2019-07-04T16:47:55.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS概述"><a href="#CSS概述" class="headerlink" title="CSS概述"></a>CSS概述</h2><h4 id="什么是CSS"><a href="#什么是CSS" class="headerlink" title="什么是CSS"></a>什么是CSS</h4><table><thead><tr><th align="center">Cascading Style Sheets</th></tr></thead><tbody><tr><td align="center">层叠样式表，级联样式表，简称样式表</td></tr></tbody></table><span id="more"></span><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ul><li>设置HTML网页中的元素样式</li></ul><h4 id="CSS和HTML之间的关系"><a href="#CSS和HTML之间的关系" class="headerlink" title="CSS和HTML之间的关系"></a>CSS和HTML之间的关系</h4><ul><li>HTML：负责网页结构的搭建，内容的展示</li><li>CSS：负责网页的修饰</li></ul><h4 id="CSS与HTML的属性使用原则"><a href="#CSS与HTML的属性使用原则" class="headerlink" title="CSS与HTML的属性使用原则"></a>CSS与HTML的属性使用原则</h4><ul><li>W3C建议我们尽量使用css的方式来取代html的属性</li></ul><p>​        css样式：</p><pre><code>      1.样式代码高度的重用</code></pre><p>​          2.提高可维护性    </p><h2 id="CSS的语法规范"><a href="#CSS的语法规范" class="headerlink" title="CSS的语法规范"></a>CSS的语法规范</h2><h4 id="使用CSS的方法"><a href="#使用CSS的方法" class="headerlink" title="使用CSS的方法"></a>使用CSS的方法</h4><h5 id="内联样式"><a href="#内联样式" class="headerlink" title="内联样式"></a>内联样式</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将css的样式定义在<span class="selector-tag">HTML</span>标签的style属性中</span><br><span class="line">&lt;any style=&quot;样式声明; 样式声明&quot;&gt;&lt;/any&gt;</span><br><span class="line">样式声明  样式属性:值  组成</span><br><span class="line">多个样式声明之间用分号分隔</span><br></pre></td></tr></table></figure><ul><li>内联样式使用的非常少</li><li>内联样式不能重用</li><li>内联样式优先级最高</li></ul><h5 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">在&lt;head&gt;&lt;/head&gt;标签中，添加&lt;style&gt;&lt;style&gt;标签，在其内部定义样式规则</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  样式规则</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">样式规则：由选择器和样式声明组成</span><br><span class="line">选择器&#123;</span><br><span class="line"> 样式声明；</span><br><span class="line"> 样式声明；</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">span</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#afa</span>;</span><br><span class="line">  <span class="attribute">background</span>:<span class="number">#faf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>内部样式在本页面可以 重用，但是其他页面不能重</li><li>项目中使用不多，但是学习和测试中大量使用</li></ul><h5 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">独立创建一个新文件*<span class="selector-class">.css</span>。</span><br><span class="line">可以在任何网页中引用</span><br><span class="line">&lt;head&gt;</span><br><span class="line"> &lt;link rel=&quot;stylesheet&quot; href=&quot;css文件的url&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">外部样式是项目中必须使用的样式写法。</span><br></pre></td></tr></table></figure><h4 id="CSS的样式特性"><a href="#CSS的样式特性" class="headerlink" title="CSS的样式特性"></a>CSS的样式特性</h4><h5 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h5><ul><li>大部分的css效果是可以直接被子元素继承的</li><li>必须是层级结构</li></ul><h5 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h5><ul><li>可以为一个元素定义多个样式规则</li><li>规则中属性不冲突(不重复)，可以同时作用到当前元素上</li></ul><h5 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h5><ul><li>如果样式声明冲突时，按照样式规则优先级去应用</li><li>默认的优先级，从高到低：</li></ul><p>​        1.内联样式(行内样式)优先级最高</p><p>​        2.内部样式、外部样式，遵循就近原则</p><p>​        3.浏览器默认样式最低</p><h5 id="调整优先级"><a href="#调整优先级" class="headerlink" title="调整优先级"></a>调整优先级</h5><ul><li>！important规则<ul><li>放在属性值之后，与值之间用空格隔开</li><li>作用是调整优先级，让没有important属性不能覆盖他</li></ul></li></ul><h2 id="基础选择器详解"><a href="#基础选择器详解" class="headerlink" title="基础选择器详解"></a>基础选择器详解</h2><ul><li><strong>选择器的作用</strong><ul><li>规范了页面中哪些元素能够使用定义好的样式</li><li>为了匹配元素</li></ul></li></ul><h4 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*&#123;样式声明&#125;</span><br><span class="line">*效率极低，尽量少用</span><br><span class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;外边距，内边距清<span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="元素选择器-标签选择器"><a href="#元素选择器-标签选择器" class="headerlink" title="元素选择器(标签选择器)"></a>元素选择器(标签选择器)</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设置页面中一类元素的默认样式</span><br><span class="line">标签名称&#123;样式声明&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red&#125;</span><br></pre></td></tr></table></figure><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">定义页面上某类元素的公共样式，谁想用我，就引用我的class名</span><br><span class="line">元素通过class属性来引用该样式</span><br><span class="line">.类名&#123;样式的声明&#125;</span><br><span class="line">&lt;any class=&quot;类名&quot;&gt;</span><br><span class="line">注意: <span class="string">&quot;.&quot;</span>不能省略</span><br><span class="line">     类名不能以数字开头</span><br><span class="line">     类名不能包含特殊字符(可以包含 - _)</span><br></pre></td></tr></table></figure><p>类选择器的特殊用法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1.多类选择器</span><br><span class="line">让一个元素引用多个类选择器</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;font_blue font_size24&quot;</span>&gt;</span>烤生蚝<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">2.分类选择器</span><br><span class="line">将元素选择器和类型选择器联合使用</span><br><span class="line">元素选择器.类选择器&#123;&#125;</span><br><span class="line">可以匹配到，指向了某个类的，具体某个元素</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;font_blue&quot;</span>&gt;</span>水煮牛肉<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">span.font_blue&#123;background:#faf;&#125;</span><br><span class="line">作用</span><br><span class="line">1.指向更精确</span><br><span class="line">2.优先级变高</span><br></pre></td></tr></table></figure><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p>​    设置指定元素的样式，专属定制</p><p>​     为元素设置id值，使用#id值作为选择器，编写专属样式</p><h4 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a>群组选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">将多个选择器放在一起，一块定义某公共样式</span><br><span class="line">选择器1，选择器2，选择器3......&#123;公共样式声明&#125;</span><br><span class="line">#content,p.mycolor,span&#123;color:red&#125;</span><br></pre></td></tr></table></figure><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><ul><li>通过元素的后代关系匹配元素</li><li>后代：一层或者多层的嵌套关系</li><li>语法：选择器1 选择器2 选择器3{样式声明}</li></ul><h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><ul><li>通过元素的子代关系匹配元素(一层嵌套)</li><li>选择器1&gt;选择器2&gt;选择器3{样式声明}</li></ul><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><ul><li>匹配元素的不同状态下的样式</li></ul><h5 id="链接伪类"><a href="#链接伪类" class="headerlink" title="链接伪类"></a>链接伪类</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:link</span> 元素尚未访问时的状态样式</span><br><span class="line"><span class="selector-pseudo">:visited</span> 元素访问过后的状态样式</span><br><span class="line"><span class="selector-id">#a1</span><span class="selector-pseudo">:link</span>&#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-id">#a1</span><span class="selector-pseudo">:visited</span>&#123;<span class="attribute">color</span>:yellow;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="动态伪类"><a href="#动态伪类" class="headerlink" title="动态伪类"></a>动态伪类</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">:acitve 匹配元素被激活时的状态</span><br><span class="line">#btn:active&#123;<span class="attribute">color</span>:purple;&#125;</span><br><span class="line"><span class="selector-pseudo">:focus</span> 匹配元素获取焦点时的状态</span><br><span class="line"><span class="selector-id">#txt</span><span class="selector-pseudo">:focus</span>&#123;<span class="attribute">background</span>:<span class="number">#aff</span>;&#125;</span><br><span class="line"><span class="selector-pseudo">:hover</span> 鼠标悬停在元素时的状态</span><br><span class="line"><span class="selector-class">.img</span><span class="selector-pseudo">:hover</span>&#123;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="选择器的权值"><a href="#选择器的权值" class="headerlink" title="选择器的权值"></a>选择器的权值</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">权值：标识当前选择器的重要程度，权值越大优先级越高</span><br><span class="line">!important   &gt;<span class="number">1000</span></span><br><span class="line">内联样式     <span class="number">1000</span></span><br><span class="line">id选择器     <span class="number">100</span></span><br><span class="line">类和伪类选择器  <span class="number">10</span></span><br><span class="line">元素选择器     <span class="number">1</span></span><br><span class="line">*选择器        <span class="number">0</span></span><br><span class="line">继承的样式无权值  无</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol><li>当一个选择器中含有多个选择器时，需要将所有的选择器的权值进行相加。<br>然后再进行比较，权值高的优先显示<br>注意：选择器的权值计算不会超过其最大的数量级<br>（1W个#id也不会到1000）</li><li>群组选择器的权值，单独计算，不会相加</li><li>样式后面加!important 该样式会获取最高优先级<br>内联样式不能添加!important</li><li>如果权值相同，使用就近原则</li></ol><h2 id="盒子模型和边距"><a href="#盒子模型和边距" class="headerlink" title="盒子模型和边距"></a>盒子模型和边距</h2><h4 id="尺寸属性"><a href="#尺寸属性" class="headerlink" title="尺寸属性"></a>尺寸属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">改变元素的宽高</span><br><span class="line"><span class="attribute">width</span></span><br><span class="line">最大宽度 <span class="attribute">max-width</span></span><br><span class="line">最小宽度 <span class="attribute">min-width</span></span><br><span class="line"><span class="attribute">height</span></span><br><span class="line">最大高度 <span class="attribute">max-height</span></span><br><span class="line">最小高度 <span class="attribute">min-height</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h4><h5 id="尺寸单位"><a href="#尺寸单位" class="headerlink" title="尺寸单位"></a>尺寸单位</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">px 像素</span><br><span class="line">in 英寸   1in=2.54cm</span><br><span class="line">pt 磅值，多数用它表示字体大小  1pt=1/72in</span><br><span class="line">cm  mm 厘米，毫米</span><br><span class="line">em 相对单位，相对父元素的倍数</span><br><span class="line">rem 相对单位，相对根元素的倍数(html)</span><br><span class="line">%   相对单位，相对父元素的百分之多少</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="颜色单位"><a href="#颜色单位" class="headerlink" title="颜色单位"></a>颜色单位</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">颜色的英文单词  red blue yellow black orange pink purple</span><br><span class="line">#rrggbb  RGB光学三元色  6个16进制  #006699</span><br><span class="line">#aabbcc---&gt;#abc  #f00  #0f0  #00f  #fff   #000  #333</span><br><span class="line">rgb(r,g,b); r:0~255  g:0~255  b:0~255</span><br><span class="line">rgb(255,255,255);白色</span><br><span class="line">rgb(r%,g%,b%) 此变现形式使用极少</span><br><span class="line">rgba(r,g,b,alpha)  alpha透明度</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="溢出处理"><a href="#溢出处理" class="headerlink" title="溢出处理"></a>溢出处理</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>  <span class="attribute">overflow-x</span>  <span class="attribute">overflow-y</span></span><br><span class="line">当内容多，元素区域小的时候，就会产生溢出效果</span><br><span class="line">默认是纵向溢出</span><br><span class="line">取值：</span><br><span class="line"><span class="number">1</span><span class="selector-class">.visible</span> 可见的，默认值，溢出可见</span><br><span class="line"><span class="number">2</span><span class="selector-class">.hidden</span> 隐藏的，溢出的内容不可见</span><br><span class="line"><span class="number">3</span><span class="selector-class">.scroll</span> 显示滚动条，不管是否溢出，都添加横向和纵向滚动条，(不溢出不可用)</span><br><span class="line"><span class="number">4</span><span class="selector-class">.auto</span> 溢出的部分，显示滚动条，并可用</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="边框属性"><a href="#边框属性" class="headerlink" title="边框属性"></a>边框属性</h4><h5 id="基本属性设置"><a href="#基本属性设置" class="headerlink" title="基本属性设置"></a>基本属性设置</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">border</span>:width style color;</span><br><span class="line"><span class="attribute">width</span>:边框的宽度，以px为单位的数字</span><br><span class="line">style:边框的样式</span><br><span class="line">  取值  solid实线</span><br><span class="line">        dotted虚线(点点)</span><br><span class="line">        dashed虚线(短线)</span><br><span class="line">        double 双实线</span><br><span class="line">color:边框的颜色，合法的颜色值 (transparent 透明色)</span><br><span class="line">这种写法，同时设置<span class="number">4</span>个边框，是一种简写方式</span><br><span class="line">取消边框 border:none/<span class="number">0</span>;</span><br><span class="line">单边设置：</span><br><span class="line">    <span class="attribute">border-top</span>/<span class="attribute">right</span>/<span class="attribute">bottom</span>/<span class="attribute">left</span></span><br><span class="line">    <span class="attribute">border-top</span>:<span class="number">5px</span> solid orange;</span><br><span class="line">    <span class="attribute">border-right</span>:<span class="number">3px</span> dotted <span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>:<span class="number">7px</span> dashed <span class="number">#0ff</span>;</span><br><span class="line">    <span class="attribute">border-left</span>:<span class="number">11px</span> double <span class="number">#f0f</span>;</span><br><span class="line">单属性设置：</span><br><span class="line">    <span class="attribute">border-color</span>:<span class="number">#f00</span>;</span><br><span class="line">    <span class="attribute">border-style</span>:dotted;</span><br><span class="line">    <span class="attribute">border-width</span>:<span class="number">10px</span>;</span><br><span class="line">单边单属性：</span><br><span class="line"><span class="attribute">border</span>-方向-属性(共<span class="number">12</span>个)</span><br><span class="line"><span class="attribute">border-top-style</span>:double;</span><br><span class="line"><span class="attribute">border-top-color</span>:<span class="number">#44f</span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="倒角"><a href="#倒角" class="headerlink" title="倒角"></a>倒角</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">边框的倒角(圆角)</span><br><span class="line">将直角倒成圆角</span><br><span class="line"><span class="attribute">border-radius</span>：</span><br><span class="line">取值  以px为单位的数字</span><br><span class="line">      %   设置圆形(<span class="number">50%</span>)</span><br><span class="line">单角设置</span><br><span class="line">使用两条边去确认一个角，先写上下后写左右</span><br><span class="line"><span class="attribute">border-top-left-radius</span>:左上</span><br><span class="line">border-top-right-radius:右上</span><br><span class="line">border-bottom-left-radius:左下</span><br><span class="line">border-bottom-right-radius:右下</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="边框阴影"><a href="#边框阴影" class="headerlink" title="边框阴影"></a>边框阴影</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color</span><br><span class="line">h-shadow 水平方向阴影偏移，必须值</span><br><span class="line">v-shadow 垂直方向偏移量，必须值</span><br><span class="line">以下可选参数</span><br><span class="line">blur：阴影的模糊距离，可选值，越大模糊距离越明显</span><br><span class="line">spread：阴影的尺寸，指定要在基础阴影上扩出的大小</span><br><span class="line">color：阴影颜色</span><br><span class="line">inset：把默认的外部阴影设置为内部阴影</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="轮廓"><a href="#轮廓" class="headerlink" title="轮廓"></a>轮廓</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">轮廓指的是边框的边框，绘制与边框外边的线条</span><br><span class="line"><span class="attribute">outline</span>:width style color;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="框模型（盒子模型）"><a href="#框模型（盒子模型）" class="headerlink" title="框模型（盒子模型）"></a>框模型（盒子模型）</h4><ul><li>页面元素皆为框（盒子）</li><li>定义了元素框处理元素内容，内边距，外边距以及边框的一种计算模式</li><li>定义了一个元素占地大小的计算方式</li><li>盒子模型默认的计算方式：</li></ul><p>​    <a href="https://imgchr.com/i/A4v2wV"><img src="https://s2.ax1x.com/2019/04/08/A4v2wV.jpg" alt="A4v2wV.jpg"></a></p><ol><li>元素实际占地宽度=左外边距+左边框的宽度+左内边距+内容区域的宽度+右内边距+右边框的宽度+右外边距</li><li>元素实际占地高度=上外+上边框+上内+内容区域高度+下内+下边框+下外</li><li>内边距：元素边框与内容之间的空白间距</li><li>外边距：围绕在元素边框外的空白区域(元素与元素之间的距离)</li></ol><h5 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h5><ul><li>margin 定义4个方向外边距</li><li>margin-top/right/bottom/left 定义某一个方向的外边距</li></ul><p><strong>取值：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.以px为单位的数字</span><br><span class="line">  为正数  <span class="attribute">top</span>，元素往下移动</span><br><span class="line">          <span class="attribute">left</span>, 元素往右移动</span><br><span class="line">  为负数  <span class="attribute">top</span>,元素往上移动</span><br><span class="line">          <span class="attribute">left</span>,元素往左移动</span><br><span class="line"><span class="number">2</span>.取值为%，相对于父元素尺寸的百分比</span><br><span class="line"><span class="number">3</span><span class="selector-class">.auto</span>，自动计算块级元素的外边距，控制块级元素在水平方向居中对齐</span><br><span class="line"><span class="attribute">margin</span>的效果，改变元素在页面上的位置，多用于微调</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>简写方式：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">简写方式</span><br><span class="line"><span class="attribute">margin</span>:value; 设置<span class="number">4</span>个方向外边距</span><br><span class="line"><span class="attribute">margin</span>：v1 v2;     v1:上下外边距   v2：左右外边距</span><br><span class="line">            margin：<span class="number">0</span> auto; 控制块级元素在水平方向居中对齐</span><br><span class="line"><span class="attribute">margin</span>:v1 v2 v3;   v1:上外边距   v2:左右外边距   v3：下外边距</span><br><span class="line">margin:v1 v2 v3 v4; 上 右 下 左(顺时针) </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>自带外边距的元素有哪些：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>~<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">body</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">dl</span>,pre</span><br><span class="line">通常要清除这些元素的自带外边距*&#123;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="外边距的特殊效果"><a href="#外边距的特殊效果" class="headerlink" title="外边距的特殊效果"></a>外边距的特殊效果</h5><h6 id="外边距的合并"><a href="#外边距的合并" class="headerlink" title="外边距的合并"></a>外边距的合并</h6><ul><li>当两个垂直外边距相遇时，他们将合并成一个外边距</li><li>最终的取值，取决于两个外边距中距离大的值</li></ul><h6 id="行内元素以及行内块元素的外边距"><a href="#行内元素以及行内块元素的外边距" class="headerlink" title="行内元素以及行内块元素的外边距"></a>行内元素以及行内块元素的外边距</h6><ul><li>行内元素垂直外边距无效(img除外)，水平外边距相遇两个值会相加</li><li>行内块，设置垂直外边距，整行元素跟着发生变化</li></ul><h6 id="外边距溢出"><a href="#外边距溢出" class="headerlink" title="外边距溢出"></a>外边距溢出</h6><p><strong>在特殊条件下，给子元素设置的上外边距，会作用到父元素上</strong></p><ul><li>特殊条件：<ul><li>父元素没有上边框</li><li>只有第一个子元素设置上边距时</li></ul></li><li>解决方案：<ul><li>为父元素增加上边框；弊端：元素实际占地高度变大</li><li>为父元素添加上内边距；弊端：元素实际占地高度变大</li><li>在父元素的第一个子元素位置添加一个空的&lt;table&gt;</li></ul></li></ul><h5 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h5><ul><li>不会影响其他元素，但是会改变元素自己的占地尺寸，会变大</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">padding</span>:value;设置<span class="number">4</span>个方向的内边距</span><br><span class="line"><span class="attribute">padding-top</span>/<span class="attribute">right</span>/<span class="attribute">bottom</span>/<span class="attribute">left</span> 定义单方向的内边距</span><br><span class="line">取值</span><br><span class="line">以px为单位的数字</span><br><span class="line">或者百分比%</span><br><span class="line">简写方式</span><br><span class="line"><span class="attribute">padding</span>:value; 设置<span class="number">4</span>个方向的内边距</span><br><span class="line"><span class="attribute">padding</span>:v1 v2;  v1:上下   v2:左右   padding没有auto</span><br><span class="line">padding:v1 v2 v3:  v1:上  v2:左右  v3:下</span><br><span class="line">padding:v1 v2 v3 v4;上 右  下  左</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="box-sizing属性"><a href="#box-sizing属性" class="headerlink" title="box-sizing属性"></a>box-sizing属性</h5><ul><li>设置盒子模型的计算方式</li><li>默认计算方式：<ul><li>元素实际占地宽度=左外边距+左边框+左内边距+内容区域宽度+右内边距+右边框+右外边距</li><li>元素实际占地高度=上外边距+上边框+上内边距+内容区域高度+下内边距+下边框+下外边距</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>取值</span><br><span class="line"><span class="attribute">content</span>-box 默认值，会采用默认计算方式</span><br><span class="line"><span class="attribute">border</span>-box 元素的尺寸(定义宽高)，包含<span class="attribute">border</span>,<span class="attribute">padding</span>和内容区域宽高</span><br><span class="line">元素实际占地宽度=左右外边距+设置的宽度<span class="attribute">width</span></span><br><span class="line">元素实际占地高度=上下外边距+设置的高度<span class="attribute">height</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="块级元素，行内元素，行内块"><a href="#块级元素，行内元素，行内块" class="headerlink" title="块级元素，行内元素，行内块"></a>块级元素，行内元素，行内块</h5><table><thead><tr><th>块级元素：独立成行，可以设置宽高，margin上下有效</th></tr></thead><tbody><tr><td>行内元素：与其他行内元素和行内块，共用一行          宽高无效，margin上下无效</td></tr><tr><td>行内块：与其他行内元素和行内块，共用一行        可以设置宽高，margin上下有效        一行行内元素，其中一个设置了上下margin,整行都跟着移动</td></tr></tbody></table><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h4 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-color</span>:</span><br><span class="line">取值</span><br><span class="line">合法的颜色值</span><br><span class="line">transparent;透明</span><br><span class="line">注意：背景色的填充，默认从边框位置处开始</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background-image:url(资源路径)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="背景图片平铺"><a href="#背景图片平铺" class="headerlink" title="背景图片平铺"></a>背景图片平铺</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>:</span><br><span class="line">取值</span><br><span class="line"><span class="number">1</span>.repeat 默认值，平铺</span><br><span class="line"><span class="number">2</span>.repeat-x  水平方向平铺</span><br><span class="line"><span class="number">3</span>.repeat-y垂直方向平铺</span><br><span class="line"><span class="number">4</span>.no-repeat 不平铺，只显示一张</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="背景图的定位"><a href="#背景图的定位" class="headerlink" title="背景图的定位"></a>背景图的定位</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-position</span>：x  y </span><br><span class="line">取值</span><br><span class="line"><span class="number">1</span>.以px为单位的数字</span><br><span class="line">  指的是，图片在水平和垂直方向的偏移量</span><br><span class="line"><span class="number">2</span><span class="selector-class">.x</span>% y%</span><br><span class="line"> <span class="number">50%</span> <span class="number">50%</span>中间</span><br><span class="line"> <span class="number">0%</span> <span class="number">0%</span> 左上</span><br><span class="line"> <span class="number">100%</span> <span class="number">100%</span> 右下</span><br><span class="line"><span class="number">3</span>.关键字</span><br><span class="line">  x：<span class="attribute">left</span>/center/<span class="attribute">right</span></span><br><span class="line">  y: top/center/bottom</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="背景图的尺寸"><a href="#背景图的尺寸" class="headerlink" title="背景图的尺寸"></a>背景图的尺寸</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-size</span>: width  height</span><br><span class="line">取值：</span><br><span class="line"><span class="number">1</span>.以px为单位的数字</span><br><span class="line"><span class="number">2</span>.%</span><br><span class="line"><span class="number">3</span>.cover，填满容器，图片的宽高比不变，铺满整个容器的宽高，图片溢出的部分会被裁减掉</span><br><span class="line">将背景图同比缩放，直到背景图完全覆盖容器，不留一丝空白，图片溢出的部分会被裁减掉</span><br><span class="line">图片可能会显示不完整，但是容器完全被背景图充满</span><br><span class="line"><span class="number">4</span>.contain 图片自身宽高比不变，但是，要缩放到图片能够完全展示出来，所以会有空白区域</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="背景图的固定"><a href="#背景图的固定" class="headerlink" title="背景图的固定"></a>背景图的固定</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span>:</span><br><span class="line">将背景图固定在网页某个位置，一直在可视的区域中显示，不会随着网页滚动条改变位置</span><br><span class="line">取值：<span class="number">1</span>.scroll 默认值，会随着网页滚动条改变位置</span><br><span class="line">      <span class="number">2</span>.fixed 固定，不会随着网页滚动条改变位置</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="背景的简写方式"><a href="#背景的简写方式" class="headerlink" title="背景的简写方式"></a>背景的简写方式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在一个属性中，指定背景多个值</span><br><span class="line">属性：<span class="attribute">background</span></span><br><span class="line">取值：<span class="attribute">color</span> url repeat attachment <span class="attribute">position</span></span><br><span class="line"><span class="attribute">background</span>:<span class="number">#faa</span> <span class="built_in">url</span>(<span class="string">&#x27;08.png&#x27;</span>) no-repeat center center;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="布局流程构思"><a href="#布局流程构思" class="headerlink" title="布局流程构思"></a>布局流程构思</h4><ol><li>先写结构布局</li><li>定义宽高，大体的位置</li><li>背景颜色图，边框所有</li><li>文字的所有</li><li>微调<ol><li>从外往里写，从左往右，从上往下写</li></ol></li></ol><h4 id="渐变—gradient"><a href="#渐变—gradient" class="headerlink" title="渐变—gradient"></a>渐变—gradient</h4><h5 id="什么是渐变"><a href="#什么是渐变" class="headerlink" title="什么是渐变"></a>什么是渐变</h5><ul><li>多种颜色平缓变化的一种显示效果</li></ul><h5 id="渐变的主要因素—色标"><a href="#渐变的主要因素—色标" class="headerlink" title="渐变的主要因素—色标"></a>渐变的主要因素—色标</h5><p>​    色标，一种颜色以及他出现的位置</p><ul><li>一个渐变至少有两个色标</li></ul><h5 id="渐变的分类"><a href="#渐变的分类" class="headerlink" title="渐变的分类"></a>渐变的分类</h5><ul><li>线性渐变，以直线的方向来填充渐变色</li><li>径向渐变，以圆形的方式实现渐变色</li><li>重复渐变，将线性渐变，或径向渐变 重复几次</li></ul><h5 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span></span><br><span class="line">取值：</span><br><span class="line">新版本：linear-gradient(方向，色标<span class="number">1</span>，色标<span class="number">2</span>........)</span><br><span class="line">色标的写法：颜色的合法值 位置的百分比</span><br><span class="line">方向取值：<span class="selector-tag">to</span> <span class="attribute">top</span>/<span class="attribute">right</span>/<span class="attribute">bottom</span>/<span class="attribute">left</span></span><br><span class="line">          角度  按顺时针计算  </span><br><span class="line">                 <span class="number">0deg</span>   <span class="selector-tag">to</span> <span class="attribute">top</span></span><br><span class="line">                 <span class="number">90deg</span>  <span class="selector-tag">to</span> <span class="attribute">right</span></span><br><span class="line">                 <span class="number">180deg</span> <span class="selector-tag">to</span> <span class="attribute">bottom</span></span><br><span class="line">                 <span class="number">270deg</span>  <span class="selector-tag">to</span> <span class="attribute">left</span></span><br><span class="line">旧版本写法：-浏览器内核-linear-gradient(方向,色标<span class="number">1</span>,色标<span class="number">2</span>....)</span><br><span class="line">           方向  <span class="attribute">top</span>/<span class="attribute">right</span>/<span class="attribute">bottom</span>/<span class="attribute">left</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>:<span class="built_in">radial-gradient</span>(半径 at 圆心,色标<span class="number">1</span>,色标<span class="number">2</span>......);</span><br><span class="line">半径：以px为单位的数字</span><br><span class="line">圆心：x y，以px为单位的具体数值</span><br><span class="line">      x% y% 元素的宽高占比</span><br><span class="line">     关键字  x<span class="selector-pseudo">:left</span>/center/<span class="attribute">right</span></span><br><span class="line">             y:top/center/bottom</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="重复线性渐变"><a href="#重复线性渐变" class="headerlink" title="重复线性渐变"></a>重复线性渐变</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">repeating-linear-gradient(<span class="selector-tag">to</span> <span class="attribute">right</span>,<span class="selector-id">#faa</span> <span class="number">0px</span>,<span class="selector-id">#ffa</span> <span class="number">50px</span>);</span><br><span class="line">注意在重复渐变中，色标的位置，要给绝对值数字，不要用%</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="重复的径向渐变"><a href="#重复的径向渐变" class="headerlink" title="重复的径向渐变"></a>重复的径向渐变</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repeating-radial-gradient(<span class="number">50px</span> at center center,<span class="selector-id">#060606</span> <span class="number">0px</span>,<span class="selector-id">#af8bd8</span> <span class="number">20px</span>,<span class="selector-id">#292727</span> <span class="number">35px</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="浏览器兼容性"><a href="#浏览器兼容性" class="headerlink" title="浏览器兼容性"></a>浏览器兼容性</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">各个浏览器新版本都渐变</span><br><span class="line">对于不支持的旧版本，可以添加浏览器内核前缀的方式，做兼容，让浏览器支持</span><br><span class="line">chrome&amp;safari: -webkit-</span><br><span class="line">firefox:-moz-</span><br><span class="line">ie:-ms-</span><br><span class="line">opera: -o-  </span><br><span class="line">background: <span class="built_in">-webkit-linear-gradient</span>(left, <span class="number">#006699</span> <span class="number">0%</span>,<span class="number">#f00</span> <span class="number">25%</span>, <span class="number">#990066</span> <span class="number">50%</span>,<span class="number">#ff0</span> <span class="number">75%</span>,<span class="number">#996600</span> <span class="number">100%</span>); </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h2><h4 id="字体属性"><a href="#字体属性" class="headerlink" title="字体属性"></a>字体属性</h4><h5 id="指定字体的类型"><a href="#指定字体的类型" class="headerlink" title="指定字体的类型"></a>指定字体的类型</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-family</span>:<span class="string">&quot;类型1&quot;</span>,<span class="string">&quot;类型2&quot;</span>....</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-size</span>:以px、pt为单位的数字或者以em或rem;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-3字体加粗"><a href="#1-3字体加粗" class="headerlink" title="1.3字体加粗"></a>1.3字体加粗</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-weight</span>:bold/normal/lighter/bolder</span><br><span class="line">无单位的数字  <span class="number">100</span>-<span class="number">1000</span>整百数 常用<span class="number">400</span>-<span class="number">900</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-4字体样式"><a href="#1-4字体样式" class="headerlink" title="1.4字体样式"></a>1.4字体样式</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-style</span>：<span class="attribute">normal</span></span><br><span class="line">italic（斜体）</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-5小型大写字母"><a href="#1-5小型大写字母" class="headerlink" title="1.5小型大写字母"></a>1.5小型大写字母</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">font-variant</span>:normal</span><br><span class="line"> small-caps</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="文本格式化-1"><a href="#文本格式化-1" class="headerlink" title="文本格式化"></a>文本格式化</h4><h5 id="文本颜色"><a href="#文本颜色" class="headerlink" title="文本颜色"></a>文本颜色</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">color:合法的颜色值</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-2-文本的水平对齐方式"><a href="#2-2-文本的水平对齐方式" class="headerlink" title="2.2.文本的水平对齐方式"></a>2.2.文本的水平对齐方式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text-align</span><br><span class="line">left/center/right/justify(两端对齐)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-3行高"><a href="#2-3行高" class="headerlink" title="2.3行高"></a>2.3行高</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">定义一行数据的高度</span><br><span class="line">如果行高大于字体本身的大小，该行文本在行高内成垂直居中的显示效果</span><br><span class="line">line-height:</span><br><span class="line">以px为单位的数字，一般与容器的高相同</span><br><span class="line">无单位数字，line-height:2;  是字体大小的倍数</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-4-线条的修饰"><a href="#2-4-线条的修饰" class="headerlink" title="2.4.线条的修饰"></a>2.4.线条的修饰</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">text-decoration</span><br><span class="line">none 没有线条，去掉a标签的下划线</span><br><span class="line">overline 上划线</span><br><span class="line">underline 下划线</span><br><span class="line">line-through 删除线</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-5-首行缩进"><a href="#2-5-首行缩进" class="headerlink" title="2.5.首行缩进"></a>2.5.首行缩进</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text-indent:</span><br><span class="line">以px为单位的数字</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-6-文本的阴影"><a href="#2-6-文本的阴影" class="headerlink" title="2.6.文本的阴影"></a>2.6.文本的阴影</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">text-shadow:</span><br><span class="line">h-shadow  v-shadow blur color;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h4 id="表格的常用属性"><a href="#表格的常用属性" class="headerlink" title="表格的常用属性"></a>表格的常用属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">边框属性 <span class="selector-tag">table</span>和<span class="selector-tag">td</span></span><br><span class="line">边距属性 <span class="selector-tag">table</span>都能使用，<span class="selector-tag">td</span>没有<span class="attribute">margin</span></span><br><span class="line">尺寸属性 </span><br><span class="line">文本格式属性 <span class="attribute">font</span>-* text-* <span class="attribute">line-height</span></span><br><span class="line">背景属性 颜色 图片 渐变</span><br><span class="line"><span class="attribute">vertical-align</span>:top/middle/bottom  要写在td才生效</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="表格特有的属性"><a href="#表格特有的属性" class="headerlink" title="表格特有的属性"></a>表格特有的属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">1.边框合并</span><br><span class="line">    border-collapse：</span><br><span class="line">    separate 默认，边框分离的模式</span><br><span class="line">    collapse 边框合并</span><br><span class="line">2.边框的边距</span><br><span class="line">设置单元格与单元格之间的距离,必须保证border-collapse:separate;</span><br><span class="line">    border-spacing</span><br><span class="line">    取值一个value,垂直和水平距离相同</span><br><span class="line">    取值两个value1 value2. value1:水平距离，value2:垂直距离</span><br><span class="line">3.标题的位置</span><br><span class="line">    caption-side=&quot;&quot;</span><br><span class="line">   top/bottom</span><br><span class="line">4.表格的显示规则,告诉浏览器，我这张表格如果渲染，td尺寸的计算方式</span><br><span class="line">table-layout:</span><br><span class="line">auto 默认值，自动表格布局，列的尺寸实际是由内容决定的</span><br><span class="line">fixed 固定表格的布局，列的尺寸由设置的值决定需要table有尺寸，td有尺寸</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>自动布局auto</th><th>固定布局fixed</th></tr></thead><tbody><tr><td>单元格的大小会适应内容</td><td>单元格尺寸取决于设定的值</td></tr><tr><td>表格复杂时，加载的速度慢(缺点)</td><td>任何情况下会加速加载表格(优点)</td></tr><tr><td>布局会比较灵活(优点)</td><td>布局会比较死板(缺点)</td></tr><tr><td>适用于不确定每列大小，并且表格不太繁琐的时候</td><td>当确定每列尺寸的时候使用</td></tr></tbody></table><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h4 id="什么是定位"><a href="#什么是定位" class="headerlink" title="什么是定位"></a>什么是定位</h4><p>​    元素在页面中的位置</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li>普通流定位   默认文档流</li><li>浮动定位</li><li>相对定位</li><li>绝对定位</li><li>固定定位</li></ul><h4 id="普通流定位"><a href="#普通流定位" class="headerlink" title="普通流定位"></a>普通流定位</h4><p>​    又称文档流定位，页面中所有元素默认显示方式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.每个元素在页面中都有自己的空间(盒子模型)</span><br><span class="line">2.每个元素都是从父元素的左上角开始显示的</span><br><span class="line">3.块级元素默认按照从上往下的方式逐个排列，每个元素独占一样</span><br><span class="line">4.行内元素是多个元素在一行中显示，从左往右排列</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="相对-绝对-固定定位-position属性"><a href="#相对-绝对-固定定位-position属性" class="headerlink" title="相对/绝对/固定定位 position属性"></a>相对/绝对/固定定位 position属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span></span><br><span class="line">取值</span><br><span class="line">static 静态，默认值。文档流定位</span><br><span class="line">relative 相对定位</span><br><span class="line">absolute 绝对定位</span><br><span class="line">fixed 固定定位</span><br><span class="line">注意:将元素的position设置为relative/absolute/fixed中的任意一个</span><br><span class="line">此元素被称为已定位元素</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="偏移属性"><a href="#偏移属性" class="headerlink" title="偏移属性"></a>偏移属性</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">top</span>/<span class="attribute">right</span>/<span class="attribute">bottom</span>/<span class="attribute">left</span>   距离哪个方向多远</span><br><span class="line">取值是以px为单位的数字</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">元素相对于它原来的位置偏移</span><br><span class="line">在元素位置做微调的时候使用/配合绝对定位使用</span><br><span class="line"><span class="attribute">position</span>:relative;配合偏移属性使用</span><br><span class="line">相对定位不脱离文档流，不会让后面元素补位</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">position</span>:absolute;配合偏移属性使用</span><br><span class="line">特点</span><br><span class="line">脱离文档流，不占页面空间，后面元素要补位</span><br><span class="line">绝对定位的元素，会相对于&quot;最近的&quot;&quot;已定位的&quot;&quot;祖先元素&quot;去做偏移量</span><br><span class="line">绝对定位的元素，没有&quot;已定位的&quot;&quot;祖先元素&quot;，相对<span class="selector-tag">body</span>偏移</span><br><span class="line">绝对定位会让元素变为块级</span><br><span class="line">出现堆叠效果，就使用绝对定位</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">将元素固定在页面的某个位置，位置不会随着滚动条发生变化，一直固定在可视区域</span><br><span class="line">固定定位始终相当于body去实现位置偏移</span><br><span class="line">固定定位脱离文档流，不占页面空间，定位的元素会变成块级</span><br><span class="line">position:fixed;配合偏移属性一起使用</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="堆叠顺序"><a href="#堆叠顺序" class="headerlink" title="堆叠顺序"></a>堆叠顺序</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">默认堆叠顺序，后发生定位的元素，堆叠层级高</span><br><span class="line">默认堆叠顺序，不会大于设置z-index的顺序</span><br><span class="line">z-index:无单位数字，理论最大值 2^31-1</span><br><span class="line">父子元素之间，子元素永远在父元素上面</span><br><span class="line">只有已定位元素，才能使用z-index</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><h5 id="浮动特点"><a href="#浮动特点" class="headerlink" title="浮动特点"></a>浮动特点</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.元素一旦浮动起了，脱离文档流</span><br><span class="line">不占页面空间，其它未浮动元素会上前补位</span><br><span class="line">2.浮动元素会停靠在父元素的左边或者右边</span><br><span class="line">或其它已经浮动元素的左/右的边缘</span><br><span class="line">3.浮动解决多个块级元素在同一行内显示的问题</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">属性 float：</span><br><span class="line">取值：</span><br><span class="line">left：左浮动，元素浮动起来后，停靠在父元素的左侧，或者往左挨着已浮动元素</span><br><span class="line">right：右浮动，元素浮动起来后，停靠在父元素的右侧，或者往右挨着已浮动元素</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="浮动元素引发的特殊情况"><a href="#浮动元素引发的特殊情况" class="headerlink" title="浮动元素引发的特殊情况"></a>浮动元素引发的特殊情况</h5><h6 id="1-当父容器横向显示不下所有浮动元素的时候，最后一个元素将换行显示"><a href="#1-当父容器横向显示不下所有浮动元素的时候，最后一个元素将换行显示" class="headerlink" title="1.当父容器横向显示不下所有浮动元素的时候，最后一个元素将换行显示"></a>1.当父容器横向显示不下所有浮动元素的时候，最后一个元素将换行显示</h6><p>  1.1默认情况下，最后一个元素会优先显示在最高的位置，再往左排列<br>  1.2会发生浮动元素占位的情况，浮动元素根据浮动方向，占据方向之上的位置，不允许最后一个元素占用</p><h6 id="2-浮动对默认宽度的影响"><a href="#2-浮动对默认宽度的影响" class="headerlink" title="2.浮动对默认宽度的影响"></a>2.浮动对默认宽度的影响</h6><p>​    块级元素不写宽度，宽度默认是父级元素的100%<br>​    元素一旦浮动起来，宽度以内容为准<br>​    前题，不设置width</p><h6 id="3-元素一旦浮动起来，就变为块级元素，允许修改尺寸，设置垂直外边距"><a href="#3-元素一旦浮动起来，就变为块级元素，允许修改尺寸，设置垂直外边距" class="headerlink" title="3.元素一旦浮动起来，就变为块级元素，允许修改尺寸，设置垂直外边距"></a>3.元素一旦浮动起来，就变为块级元素，允许修改尺寸，设置垂直外边距</h6><h6 id="4-文本，行内元素，行内块，是不会被浮动元素压在下方的，二会巧妙避开，环绕着浮动元素显示"><a href="#4-文本，行内元素，行内块，是不会被浮动元素压在下方的，二会巧妙避开，环绕着浮动元素显示" class="headerlink" title="4.文本，行内元素，行内块，是不会被浮动元素压在下方的，二会巧妙避开，环绕着浮动元素显示"></a>4.文本，行内元素，行内块，是不会被浮动元素压在下方的，二会巧妙避开，环绕着浮动元素显示</h6><h5 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">元素一旦浮动之后，会对后续的元素带来一定的影响，后续元素会上前补位，如果不希望后续上前补位，可以给后续元素添加清除浮动的属性</span><br><span class="line">clear:</span><br><span class="line">取值</span><br><span class="line">        left:清除左浮动元素对我带来的影响</span><br><span class="line">        right:清除右浮动元素对我带来的影响</span><br><span class="line">        both: 清除所有浮动元素对我带来的影响</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="浮动元素对父元素高度带来的影响-高度坍塌"><a href="#浮动元素对父元素高度带来的影响-高度坍塌" class="headerlink" title="浮动元素对父元素高度带来的影响(高度坍塌)"></a>浮动元素对父元素高度带来的影响(高度坍塌)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">块级元素不写高度，他的高度是根据内容判定的</span><br><span class="line">如果内部元素都浮动了，内部元素都脱了默认文档流</span><br><span class="line">父级元素就失去了高度------高度坍塌</span><br><span class="line">解决方案：</span><br><span class="line">1.给父级元素添加高度 弊端：不是每次都知道具体的高度是多少</span><br><span class="line">2.设置父级元素也浮动 弊端：会影响父元素后面的其它元素</span><br><span class="line">3.给父元素设置overflow:hidden/auto 弊端：如果内容想要溢出显示，显示不了。</span><br><span class="line">4.在父元素中追加一个空的块级元素，只设置clear:both</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><h4 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">决定了元素在网页中表现形式(块级，行内，行内块，<span class="selector-tag">table</span>)</span><br><span class="line">语法 <span class="attribute">display</span></span><br><span class="line">取值：</span><br><span class="line"><span class="number">1</span><span class="selector-class">.none</span> 不显示元素，隐藏</span><br><span class="line"><span class="number">2</span><span class="selector-class">.block</span> 让元素表现为块级</span><br><span class="line">        块级元素特征，独占一行，可以设置尺寸以及上下外边距</span><br><span class="line"><span class="number">3</span><span class="selector-class">.inline</span> 让元素表现为行内</span><br><span class="line">        行内元素特征，多个元素一行显示，不能设置宽高以下上下外边距</span><br><span class="line"><span class="number">4</span><span class="selector-class">.inline-block</span> 让元素表现为行内块</span><br><span class="line">       行内块特征，多个元素一行显示，可以设置尺寸以及上下外边距</span><br><span class="line"><span class="number">5</span><span class="selector-class">.table</span> 让元素表现为<span class="selector-tag">table</span></span><br><span class="line">      <span class="selector-tag">table</span>的特征：尺寸以内容为准，独占一行，允许修改尺寸</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="显示的效果"><a href="#显示的效果" class="headerlink" title="显示的效果"></a>显示的效果</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">属性：visibility</span><br><span class="line">取值  visible/hidden</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>visibility:hidden和display:none的区别<ul><li>visibility:hidden隐藏，不脱离默认文档流，依然占位</li><li>display:none 隐藏，脱离了默认文档，不占页面位置</li></ul></li></ul><h4 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h4><p>​    opacity:0~1  1是不透明，0是全透明</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">opacity</span>和rgba的区别</span><br><span class="line"><span class="attribute">opacity</span>作用与元素，当一个元素设置了<span class="attribute">opacity</span>之后，</span><br><span class="line">       这个元素本身，以及所有子元素，与颜色相关的属性，都会受到影响</span><br><span class="line">rgba(<span class="number">0</span>~<span class="number">255</span>,<span class="number">0</span>~<span class="number">255</span>,<span class="number">0</span>~<span class="number">255</span>,<span class="number">0.5</span>)只会改变你设定的这个颜色透明度</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="垂直对齐"><a href="#垂直对齐" class="headerlink" title="垂直对齐"></a>垂直对齐</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span></span><br><span class="line">    使用在<span class="selector-tag">table</span>中,取值<span class="attribute">top</span>/middle/<span class="attribute">bottom</span></span><br><span class="line">    使用在<span class="selector-tag">img</span>中，取值 <span class="attribute">top</span>/middle/<span class="attribute">bottom</span>/baseline</span><br><span class="line">    控制图片与两边文字垂直对齐方式</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">改变鼠标悬停在元素时的样式</span><br><span class="line"><span class="attribute">cursor</span>:</span><br><span class="line">取值</span><br><span class="line"><span class="number">1</span>.default 箭头</span><br><span class="line"><span class="number">2</span>.pointer 小手</span><br><span class="line"><span class="number">3</span>.crosshair  +</span><br><span class="line"><span class="number">4</span>.text  I</span><br><span class="line"><span class="number">5</span>.wait  等待</span><br><span class="line"><span class="number">6</span>.help 帮助</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h4 id="列表标识"><a href="#列表标识" class="headerlink" title="列表标识"></a>列表标识</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style-type</span>:</span><br><span class="line">                none;</span><br><span class="line">                disc;</span><br><span class="line">                circle;</span><br><span class="line">                square;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="列表标识的位置"><a href="#列表标识的位置" class="headerlink" title="列表标识的位置"></a>列表标识的位置</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style-position</span>:outside/inside;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="列表项引用图片"><a href="#列表项引用图片" class="headerlink" title="列表项引用图片"></a>列表项引用图片</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style-image</span>:<span class="built_in">url</span>();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="简写方式"><a href="#简写方式" class="headerlink" title="简写方式"></a>简写方式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">list-style</span>:type <span class="built_in">url</span>() position;</span><br><span class="line">常用的方式  <span class="attribute">list-style</span>:none;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CSS3-core"><a href="#CSS3-core" class="headerlink" title="CSS3 core"></a>CSS3 core</h2><h4 id="复杂选择器"><a href="#复杂选择器" class="headerlink" title="复杂选择器"></a>复杂选择器</h4><h5 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a><strong>兄弟选择器</strong></h5><ul><li>作用于兄弟元素，只能往后找，不能往前找</li><li>兄弟元素：具备相同父级元素的平级元素之间，成为兄弟元素</li></ul><h5 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a><strong>相邻兄弟选择器</strong></h5><p>​    选择器1+选择器2{}  </p><p>​    在选择器1的后面，紧跟着一个元素，这个元素还得匹配到选择2</p><h5 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="通用兄弟选择器"></a><strong>通用兄弟选择器</strong></h5><p>​    获取某元素后面所有满足条件的兄弟元素</p><p>​    选择器1~选择器2{}</p><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id class name type value style titile ....</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    允许通过元素所带的属性以及值来匹配元素</p><h5 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h5><p>   [attr]{}  ex:[id]{}匹配有id属性的标签</p><h5 id="elem-attr"><a href="#elem-attr" class="headerlink" title="elem[attr]"></a><strong>elem[attr]</strong></h5><p>   div[title]{}  匹配有title属性的div标签</p><h5 id="attr1-attr2"><a href="#attr1-attr2" class="headerlink" title="[attr1][attr2]"></a><strong>[attr1</strong>][attr2]</h5><p>   [class][title]{color:#f00;} 匹配同时具有class属性和title属性</p><h5 id="attr-value"><a href="#attr-value" class="headerlink" title="[attr=value]{}"></a><strong>[attr=value]{}</strong></h5><p>   [id=p2]{} 匹配id值为p2的元素</p><p>   [attr*=value]属性值中，包含指定值的元素</p><p>   [attr~=value]属性值中，包含指定单词的元素</p><p>   [attr^=value] 属性值中,以value开头的元素</p><p>   [attr$=value] 属性值中,以value结尾的元素</p><h4 id="伪类选择器-1"><a href="#伪类选择器-1" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><h5 id="3目标伪类"><a href="#3目标伪类" class="headerlink" title="3目标伪类"></a>3目标伪类</h5><p>   突出显示获得的HTML锚点元素，匹配被激活的锚点</p><p>   选择器:target{}     div:target{}</p><h5 id="结构伪类"><a href="#结构伪类" class="headerlink" title="结构伪类"></a>结构伪类</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ele:first-child&#123;&#125;  匹配的元素是其父元素的第一个子元素</span><br><span class="line">ele:last-child&#123;&#125;  匹配的元素是其父元素的最后一个子元素</span><br><span class="line">ele:nth-child(n)&#123;&#125;  匹配的元素是其父元素的第n个子元素，n从1开始</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="empty"><a href="#empty" class="headerlink" title=":empty"></a>:empty</h4><p>匹配没有子元素的元素</p><p>div:empty{}  匹配没有子元素的div元素</p><h4 id="only-child"><a href="#only-child" class="headerlink" title=":only-child"></a>:only-child</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:only-child</span>&#123;&#125;  匹配属于其父元素的唯一子元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="否定伪类-not-selector"><a href="#否定伪类-not-selector" class="headerlink" title="否定伪类 :not(selector)"></a>否定伪类 :not(selector)</h4><p>div:not(:empty){} 匹配非空的div</p><h4 id="内容生成"><a href="#内容生成" class="headerlink" title="内容生成"></a>内容生成</h4><p>使用css动态的向元素中插入一段内容</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="selector-pseudo">:before</span>或者<span class="selector-pseudo">::before</span></span><br><span class="line">匹配元素的内容区域之前，插入的伪元素</span><br><span class="line"><span class="number">2</span>.<span class="selector-pseudo">:after</span>或者<span class="selector-pseudo">::after</span></span><br><span class="line">匹配元素的内容区域之后，插入的伪元素</span><br><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;d1&quot;&gt;</span><br><span class="line">  (<span class="selector-pseudo">::before</span>)</span><br><span class="line">  我是要成为海贼王的男人</span><br><span class="line">  (<span class="selector-pseudo">::after</span>)</span><br><span class="line">&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="内容生成可以解决的问题"><a href="#内容生成可以解决的问题" class="headerlink" title="内容生成可以解决的问题"></a>内容生成可以解决的问题</h5><p>外边距溢出</p><p> 父元素没有上边框，给第一个子元素设置上外边距，父元素也会发生作用</p><p> 解决方案，在第一个元素之前添加一个&lt; table &gt;&lt; /table&gt;</p><h2 id="弹性布局和转换"><a href="#弹性布局和转换" class="headerlink" title="弹性布局和转换"></a>弹性布局和转换</h2><h4 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h4><h5 id="什么是弹性布局"><a href="#什么是弹性布局" class="headerlink" title="什么是弹性布局"></a>什么是弹性布局</h5><p>弹性布局就是一种布局方式</p><p>主要解决某元素中的子元素的布局方式，为布局提供最大的灵活性</p><h5 id="弹性布局的相关概念和专业术语"><a href="#弹性布局的相关概念和专业术语" class="headerlink" title="弹性布局的相关概念和专业术语"></a>弹性布局的相关概念和专业术语</h5><p><a href="https://imgchr.com/i/EP3ahn"><img src="https://s2.ax1x.com/2019/04/20/EP3ahn.jpg" alt="EP3ahn.jpg"></a></p><h6 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h6><p>要布局的子元素的父元素称之为容器，容器中写display:flex</p><h6 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h6><p>要布局的子元素称之为项目</p><h6 id="主轴"><a href="#主轴" class="headerlink" title="主轴"></a>主轴</h6><p>项目们排列的方向，称之为主轴（水平和垂直）</p><p>如果项目们是按照横向排列，x轴就是主轴</p><p>如果项目们是按照纵向排列，y轴就是主轴</p><h6 id="交叉轴"><a href="#交叉轴" class="headerlink" title="交叉轴"></a>交叉轴</h6><p>与主轴垂直相交的方向轴叫做交叉轴</p><p>语法：</p><p>将元素变为弹性容器，他所有的子元素将变成弹性项目，按照弹性布局的方式去排列显示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span></span><br><span class="line">取值：<span class="attribute">flex</span>,  将块级元素变为容器</span><br><span class="line">inline-<span class="attribute">flex</span>,将行内元素变为容器</span><br><span class="line">元素设置为<span class="attribute">flex</span>容器之后，子元素一些样式属性会失效</span><br><span class="line"><span class="attribute">float</span>/<span class="attribute">clear</span>/<span class="attribute">vertical-align</span>失效</span><br><span class="line">子元素允许修改尺寸(项目是行内元素也可以修改尺寸)</span><br><span class="line">容器的对齐方式<span class="attribute">text-align</span>失效</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="弹性容器的样式属性"><a href="#弹性容器的样式属性" class="headerlink" title="弹性容器的样式属性"></a>弹性容器的样式属性</h4><h5 id="flex-direction-主轴方向"><a href="#flex-direction-主轴方向" class="headerlink" title="flex-direction 主轴方向"></a>flex-direction 主轴方向</h5><p>取值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">row 默认值，主轴是x轴，主轴起点在左端</span><br><span class="line">row-reverse, 主轴是x轴，主轴起点在右端</span><br><span class="line">column     主轴是y轴，主轴起点在顶端</span><br><span class="line">column-reverse主轴是y轴，主轴起点在底部</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h5><p>当一个主轴排列不下所有项目时,项目的显示方式</p><p>取值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nowrap 默认值，空间不够，不换行，项目会自动压缩</span><br><span class="line">wrap 空间不够，就换行，项目不压缩</span><br><span class="line">wrap-reverse 换行，反转</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">是<span class="attribute">flex-direction</span>和<span class="attribute">flex-wrap</span>的缩写</span><br><span class="line">取值  <span class="attribute">direction</span> wrap;</span><br><span class="line">ex:flex-flow:row wrap;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">定义项目在主轴上的对齐方式</span><br><span class="line">取值：</span><br><span class="line">     space-between 两端对齐</span><br><span class="line">     space-around 每个间距相同</span><br><span class="line">     <span class="attribute">flex</span>-start 默认值 在主轴起点对齐</span><br><span class="line">     <span class="attribute">flex</span>-end  在主轴的终点对齐</span><br><span class="line">     center  在主轴上居中对齐</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="align-items-容器高度大于项目高度"><a href="#align-items-容器高度大于项目高度" class="headerlink" title="align-items (容器高度大于项目高度)"></a>align-items (容器高度大于项目高度)</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">项目们在交叉轴上的对齐方式</span><br><span class="line">取值：</span><br><span class="line"><span class="number">1</span><span class="selector-class">.flex-start</span> 交叉轴起点对齐</span><br><span class="line"><span class="number">2</span><span class="selector-class">.flex-end</span> 交叉轴终点对齐</span><br><span class="line"><span class="number">3</span><span class="selector-class">.center</span>   交叉轴居中对齐</span><br><span class="line"><span class="number">4</span><span class="selector-class">.baseline</span> 交叉轴基线对齐</span><br><span class="line"><span class="number">5</span><span class="selector-class">.stretch</span>  如果项目未设置高度，在交叉轴上充满容器</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h4><ul><li>是单独设置给一个项目的，不影响容器和其他项目</li></ul><h5 id="order"><a href="#order" class="headerlink" title="order"></a>order</h5><ul><li>取值为无单位的整数，定义项目的排列顺序，值越小，离起点越近，默认值为0；</li></ul><h5 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h5><ul><li>定义项目的放大比例</li><li>如果容器有足够大的剩余空间，项目将按照比例放大</li><li>取值为无单位整数，</li><li>默认值为0.不放大。取值越大，占据的剩余空间越多</li></ul><h5 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h5><ul><li>定义项目的缩小比例，空间不足时，项目该如何缩小</li><li>取值为无单位整数</li><li>默认值为1，空间不足，等比缩小</li><li>0，不缩小</li><li>取值越大，占据的空间越小</li></ul><h5 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">控制当前项目在交叉轴上对齐方式，与其他项目无关</span><br><span class="line"><span class="attribute">flex</span>-start 交叉轴起点对齐</span><br><span class="line"><span class="attribute">flex</span>-end 交叉轴终点对齐</span><br><span class="line">center   交叉轴居中对齐</span><br><span class="line">baseline 交叉轴基线对齐</span><br><span class="line">stretch  如果项目未设置高度，在交叉轴上充满容器</span><br><span class="line">auto  继承容器的<span class="attribute">align-items</span>的效果</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><ul><li><p>改变元素在页面中的 位置 大小 角度 形状等的一种方式</p></li><li><p>2D转换，在X轴和Y轴上，发生转换效果</p></li><li><p>D转换，添加了Z轴</p></li><li><p>转换属性:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span></span><br><span class="line">取值：<span class="attribute">transform</span>-function:</span><br><span class="line">none</span><br><span class="line">如果有多个转换函数，用空格隔开</span><br><span class="line">转换原点</span><br><span class="line">transform-origin:</span><br><span class="line">取值：px为单位的数字/%/关键字</span><br><span class="line"><span class="number">2</span>个值，表示原点在x轴和y轴的位置</span><br><span class="line"><span class="number">3</span>个值，x，y，z轴</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2D转换函数</strong></p><ol><li>位移：改变元素在页面中的位置</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">translate</span>(x)</span><br><span class="line">指定元素在x轴上的位移距离</span><br><span class="line">+元素往右</span><br><span class="line">-元素往左</span><br><span class="line">transform:<span class="built_in">translate</span>(x,y)指定元素在x和y轴上的位移距离</span><br><span class="line">x取值同上</span><br><span class="line">y取值 +元素往下-元素往上</span><br><span class="line">transform:<span class="built_in">translateX</span>(x)指定元素在x轴上的位移距离</span><br><span class="line">transform:<span class="built_in">translateY</span>(y)指定元素在y轴上的位移距离</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>缩放：改变元素在页面中的尺寸</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">scale</span>(n)</span><br><span class="line">取值，无单位的数字</span><br><span class="line">&gt;<span class="number">1</span>  根据转换原点放大</span><br><span class="line"><span class="number">0</span>&lt;  n &lt;<span class="number">1</span>根据转换原点缩小</span><br><span class="line">-<span class="number">1</span>&lt; n &lt; <span class="number">0</span> 翻转缩小（水平和垂直方向都翻转了<span class="number">180</span>度）</span><br><span class="line">n &lt;-<span class="number">1</span> 翻转放大</span><br><span class="line">transform:scale（x，y） x 和 y轴缩放尺寸</span><br><span class="line">transform:<span class="built_in">scaleX</span>(x)单独设置x的缩放</span><br><span class="line">transform:<span class="built_in">scaleY</span>(y)单独设置y的缩放</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>旋转：改变元素在页面中的角度</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotate</span>(ndeg);</span><br><span class="line">n为正顺时针旋转</span><br><span class="line">n为负逆时针旋转</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p>​    <code>注意：</code></p><ul><li><p>转换原点会影响最后的旋转效果</p></li><li><p>旋转是连同坐标轴一起旋转的，会影响旋转后的位移效果</p><ol start="4"><li>倾斜：改变元素在页面中的形状</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">skew</span>(x)等同于skewX（x）</span><br><span class="line">让元素向着x轴发生倾斜，实际上改变的是y轴的角度</span><br><span class="line">+取正值是逆时针</span><br><span class="line">-取负值是顺时针</span><br><span class="line">transform:<span class="built_in">skew</span>(y)等同于skewX（y）</span><br><span class="line">让元素向着y轴发生倾斜，实际上改变的是x轴的角度</span><br><span class="line">+取正值是顺时针</span><br><span class="line">-取负值是逆时针</span><br><span class="line">transform:<span class="built_in">skew</span>(x,y)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h2></li><li><p>浏览器不支持3D的位移，Z轴看不到，只能模拟</p><ul><li><p>透视距离</p><ul><li>模拟人的眼睛到3D转换元素之间的距离<pre><code>            `perspective`</code></pre></li><li>该属性要加载转换元素的父元素上</li></ul></li><li><p>3D旋转</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">rotate3D</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">20deg</span>);</span><br><span class="line">取值</span><br><span class="line"><span class="number">1</span><span class="selector-class">.rotateX</span>(xdeg);</span><br><span class="line">以x轴为中心轴，旋转元素的角度（烤羊腿，老式爆米花机）</span><br><span class="line"><span class="number">2</span><span class="selector-class">.rotateY</span>(ydeg)</span><br><span class="line">以y轴为中心轴，旋转元素的角度（旋转门）</span><br><span class="line"><span class="number">3</span><span class="selector-class">.rotateZ</span>（zdeg）</span><br><span class="line">以z轴为中心轴，旋转元素的角度（风车，摩天轮）</span><br><span class="line"><span class="number">4</span><span class="selector-class">.rotate3D</span>（x，y，z，deg）；</span><br><span class="line">x y z取值大于<span class="number">0</span>的数字，表示该轴参与旋转</span><br><span class="line">取值为<span class="number">0</span>，表示不参与旋转</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><ul><li><p>CSS属性值，在一段时间内平缓的变化</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition-property</span>:background;</span><br><span class="line"><span class="attribute">border-radius</span>;</span><br><span class="line"><span class="attribute">all</span>;</span><br><span class="line">能够使用过渡效果的属性</span><br><span class="line"><span class="number">1</span>.颜色可以</span><br><span class="line"><span class="number">2</span>.取值为数字的属性</span><br><span class="line"><span class="number">3</span>.转换</span><br><span class="line"><span class="number">4</span>.阴影</span><br><span class="line"><span class="number">5</span>.渐变</span><br><span class="line"><span class="number">6</span><span class="selector-class">.visibility</span></span><br><span class="line">指定过渡持续时间</span><br><span class="line"><span class="attribute">transition-duration</span>:<span class="number">1s</span>/<span class="number">1000ms</span></span><br><span class="line">简写方式</span><br><span class="line">transition:all <span class="number">1s</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        <code>    transition:1s;----不要写在hover里，写在元素本身的样式里</code></p></li><li><p>某元素的css属性值在一段时间内，平滑改变到另外一个值</p></li><li><p>过渡主要观察的是过程和结果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition-property</span>：上面的css属性指定/<span class="attribute">all</span></span><br><span class="line">指定过渡的时长</span><br><span class="line"><span class="attribute">transition-duration</span>：过渡的时长/s（秒）/ms（毫秒）</span><br><span class="line">指定过渡时间曲线函数</span><br><span class="line"><span class="attribute">transition-timing-function</span>：</span><br><span class="line"><span class="number">1</span><span class="selector-class">.ease</span> 默认值，   慢--&gt;快--&gt;慢慢速开始，快速变快，慢速结束</span><br><span class="line"><span class="number">2</span><span class="selector-class">.linear</span>匀速</span><br><span class="line"><span class="number">3</span><span class="selector-class">.ease-in</span>慢-&gt;快慢速开始，快速结束</span><br><span class="line"><span class="number">4</span><span class="selector-class">.ease-out</span>快--&gt;慢快速结束，慢速结束</span><br><span class="line"><span class="number">5</span><span class="selector-class">.ease-in-out</span>慢速开始，先加速再减速，慢速结束</span><br><span class="line">指定延迟执行过渡的时间</span><br><span class="line"><span class="attribute">transition-delay</span>：s/ms</span><br><span class="line">过渡属性的编写位置</span><br><span class="line"><span class="number">1</span>.将过渡放在元素声明的样式中（元素自己的样式里），过渡效果有去有回</span><br><span class="line"><span class="number">2</span>.将过渡放在元素的触发操作中（hover），过渡效果有去无回</span><br><span class="line">过渡的简写</span><br><span class="line"><span class="attribute">transition</span>：property duration timing-function delay;</span><br><span class="line">最少的方式 <span class="attribute">transition</span>:duration;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><ul><li><p>使元素从一种样式，该表到另外一种，再改变到其他样式….</p></li><li><p>相当于将很多个过渡效果放到一起使用</p></li><li><p>关键帧</p><ul><li>1.动画的执行时间点</li><li>2.该时间点上的样式</li></ul></li><li><p>动画的实现步骤</p><ul><li>声明动画及动画关键帧<br>@keyframes 动画名称{<br>//定义关键帧<br>0%{动画开始时的样式}<br>……<br>​    100%{动画结束时的样式}<br>}</li><li>调用动画<br>animation-name：动画名称<br>animation-duration：动画播放一个周期的时间</li><li>动画的其它属性<br>animation-delay:</li><li>动画的速度时间曲线函数<br>​animation-timing-function:<br>ease/linear/ease in/ease out/ease-in-out;</li><li>animation-iteration-count:<br>指定动画的播放次数<br>取值，具体的数字/infinite 无限次</li><li>animation-direction<br>动画的播放方向<br>取值    normal 正常播放 0%–100%<br>​reverse 逆向播放 100%–0%<br>alternate 轮流播放 奇数次正向播放 偶数次逆向播放</li><li>简写方式<br>animation:name duration timing-function delay iteration-count direction;</li><li>animation-fill-mode<br>指定动画播放前后的显示状态<br>1.none        默认值<br>2.forward    动画播放完成后，保持在最后一个关键帧上<br>3.backwards    （需要有delay）动画开始之前，保持在第一个关键帧上<br>4.both        同时设置forwards和backwards</li></ul></li><li><p>动画的兼容性<br>如果要兼容低版本浏览器，需要在声明动画时加前缀<br>​        @keyframes 动画名称{}<br>​        @-webkit-keyframes<br>​        @-ms-keyframes<br>​        @-moz-keyframes<br>​        @-o-keyframes </p><h2 id="CSS优化问题"><a href="#CSS优化问题" class="headerlink" title="CSS优化问题"></a>CSS优化问题</h2><p>​    目的：减少服务器压力，提升用户体验<br>​        1.优化原则<br>​            尽量减少HTTP请求的个数<br>​            页面顶部引入css文件<br>​            将css和js放到外部独立的文件夹中<br>​        2.css代码优化<br>​            缩小样式文件<br>​            减少样式重写<br>​            避免出现空的src和href<br>​            选择更优的样式属性值（能使用复合，简写的写法，就不要单独定义）<br>​            代码压缩    </p></li></ul><h2 id="CSS-Hack"><a href="#CSS-Hack" class="headerlink" title="CSS Hack"></a>CSS Hack</h2><p>由于不同的浏览器，比如IE6 IE7 firefox<br>对css的解析认识不同，会导致生成的页面效果不同，无法得到我们预期的效果<br>这个时候我们需要针对不同浏览器去写不同的css<br>让代码同时兼容不同的浏览器。</p><p><a href="https://blog.csdn.net/freshlover/article/details/12132801">史上最全的CSS Hack方式</a></p><h2 id="推荐文章地址"><a href="#推荐文章地址" class="headerlink" title="推荐文章地址"></a>推荐文章地址</h2><p><a href="https://www.cnblogs.com/qmdx00/p/7441317.html">CSS实现聊天气泡效果</a></p><p><a href="https://www.cnblogs.com/jying/p/6289981.html">表格不被撑开，td某些列宽度固定某些列自适应</a></p><p><a href="https://blog.csdn.net/freshlover/article/details/12132801">史上最全的CSS Hack方式</a></p><p><a href="https://segmentfault.com/q/1010000004080910/a-1020000004121373">flex设置成1和auto有什么区别</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CSS概述&quot;&gt;&lt;a href=&quot;#CSS概述&quot; class=&quot;headerlink&quot; title=&quot;CSS概述&quot;&gt;&lt;/a&gt;CSS概述&lt;/h2&gt;&lt;h4 id=&quot;什么是CSS&quot;&gt;&lt;a href=&quot;#什么是CSS&quot; class=&quot;headerlink&quot; title=&quot;什么是CSS&quot;&gt;&lt;/a&gt;什么是CSS&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;Cascading Style Sheets&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;层叠样式表，级联样式表，简称样式表&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="CSS" scheme="http://example.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>双向数据绑定实现</title>
    <link href="http://example.com/2019/06/25/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2019/06/25/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-06-25T15:00:35.000Z</published>
    <updated>2019-07-11T02:42:33.263Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据劫持简易版本"><a href="#数据劫持简易版本" class="headerlink" title="数据劫持简易版本"></a>数据劫持简易版本</h2><p class="codepen" data-height="500" data-theme-id="0" data-default-tab="html,result" data-user="MiaoChen123" data-slug-hash="jjLVoE" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="jjLVoE">  <span>See the Pen <a href="https://codepen.io/MiaoChen123/pen/jjLVoE/">  jjLVoE</a> by 苗尼玛 (<a href="https://codepen.io/MiaoChen123">@MiaoChen123</a>)  on <a href="https://codepen.io">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><span id="more"></span><h2 id="脏检查"><a href="#脏检查" class="headerlink" title="脏检查"></a>脏检查</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  脏值检查    先保留原有的值   有一个新的值</span></span><br><span class="line"><span class="comment">//  上一个例子中是不停的监控新放的值，$watch,$apply,angularjs的更新方式是手动更新,angulaer有一个scope的概念</span></span><br><span class="line"><span class="comment">//ViewModel</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Scope</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$watchers</span> = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Scope</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$digest</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;   <span class="comment">//负责检查的</span></span><br><span class="line">    <span class="comment">// 至少执行一次</span></span><br><span class="line">    <span class="keyword">var</span> dirty = <span class="literal">true</span>;   <span class="comment">//默认认为只要调用digest方法就应该查一次</span></span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">do</span>&#123;</span><br><span class="line">        dirty = <span class="variable language_">this</span>.$digestOne()</span><br><span class="line">        <span class="keyword">if</span>(count ===<span class="number">0</span> )&#123; <span class="comment">//已经查了10次</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27; $digest reached，Aborting！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">while</span> (dirty &amp;&amp; count--);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Scope</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$digestOne</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;    <span class="comment">//检查一次</span></span><br><span class="line">   <span class="keyword">let</span> dirty = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$watchers</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">watcher</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> oldVal = watcher.<span class="property">last</span>   <span class="comment">//老值</span></span><br><span class="line">        <span class="keyword">let</span> newVal = <span class="variable language_">this</span>[watcher.<span class="property">exp</span>]</span><br><span class="line">        <span class="keyword">if</span>(newVal !== oldVal)&#123;  <span class="comment">//更新了</span></span><br><span class="line">            watcher.<span class="title function_">fn</span>(newVal,oldVal)<span class="comment">//调用了fn可能就会更改数据，更改数据就应该在查一遍</span></span><br><span class="line">            dirty = <span class="literal">true</span></span><br><span class="line">            watcher.<span class="property">last</span> = newVal   <span class="comment">//更新老值，让老值变成新值，方便下次更新</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> dirty</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Scope</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$watch</span> = <span class="keyword">function</span>(<span class="params">exp,fn</span>)&#123;</span><br><span class="line">    <span class="comment">//$watch中应该保留的内容有函数 还有 当前的老值，保留一个表达式</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$watchers</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        fn,</span><br><span class="line">        <span class="attr">last</span>:<span class="variable language_">this</span>[exp],</span><br><span class="line">        exp</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Scope</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$apply</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.$digest()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> scope = <span class="keyword">new</span> <span class="title class_">Scope</span>();</span><br><span class="line">scope.<span class="property">name</span> = <span class="string">&#x27;miaochen&#x27;</span>;</span><br><span class="line">scope.<span class="property">age</span> = <span class="number">9</span>;</span><br><span class="line">scope.$watch(<span class="string">&#x27;name&#x27;</span>,<span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal,oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">scope.$watch(<span class="string">&#x27;age&#x27;</span>,<span class="keyword">function</span>(<span class="params">newVal,oldVal</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(newVal,oldVal)</span><br><span class="line">&#125;)</span><br><span class="line">scope.<span class="property">age</span> = <span class="number">10</span>;</span><br><span class="line">scope.$apply();</span><br></pre></td></tr></table></figure><h2 id="VUE双向绑定简易版"><a href="#VUE双向绑定简易版" class="headerlink" title="VUE双向绑定简易版"></a>VUE双向绑定简易版</h2><p><img src="https://s2.ax1x.com/2019/06/25/ZZBKhD.png" alt="ZZBKhD.png"></p><p><code>HTML文件</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;watcher.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;observer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;compile.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;MVVM.JS&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 双向数据绑定 靠的是表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message.a&quot;</span>&gt;</span></span><br><span class="line">        &#123;&#123;message.a&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;message.a&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;message.a&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;message.a&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 我们的数据一般都挂载在vm上</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Object.defineProperty  get 和 set</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// vue中实现双向绑定</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.模板编译</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.数据劫持 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.观察数据变化 Watcher</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title function_">MVVM</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">message</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">a</span>:<span class="string">&#x27;miao chen&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>MVVM.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MVVM</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">options</span>)&#123;</span><br><span class="line">        <span class="comment">// 一上来 先把可用的东西挂载在实例上</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$el</span> = options.<span class="property">el</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$data</span> = options.<span class="property">data</span></span><br><span class="line">        <span class="comment">// 判断如果有要编译的模板就开始编译</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">$el</span>)&#123;</span><br><span class="line">            <span class="comment">// 数据劫持 就是把对象的所有属性 改成get和set方法</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Observer</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">proxyData</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line">            <span class="comment">// 用数据和元素进行编译</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Compile</span>(<span class="variable language_">this</span>.<span class="property">$el</span>,<span class="variable language_">this</span>); <span class="comment">//this直接给 随便调用数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">proxyData</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>,key,&#123;</span><br><span class="line">                <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> data[key]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">set</span>(<span class="params">newVal</span>)&#123;</span><br><span class="line">                    data[key] = newVal</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Compile.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Compile</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">el,vm</span>)&#123; <span class="comment">//vm代表整个实例</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">el</span> = <span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(el) ? <span class="attr">el</span>:<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(el)    <span class="comment">//#app 或 document.id</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vm</span> = vm</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">el</span>)&#123;</span><br><span class="line">            <span class="comment">// 如果这个元素能获取到 我们才开始编译</span></span><br><span class="line">            <span class="comment">// 1.先把这些真实的DOM移入到内存中 fragment</span></span><br><span class="line">                <span class="keyword">let</span> fragment = <span class="variable language_">this</span>.<span class="title function_">node2fragment</span>(<span class="variable language_">this</span>.<span class="property">el</span>)</span><br><span class="line">            <span class="comment">// 2.编译 =&gt; 提取想要到的元素节点 和 v-model 文本节点 &#123;&#123;&#125;&#125;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">compile</span>(fragment)</span><br><span class="line">            <span class="comment">// 3.把编译好的fragment 赛回到页面里面去</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">el</span>.<span class="title function_">appendChild</span>(fragment)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 专门写辅助方法</span></span><br><span class="line">    <span class="title function_">isElementNode</span>(<span class="params">node</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> node.<span class="property">nodeType</span> === <span class="number">1</span>;  <span class="comment">//元素</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是不是指令</span></span><br><span class="line">    <span class="title function_">isDiretive</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> name.<span class="title function_">includes</span>(<span class="string">&#x27;v-&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 核心的方法</span></span><br><span class="line">    <span class="title function_">compileElement</span>(<span class="params">node</span>)&#123;</span><br><span class="line">        <span class="comment">// 带v-model</span></span><br><span class="line">        <span class="keyword">let</span> attrs = node.<span class="property">attributes</span>  <span class="comment">// 取出当前节点的属性</span></span><br><span class="line">        <span class="title class_">Array</span>.<span class="title function_">from</span>(attrs).<span class="title function_">forEach</span>(<span class="function"><span class="params">attr</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 判断属性名包含v-model  //[v,mode]</span></span><br><span class="line">            <span class="keyword">let</span> attrName = attr.<span class="property">name</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isDiretive</span>(attrName))&#123;</span><br><span class="line">                <span class="comment">// 取到对应的值 放到节点中</span></span><br><span class="line">                <span class="keyword">let</span> expr = attr.<span class="property">value</span>;</span><br><span class="line">                <span class="keyword">let</span> [,type] = attrName.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">                <span class="comment">// node this.vm.$data </span></span><br><span class="line">                <span class="title class_">CompileUtil</span>[type](node,<span class="variable language_">this</span>.<span class="property">vm</span>,expr)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">compileText</span>(<span class="params">node</span>)&#123;</span><br><span class="line">        <span class="comment">// 带&#123;&#123;&#125;&#125;</span></span><br><span class="line">        <span class="keyword">let</span> expr = node.<span class="property">textContent</span></span><br><span class="line">        <span class="keyword">let</span> text = node.<span class="property">textContent</span> <span class="comment">//取文本中的内容</span></span><br><span class="line">        <span class="keyword">let</span> reg = <span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span> <span class="comment">//&#123;&#123;a&#125;&#125; &#123;&#123;b&#125;&#125; &#123;&#123;c&#125;&#125;</span></span><br><span class="line">        <span class="keyword">if</span>(reg.<span class="title function_">test</span>(text))&#123;</span><br><span class="line">            <span class="comment">//node this.$data text</span></span><br><span class="line">            <span class="title class_">CompileUtil</span>[<span class="string">&#x27;text&#x27;</span>](node,<span class="variable language_">this</span>.<span class="property">vm</span>,expr)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">compile</span>(<span class="params">fragment</span>)&#123;</span><br><span class="line">        <span class="comment">// 需要递归</span></span><br><span class="line">        <span class="keyword">let</span> childNodes = fragment.<span class="property">childNodes</span>;</span><br><span class="line">        <span class="title class_">Array</span>.<span class="title function_">from</span>(childNodes).<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">isElementNode</span>(node))&#123;</span><br><span class="line">                <span class="comment">// 是元素节点 还需要继续深入的检查</span></span><br><span class="line">                <span class="comment">// 这里需要编译元素   </span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">compileElement</span>(node)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">compile</span>(node)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// 文本节点</span></span><br><span class="line">                <span class="comment">// 这里需要编译文本</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">compileText</span>(node)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">node2fragment</span>(<span class="params">el</span>)&#123;  <span class="comment">//需要将el中的内容全部放到内存中</span></span><br><span class="line">        <span class="comment">// 文档碎片 内存中的DOM节点</span></span><br><span class="line">        <span class="keyword">let</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">        <span class="keyword">let</span> firstChild = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">while</span>(firstChild = el.<span class="property">firstChild</span>)&#123;</span><br><span class="line">            fragment.<span class="title function_">appendChild</span>(firstChild)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fragment <span class="comment">//内存中的节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">CompileUtil</span> = &#123;</span><br><span class="line">    <span class="title function_">getVal</span>(<span class="params">vm,expr</span>)&#123;<span class="comment">//获取实例上对应的数据</span></span><br><span class="line">        expr = expr.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)  <span class="comment">//[a,v,c,d]</span></span><br><span class="line">        <span class="keyword">return</span> expr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,next</span>)=&gt;</span>&#123;   <span class="comment">// vm.$data.a</span></span><br><span class="line">            <span class="keyword">return</span> prev[next];</span><br><span class="line">        &#125;,vm.<span class="property">$data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">getTextVal</span>(<span class="params">vm,expr</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> expr.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>,<span class="function">(<span class="params">...<span class="variable language_">arguments</span></span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getVal</span>(vm,<span class="variable language_">arguments</span>[<span class="number">1</span>])</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">text</span>(<span class="params">node,vm,expr</span>)&#123; <span class="comment">// 文本处理</span></span><br><span class="line">        <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>.<span class="property">updater</span>[<span class="string">&#x27;textUpdater&#x27;</span>]</span><br><span class="line">        <span class="comment">//&#123;&#123;message.a&#125;&#125; =&gt; &#x27;miaochen&#x27;</span></span><br><span class="line">        <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="title function_">getTextVal</span>(vm,expr)</span><br><span class="line">        <span class="comment">// &#123;&#123;a&#125;&#125; &#123;&#123;b&#125;&#125;</span></span><br><span class="line">        expr.<span class="title function_">replace</span>(<span class="regexp">/\&#123;\&#123;([^&#125;]+)\&#125;\&#125;/g</span>,<span class="function">(<span class="params">...<span class="variable language_">arguments</span></span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm,<span class="variable language_">arguments</span>[<span class="number">1</span>],<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                <span class="comment">// 如果数据变化了，文本节点需要重新获取依赖的属性更新文本中的内容</span></span><br><span class="line">                updateFn &amp;&amp; <span class="title function_">updateFn</span>(node,<span class="variable language_">this</span>.<span class="title function_">getTextVal</span>(vm,expr))</span><br><span class="line">            &#125;) </span><br><span class="line">        &#125;)</span><br><span class="line">        updateFn &amp;&amp; <span class="title function_">updateFn</span>(node,value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setVal</span>(<span class="params">vm,expr,value</span>)&#123; <span class="comment">//[message,a]</span></span><br><span class="line">        expr = expr.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">       <span class="comment">//收敛</span></span><br><span class="line">        <span class="keyword">return</span> expr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,next,currentIndex</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(currentIndex === expr.<span class="property">length</span>-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> prev[next] = value</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> prev[next]</span><br><span class="line">        &#125;,vm.<span class="property">$data</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">model</span>(<span class="params">node,vm,expr</span>)&#123; <span class="comment">// 输入框处理</span></span><br><span class="line">        <span class="keyword">let</span> updateFn = <span class="variable language_">this</span>.<span class="property">updater</span>[<span class="string">&#x27;modelUpdater&#x27;</span>]</span><br><span class="line">        <span class="comment">// 这里应该加一个监控 数据变化了 应该调用watch的callback</span></span><br><span class="line">        <span class="comment">//    </span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Watcher</span>(vm,expr,<span class="function">(<span class="params">newValue</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 当值变化后 会调用cb 将新的值传递过来 （）</span></span><br><span class="line">            updateFn &amp;&amp; <span class="title function_">updateFn</span>(node,<span class="variable language_">this</span>.<span class="title function_">getVal</span>(vm,expr))</span><br><span class="line">        &#125;)</span><br><span class="line">        node.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">let</span> newValue = e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setVal</span>(vm,expr,newValue)</span><br><span class="line">        &#125;)</span><br><span class="line">        updateFn &amp;&amp; <span class="title function_">updateFn</span>(node,<span class="variable language_">this</span>.<span class="title function_">getVal</span>(vm,expr))</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">updater</span>:&#123;</span><br><span class="line">        <span class="comment">// 文本更新</span></span><br><span class="line">        <span class="title function_">textUpdater</span>(<span class="params">node,value</span>) &#123;</span><br><span class="line">            node.<span class="property">textContent</span> = value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 输入框更新</span></span><br><span class="line">        <span class="title function_">modelUpdater</span>(<span class="params">node,value</span>)&#123;</span><br><span class="line">            node.<span class="property">value</span> = value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Observer.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Observer</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">data</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title class_">Observe</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Observe</span>(data)&#123;  </span><br><span class="line">        <span class="comment">// 要对这个data数据将原有的属性改成set和get的形式</span></span><br><span class="line">        <span class="keyword">if</span>(!data || <span class="keyword">typeof</span> data !== <span class="string">&quot;object&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//要将数据 一一劫持 先获取到data的key和value</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">// 劫持</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">defineReactive</span>(data,key,data[key])</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title class_">Observe</span>(data[key]) <span class="comment">//深度递归劫持</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义响应式</span></span><br><span class="line">    <span class="title function_">defineReactive</span>(<span class="params">obj,key,value</span>)&#123;</span><br><span class="line">        <span class="comment">// 在获取某个值的时候 </span></span><br><span class="line">        <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();    <span class="comment">//每个变化的数据 都会对应一个数组，这个数组可以是存放所有更新的操作</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,key,&#123;</span><br><span class="line">            <span class="attr">enumerable</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="attr">configurable</span>:<span class="literal">true</span>,</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>)&#123;  <span class="comment">//当取值的时候调用的方法</span></span><br><span class="line">                <span class="title class_">Dep</span>.<span class="property">target</span> &amp;&amp; dep.<span class="title function_">addSub</span>(<span class="title class_">Dep</span>.<span class="property">target</span>)</span><br><span class="line">                <span class="keyword">return</span> value</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">newVal</span>)&#123;    <span class="comment">//当给data属性中设置值的时候 更改获取的属性的值</span></span><br><span class="line">                <span class="keyword">if</span>(newVal !== value)&#123;</span><br><span class="line">                    <span class="comment">// 这里的this不是实例</span></span><br><span class="line">                    that.<span class="title class_">Observe</span>(newVal)  <span class="comment">// 如果是对象继续劫持</span></span><br><span class="line">                    value = newVal</span><br><span class="line">                    dep.<span class="title function_">notify</span>();   <span class="comment">//通知 数据更新</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dep</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 订阅的数组</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subs</span> = [] </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">addSub</span>(<span class="params">watcher</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(watcher)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">notify</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">watcher</span>=&gt;</span>watcher.<span class="title function_">update</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Watcher.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 观察者的目的就是给需要变化的哪个元素增加一个观察者，当数据变化后执行对应的方法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Watcher</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">vm,expr,cb</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">vm</span> = vm</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">expr</span> = expr</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">cb</span> = cb</span><br><span class="line">        <span class="comment">// 先获取一下老的值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">get</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getVal</span>(<span class="params">vm,expr</span>)&#123;<span class="comment">//获取实例上对应的数据</span></span><br><span class="line">        expr = expr.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)  <span class="comment">//[a,v,c,d]</span></span><br><span class="line">        <span class="keyword">return</span> expr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">prev,next</span>)=&gt;</span>&#123;   <span class="comment">// vm.$data.a</span></span><br><span class="line">            <span class="keyword">return</span> prev[next];</span><br><span class="line">        &#125;,vm.<span class="property">$data</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="title function_">getVal</span>(<span class="variable language_">this</span>.<span class="property">vm</span>,<span class="variable language_">this</span>.<span class="property">expr</span>)</span><br><span class="line">        <span class="title class_">Dep</span>.<span class="property">target</span> = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对外暴露的方法</span></span><br><span class="line">    <span class="title function_">update</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> newValue = <span class="variable language_">this</span>.<span class="title function_">getVal</span>(<span class="variable language_">this</span>.<span class="property">vm</span>,<span class="variable language_">this</span>.<span class="property">expr</span>)</span><br><span class="line">        <span class="keyword">let</span> oldVal = <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">        <span class="keyword">if</span>(newValue !== oldVal)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">cb</span>(newValue) <span class="comment">//对应watch callback</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用新值和老值进行比较 如果发生变化就调用更新方法</span></span><br><span class="line"><span class="comment">// vm.$data expr</span></span><br></pre></td></tr></table></figure><blockquote><p>链接：<a href="https://pan.baidu.com/s/11kniuu24-ZogYXHPWPrBZg">https://pan.baidu.com/s/11kniuu24-ZogYXHPWPrBZg</a><br>提取码：fhyr </p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;数据劫持简易版本&quot;&gt;&lt;a href=&quot;#数据劫持简易版本&quot; class=&quot;headerlink&quot; title=&quot;数据劫持简易版本&quot;&gt;&lt;/a&gt;数据劫持简易版本&lt;/h2&gt;&lt;p class=&quot;codepen&quot; data-height=&quot;500&quot; data-theme-id=&quot;0&quot; data-default-tab=&quot;html,result&quot; data-user=&quot;MiaoChen123&quot; data-slug-hash=&quot;jjLVoE&quot; style=&quot;height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot; data-pen-title=&quot;jjLVoE&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/MiaoChen123/pen/jjLVoE/&quot;&gt;
  jjLVoE&lt;/a&gt; by 苗尼玛 (&lt;a href=&quot;https://codepen.io/MiaoChen123&quot;&gt;@MiaoChen123&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;script async src=&quot;https://static.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript（上）</title>
    <link href="http://example.com/2019/06/23/javascript%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>http://example.com/2019/06/23/javascript%EF%BC%88%E4%B8%8A%EF%BC%89/</id>
    <published>2019-06-23T10:17:45.000Z</published>
    <updated>2019-07-05T06:18:10.214Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://wangdoc.com/">参考文献</a></p><h2 id="学习一门编程语言的基本步骤"><a href="#学习一门编程语言的基本步骤" class="headerlink" title="学习一门编程语言的基本步骤"></a>学习一门编程语言的基本步骤</h2><ol><li>了解背景知识：历史、现状、特点、应用场景</li><li>搭建开发环境，编写hello World</li><li>变量和常量</li><li>数据类型</li><li>运算符</li><li>逻辑结构</li><li>通用小程序</li><li>函数和对象</li><li>第三方库、框架</li><li>实用的项目<span id="more"></span></li></ol><h2 id="JavaScript历史概述"><a href="#JavaScript历史概述" class="headerlink" title="JavaScript历史概述"></a>JavaScript历史概述</h2><ol><li>历史<br>​                1995年，JS最早出现在Netscape的浏览器中<br>​                2009年，JS遵循CommonJS规范，开始向服务器端发展。</li><li>现状<br>​                既可以运行在客户端浏览器，也可以运行在服务器端。</li><li>特点<br>​                <strong>解释型语言，编译一行执行一行</strong><br>​                <strong>弱类型语言</strong><br>​                基于对象<br>​                跨平台</li></ol><h2 id="JavaScript执行环境"><a href="#JavaScript执行环境" class="headerlink" title="JavaScript执行环境"></a>JavaScript执行环境</h2><ol><li>浏览器自带的JS解释器</li><li>NODEJS下的JS解释器<br>​            在命令行下   node -v 查看系统中nodejs版本号</li><li>执行JS代码<br>​            浏览器：<br>​            创建01.js和01.html<br>​            在01.html中引入01.js</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script scr=<span class="string">&quot;&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>NODEJS下：<br>​            node C:/xampp/…../01.js</li></ol><h2 id="JavaScript代码规范"><a href="#JavaScript代码规范" class="headerlink" title="JavaScript代码规范"></a>JavaScript代码规范</h2><ol><li>区分大小写</li><li>每行代码结束的分号可加可不加，提唱都加。</li><li>分为单行注释(//…)和多行注释(/<em>….</em>/)</li></ol><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p><strong>变量就是用于存放数据的容器。</strong></p><p><strong>声明变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p><strong>变量的命名规则</strong></p><ol><li>变量名称是以字母、数字、美元符号($)、下划线组成的：不能以数字开头。</li><li>多个连词之间的命名方法：<br>​   user_name（下划线命名法）    userName（驼峰命名法）<br>​  不能使用<strong>关键字</strong>和<strong>保留字</strong>（class，int，float）作为变量名！</li></ol><p><img src="https://s2.ax1x.com/2019/04/26/EmNMwQ.png" alt="EmNMwQ.png"></p><p><strong>变量的注意</strong></p><p>​            变量声明后未赋值，此时的值是undifined<br>​            使用未声明的变量会报错</p><p><strong>一次性声明多个变量</strong></p><p>​            var a=1,b=2,c;<br>​            多个变量之间用逗号隔开。</p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>​        一旦声明<strong>不能重新赋值</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如：春节的日期、中秋节的日期、圆周率...</span><br><span class="line">关键字： <span class="keyword">const</span> <span class="variable constant_">PI</span>=<span class="number">3.14</span>;</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>​    <strong>分为<font color="#f05">原始类型</font>和<font color="#f05">引用类型</font></strong><br>​    <strong>原始类型分为<font color="#FFB6C1">数值型</font>、<font color="#00FA9A">字符串型</font>、<font color="#AFEEEE">布尔型</font>、<font color="#B0C4DE">未定义型（undefined）</font>、<font color="#A9A9A9">NULL（空）</font></strong></p><h4 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h4><ol><li>分为<strong>整型</strong>和<strong>浮点型</strong></li><li>整型在内存中占4个字节，浮点型占8个字节</li><li>8进制，以0开头，例如012-&gt;10</li><li>16进制，以0x开头，例如0xf-&gt;15 </li><li>a<del>f代表 10</del>15 不区分大小写</li></ol><h4 id="字符串型"><a href="#字符串型" class="headerlink" title="字符串型"></a>字符串型</h4><p>​            <strong>数据被引号包含就是字符串类型;不区分单双引号。</strong><br>​            查看一个字符的Unicode编码<br>​            console.log( ‘a’.charCodeAt )  //97</p><h4 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h4><p>​            <strong>在程序中表示真或者假的结果</strong><br>​            true/false<br>​            常用于一些是否的结果，是否登录，是否注册，是否是会员，是否在售</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isLogin=<span class="literal">true</span>; isOnsale=<span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h4 id="未定义型"><a href="#未定义型" class="headerlink" title="未定义型"></a>未定义型</h4><p>​            <strong>声明了变量未赋值，结果就是undefined</strong></p><h4 id="空"><a href="#空" class="headerlink" title="空"></a>空</h4><p>​            <strong>用于释放（销毁）一个引用类型的地址，只有一个值null</strong></p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><h4 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">①数字+字符串：数字被转成字符串</span><br><span class="line"><span class="number">1</span>+<span class="string">&#x27;a&#x27;</span>   <span class="comment">//&#x27;1a&#x27;</span></span><br><span class="line">②数字+布尔型：布尔型被转成了数字 <span class="literal">true</span>-&gt;<span class="number">1</span> <span class="literal">false</span>-&gt;<span class="number">0</span></span><br><span class="line"><span class="number">1</span>+<span class="literal">true</span> <span class="comment">//2</span></span><br><span class="line"><span class="number">1</span>+<span class="literal">false</span> <span class="comment">//1</span></span><br><span class="line">③布尔型+字符串：布尔型转换成字符串</span><br><span class="line"><span class="literal">true</span>+<span class="string">&#x27;hello&#x27;</span> <span class="comment">//&#x27;truehello&#x27;</span></span><br><span class="line"><span class="variable constant_">JS</span>中加号（+）的作用</span><br><span class="line">执行加法运算</span><br><span class="line">执行字符串的拼接</span><br><span class="line">使用- * / 执行运算</span><br><span class="line">尝试将运算符两端转成数值型，如果含有非数字则返回一个<span class="title class_">NaN</span>（<span class="title class_">Not</span> a <span class="title class_">Number</span>）,不是一个数字。</span><br><span class="line"><span class="title class_">NaN</span>类型<span class="title class_">Number</span></span><br></pre></td></tr></table></figure><h4 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">①将任意类型转为整型</span><br><span class="line"><span class="built_in">parseInt</span>()</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;1.5a&#x27;</span>)<span class="comment">//1</span></span><br><span class="line">从开头查找数字，遇到非数字或者小数点；返回前面的数字；如果开头非数字，返回<span class="title class_">NaN</span>。</span><br><span class="line">②将任意类型转为浮点型</span><br><span class="line"><span class="built_in">parseFloat</span>()</span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;1.5a&#x27;</span>)<span class="comment">//1.5</span></span><br><span class="line">转换规则和<span class="built_in">parseInt</span>类似，区别在于遇到小数点继续往后查找数字。</span><br><span class="line">③将任意类型转为数值型</span><br><span class="line"><span class="title class_">Number</span>()</span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;1.5a&#x27;</span>) <span class="comment">//NaN</span></span><br><span class="line">如果要转换的数据中含有非数字，则返回<span class="title class_">NaN</span></span><br><span class="line"><span class="literal">true</span>-&gt;<span class="number">1</span>   <span class="literal">false</span>-&gt;<span class="number">0</span></span><br><span class="line">④将数值型和布尔型转为字符串类型</span><br><span class="line"><span class="title function_">toString</span>()</span><br><span class="line"><span class="keyword">var</span> num=<span class="number">10</span>;</span><br><span class="line">num.<span class="title function_">toString</span>(); <span class="comment">//&#x27;10&#x27;</span></span><br><span class="line">num.<span class="title function_">toString</span>(<span class="number">16</span>); <span class="comment">//a</span></span><br><span class="line">如果要转换的数据是数值，可以设置进制(<span class="number">8</span>,<span class="number">16</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>​        由<strong>运算符连接操作</strong>的数据，所组成的形式就是<strong>表达式</strong></p><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ -  * / %(取余) ++(自增) --(自减)</span><br><span class="line">%取余</span><br><span class="line">++自增，在原来的基础之上加<span class="number">1</span></span><br><span class="line">--自减，在原来的基础之上减<span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num++) <span class="comment">//先打印num的值，在进行自增</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(++num) <span class="comment">//先执行自增，再打印num的值</span></span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;  &lt;  &gt;=  &lt;=  ==  !=   ===（全等于）  ！==（不全等于）</span><br><span class="line">返回一个布尔型的结果</span><br><span class="line">    == 只是比较两个值是否相同</span><br><span class="line">    ===不仅比较值，还会比较类型是否相等</span><br><span class="line"><span class="number">3</span>&gt;<span class="string">&#x27;10&#x27;</span> <span class="comment">//false</span></span><br><span class="line">数字和字符串比较，字符串要转成数字。</span><br><span class="line"><span class="string">&#x27;3&#x27;</span>&gt;<span class="string">&#x27;10&#x27;</span> <span class="comment">//true</span></span><br><span class="line">比较首个<span class="title class_">Unicode</span>的码，如果首个字符相同，则比较第二个字符。</span><br><span class="line"><span class="string">&#x27;3&#x27;</span>-&gt;<span class="number">51</span><span class="string">&#x27;1&#x27;</span>-&gt;<span class="number">49</span></span><br><span class="line"><span class="number">3</span>&gt;<span class="string">&#x27;10a&#x27;</span> <span class="comment">//false</span></span><br><span class="line"><span class="number">3</span>&lt;<span class="string">&#x27;10a&#x27;</span> <span class="comment">//false</span></span><br><span class="line"><span class="number">3</span>==<span class="string">&#x27;10a&#x27;</span> <span class="comment">//false</span></span><br><span class="line"><span class="string">&#x27;10a&#x27;</span>-&gt;<span class="variable constant_">NAN</span></span><br><span class="line"><span class="title class_">NaN</span>和任何数比较（&gt; &lt; = &gt;= &lt;= ==）都返回<span class="literal">false</span></span><br><span class="line"><span class="title class_">NaN</span>==<span class="title class_">NaN</span> 返回<span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;  关联的两个条件都满足，结果是<span class="literal">true</span>，否则<span class="literal">false</span></span><br><span class="line">||     关联的两个条件都只需满足其一，结果是<span class="literal">true</span>，否则<span class="literal">false</span></span><br><span class="line">!      取反 ！<span class="literal">false</span>取反-&gt;<span class="literal">true</span>  ！<span class="literal">true</span>-&gt;<span class="literal">false</span></span><br><span class="line">逻辑短路</span><br><span class="line">&amp;&amp; 当第一个条件为<span class="literal">false</span>的时候，就不需要再执行第二个条件</span><br><span class="line">||    当第一个条件为<span class="literal">true</span>的时候，就不需要再执行第二个条件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="位运算符（了解）"><a href="#位运算符（了解）" class="headerlink" title="位运算符（了解）"></a>位运算符（了解）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">在执行运算时候，会把数字转成二进制进行运算</span><br><span class="line">按位与(&amp;)  <span class="number">3</span>&amp;<span class="number">5</span>   上下两位都是<span class="number">1</span>，结果是<span class="number">1</span>，否则是<span class="number">0</span></span><br><span class="line">按位或(|)      上下两位含有<span class="number">1</span>，结果就是<span class="number">1</span>，否则<span class="number">0</span></span><br><span class="line"><span class="number">3</span>|<span class="number">5</span></span><br><span class="line"><span class="number">011</span></span><br><span class="line"><span class="number">101</span></span><br><span class="line"><span class="number">111</span></span><br><span class="line">按位异或(^)上下两位不同为<span class="number">1</span>，相同为<span class="number">0</span></span><br><span class="line"><span class="number">5</span>^<span class="number">7</span></span><br><span class="line"><span class="number">101</span></span><br><span class="line"><span class="number">111</span></span><br><span class="line"><span class="number">010</span></span><br><span class="line">按位右移(&gt;&gt;)删除二进制的最后一位，大概变小到原来的一半</span><br><span class="line"><span class="number">7</span>&gt;&gt;<span class="number">1</span></span><br><span class="line">按位左移(&gt;&gt;)删除二进制的最后添加一位<span class="number">0</span>，增加一倍</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">=  += -= *= /= %= </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">单目运算符：只需要一个数据或者表达式</span><br><span class="line">a++a--!<span class="literal">false</span></span><br><span class="line">双目运算符：只需要两个数据或者表达式</span><br><span class="line">    + - * <span class="regexp">/ % &gt; &lt; &gt;= &lt;= == != === !== &amp;&amp; || &amp; | ^ &gt;&gt; &lt;&lt; = += -= *= /</span>= %=</span><br><span class="line">    三目运算符：需要三个数据或者表达式</span><br><span class="line">条件表达式？表达式<span class="number">1</span>：表达式<span class="number">2</span></span><br><span class="line">如果条件表达式为<span class="literal">true</span>，执行表达式<span class="number">1</span>；</span><br><span class="line">如果条件表达式为<span class="literal">false</span>，执行表达式<span class="number">2</span>；</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="浏览器端函数"><a href="#浏览器端函数" class="headerlink" title="浏览器端函数"></a>浏览器端函数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alert()弹出警示框（消息框）</span><br><span class="line">prompt()弹出提示框（输入框），需要一个变量来接受输入的值；值的类型是字符串类型。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p>​    <strong>程序 = 算法 + 数据</strong><br>​    <strong>程序分为顺序执行、选择执行、循环执行</strong>        </p><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line">语句<span class="number">3</span>;</span><br><span class="line">执行流程：</span><br><span class="line">    ①执行语句<span class="number">1</span></span><br><span class="line">    ②条件表达式，如果为<span class="literal">true</span>，执行语句<span class="number">2</span>；<span class="literal">false</span>直接跳过</span><br><span class="line">    ③执行语句<span class="number">3</span></span><br><span class="line">注意：如果<span class="keyword">if</span>后的大括号语句中只有一行，是可以省略大括号。</span><br><span class="line"><span class="keyword">if</span>（age&gt;=<span class="number">18</span>）</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成年人&#x27;</span>);</span><br><span class="line">在<span class="keyword">if</span>语句的条件表达式中，有一些值默认就是<span class="literal">false</span></span><br><span class="line"><span class="number">0</span>，<span class="title class_">NaN</span>，<span class="string">&#x27;&#x27;</span>，<span class="literal">undefined</span>,<span class="literal">null</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="if-else语句"><a href="#if-else语句" class="headerlink" title="if-else语句"></a>if-else语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语句<span class="number">1</span>；</span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">    语句<span class="number">2</span>；</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    语句<span class="number">3</span>；</span><br><span class="line">&#125;</span><br><span class="line">执行过程：</span><br><span class="line">    ①先执行语句<span class="number">1</span></span><br><span class="line">    ②要执行条件表达式，如果是<span class="literal">true</span>，执行语句<span class="number">2</span>；如果是<span class="literal">false</span>，执行语句<span class="number">3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="if-else的嵌套"><a href="#if-else的嵌套" class="headerlink" title="if-else的嵌套"></a>if-else的嵌套</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">用于判断多种情况：</span><br><span class="line">    语句<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">        语句<span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> ...<span class="title function_">if</span>(<span class="params">条件表达式n</span>)&#123;</span><br><span class="line">        语句n;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        语句n+<span class="number">1</span>;<span class="comment">//以上所有的条件表达式都是false</span></span><br><span class="line">    &#125;</span><br><span class="line">执行流程：</span><br><span class="line">    ①执行语句<span class="number">0</span></span><br><span class="line">    ②执行表达式<span class="number">1</span></span><br><span class="line">    如果条件表达式<span class="number">1</span>是<span class="literal">true</span>，执行<span class="number">1</span>,</span><br><span class="line">        如果条件表达式<span class="number">1</span>是<span class="literal">false</span>，执行条件表达式<span class="number">2</span></span><br><span class="line">    如果条件表达式<span class="number">2</span>是<span class="literal">true</span>，执行语句<span class="number">2</span></span><br><span class="line">    如果条件表达式<span class="number">2</span>是<span class="literal">false</span>，执行语句n</span><br><span class="line">    ③以上所有的条件表达式为<span class="literal">false</span>，执行语句n+<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="switch-case语句"><a href="#switch-case语句" class="headerlink" title="switch-case语句"></a>switch-case语句</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">是一种特殊的分支语句，可以根据一个表达式的不同值，来选择执行不同的程序。</span><br><span class="line">语句<span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//如果表达式的值是1</span></span><br><span class="line">        语句<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//终止，不会再往后执行其他的语句</span></span><br><span class="line">        .......</span><br><span class="line">        <span class="keyword">case</span> <span class="attr">n</span>:</span><br><span class="line">        语句n;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        语句n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">注意：在<span class="keyword">case</span>中的和值的比较使用的是全等于比较，值和类型都满足结果才是<span class="literal">true</span>。</span><br><span class="line">对比<span class="keyword">if</span>-<span class="keyword">else</span>嵌套和<span class="keyword">switch</span>-<span class="keyword">case</span>语句</span><br><span class="line">相同点：两者都可以用于多项分支语句。</span><br><span class="line">不同点：<span class="keyword">if</span>-<span class="keyword">else</span>可以判断相等或者不相等的情况，适用范围更广一些;<span class="keyword">switch</span>-<span class="keyword">case</span>只适用于全等（===）的情况，但是结构上更为清晰，执行效率相对高。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="break和continue关键字"><a href="#break和continue关键字" class="headerlink" title="break和continue关键字"></a>break和continue关键字</h2><p>​    break：结束循环，后续不会再执行其他的循环了<br>​    continue：跳过本次循环，继续下一次循环</p><h2 id="循环执行"><a href="#循环执行" class="headerlink" title="循环执行"></a>循环执行</h2><p>​    循环：就是<strong>一遍又一遍执行</strong>相同或者相似的<strong>代码</strong>。<br>​            循环的两个要素<br>​            循环的条件：重复的次数<br>​            循环体：重复执行的相同或者相似代码</p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;<span class="comment">//是一个布尔型的值</span></span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;<span class="keyword">while</span>（判断条件）;</span><br><span class="line">不管循环条件是否为<span class="literal">true</span>都会执行一次循环体。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始值;循环条件;i的变化)&#123;</span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br><span class="line">①执行初始值</span><br><span class="line">②判断循环条件</span><br><span class="line">③如果循环条件是<span class="literal">true</span>执行循环体，是<span class="literal">false</span>结束循环</span><br><span class="line">④如果执行了循环体，执行i的变化</span><br><span class="line">⑤重新执行第<span class="number">2</span>步</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h4><p>​        <font color="#f50" size="5px">while,do-while,for循环三者之间可以相互嵌套。</font></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">九九乘法表：</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">9</span>; j&gt;=<span class="number">1</span> ; j-- )&#123;</span><br><span class="line"><span class="comment">//产生列数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=j,str=<span class="string">&#x27;&#x27;</span>; i&gt;=<span class="number">1</span> ; i-- )&#123;</span><br><span class="line">str+=i+<span class="string">&#x27;*&#x27;</span>+j+<span class="string">&#x27;=&#x27;</span>+(i*j)+<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印一行的拼接结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>​            parseInt()取整<br>​            parseFloat()取小数<br>​            typeof()识别类型<br>​            分为<font color="#f00">系统函数</font>和<font color="#f00">自定义函数</font></p><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>​    function：功能体，函数，可以接受若干个数据，返回处理的结果。用于封装反复执行的代码。</p><h5 id="创建普通函数"><a href="#创建普通函数" class="headerlink" title="创建普通函数"></a>创建普通函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名称()&#123;</span><br><span class="line">    函数体—要封装的反复执行的代码</span><br><span class="line">&#125;</span><br><span class="line">调用：</span><br><span class="line">函数名称();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="创建带有参数的函数"><a href="#创建带有参数的函数" class="headerlink" title="创建带有参数的函数"></a>创建带有参数的函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名称(参数列表)&#123;<span class="comment">//形参-&gt;形式上的参数</span></span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line">调用</span><br><span class="line">函数名称(参数列表);<span class="comment">//实参-&gt;实际的参数</span></span><br><span class="line">参数列表：可以是<span class="number">0</span>个或者是多个数据，之间用逗号隔开；创建函数时的参数称为形参，调用函数时的参数称为实参，</span><br><span class="line">调用的时候，实参的值会赋给形参。</span><br><span class="line">形参本质上就是一个声明了的变量，但未赋值。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="带有返回值的函数"><a href="#带有返回值的函数" class="headerlink" title="带有返回值的函数"></a>带有返回值的函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名称(参数列表)&#123;</span><br><span class="line">函数体</span><br><span class="line"><span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line">调用：</span><br><span class="line">函数名称(参数列表)</span><br><span class="line"><span class="keyword">return</span>表示函数执行后，所返回的结果。</span><br><span class="line">注意：</span><br><span class="line">     ①如果没有<span class="keyword">return</span>或者<span class="keyword">return</span>后没有返回值，结果都是<span class="literal">undefined</span>。</span><br><span class="line">     ②<span class="keyword">return</span>后可以返回任意类型的数据</span><br><span class="line">     ③<span class="keyword">return</span>后的所有代码都不会被执行</span><br><span class="line">对比<span class="keyword">return</span>、<span class="keyword">break</span>和<span class="keyword">continue</span></span><br><span class="line"><span class="keyword">return</span> 返回结果，用于终止函数的执行，常用于函数中。</span><br><span class="line"><span class="keyword">break</span>用于结束循环，结束<span class="keyword">switch</span>语句；</span><br><span class="line"><span class="keyword">continue</span> 跳过当前循环，继续下一次循环。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><h5 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">变量或者函数的可访问范围</span><br><span class="line">分为两种：</span><br><span class="line">    全局作用域：在全局作用域下声明的变量可以在任意位置访问到。</span><br><span class="line">    函数（局部）作用域：函数作用域下声明的变量只能在函数内部访问。</span><br><span class="line">    块级作用域：<span class="title class_">ES6</span>新增了<span class="keyword">let</span>命令，用于声明变量。其用法类似于<span class="keyword">var</span>，但所声明的变量只在<span class="keyword">let</span>命令所在的代码块有效。</span><br><span class="line">注意：在函数内部使用<span class="keyword">var</span>关键字声明的变量是局部变量，而不使用<span class="keyword">var</span>关键字声明的变量是全局变量。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="量声明提升"><a href="#量声明提升" class="headerlink" title="量声明提升"></a>量声明提升</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JS程序在执行前，使用var关键字声明的变量会提升到所在作用域的最前边；但赋值还是在原来的位置。</span><br><span class="line">console.log(a);</span><br><span class="line">var a=1; //var a;这句话会提升到最前面；而a=1还是在当前位置。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="函数的作用域"><a href="#函数的作用域" class="headerlink" title="函数的作用域"></a>函数的作用域</h4><p>​    <strong>函数会提前声明！</strong><br>​            <strong>函数表达式不会提前声明！</strong><br>​            函数和变量类似，也分为全局作用域和函数作用域<br>​            全局作用域：在全局作用域下创建的函数可以在任意位置调用<br>​            函数（局部）作用域：在函数（局部）作用域下创建的函数只能在函数内部调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">函数声明提升：</span><br><span class="line">和变量一样，<span class="variable constant_">JS</span>在程序执行前，把使用<span class="keyword">function</span>声明的函数提升到最前边。</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">函数调用 <span class="title function_">fun</span>() 获取函数的返回值（<span class="keyword">return</span>后的值）</span><br><span class="line">函数名称 fun保存的是函数在堆内存中的地址</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h4><p>​    递归就是函数自己调用自己本身，依靠条件判断return结束。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">例题：求n个数的累加：</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">n</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n+<span class="title function_">sum</span>(n-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">100</span>)</span><br><span class="line">例题：斐波那契数列：</span><br><span class="line"><span class="comment">//创建函数， 传递1个参数，使用递归计算斐波那契数列的第n项是多少。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(num==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> num+num+<span class="title function_">add</span>(num-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res=<span class="title function_">add</span>(<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>变量名称和函数名称重复后 如果变量赋值 函数报错，如果变量未赋值函数不会报错</p><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><p>​    没有名字的函数 function(){<br>​                }<br>​    创建函数—函数声明</p><p>​    function 函数名称(){<br>​        }</p><h5 id="创建函数—函数表达式"><a href="#创建函数—函数表达式" class="headerlink" title="创建函数—函数表达式"></a>创建函数—函数表达式</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名称=<span class="keyword">function</span>(<span class="params">形参列表</span>)&#123;</span><br><span class="line">    函数体</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br><span class="line">调用：函数名称(实参列表)</span><br><span class="line">对比函数声明和函数表达式的区别</span><br><span class="line">函数声明存在函数提升，在任何的位置都可以调用</span><br><span class="line">函数表达式不存在函数的提升，必须先创建再调用</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="匿名函数自调用"><a href="#匿名函数自调用" class="headerlink" title="匿名函数自调用"></a>匿名函数自调用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建函数（局部）作用域，防止造成全局污染。</span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    函数体<span class="comment">//就是局部作用域，创建的变量和函数都是不能被外部访问</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="作为回调函数"><a href="#作为回调函数" class="headerlink" title="作为回调函数"></a>作为回调函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">把匿名函数作为实参传递给形参，此时的形参就是函数名称</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="comment">//num就是函数的名称</span></span><br><span class="line">    <span class="title function_">num</span>();<span class="comment">//调用传递的匿名函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="系统函数（全局函数）"><a href="#系统函数（全局函数）" class="headerlink" title="系统函数（全局函数）"></a>系统函数（全局函数）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">encodeURI 对一个URL进行编码—主要对中文进行编码</span><br><span class="line">decodeURI 对一个已经编码URL进行解码</span><br><span class="line">parseInt将数据转为整型</span><br><span class="line">parseFloat将数据转为浮点型</span><br><span class="line">isNaN检测一个数据是否为NaN是-&gt;true,否-&gt;false</span><br><span class="line">isFinite检测一个数据是否为有限值，是-&gt;true 否-&gt;false  1/0-&gt;Infinity 无限值</span><br><span class="line">eval执行字符串中的表达式eval(&#x27;1+2&#x27;)  -&gt;3</span><br><span class="line">练习：使用提示框弹出输入一组运算，使用eval来执行这组运算。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>​    <strong>是一种引用类型的数据，存储在堆内存中。</strong><br>​    对象：是一组属性（property）和方法/功能（method）的集合<br>​    哪些是对象？<br>​        一个手机：属性有颜色，品牌，尺寸，厚度…….功能有打电话、发短信、照相、聊天、游戏……<br>​        一辆汽车：属性有品牌、外观、车型…….功能有代步、撞人、拉货、取暖、乘凉…..</p><p>JS中的对象：</p><p>​        <strong>内置对象</strong>：JS提供的<br>​        <strong>宿主对象</strong>：根据不同的执行环境来划分<br>​        <strong>自定义对象</strong>：自己创建的对象</p><p>创建自定义对象：</p><p>​        ①对象字面量（直接量）<br>​        ②内置构造函数<br>​        ③自定义构造函数</p><h4 id="使用对象字面量创建对象"><a href="#使用对象字面量创建对象" class="headerlink" title="使用对象字面量创建对象"></a>使用对象字面量创建对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">使用大括号&#123;&#125;创建空对象</span><br><span class="line">属性名和属性值之间用冒号隔开:</span><br><span class="line">多组属性之间用，号隔开</span><br><span class="line">属性名中引号可加可不加，如果出现特殊字符，必须添加引号</span><br><span class="line"><span class="keyword">var</span> phone=&#123;</span><br><span class="line">    <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;made-in&#x27;</span>:<span class="string">&#x27;china&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="使用内置构造函数来创造对象"><a href="#使用内置构造函数来创造对象" class="headerlink" title="使用内置构造函数来创造对象"></a>使用内置构造函数来创造对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book=<span class="keyword">new</span> <span class="title class_">Object</span>();创建一个空对象</span><br><span class="line">book.<span class="property">id</span>=<span class="number">103</span>;<span class="comment">//给book添加属性，属性名不能添加引号</span></span><br><span class="line">book[<span class="string">&#x27;title&#x27;</span>]=<span class="string">&#x27;三国演义&#x27;</span>;<span class="comment">//添加属性，属性名必须加引号；如果不加引号会被认为是变量</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="访问对象中的属性"><a href="#访问对象中的属性" class="headerlink" title="访问对象中的属性"></a>访问对象中的属性</h4><h5 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">emp.<span class="property">eid</span></span><br><span class="line">emp[<span class="string">&#x27;ename&#x27;</span>]</span><br><span class="line">如果要获取的属性名不存在，返回的是<span class="literal">undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="遍历对象中的属性-for-in"><a href="#遍历对象中的属性-for-in" class="headerlink" title="遍历对象中的属性(for-in)"></a>遍历对象中的属性(for-in)</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">获取到对象中每一个属性名，进而获取属性值</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span>)&#123;</span><br><span class="line">    <span class="comment">//emp要遍历的对象</span></span><br><span class="line">    <span class="comment">//key 要遍历的每一个属性名</span></span><br><span class="line">    <span class="comment">//emp[key]通过属性名获取对应的属性值</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(emp[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="检测对象中是否含有某个属性"><a href="#检测对象中是否含有某个属性" class="headerlink" title="检测对象中是否含有某个属性"></a>检测对象中是否含有某个属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;属性名&#x27;</span> <span class="keyword">in</span> 对象<span class="comment">//true-&gt;存在 false-&gt;不存在</span></span><br><span class="line">对象.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;属性名&#x27;</span>)   <span class="comment">//true-&gt;存在 false-&gt;不存在</span></span><br><span class="line">对象.属性名===<span class="literal">undefined</span><span class="comment">//true-&gt;不存在  false-&gt;存在</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="对象中的方法"><a href="#对象中的方法" class="headerlink" title="对象中的方法"></a>对象中的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span><br><span class="line">    <span class="attr">say</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> <span class="comment">//指代当前的对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">say</span>();<span class="comment">//调用对象中的方法</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h4 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h4><h5 id="数组字面量"><a href="#数组字面量" class="headerlink" title="数组字面量"></a>数组字面量</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[元素<span class="number">1</span>，元素<span class="number">2.</span>....]</span><br><span class="line">数组中可以存放任意类型的数据</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="内置构造函数"><a href="#内置构造函数" class="headerlink" title="内置构造函数"></a>内置构造函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>)   <span class="comment">//初始化一个数组长度为5，可以继续添加第6个元素</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(元素<span class="number">1</span>，元素<span class="number">2.</span>.............)</span><br><span class="line">访问数组中的元素 </span><br><span class="line">数组名称[下标]，下标是从<span class="number">0</span>开始</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取数组元素的个数"><a href="#获取数组元素的个数" class="headerlink" title="获取数组元素的个数"></a>获取数组元素的个数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组名称.<span class="property">length</span>  <span class="comment">//获取个数</span></span><br><span class="line">使用数组长度添加一个新的元素</span><br><span class="line">数组[数组.<span class="property">length</span>]=值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数组的分类"><a href="#数组的分类" class="headerlink" title="数组的分类"></a>数组的分类</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数组分为索引数组和关联数组</span><br><span class="line">索引数组：以整数作为下标</span><br><span class="line">关联数组：以字符串作为下标              </span><br><span class="line"><span class="keyword">var</span> arr=[]</span><br><span class="line">arr[<span class="string">&#x27;eid&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">arr[<span class="string">&#x27;ename&#x27;</span>]=<span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="遍历数组中的元素"><a href="#遍历数组中的元素" class="headerlink" title="遍历数组中的元素"></a>遍历数组中的元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>循环，循环遍历数组元素的下标</span><br><span class="line"><span class="keyword">var</span> score=[<span class="number">85</span>,<span class="number">79</span>,<span class="number">93</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;score.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    i代表数组元素的下标</span><br><span class="line">    scorep[i]下标对应的元素</span><br><span class="line">&#125;</span><br><span class="line">注意：只能遍历索引数组</span><br><span class="line"><span class="keyword">for</span>-<span class="keyword">in</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> arr)&#123;</span><br><span class="line">        key 数组的下标</span><br><span class="line">        arr[key] 下标对应的元素</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(key+<span class="string">&#x27;---&#x27;</span>arr[key]);</span><br><span class="line">    &#125;</span><br><span class="line">注意：既可以遍历索引数组，也可以遍历关联数组。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="数组中的方法"><a href="#数组中的方法" class="headerlink" title="数组中的方法"></a>数组中的方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">API</span>-应用程序编程接口，预先定义好的函数/方法</span><br><span class="line"><span class="attr">say</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;  &#125;</span><br><span class="line"><span class="title function_">toString</span>() 将数组中的元素按逗号分隔成字符串</span><br><span class="line"><span class="title function_">join</span>(<span class="string">&#x27;|&#x27;</span>) 将数组中的元素按照指定的字符分割成字符串</span><br><span class="line"><span class="title function_">concat</span>(arr1,arr2,arr3....)  要拼接两个或者更多的数组</span><br><span class="line"><span class="title function_">slice</span>(start,end) 截取数组中的元素，start开始的下标，end结尾的下标，不包含end本身;负数表示倒数第几个。</span><br><span class="line"><span class="title function_">splice</span>(start，count，value1，value2.....) 删除数组中的元素;</span><br><span class="line">start开始的下标，count删除的个数，value1，value2....删除后补充的元素。</span><br><span class="line"><span class="title function_">reverse</span>() 翻转数组中的元素</span><br><span class="line"><span class="title function_">sort</span>() 对数组中的元素进行排序，默认是按照<span class="title class_">Unicode</span>码有效达到</span><br><span class="line">对数字排序：</span><br><span class="line"><span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a-b;  <span class="comment">//由小到大</span></span><br><span class="line"><span class="keyword">return</span> b-a;  <span class="comment">//由大到小</span></span><br><span class="line">&#125;);</span><br><span class="line">常用的数组操作：</span><br><span class="line"><span class="title function_">push</span>() 往数组的末尾添加元素。返回数组的长度</span><br><span class="line"><span class="title function_">pop</span>()  删除数组末尾的元素 返回删除的元素</span><br><span class="line"><span class="title function_">unshift</span>() 往数组的开头添加元素，返回数组的长度</span><br><span class="line"><span class="title function_">shift</span>()    删除数字开头的元素，返回删除的元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">数组中的每一个元素也是数组</span><br><span class="line"><span class="keyword">var</span> arr=[ [ ],[ ],[ ]..... ]</span><br><span class="line">访问二维数组中的元素 arr[下标][下标]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>包装对象：目的是让原始类型的数据也可以像引用类型一样，具有属性和方法</p><ol><li>JS提供了3种包装类型：String、Number、Boolean</li><li>将任意的数据包装成字符串对象<br>new String(true)  返回object类型<pre><code>        String(true) 返回字符串  &#39;true&#39;</code></pre></li></ol><h4 id="转义字符—-反斜杠"><a href="#转义字符—-反斜杠" class="headerlink" title="转义字符— \ 反斜杠"></a>转义字符— \ 反斜杠</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">转换字符的意义：</span><br><span class="line">    \n将字符n转义成换行</span><br><span class="line">    \t将字符t转义成制表符（table键）</span><br><span class="line">    \<span class="string">&#x27;将引号转成普通的字符</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h4 id="字符串中常用方法"><a href="#字符串中常用方法" class="headerlink" title="字符串中常用方法"></a>字符串中常用方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">toUpperCase</span>() 将英文字母转为大写</span><br><span class="line"><span class="title function_">toLowerCase</span>() 将英文字母转为小写</span><br><span class="line">length获取字符串的长度</span><br><span class="line"><span class="title function_">charAt</span>()获取下标对应的字符</span><br><span class="line">charCodeAt获取某个字符对应的<span class="title class_">Unicode</span>码</span><br><span class="line"><span class="title function_">indexOf</span>(value,start) 查找某个字符串的下标,value是要查找的字符串，start开始查找的下标，默认是<span class="number">0</span>，如果找不到返回-<span class="number">1</span></span><br><span class="line">lastIndexOf（value）查找某个字符串，最后一次出现的下标，找不到返回-<span class="number">1</span></span><br><span class="line"><span class="title function_">slice</span>(start,end) 截取字符串，start开始的下标，end结束的下标，不包含end本身；如果end为空，截取到最后</span><br><span class="line"><span class="title function_">substring</span>(start,end)  截取字符串，start开始的下标，end结尾的下标不包含end本身；如果两个参数是负数，自动转成了<span class="number">0</span></span><br><span class="line"><span class="title function_">substr</span>(start,count)截取字符串，start开始的下标，count截取的长度；如果count为空截取到最后。</span><br><span class="line"><span class="title function_">split</span>(sep分隔符)按照指定的字符分隔为数组。sep—是分隔符</span><br><span class="line"><span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(index)  获取任意<span class="title class_">Unicode</span>码对应的字符</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">作用：用于查找、替换字符串。</span><br><span class="line"><span class="title function_">replace</span>(value1,value2) 查找并替换。value1要查找的字符串，value2要替换的字符串，value可以使用字符串形式，也可以使用正则表达式形式/china/ig</span><br><span class="line">i -&gt; ignore 忽略大小写</span><br><span class="line">g-&gt; <span class="variable language_">global</span>  全局查找</span><br><span class="line">match（value）用于查找匹配的字符串，返回一个数组   可以使用ig</span><br><span class="line">search （value）用于查找满足条件的第一个字符的下标，如果找不到返回-<span class="number">1</span>  只能使用i</span><br><span class="line">内置对象，宿主对象，自定义对象</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>对象不需要使用<span class="keyword">new</span>创建，可以直接使用。</span><br><span class="line"><span class="variable constant_">PI</span> 获取圆周率</span><br><span class="line"><span class="title function_">abs</span>() 取绝对值</span><br><span class="line"><span class="title function_">floor</span>()向下取整</span><br><span class="line"><span class="title function_">ceil</span>() 向上取整</span><br><span class="line"><span class="title function_">round</span>()四舍五入取整</span><br><span class="line"><span class="title function_">max</span>() 取一组数字最大值</span><br><span class="line"><span class="title function_">min</span>() 取一组数字的最小值</span><br><span class="line"><span class="title function_">pow</span>(x,y) 取x的y次幂</span><br><span class="line"><span class="title function_">random</span>() 取随机  范围&gt;=<span class="number">0</span>  &lt;<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h2><p>​    用于对日期和时间进行存储和计算</p><h4 id="创建Date对象"><a href="#创建Date对象" class="headerlink" title="创建Date对象"></a>创建Date对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>（<span class="string">&#x27;2018/11/11 10:20:30&#x27;</span>）</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>（<span class="number">2018</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>） <span class="comment">//第二个参数月份的范围是0~11</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>（）存储当前的系统时间</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>（<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>） 存储的是距离计算机元年的毫秒数对应的日期时间</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="获取Date对象的信息"><a href="#获取Date对象的信息" class="headerlink" title="获取Date对象的信息"></a>获取Date对象的信息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getFullYear/   获取年</span><br><span class="line">getMonth/     获取月</span><br><span class="line">getDate/       获取日</span><br><span class="line">getHours/      获取小时</span><br><span class="line">getMinutes/    获取分钟</span><br><span class="line">getSeconds/    获取秒</span><br><span class="line">getMilliseconds/  获取毫秒</span><br><span class="line"><span class="title function_">getDay</span>(星期<span class="number">0</span>~<span class="number">6</span>)/  获取星期几 从<span class="number">0</span>到<span class="number">6</span></span><br><span class="line"><span class="title function_">getTime</span>(距离计算机元年的毫秒数)   例：<span class="number">1542339376789</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="转为本地字符串"><a href="#转为本地字符串" class="headerlink" title="转为本地字符串"></a>转为本地字符串</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">toLocaleString</span>()<span class="comment">// 年-月-日   时：分：秒</span></span><br><span class="line"><span class="title function_">tolocaleDateString</span>()<span class="comment">//年-月-日</span></span><br><span class="line"><span class="title function_">tolocaleTimeString</span>()<span class="comment">//时：分：秒</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="设置Date对象的信息"><a href="#设置Date对象的信息" class="headerlink" title="设置Date对象的信息"></a>设置Date对象的信息</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setFullYear/setMonth/setDate/setHours/setMinutes/setSeconds/setMilliseconds/</span><br><span class="line">    setTime 距离计算机元年毫秒数，一旦使用后，年月日时分秒都会受到影响</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>例题：计算当前距离2018年圣诞节还有多少天多少小时多少分多少秒 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//原理：计算两个Date对象的时间差—相差的毫秒</span></span><br><span class="line"><span class="keyword">var</span> d1=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"><span class="keyword">var</span> d2=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018/12/25&#x27;</span>)</span><br><span class="line"><span class="comment">//两个对象相减，返回的是两个对象相差的毫秒数。</span></span><br><span class="line"><span class="keyword">var</span> d3=d2-d1;</span><br><span class="line"><span class="comment">//把相差的时间转成秒</span></span><br><span class="line">d3=<span class="title class_">Math</span>.<span class="title function_">floor</span>(d3/<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//获取相差的天数</span></span><br><span class="line"><span class="keyword">var</span> day=<span class="title class_">Math</span>.<span class="title function_">floor</span>(d3/(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>));</span><br><span class="line"><span class="comment">//获取天数后相差的小时</span></span><br><span class="line"><span class="comment">//相差的描述和一天的描述取余，得到的结果是不满一天的秒数，把秒数转成小时</span></span><br><span class="line"><span class="keyword">var</span> hours=d3%(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">hours=<span class="title class_">Math</span>.<span class="title function_">floor</span>(hours/(<span class="number">60</span>*<span class="number">60</span>));</span><br><span class="line"><span class="comment">//获取相差的分钟</span></span><br><span class="line"><span class="comment">//相差的秒数和1小时的秒数取余，得到的结果是不满一小时，把秒数转成分钟</span></span><br><span class="line"><span class="keyword">var</span> minutes=d3%(<span class="number">1</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">minutes=<span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes/(<span class="number">60</span>));</span><br><span class="line"><span class="comment">//相差的秒钟 和60取余</span></span><br><span class="line"><span class="keyword">var</span> seconds=d3%<span class="number">60</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;距离2018年圣诞节还有&#x27;</span>+</span><br><span class="line">day+<span class="string">&#x27;天&#x27;</span>+</span><br><span class="line">hours+<span class="string">&#x27;小时&#x27;</span>+</span><br><span class="line">minutes+<span class="string">&#x27;分钟&#x27;</span>+</span><br><span class="line">seconds+<span class="string">&#x27;秒&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>例题：创建对象保存一个员工的入职时间’2018-11-16’，3年后到期要求到期时间，合同到期前一个月续签合同，假如续签时间是周末，提前到周五。提前一周来通知人事准备续签（提醒时间）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> workTime=<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2018/11/16&#x27;</span>);</span><br><span class="line"><span class="comment">//复制入职时间的对象作为到期时间</span></span><br><span class="line"><span class="comment">//到期时间，年份在当前的基础之上加3</span></span><br><span class="line"><span class="keyword">var</span> target=<span class="keyword">new</span> <span class="title class_">Date</span>(workTime);</span><br><span class="line">target.<span class="title function_">setFullYear</span>(target.<span class="title function_">getFullYear</span>()+<span class="number">3</span>);</span><br><span class="line"><span class="comment">//复制一个到期时间</span></span><br><span class="line"><span class="keyword">var</span> reworkTime=<span class="keyword">new</span> <span class="title class_">Date</span>(target);</span><br><span class="line"><span class="comment">//提前一个月：在当前月份基础上减1</span></span><br><span class="line">reworkTime.<span class="title function_">setMonth</span>(reworkTime.<span class="title function_">getMonth</span>()-<span class="number">1</span>);</span><br><span class="line"><span class="comment">//判断是否为周末 6  0，周六提前一天-1，周日提前-2</span></span><br><span class="line"><span class="keyword">var</span> day=reworkTime.<span class="title function_">getDay</span>();</span><br><span class="line">    <span class="keyword">if</span> (day==<span class="number">6</span>)&#123;</span><br><span class="line">        <span class="comment">//设置日期为当前的日期-1</span></span><br><span class="line">        reworkTime.<span class="title function_">setDate</span>(reworkTime.<span class="title function_">getDate</span>()-<span class="number">1</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(day==<span class="number">0</span>)&#123;</span><br><span class="line">        reworkTime.<span class="title function_">setDate</span>(reworkTime.<span class="title function_">getDate</span>()-<span class="number">2</span>)</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//提醒时间：复制续签时间</span></span><br><span class="line"><span class="keyword">var</span> remind=<span class="keyword">new</span> <span class="title class_">Date</span>(reworkTime);</span><br><span class="line"><span class="comment">//设置当前日期在原来基础减7</span></span><br><span class="line">remind.<span class="title function_">setDate</span>(remind.<span class="title function_">getDate</span>()-<span class="number">7</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;入职时间：&#x27;</span>+</span><br><span class="line">                    workTime.<span class="title function_">toLocaleDateString</span>()</span><br><span class="line">                );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;到期时间：&#x27;</span>+</span><br><span class="line">                    target.<span class="title function_">toLocaleDateString</span>()</span><br><span class="line">                );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;续签时间：&#x27;</span>+</span><br><span class="line">                    reworkTime.<span class="title function_">toLocaleDateString</span>()</span><br><span class="line">                );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;提醒时间：&#x27;</span>+</span><br><span class="line">                    remind.<span class="title function_">toLocaleDateString</span>()</span><br><span class="line">                );</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Number对象"><a href="#Number对象" class="headerlink" title="Number对象"></a>Number对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Number</span>(值)  创建对象</span><br><span class="line">将一个数据转为<span class="title class_">Number</span>对象，本质还是数字。</span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MAX_VALUE</span>  获取计算机能存储的最大值</span><br><span class="line"><span class="title class_">Number</span>.<span class="property">MIN_VALUE</span>  获取计算机能存储的最小值</span><br><span class="line"><span class="title function_">toFixed</span>(n) 保留小数点后 n位</span><br><span class="line"><span class="title function_">toString</span>() 将数字转为字符串类型</span><br><span class="line">数字+<span class="string">&#x27;&#x27;</span>  <span class="comment">//隐式转为字符串类型</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Boolean对象"><a href="#Boolean对象" class="headerlink" title="Boolean对象"></a>Boolean对象</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Boolean</span>(值)  创建布尔对象，本质上将数据转为布尔型</span><br><span class="line"><span class="title class_">Boolean</span>(值) 转为布尔型</span><br><span class="line">!!值 隐式将数据转为布尔型</span><br><span class="line"><span class="title function_">toString</span>() 将布尔型数据转为字符串</span><br><span class="line"><span class="literal">null</span>的作用：用于释放（销毁）一个引用类型的数据。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">SyntaxError</span> 语法错误，错误的使用了中文，缺少括号....程序不会执行</span><br><span class="line"><span class="title class_">ReferenceError</span>  引用错误，使用未声明的变量</span><br><span class="line"><span class="title class_">TypeError</span> 类型错误，错误的使用了数据类型，错误的使用了括号</span><br><span class="line"><span class="title class_">RangeError</span> 范围错误，参数的使用超出了范围</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Array</span>(-<span class="number">1</span>)</span><br><span class="line">引用错误、类型错误、范围错误出现后，会影响后续代码的执行。</span><br><span class="line">异常处理：</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    尝试执行的代码，可能出现错误</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line">    err：捕获的错误信息</span><br><span class="line">    处理错误的方案</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><a href="http://tool.oschina.net/uploads/apidocs/jquery/regexp.html">查阅手册</a></p><p><a href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference">Microsoft手册</a></p><p><a href="https://www.jb51.net/tools/zhengze.html">快速入门正则</a></p><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。</p><p>例如：</p><ul><li><strong>runoo+b</strong>，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）。</li><li><strong>runoo*b</strong>，可以匹配 runob、runoob、runoooooob 等，* 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。</li><li><strong>colou?r</strong> 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）。</li></ul><p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p><p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p><p><strong>普通字符</strong></p><p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p><h3 id="非打印字符"><a href="#非打印字符" class="headerlink" title="非打印字符"></a>非打印字符</h3><p>非打印字符也可以是正则表达式的组成部分。</p><p><strong>非打印字符的转义序列：</strong></p><table><thead><tr><th align="center">字符</th><th><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">\cx</td><td>匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 ‘c’ 字符。</td></tr><tr><td align="center">\f</td><td>匹配一个换页符。等价于 \x0c 和 \cL。</td></tr><tr><td align="center">\n</td><td>匹配一个换行符。等价于 \x0a 和 \cJ。</td></tr><tr><td align="center">\r</td><td>匹配一个回车符。等价于 \x0d 和 \cM。</td></tr><tr><td align="center">\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。注意 Unicode 正则表达式会匹配全角空格符。</td></tr><tr><td align="center">\S</td><td>匹配任何非空白字符。等价于 [ ^  \f\n\r\t\v]。</td></tr><tr><td align="center">\t</td><td>匹配一个制表符。等价于 \x09 和 \cI。</td></tr><tr><td align="center">\v</td><td>匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的 <strong>runoo*b</strong> 中的 *****，简单的说就是表示任何字符串的意思。如果要查找字符串中的 ***** 符号，则需要对 ***** 进行转义，即在其前加一个 *<em>*</em>: <strong>runo*ob</strong> 匹配 runo*ob。</p><p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符”转义”，即，将反斜杠字符*<em>*</em> 放在它们前面。</p><p><strong>正则表达式中的特殊字符：</strong></p><table><thead><tr><th align="center">特别字符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">$</td><td align="left">匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 ‘\n’ 或 ‘\r’。要匹配 $ 字符本身，请使用 $。</td></tr><tr><td align="center">()</td><td align="left">标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。</td></tr><tr><td align="center">*</td><td align="left">匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td></tr><tr><td align="center">+</td><td align="left">匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td></tr><tr><td align="center">.</td><td align="left">匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 . 。</td></tr><tr><td align="center">[</td><td align="left">标记一个中括号表达式的开始。要匹配 [，请使用 [。</td></tr><tr><td align="center">?</td><td align="left">匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。</td></tr><tr><td align="center">\</td><td align="left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\n’ 匹配换行符。序列 ‘\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。</td></tr><tr><td align="center">^</td><td align="left">匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td align="center">{</td><td align="left">标记限定符表达式的开始。要匹配 {，请使用 {。</td></tr><tr><td align="center">|</td><td align="left">指明两项之间的一个选择。要匹配</td></tr></tbody></table><h3 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h3><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 ***** 或 <strong>+</strong> 或 <strong>?</strong> 或 <strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong> 共6种。</p><p><strong>正则表达式的限定符有：</strong></p><table><thead><tr><th align="center">字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。</td></tr><tr><td align="center">+</td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td align="center">?</td><td>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td align="center">{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td align="center">{n,}</td><td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td align="center">{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a>定位符</h3><p>位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p><p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和 <strong>$</strong> 分别指字符串的开始与结束，<strong>\b</strong> 描述单词的前或后边界，<strong>\B</strong> 表示非单词边界。</p><p>正则表达式的定位符有：</p><table><thead><tr><th align="center">字符</th><th>描述</th></tr></thead><tbody><tr><td align="center">^</td><td>匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。</td></tr><tr><td align="center">$</td><td>匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。</td></tr><tr><td align="center">\b</td><td>匹配一个单词边界，即字与空格间的位置。</td></tr><tr><td align="center">\B</td><td>非单词边界匹配。</td></tr></tbody></table><p><code>**注意**：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如 **^\***之类的表达式。</code></p><h3 id="最常用正则表达式"><a href="#最常用正则表达式" class="headerlink" title="最常用正则表达式"></a>最常用正则表达式</h3><p><strong>校验数字的表达式</strong></p><ol><li>数字：^[0-9]*$ </li><li>n位的数字：^\d{n}$</li><li>至少n位的数字：^\d{n,}$ </li><li>m-n位的数字：^\d{m,n}$ </li><li>零和非零开头的数字：^(0|[ 1 - 9 ] [0-9]*)$ *</li><li><em>非零开头的最多带两位小数的数字：^([1 - 9] [0-9]</em>)+(.[0-9]{1,2})?$ </li><li>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$ </li><li>正数、负数、和小数：^(-|+)?\d+(.\d+)?$ </li><li>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</li><li>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</li><li>非零的正整数：^[1-9]\d*$ 或 ^([1-9] [0-9]<em>){1,3}$ 或 ^+?[1-9] [0-9]</em>$*</li><li><em>非零的负整数：^ \ - [ 1 - 9 ] [ ]0-9”</em>$ 或 ^-[1-9]\d*$*</li><li>非负整数：^\d+$ 或 ^[1-9]\d*|0$*</li><li><em>非正整数：^-[1-9]\d</em>|0$ 或 ^((-\d+)|(0+))$</li><li>非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0$</li><li>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*))|0?.0+|0$</li><li>正浮点数：^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]<em>[1-9] [0-9]</em>)|([0-9]<em>[1-9] [0-9]<em>.[0-9]+)|([0-9]</em>[1-9] [0-9]</em>))$</li><li>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9] [0-9]</em>)|([0-9]<em>[1-9] [0-9]<em>.[0-9]+)|([0-9]</em>[1-9] [0-9]</em>)))$</li><li>浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0)$</li></ol><p><strong>校验字符的表达式</strong></p><ol><li>汉字：^[\u4e00-\u9fa5]{0,}$ </li><li>英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$ </li><li>长度为3-20的所有字符：^.{3,20}$ </li><li>由26个英文字母组成的字符串：^[A-Za-z]+$ </li><li>由26个大写英文字母组成的字符串：^[A-Z]+$ </li><li>由26个小写英文字母组成的字符串：^[a-z]+$ </li><li>由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$ </li><li>由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}$ </li><li>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</li><li>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</li><li>可以输入含有^%&amp;’,;=?$&quot;等字符：[  ^ %&amp;’,;=?$\x22]+</li><li>禁止输入含有~的字符：[ ^ ~ \x22]+</li></ol><p><strong>特殊需求表达式</strong></p><ol><li><p>Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$ </p></li><li><p>域名：[a-zA-Z0-9] [-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9] [-a-zA-Z0-9]{0,62})+/.? </p></li><li><p>InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$ </p></li><li><p>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$ </p></li><li><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$  </p></li><li><p>国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7} </p></li><li><p>身份证号(15位、18位数字)：^\d{15}|\d{18}$ </p></li><li><p>短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$ </p></li><li><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p></li><li><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</p></li><li><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</p></li><li><p>日期格式：^\d{4}-\d{1,2}-\d{1,2}</p></li><li><p>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</p></li><li><p>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</p><p><strong>钱的输入格式：</strong></p></li><li><p>1.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9] [0-9]<em>$</em></p></li><li><p>2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9] [0-9]<em>)$</em></p></li><li><p>3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9] [0-9]*)$</p></li><li><p>4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</p></li><li><p>5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$</p></li><li><p>6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$</p></li><li><p>7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})<em>(.[0-9]{1,2})?$</em></p></li><li><p>8 .  1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})<em>)(.[0-9]{1,2})?$</em></p></li><li><p>备注：这就是最终结果了,别忘了”+”可以用”*”替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p></li><li><p>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</p></li><li><p>中文字符的正则表达式：[\u4e00-\u9fa5]</p></li><li><p>双字节字符：[ ^ \x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p></li><li><p>空白行的正则表达式：\n\s<em>\r (可以用来删除空白行)</em></p></li><li><p>HTML标记的正则表达式：&lt;(\S*?)[^&gt;]<em>&gt;.</em>?&lt;/\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p></li><li><p>首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p></li><li><p>腾讯QQ号：[1-9] [0-9]{4,} (腾讯QQ号从10000开始)</p></li><li><p>中国邮政编码：[1-9]\d{5}(?!\d) (中国邮政编码为6位数字) 33 IP地址：\d+.\d+.\d+.\d+ (提取IP地址时有用) 34 IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d)) </p></li></ol><h3 id="20个正则表达式知识点"><a href="#20个正则表达式知识点" class="headerlink" title="20个正则表达式知识点"></a>20个正则表达式知识点</h3><p>正则表达式(regular expression)描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串做替换或者从某个串中取出符合某个条件的子串等。</p><p>列目录时，　dir <em>.txt或ls <em>.txt中的</em>.txt就不是一个正则表达式,因为这里</em>与正则式的*的含义是不同的。</p><p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p><p>正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p><p>正则表达式，一个十分古老而又强大的文本处理工具，仅仅用一段非常简短的表达式语句，便能够快速实现一个非常复杂的业务逻辑。熟练地掌握正则表达式的话，能够使你的开发效率得到极大的提升。</p><p>正则表达式经常被用于字段或任意字符串的校验，如下面这段校验基本日期格式的JavaScript代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^(\\d&#123;1,4&#125;)(-|\\/</span>)(\\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)\\<span class="number">2</span>(\\d&#123;<span class="number">1</span>,<span class="number">2</span>&#125;)$/;</span><br><span class="line"><span class="keyword">var</span> r = fieldValue.<span class="title function_">match</span>(reg);   </span><br><span class="line"><span class="keyword">if</span>(r==<span class="literal">null</span>)<span class="title function_">alert</span>(<span class="string">&#x27;Date format error!&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>下面是在前端开发中经常使用到的20个正则表达式:</strong></p><p><strong>检验密码强度</strong></p><p>密码的强度必须是包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  <strong>检验中文</strong></p><p>字符串仅能是中文。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^[\\u4e00-\\u9fa5]&#123;<span class="number">0</span>,&#125;$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>由数字、26个英文字母或下划线组成的字符串</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^\\w+$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>校验E-Mail 地址</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[\\w!#$%&amp;<span class="string">&#x27;*+/=?^_`&#123;|&#125;~-]+(?:\\.[\\w!#$%&amp;&#x27;</span>*+/=?^_<span class="string">`&#123;|&#125;~-]+)*@(?:[\\w](?:[\\w-]*[\\w])?\\.)+[\\w](?:[\\w-]*[\\w])?</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><strong>检验身份证号码</strong></p><p><strong>15位：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>18位：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">5</span>&#125;[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">3</span>&#125;((<span class="number">0</span>\\d)|(<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>]))(([<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>]\\d)|<span class="number">3</span>[<span class="number">0</span>-<span class="number">1</span>])\\d&#123;<span class="number">3</span>&#125;([<span class="number">0</span>-<span class="number">9</span>]|X)$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>效验日期</strong></p><p>“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^(?:(?!<span class="number">0000</span>)[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">4</span>&#125;-(?:(?:<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>])-(?:<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">9</span>]|<span class="number">2</span>[<span class="number">0</span>-<span class="number">8</span>])|(?:<span class="number">0</span>[<span class="number">13</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>])-(?:<span class="number">29</span>|<span class="number">30</span>)|(?:<span class="number">0</span>[<span class="number">13578</span>]|<span class="number">1</span>[<span class="number">02</span>])-<span class="number">31</span>)|(?:[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;(?:<span class="number">0</span>[<span class="number">48</span>]|[<span class="number">2468</span>][<span class="number">048</span>]|[<span class="number">13579</span>][<span class="number">26</span>])|(?:<span class="number">0</span>[<span class="number">48</span>]|[<span class="number">2468</span>][<span class="number">048</span>]|[<span class="number">13579</span>][<span class="number">26</span>])<span class="number">00</span>)-<span class="number">02</span>-<span class="number">29</span>)$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>效验金额</strong></p><p>金额校验，精确到2位小数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^[<span class="number">0</span>-<span class="number">9</span>]+(.[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">2</span>&#125;)?$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>  <strong>效验手机号</strong></p><p>下面是国内 13、15、18开头的手机号正则表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^(<span class="number">13</span>[<span class="number">0</span>-<span class="number">9</span>]|<span class="number">14</span>[<span class="number">5</span>|<span class="number">7</span>]|<span class="number">15</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>]|<span class="number">18</span>[<span class="number">0</span>|<span class="number">1</span>|<span class="number">2</span>|<span class="number">3</span>|<span class="number">5</span>|<span class="number">6</span>|<span class="number">7</span>|<span class="number">8</span>|<span class="number">9</span>])\\d&#123;<span class="number">8</span>&#125;$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>判断IE版本</strong></p><p>IE目前还没被完全取代，很多页面还是需要做版本兼容，下面是IE版本检查的表达式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^.*<span class="variable constant_">MSIE</span> [<span class="number">5</span>-<span class="number">8</span>](?:\\.[<span class="number">0</span>-<span class="number">9</span>]+)?(?!.*<span class="title class_">Trident</span>\\/[<span class="number">5</span>-<span class="number">9</span>]\\<span class="number">.0</span>).*$</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>效验IP-V4地址</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\<span class="title function_">b</span>(<span class="params">?:(?:<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>][<span class="number">0</span>-<span class="number">9</span>]|[<span class="number">01</span>]?[<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]?)\\.</span>)&#123;<span class="number">3</span>&#125;(?:<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>][<span class="number">0</span>-<span class="number">9</span>]|[<span class="number">01</span>]?[<span class="number">0</span>-<span class="number">9</span>][<span class="number">0</span>-<span class="number">9</span>]?)\\b</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>效验IP-V6地址</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">7</span>,<span class="number">7</span>&#125;[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">7</span>&#125;:|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">6</span>&#125;:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">5</span>&#125;(:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">2</span>&#125;|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">4</span>&#125;(:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">3</span>&#125;(:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">4</span>&#125;|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">2</span>&#125;(:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">5</span>&#125;|[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:((:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">6</span>&#125;)|:((:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">1</span>,<span class="number">7</span>&#125;|:)|<span class="attr">fe80</span>:(:[<span class="number">0</span>-9a-fA-F]&#123;<span class="number">0</span>,<span class="number">4</span>&#125;)&#123;<span class="number">0</span>,<span class="number">4</span>&#125;%[<span class="number">0</span>-9a-zA-Z]&#123;<span class="number">1</span>,&#125;|::(<span class="title function_">ffff</span>(<span class="params">:<span class="number">0</span>&#123;<span class="number">1</span>,<span class="number">4</span>&#125;</span>)&#123;<span class="number">0</span>,<span class="number">1</span>&#125;:)&#123;<span class="number">0</span>,<span class="number">1</span>&#125;((<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|(<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>]|<span class="number">1</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])\\.)&#123;<span class="number">3</span>,<span class="number">3</span>&#125;(<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|(<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>]|<span class="number">1</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])|([<span class="number">0</span>-9a-fA-F]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:)&#123;<span class="number">1</span>,<span class="number">4</span>&#125;:((<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|(<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>]|<span class="number">1</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])\\.)&#123;<span class="number">3</span>,<span class="number">3</span>&#125;(<span class="number">25</span>[<span class="number">0</span>-<span class="number">5</span>]|(<span class="number">2</span>[<span class="number">0</span>-<span class="number">4</span>]|<span class="number">1</span>&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">0</span>,<span class="number">1</span>&#125;[<span class="number">0</span>-<span class="number">9</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>效验URL前缀</strong></p><p>应用开发中很多时候需要区分请求是HTTPS还是HTTP，通过下面的表达式可以取出一个url的前缀然后再逻辑判断。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!s.<span class="title function_">match</span>(<span class="regexp">/^[a-zA-Z]+:\\/</span>\\<span class="comment">//))</span></span><br><span class="line">&#123;</span><br><span class="line"> s = <span class="string">&#x27;http://&#x27;</span> + s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>提取URL链接</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^(f|ht)&#123;<span class="number">1</span>&#125;(tp|tps):\\/\\/([\\w-]+\\.)+[\\w-]+(\\/[\\w- ./?%&amp;=]*)?</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>文件路径及扩展名效验</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^([a-zA-Z]\\:|\\\\)\\\\([^\\\\]+\\\\)*[^\\/:*?<span class="string">&quot;&lt;&gt;|]+\\.txt(l)?$</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><strong>提取Color Hex  Codes</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\#([a-fA-F]|[<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">3</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>提取网页图片</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\\#([a-fA-F]|[<span class="number">0</span>-<span class="number">9</span>])&#123;<span class="number">3</span>,<span class="number">6</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>精炼CSS</strong></p><p>通过下面的表达式，可以搜索相同属性值的CSS，从而达到精炼代码的目的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^\\s*[a-zA-Z\\-]+\\s*[:]&#123;<span class="number">1</span>&#125;\\s[a-zA-<span class="variable constant_">Z0</span>-<span class="number">9</span>\\s.#]+[;]&#123;<span class="number">1</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>抽取注释</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--(.*?)--&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>匹配HTML标签</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/?\\w+((\\s+\\w+(\\s*=\\s*(?:&quot;.*?&quot;|&#x27;.*?&#x27;|[\\^&#x27;&quot;&gt;\\s]+))?)+\\s*|\\s*)/</span>?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="String-的正则API"><a href="#String-的正则API" class="headerlink" title="String 的正则API"></a>String 的正则API</h3><p> <strong>查找关键词: 4种:</strong> </p><ol><li>查找一个固定的关键词出现的位置: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=str.<span class="title function_">indexOf</span>(<span class="string">&quot;关键词&quot;</span>,starti)</span><br><span class="line">从str中starti位置开始，找下一个<span class="string">&quot;关键词&quot;</span>的位置i</span><br><span class="line">如果找到，返回关键词第一个字所在的位置i</span><br><span class="line">如果找不到，返回-<span class="number">1</span></span><br><span class="line"><span class="string">`问题: 不支持正则，只能查找一个固定的关键词`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>模糊查找一个关键词的位置: </li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=str.<span class="title function_">search</span>(<span class="regexp">/正则/</span>)</span><br><span class="line">在str中从<span class="number">0</span>位置开始找下一个符合<span class="string">&quot;正则&quot;</span>要求的敏感词的位置i</span><br><span class="line">如果找到，返回关键词第一个字的位置</span><br><span class="line">如果没找到，返回-<span class="number">1</span></span><br><span class="line"><span class="string">`问题: 正则表达式默认区分大小写`</span></span><br><span class="line">解决: 在第二个/后加后缀i,表示ignore忽略大小写</span><br><span class="line">更高要求: 既返回关键词内容，又返回关键词位置</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>模糊查找关键词，并返回关键词内容: 2种: </li></ol><ul><li>只返回一个关键词的内容: </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var arr=str.match(/正则/i)</span><br><span class="line">在str中查找符合/正则/要求的关键词，并同时返回关键词的内容和位置</span><br><span class="line">返回值: arr[ &quot;0&quot;: 关键词, &quot;index&quot;: i ]</span><br><span class="line">数组本质: 所有数组底层其实都是关联数组</span><br><span class="line">获取关键词内容: arr[0]   arr.0</span><br><span class="line">获取关键词位置: arr[&quot;index&quot;] &lt;==&gt; arr.index</span><br><span class="line">如果找不到，返回null</span><br><span class="line">正则表达式第2个问题: 只找一个就结束了！</span><br><span class="line">解决: 在第2个/后加g，global 全部</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>查找所有关键词的内容(不关心位置):</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=str.<span class="title function_">match</span>(<span class="regexp">/正则/g</span>)</span><br><span class="line">查找str中所有符合/正则/要求的关键词保存到arr中</span><br><span class="line">返回值: 所有关键词组成的数组</span><br><span class="line"><span class="string">`找不到: 返回null`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>既查找每个关键词的内容，又查找每个关键词的位置：</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">match</span>()不能实现: </span><br><span class="line"><span class="title function_">match</span>()不加g时，只能找<span class="number">1</span>个关键词</span><br><span class="line"><span class="title function_">match</span>()加g后，不能获得位置</span><br><span class="line">解决: <span class="title class_">RegExp</span>对象的<span class="title function_">exec</span>()方法</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> <strong>替换关键词: 2种:</strong> </p><ol><li>简单替换: 所有关键词都替换为统一的新值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str=str.<span class="title function_">replace</span>(<span class="regexp">/正则/ig</span>,<span class="string">&quot;新值&quot;</span>)</span><br><span class="line">回顾: 所有字符串<span class="variable constant_">API</span>都无权修改原字符串，只能返回新字符串！所以必须用变量才能借助修改后的新值。</span><br><span class="line">将str中所有符合/正则/要求的关键词都替换为统一的<span class="string">&quot;新值&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>高级替换: 根据找到的每个关键词的不同，动态返回对应的新值替换。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str=str.<span class="title function_">replace</span>(</span><br><span class="line"><span class="regexp">/正则/ig</span>,  <span class="keyword">function</span>(<span class="params">kword</span>)&#123; <span class="keyword">return</span> 新值; &#125;</span><br><span class="line">)</span><br><span class="line">原理: </span><br><span class="line"><span class="number">1.</span> replace查找str中符合条件的每个关键词</span><br><span class="line"><span class="number">2.</span> 每找到一个关键词，就自动调用回调函数</span><br><span class="line"><span class="number">3.</span> 每次调用函数都自动传入本次找到的关键词</span><br><span class="line"><span class="number">4.</span> 回调函数根据本次传入的关键词，加工后生成新替换值返回</span><br><span class="line"><span class="number">5.</span> replace将本地回调函数返回的值，替换到正在遍历的位置。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 切割字符串:</p><ol><li>简单切割: 切割符是固定的</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">比如: zhangdong@tedu.<span class="property">cn</span></span><br><span class="line">      no zuo no die</span><br><span class="line"><span class="keyword">var</span> arr=str.<span class="title function_">split</span>(“固定的切割符”)</span><br><span class="line"> 返回多段子字符串组成的数组</span><br><span class="line">固定套路: 打散一个字符串为字符数组</span><br><span class="line"><span class="keyword">var</span> chars=str.<span class="title function_">split</span>(“”)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>复杂切割: 切割符不是固定的</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=str.<span class="title function_">split</span>(<span class="regexp">/正则/</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://wangdoc.com/&quot;&gt;参考文献&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;学习一门编程语言的基本步骤&quot;&gt;&lt;a href=&quot;#学习一门编程语言的基本步骤&quot; class=&quot;headerlink&quot; title=&quot;学习一门编程语言的基本步骤&quot;&gt;&lt;/a&gt;学习一门编程语言的基本步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;了解背景知识：历史、现状、特点、应用场景&lt;/li&gt;
&lt;li&gt;搭建开发环境，编写hello World&lt;/li&gt;
&lt;li&gt;变量和常量&lt;/li&gt;
&lt;li&gt;数据类型&lt;/li&gt;
&lt;li&gt;运算符&lt;/li&gt;
&lt;li&gt;逻辑结构&lt;/li&gt;
&lt;li&gt;通用小程序&lt;/li&gt;
&lt;li&gt;函数和对象&lt;/li&gt;
&lt;li&gt;第三方库、框架&lt;/li&gt;
&lt;li&gt;实用的项目</summary>
    
    
    
    <category term="前端开发" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="JavaScript" scheme="http://example.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
